
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -X -b -q -L rom.lst -o rom.bin basic.asm
; Fri Aug 30 22:10:39 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				cpu = "65816"
="em65816"				hardware = "em65816"
=1					exitonend = 1
=0					autorun = 0
=1					loadtest = 1
=1					hasfloat = 1
=1					hasinteger = 1
=253					maxstring = 253

;******  Processing file: modules/basic/pointer/em65816/src_em65816.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/handlers.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stackmarkers.inc

=5					SourcePosSize   =   5 							; Source position stack space needed.
=0					SMark_Gosub 	= 	0 							; 0 is GOSUB/RETURN.
=1					SMark_Repeat 	= 	1 							; 1 is REPEAT/UNTIL.
=2					SMark_While 	= 	2 							; 2 is WHILE/WEND.
=3					SMark_If 		= 	3 							; 3 is IF/ENDIF
=4					SMark_For 		= 	4 							; 4 is FOR/NEXT

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/common.inc


;******  Return to file: _include.asm


;******  Processing file: modules/hardware/common/macros32.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/data/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zCodePtr:	.dword ? 						; code pointer.
>001a					zLTemp1:	.dword ?						; long word (used in multiply)
>001e					zGenPtr:	.word ? 						; general pointer.
>0020					zTempStr:	.word ?							; temporary string allocator. When high zero, not initialised.
>0022					zVarDataPtr: .word ? 						; position of variable data.
>0024					zVarType: 	.byte ? 						; type of data (token)
>0025					zNullString:.byte ? 						; represents a NULL string.
>0026					zBasicSP:	.word ? 						; stack pointer
>0080					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0084					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0085					XS_Type 	.byte ? 						; bit 7 sign (float only)
=6					XS_Size = 6
=134					XS2_Mantissa = XS_Mantissa+XS_Size
=138					XS2_Exponent = XS_Exponent+XS_Size
=139					XS2_Type = XS_Type+XS_Size
=140					XS3_Mantissa = XS_Mantissa+XS_Size*2
=144					XS3_Exponent = XS_Exponent+XS_Size*2
=145					XS3_Type = XS_Type+XS_Size*2
>0300					StringPtr:	.word ? 						; Top of free memory (for string allocation)
>0302					VarMemPtr: 	.word ?							; Bottom of free memory (for variables)
>0304					endOfProgram: .dword ? 						; End of Program Memory (long)
>0308					vecPrintCharacter .word ?
>030a					vecInputCharacter .word ?
>030c					UserVector .fill 4 							; USR(x) calls this.
>0310					LocalVector .fill 4 						; Indirect calls call this.
>0314					NumBufX 	.byte 	?						; buffer index position
>0315					Num_Buffer	.fill 	32 						; buffer for numeric conversions
=6					HashTableCount = 6 							; there are 6 hash tables, in token order.
=8					HashTableSize = 8 							; each hash table as 8 links.
.0335					HashTableBase:
>0335								.fill	HashTableCount * HashTableSize * 2
.0395					HashTableEnd:
=$315					Var_Buffer 	= Num_Buffer 					; buffer for variable name (same space)
>0395					Var_Type    .byte ? 						; type of variable (as a type token)
>0396					Var_Hash 	.byte ? 						; hash of identifier name.
>0397					Var_Length 	.byte ? 						; length of variable name
>0398					Var_HashAddress .byte ?						; low byte of hash table entry.
>0399					Var_DataSize .byte ?						; size of one element.
>039a					NumSuppress	.byte 	?						; leading zero suppression flag
>039b					NumConvCount .byte 	? 						; count for conversions.
>039c					ExpTemp:	.byte ?							; Working temp for exponents.
>039d					ExpCount:	.byte ? 						; Count of decimal exponents.
>039e					SignCount:	.byte ?							; Integer Divide Sign Counts.
>039f					TempStringWriteIndex: .byte ? 				; Write offset.
>03a0					ValSign: 	.byte ? 						; sign flag for val()
>03a1					SliceStart:	.byte ? 						; string slice parts
>03a2					SliceCount:	.byte ?
>03a3					RandomSeed:	.dword ? 						; Random seed.
>03a7					SignNext:	.byte ? 						; Used for keeping sign of STEP in FOR/NEXT
>03a8					BreakCount:	.byte ? 						; Counter, avoid checking break every command.
=3					ArrayMaxDim = 3 							; number of dimensions.
>03a9					ArrayDef:	.fill (ArrayMaxDim+1)*2 		; dimensions for auto-creation
>03b1					UsrArrayDef:.fill (ArrayMaxDim+1)*2 		; dimensions created in DIM
>03b9					UsrArrayIdx:.byte ? 						; index into UsrArrayDef
>03ba					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>03bc					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>03be					Tim_SR:		.byte ? 						; Processor Status
>03bf					Tim_A:		.byte ? 						; Processor Registers
>03c0					Tim_X:		.byte ?
>03c1					Tim_Y:		.byte ?
>03c2					Tim_Z:		.byte ?
>03c3					Tim_SP:		.word ?							; Stack Pointer (just in cases)
>0400					BasicStack:	.fill 	256 					; and occupy whole pages.
.0500					EndBasicStack:
>0500					IFT_XCursor:.byte ?							; current logical position on screen
>0501					IFT_YCursor:.byte ?
>0502					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0566					IFT_LineBuffer: .fill 100 					; line input buffer.

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

=$7f00					HighMemory = $7F00
=$3000					VariableMemory = $3000
.1000					BasicProgram:

;******  Processing file: modules/hardware/../basic/testcode/testcode.src

>1000	0b 0a 00 92 09 84 41 c8			.byte	$0b,$0a,$00,$92,$09,$84,$41,$c8
>1008	4f 68 00 05 14 00 97 00			.byte	$4f,$68,$00,$05,$14,$00,$97,$00
>1010	05 1e 00 cd 00 00			.byte	$05,$1e,$00,$cd,$00,$00

;******  Return to file: modules/hardware/em65816.asm

.c000					StartROM:
.c000	18		clc				clc
.c001	fb		xce				xce
.c002	c2 30		rep #$30			rep 	#$30
.c004	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c007	1b		tcs				tcs
.c008	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.c00b	e2 30		sep #$30			sep 	#$30
.c00d	c2 30		rep #$30			rep 	#$30						; clear AXY in 16 bit.
.c00f	a9 00		lda #$00			lda 	#$0000
.c011	aa		tax				tax
.c012	a8		tay				tay
.c013	e2 30		sep #$30			sep 	#$30
.c015	5c df 87 01	jmp $0187df		jmp BASIC_Start
.c019					TIM_BreakHandler:
.c019	5c 76 83 01	jmp $018376			jmp 	TIM_BreakVector

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.018000					IFT_ClearScreen:
.018000	48		pha				pha
.018001	da		phx				phx
.018002	5a		phy				phy
.018003	20 a9 81	jsr $0181a9			jsr 	IF_Home 					; home cursor
.018006	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.018008					_IFT_CS0:
.018008	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.01800a					_IFT_CS1:
.01800a	a9 20		lda #$20			lda 	#' '						; clear line.
.01800c	20 d5 81	jsr $0181d5			jsr 	IF_Write
.01800f	88		dey				dey
.018010	d0 f8		bne $01800a			bne 	_IFT_CS1
.018012	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; next line down
.018015	ca		dex				dex
.018016	d0 f0		bne $018008			bne 	_IFT_CS0
.018018	7a		ply				ply
.018019	fa		plx				plx
.01801a	68		pla				pla
.01801b					IFT_HomeCursor:
.01801b	48		pha				pha
.01801c	20 a9 81	jsr $0181a9			jsr 	IF_Home
.01801f	a9 00		lda #$00			lda 	#0
.018021	8d 00 05	sta $0500			sta 	IFT_XCursor
.018024	8d 01 05	sta $0501			sta 	IFT_YCursor
.018027	68		pla				pla
.018028	60		rts				rts
.018029					IFT_UpLine:
.018029	48		pha				pha
.01802a	ad 01 05	lda $0501			lda  	IFT_YCursor 				; get Y
.01802d	3a		dec a				dec 	a 							; line above
.01802e	30 03		bmi $018033			bmi 	_IFTULExit 					; too far, abort
.018030	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos					; set to that line.
.018033					_IFTULExit:
.018033	68		pla				pla
.018034	60		rts				rts
.018035					IFT_PrintCharacter:
.018035	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.018037	f0 23		beq $01805c			beq 	IFT_NewLine
.018039	48		pha				pha
.01803a	20 74 80	jsr $018074			jsr 	IFT_UpperCase 				; make upper case
.01803d	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write out.
.018040	ee 00 05	inc $0500			inc 	IFT_XCursor 				; bump x cursor
.018043	ad 00 05	lda $0500			lda 	IFT_XCursor 				; reached RHS ?
.018046	c9 40		cmp #$40			cmp 	#IF_Width
.018048	d0 03		bne $01804d			bne 	_IFT_PCNotEOL
.01804a	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; if so do new line.
.01804d					_IFT_PCNotEOL:
.01804d	68		pla				pla
.01804e	60		rts				rts
.01804f					IFT_Tab:
.01804f	a9 20		lda #$20			lda 	#" " 						; space
.018051	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018054	ad 00 05	lda $0500			lda 	IFT_XCursor 				; until x % 8 == 0
.018057	29 07		and #$07			and 	#7
.018059	d0 f4		bne $01804f			bne 	IFT_Tab
.01805b	60		rts				rts
.01805c					IFT_NewLine:
.01805c	48		pha				pha
.01805d	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; new line on actual screen.
.018060	a9 00		lda #$00			lda 	#0 							; reset x position
.018062	8d 00 05	sta $0500			sta 	IFT_XCursor
.018065	ee 01 05	inc $0501			inc 	IFT_YCursor 				; move down.
.018068	ad 01 05	lda $0501			lda 	IFT_YCursor
.01806b	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.01806d	d0 03		bne $018072			bne 	_IFT_NL_NotEOS
.01806f	20 7f 80	jsr $01807f			jsr 	IFT_Scroll 					; scroll screen up.
.018072					_IFT_NL_NotEOS:
.018072	68		pla				pla
.018073	60		rts				rts
.018074					IFT_UpperCase:
.018074	c9 61		cmp #$61			cmp 	#"a"
.018076	90 06		bcc $01807e			bcc 	_IFT_UCExit
.018078	c9 7b		cmp #$7b			cmp 	#"z"+1
.01807a	b0 02		bcs $01807e			bcs 	_IFT_UCExit
.01807c	49 20		eor #$20			eor 	#$20
.01807e					_IFT_UCExit:
.01807e	60		rts				rts
.01807f					IFT_Scroll:
.01807f	48		pha				pha 								; save AXY
.018080	da		phx				phx
.018081	5a		phy				phy
.018082	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.018084					_IFT_SLoop:
.018084	20 a4 80	jsr $0180a4			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.018087	e8		inx				inx
.018088	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.01808a	d0 f8		bne $018084			bne 	_IFT_SLoop
.01808c	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01808e	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018091	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.018093					_IFT_SBlank:
.018093	a9 20		lda #$20			lda 	#32
.018095	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018098	ca		dex				dex
.018099	d0 f8		bne $018093			bne 	_IFT_SBlank
.01809b	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01809d	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180a0	7a		ply				ply
.0180a1	fa		plx				plx
.0180a2	68		pla				pla
.0180a3	60		rts				rts
.0180a4					_IFT_ScrollLine:
.0180a4	da		phx				phx
.0180a5	da		phx				phx
.0180a6	8a		txa				txa 								; copy line into buffer.
.0180a7	1a		inc a				inc 	a 							; next line down.
.0180a8	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180ab	a2 00		ldx #$00			ldx 	#0
.0180ad					_IFTScrollCopy1:
.0180ad	20 cc 81	jsr $0181cc			jsr 	IF_Read
.0180b0	9d 02 05	sta $0502,x			sta 	IFT_Buffer,x
.0180b3	e8		inx				inx
.0180b4	e0 40		cpx #$40			cpx 	#IF_Width
.0180b6	d0 f5		bne $0180ad			bne 	_IFTScrollCopy1
.0180b8	68		pla				pla
.0180b9	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180bc	a2 00		ldx #$00			ldx 	#0
.0180be					_IFTScrollCopy2:
.0180be	bd 02 05	lda $0502,x			lda 	IFT_Buffer,x
.0180c1	20 d5 81	jsr $0181d5			jsr 	IF_Write
.0180c4	e8		inx				inx
.0180c5	e0 40		cpx #$40			cpx 	#IF_Width
.0180c7	d0 f5		bne $0180be			bne 	_IFTScrollCopy2
.0180c9	fa		plx				plx
.0180ca	60		rts				rts
.0180cb					IFT_SetYPos:
.0180cb	48		pha				pha
.0180cc	da		phx				phx
.0180cd	aa		tax				tax
.0180ce	20 1b 80	jsr $01801b			jsr 	IFT_HomeCursor
.0180d1	e0 00		cpx #$00			cpx 	#0
.0180d3	f0 09		beq $0180de			beq 	_IFT_MOAExit
.0180d5					_IFT_MOALoop:
.0180d5	20 bc 81	jsr $0181bc			jsr 	IF_NewLine
.0180d8	ee 01 05	inc $0501			inc 	IFT_YCursor
.0180db	ca		dex				dex
.0180dc	d0 f7		bne $0180d5			bne		_IFT_MOALoop
.0180de					_IFT_MOAExit:
.0180de	fa		plx				plx
.0180df	68		pla				pla
.0180e0	60		rts				rts
.0180e1					IFT_GetKeyCursor:
.0180e1	20 e9 80	jsr $0180e9			jsr 	_IFT_FlipCursor 			; reverse current
.0180e4					_IFT_GKCWait:
.0180e4	20 e6 81	jsr $0181e6			jsr 	IF_GetKey 					; get key
.0180e7	f0 fb		beq $0180e4			beq 	_IFT_GKCWait
.0180e9					_IFT_FlipCursor:
.0180e9	48		pha				pha 								; save
.0180ea	20 cc 81	jsr $0181cc			jsr 	IF_Read 					; read
.0180ed	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f0	49 80		eor #$80			eor 	#$80 						; reverse
.0180f2	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write
.0180f5	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f8	68		pla				pla
.0180f9	60		rts				rts
.0180fa					IFT_ReadLine:
.0180fa	48		pha				pha
.0180fb					_IFT_RLLoop:
.0180fb	20 e1 80	jsr $0180e1			jsr 	IFT_GetKeyCursor 			; get keystroke
.0180fe	c9 0d		cmp #$0d			cmp 	#13							; return
.018100	f0 7d		beq $01817f			beq 	_IFT_RLExit
.018102	c9 20		cmp #$20			cmp 	#32 						; control character
.018104	90 05		bcc $01810b			bcc 	_IFT_Control
.018106	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018109	80 f0		bra $0180fb			bra 	_IFT_RLLoop
.01810b					_IFT_Control:
.01810b	c9 01		cmp #$01			cmp 	#"A"-64
.01810d	f0 26		beq $018135			beq 	_IFT_Left
.01810f	c9 04		cmp #$04			cmp 	#"D"-64
.018111	f0 2e		beq $018141			beq 	_IFT_Right
.018113	c9 17		cmp #$17			cmp 	#"W"-64
.018115	f0 36		beq $01814d			beq 	_IFT_Up
.018117	c9 13		cmp #$13			cmp 	#"S"-64
.018119	f0 3e		beq $018159			beq 	_IFT_Down
.01811b	c9 08		cmp #$08			cmp 	#"H"-64
.01811d	f0 09		beq $018128			beq 	_IFT_Backspace
.01811f	c9 1a		cmp #$1a			cmp 	#"Z"-64
.018121	d0 d8		bne $0180fb			bne 	_IFT_RLLoop
.018123	20 00 80	jsr $018000			jsr 	IFT_ClearScreen				; clear CTL-Z
.018126	80 d3		bra $0180fb			bra 	_IFT_RLLoop
.018128					_IFT_Backspace:
.018128	ad 00 05	lda $0500			lda 	IFT_XCursor 				; check not start of line.
.01812b	f0 ce		beq $0180fb			beq 	_IFT_RLLoop
.01812d	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.018130	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.018132	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018135					_IFT_Left:
.018135	ce 00 05	dec $0500			dec 	IFT_XCursor 				; left CTL-W
.018138	10 29		bpl $018163			bpl 	_IFT_Reposition
.01813a	a9 3f		lda #$3f			lda 	#IF_Width-1
.01813c					_IFT_SetX:
.01813c	8d 00 05	sta $0500			sta 	IFT_XCursor
.01813f	80 22		bra $018163			bra 	_IFT_Reposition
.018141					_IFT_Right:
.018141	ee 00 05	inc $0500			inc 	IFT_XCursor
.018144	ad 00 05	lda $0500			lda 	IFT_XCursor
.018147	49 40		eor #$40			eor 	#IF_Width
.018149	f0 f1		beq $01813c			beq 	_IFT_SetX
.01814b	80 16		bra $018163			bra 	_IFT_Reposition
.01814d					_IFT_Up:
.01814d	ce 01 05	dec $0501			dec 	IFT_YCursor
.018150	10 11		bpl $018163			bpl 	_IFT_Reposition
.018152	a9 1f		lda #$1f			lda 	#IF_Height-1
.018154					_IFT_SetY:
.018154	8d 01 05	sta $0501			sta 	IFT_YCursor
.018157	80 0a		bra $018163			bra 	_IFT_Reposition
.018159					_IFT_Down:
.018159	ee 01 05	inc $0501			inc 	IFT_YCursor
.01815c	ad 01 05	lda $0501			lda 	IFT_YCursor
.01815f	49 20		eor #$20			eor 	#IF_Height
.018161	f0 f1		beq $018154			beq 	_IFT_SetY
.018163					_IFT_Reposition:
.018163	ad 00 05	lda $0500			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.018166	48		pha				pha
.018167	ad 01 05	lda $0501			lda 	IFT_YCursor
.01816a	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.01816d	68		pla				pla
.01816e	aa		tax				tax
.01816f	e0 00		cpx #$00			cpx 	#0
.018171	f0 88		beq $0180fb			beq 	_IFT_RLLoop
.018173					_IFT_MoveRight:
.018173	20 cc 81	jsr $0181cc			jsr 	IF_Read
.018176	ee 00 05	inc $0500			inc 	IFT_XCursor
.018179	ca		dex				dex
.01817a	d0 f7		bne $018173			bne 	_IFT_MoveRight
.01817c	4c fb 80	jmp $0180fb			jmp 	_IFT_RLLoop
.01817f					_IFT_RLExit:
.01817f	ad 01 05	lda $0501			lda 	IFT_YCursor 				; go to start of line.
.018182	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018185	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.018187					_IFT_RLRead:
.018187	20 cc 81	jsr $0181cc			jsr 	IF_Read
.01818a	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.01818d	e8		inx				inx
.01818e	e0 40		cpx #$40			cpx 	#IF_Width
.018190	d0 f5		bne $018187			bne 	_IFT_RLRead
.018192					_IFT_RL_Trim:
.018192	ca		dex				dex 	 							; previous char
.018193	30 07		bmi $01819c			bmi 	_IFT_Found 					; gone too far
.018195	bd 66 05	lda $0566,x			lda 	IFT_LineBuffer,x			; go back if space
.018198	c9 20		cmp #$20			cmp 	#" "
.01819a	f0 f6		beq $018192			beq 	_IFT_RL_Trim
.01819c					_IFT_Found:
.01819c	e8		inx				inx 								; forward to non-space
.01819d	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.01819f	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.0181a2	68		pla				pla
.0181a3	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.0181a5	a0 05		ldy #$05			ldy 	#IFT_LineBuffer >> 8
.0181a7	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.0181a8					IF_Reset:
.0181a8	60		rts				rts
.0181a9					IF_Home:
.0181a9	48		pha				pha
.0181aa	64 08		stz $08				stz 	IF_XPos 					; zero X position
.0181ac	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.0181ae	85 04		sta $04				sta 	IF_Pos
.0181b0	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.0181b2	85 05		sta $05				sta 	IF_Pos+1
.0181b4	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.0181b6	85 06		sta $06				sta 	IF_Pos+2
.0181b8	64 07		stz $07				stz 	IF_Pos+3
.0181ba	68		pla				pla
.0181bb	60		rts				rts
.0181bc					IF_NewLine:
.0181bc	48		pha				pha
.0181bd	64 08		stz $08				stz 	IF_XPos						; back to start of line
.0181bf	18		clc				clc 								; down one line
.0181c0	a5 04		lda $04				lda 	IF_Pos
.0181c2	69 40		adc #$40			adc 	#64
.0181c4	85 04		sta $04				sta 	IF_Pos
.0181c6	90 02		bcc $0181ca			bcc 	_IF_NoCarry 				; carry through.
.0181c8	e6 05		inc $05				inc 	IF_Pos+1
.0181ca					_IF_NoCarry:
.0181ca	68		pla				pla
.0181cb	60		rts				rts
.0181cc					IF_Read:
.0181cc	5a		phy				phy 								; save current Y
.0181cd	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.0181cf	b7 04		lda [$04],y			lda 	[IF_Pos],y
.0181d1	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181d3	7a		ply				ply									; restore Y
.0181d4	60		rts				rts
.0181d5					IF_Write:
.0181d5	5a		phy				phy 								; save current Y
.0181d6	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.0181d8	97 04		sta [$04],y			sta 	[IF_Pos],y
.0181da	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181dc	7a		ply				ply									; restore Y
.0181dd	60		rts				rts
.0181de					IF_LeftOne:
.0181de	c6 08		dec $08				dec 	IF_XPos
.0181e0	60		rts				rts
.0181e1					IF_CheckBreak:
.0181e1	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.0181e5	60		rts				rts
.0181e6					IF_GetKey:
.0181e6	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.0181ea	f0 08		beq $0181f4			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.0181ec	48		pha				pha 								; key pressed, clear queue.
.0181ed	a9 00		lda #$00			lda 	#0
.0181ef	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.0181f3	68		pla				pla
.0181f4					_IFGK_NoKey:
.0181f4	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.0181f6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.0181f7					TIM_Error:
.0181f7	20 29 80	jsr $018029			jsr 	IFT_UpLine 					; go up one line.
.0181fa	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.0181fc	80 02		bra $018200			bra 	TIM_ShowPrompt
.0181fe					TIM_NewCommand:
.0181fe	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.018200					TIM_ShowPrompt:
.018200	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.018203	20 fa 80	jsr $0180fa			jsr 	IFT_ReadLine	 			; get character, go to next line
.018206	20 5c 80	jsr $01805c			jsr 	IFT_NewLine					; go to next line.
.018209	86 10		stx $10				stx 	zTemp1 						; save line read address
.01820b	84 11		sty $11				sty 	zTemp1+1
.01820d	a0 00		ldy #$00			ldy 	#0 							; get first character after the prompt.
.01820f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018211	c9 3f		cmp #$3f			cmp 	#"?"
.018213	f0 04		beq $018219			beq 	TIM_SkipFirst
.018215	c9 2e		cmp #$2e			cmp 	#"."						; if . skip it
.018217	d0 01		bne $01821a			bne 	TIM_NotDot
.018219					TIM_SkipFirst:
.018219	c8		iny				iny
.01821a					TIM_NotDot:
.01821a	b1 10		lda ($10),y			lda 	(zTemp1),y 					; get character
.01821c	c9 52		cmp #$52			cmp 	#"R"						; show registers
.01821e	f0 6b		beq $01828b			beq 	TIM_ShowRegisters
.018220	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.018222	f0 12		beq $018236			beq 	TIM_ShowMemory
.018224	c9 47		cmp #$47			cmp 	#"G"						; execute
.018226	f0 49		beq $018271			beq 	TIM_Execute
.018228	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.01822a	f0 07		beq $018233			beq 	TIM_GoLoadMemory
.01822c	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.01822e	d0 c7		bne $0181f7			bne 	TIM_Error
.018230	4c af 83	jmp $0183af			jmp 	TIM_UpdateRegisters
.018233					TIM_GoLoadMemory:
.018233	4c df 83	jmp $0183df			jmp 	TIM_LoadMemory
.018236					TIM_ShowMemory:
.018236	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018239	b0 bc		bcs $0181f7			bcs 	TIM_Error
.01823b	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.01823d	85 12		sta $12				sta 	zTemp2
.01823f	a5 15		lda $15				lda 	zTemp3+1
.018241	85 13		sta $13				sta 	zTemp2+1
.018243	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018246	90 08		bcc $018250			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.018248	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.01824a	85 14		sta $14				sta 	zTemp3
.01824c	a5 13		lda $13				lda 	zTemp2+1
.01824e	85 15		sta $15				sta 	zTemp3+1
.018250					_TIMSM_Start:
.018250	20 03 83	jsr $018303			jsr 	TIM_WriteLine 				; write one line of hex out
.018253	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.018255	18		clc				clc
.018256	69 10		adc #$10			adc 	#16
.018258	85 12		sta $12				sta 	zTemp2
.01825a	90 02		bcc $01825e			bcc 	_TIMSM_NoCarry
.01825c	e6 13		inc $13				inc 	zTemp2+1
.01825e					_TIMSM_NoCarry:
.01825e	20 e1 81	jsr $0181e1			jsr 	IF_CheckBreak 				; check CTL+C
.018261	d0 0b		bne $01826e			bne 	_TIMSM_Ends 				; if pressed break out.
.018263	38		sec				sec 								; check past the end address in zTemp3
.018264	a5 14		lda $14				lda 	zTemp3
.018266	e5 12		sbc $12				sbc 	zTemp2
.018268	a5 15		lda $15				lda 	zTemp3+1
.01826a	e5 13		sbc $13				sbc 	zTemp2+1
.01826c	10 e2		bpl $018250			bpl 	_TIMSM_Start
.01826e					_TIMSM_Ends:
.01826e	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.018271					TIM_Execute:
.018271	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get the execute address
.018274	b0 81		bcs $0181f7			bcs 	TIM_Error 					; not legitimate
.018276	ae c3 03	ldx $03c3			ldx 	TIM_SP 						; set up SP
.018279	9a		txs				txs
.01827a	ad be 03	lda $03be			lda 	TIM_SR 						; Status for PLP
.01827d	48		pha				pha
.01827e	ad bf 03	lda $03bf			lda 	TIM_A 						; restore AXYZ
.018281	ae c0 03	ldx $03c0			ldx 	TIM_X
.018284	ac c1 03	ldy $03c1			ldy 	TIM_Y
.018287	28		plp				plp 								; and PS Byte.
.018288	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.01828b					TIM_Start:
.01828b					TIM_ShowRegisters:
.01828b	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.01828e	8d bd 03	sta $03bd			sta 	TIM_IRQ+1
.018291	ad ff ff	lda $ffff			lda 	$FFFF
.018294	8d bc 03	sta $03bc			sta 	TIM_IRQ
.018297	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.018299					_TIMSR_Text:
.018299	bf ca 82 01	lda $0182ca,x			lda 	_TIMSR_Label,x
.01829d	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182a0	e8		inx				inx
.0182a1	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.0182a3	d0 f4		bne $018299			bne 	_TIMSR_Text
.0182a5	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.0182a7					_TIMSR_Skip:
.0182a7	e8		inx				inx
.0182a8					_TIMSR_LoopSpace:
.0182a8	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.0182aa	b0 04		bcs $0182b0			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.0182ac	8a		txa				txa
.0182ad	4a		lsr a				lsr 	a
.0182ae	b0 05		bcs $0182b5			bcs 	_TIMSR_NoSpace
.0182b0					_TIMSR_Space:
.0182b0	a9 20		lda #$20			lda 	#" "
.0182b2	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182b5					_TIMSR_NoSpace:
.0182b5	bd ba 03	lda $03ba,x			lda 	TIM_PC,x 					; output hex value.
.0182b8	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.0182bb	e8		inx				inx
.0182bc	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.0182be	f0 e7		beq $0182a7			beq 	_TIMSR_Skip
.0182c0	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.0182c2	d0 e4		bne $0182a8			bne 	_TimSR_LoopSpace
.0182c4	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; new line
.0182c7	4c fe 81	jmp $0181fe			jmp	 	TIM_NewCommand 				; new command.
.0182ca					_TIMSR_Label:
>0182ca	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>0182d2	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>0182e2	52
>0182e3	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.0182ea					_TIMSR_LabelEnd:
.0182ea					TIM_WriteHex:
.0182ea	48		pha				pha 								; save A
.0182eb	4a		lsr a				lsr 	a 							; shift MSB->LSB
.0182ec	4a		lsr a				lsr 	a
.0182ed	4a		lsr a				lsr 	a
.0182ee	4a		lsr a				lsr 	a
.0182ef	20 f3 82	jsr $0182f3			jsr 	_TIMWH_Nibble 				; print MSB
.0182f2	68		pla				pla 								; restore and print LSB
.0182f3					_TIMWH_Nibble:
.0182f3	48		pha				pha
.0182f4	29 0f		and #$0f			and 	#15 						; mask out
.0182f6	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.0182f8	90 02		bcc $0182fc			bcc 	_TIMWHNoLetter
.0182fa	69 06		adc #$06			adc 	#6
.0182fc					_TIMWHNoLetter:
.0182fc	69 30		adc #$30			adc 	#48
.0182fe	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter 			; print it out.
.018301	68		pla				pla
.018302	60		rts				rts
.018303					TIM_WriteLine:
.018303	a9 2e		lda #$2e			lda 	#"." 						; prompt
.018305	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018308	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.01830a	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01830d	a5 13		lda $13				lda 	zTemp2+1 					; write address
.01830f	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018312	a5 12		lda $12				lda 	zTemp2
.018314	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018317	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.018319					_TIMWL_Loop:
.018319	a9 20		lda #$20			lda 	#" "
.01831b	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01831e	b1 12		lda ($12),y			lda 	(zTemp2),y
.018320	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018323	c8		iny				iny
.018324	c0 10		cpy #$10			cpy 	#16
.018326	d0 f1		bne $018319			bne 	_TIMWL_Loop
.018328	4c 5c 80	jmp $01805c			jmp 	IFT_NewLine 				; new line and exit
.01832b					TIM_GetHex:
.01832b	c8		iny				iny
.01832c	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.01832e	c9 20		cmp #$20			cmp 	#32
.018330	f0 f9		beq $01832b			beq 	TIM_GetHex
.018332	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.018334	f0 f5		beq $01832b			beq 	TIM_GetHex
.018336	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.018339	b0 23		bcs $01835e			bcs 	_TIMGH_Exit					; if first bad then exit now.
.01833b	a9 00		lda #$00			lda 	#0 							; zero result
.01833d	85 14		sta $14				sta 	zTemp3
.01833f	85 15		sta $15				sta 	zTemp3+1
.018341					_TIM_GHLoop:
.018341	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; get next character
.018344	b0 17		bcs $01835d			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.018346	c8		iny				iny 								; skip over it.
.018347	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.018349	26 15		rol $15				rol 	zTemp3+1
.01834b	06 14		asl $14				asl 	zTemp3 						; now x 2
.01834d	26 15		rol $15				rol 	zTemp3+1
.01834f	06 14		asl $14				asl 	zTemp3						; now x 4
.018351	26 15		rol $15				rol 	zTemp3+1
.018353	06 14		asl $14				asl 	zTemp3 						; now x 8
.018355	26 15		rol $15				rol 	zTemp3+1
.018357	05 14		ora $14				ora 	zTemp3 						; OR result in
.018359	85 14		sta $14				sta 	zTemp3
.01835b	80 e4		bra $018341			bra 	_TIM_GHLoop 				; loop round again.
.01835d					_TIMGH_Okay:
.01835d	18		clc				clc
.01835e					_TIMGH_Exit:
.01835e	60		rts				rts
.01835f					TIM_GetHexCharacter:
.01835f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018361	38		sec				sec
.018362	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.018364	90 0e		bcc $018374			bcc 	_TIM_GHCFail
.018366	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.018368	90 0b		bcc $018375			bcc 	_TIM_GHCExit
.01836a	c9 11		cmp #$11			cmp 	#65-48						; < A
.01836c	90 06		bcc $018374			bcc		_TIM_GHCFail
.01836e	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.018370	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.018372	90 01		bcc $018375			bcc		_TIM_GHCExit
.018374					_TIM_GHCFail:
.018374	38		sec				sec
.018375					_TIM_GHCExit:
.018375	60		rts				rts
.018376					TIM_BreakVector:
.018376	da		phx				phx									; save X/A on stack
.018377	48		pha				pha
.018378	ba		tsx				tsx 								; X points to S
.018379	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.01837c	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.01837e	d0 03		bne $018383			bne 	_TIMBreak					; if set, it's BRK
.018380	68		pla				pla 								; abandon routine.
.018381	fa		plx				plx
.018382	40		rti				rti
.018383					_TIMBreak:
.018383	68		pla				pla 								; save A X Y and maybe Z
.018384	8d bf 03	sta $03bf			sta 	TIM_A
.018387	fa		plx				plx
.018388	8e c0 03	stx $03c0			stx 	TIM_X
.01838b	8c c1 03	sty $03c1			sty 	TIM_Y
.01838e	68		pla				pla 								; get Status Register
.01838f	8d be 03	sta $03be			sta 	TIM_SR
.018392	68		pla				pla
.018393	8d bb 03	sta $03bb			sta 	TIM_PC+1 					; save calling address
.018396	68		pla				pla
.018397	8d ba 03	sta $03ba			sta 	TIM_PC 						; high byte
.01839a	ad bb 03	lda $03bb			lda 	TIM_PC+1 					; dec PC to point right.
.01839d	d0 03		bne $0183a2			bne 	_TIMDecrement 				; brk bumps it.
.01839f	ce ba 03	dec $03ba			dec 	TIM_PC
.0183a2					_TIMDecrement:
.0183a2	ce bb 03	dec $03bb			dec 	TIM_PC+1
.0183a5	ba		tsx				tsx 								; and copy SP
.0183a6	8e c3 03	stx $03c3			stx 	TIM_SP
.0183a9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.0183ab	9a		txs				txs
.0183ac	4c 8b 82	jmp $01828b			jmp 	TIM_Start 					; and start up TIM monitor.
.0183af					TIM_UpdateRegisters:
.0183af	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; PC
.0183b2	b0 28		bcs $0183dc			bcs 	_TIMURFail
.0183b4	a5 14		lda $14				lda 	zTemp3
.0183b6	8d bb 03	sta $03bb			sta 	Tim_PC+1
.0183b9	a5 15		lda $15				lda 	zTemp3+1
.0183bb	8d ba 03	sta $03ba			sta 	Tim_PC
.0183be	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; ignore IRQ
.0183c1	b0 19		bcs $0183dc			bcs 	_TIMURFail
.0183c3	a2 00		ldx #$00			ldx 	#0
.0183c5					_TIM_URLoop:
.0183c5	e0 04		cpx #$04			cpx 	#Tim_Z-Tim_SR
.0183c7	d0 01		bne $0183ca			bne 	_TIM_1
.0183c9	e8		inx				inx
.0183ca					_TIM_1:
.0183ca	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; registers
.0183cd	b0 0d		bcs $0183dc			bcs 	_TIMURFail
.0183cf	a5 14		lda $14				lda 	zTemp3
.0183d1	9d be 03	sta $03be,x			sta 	Tim_SR,x
.0183d4	e8		inx				inx
.0183d5	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.0183d7	d0 ec		bne $0183c5			bne 	_TIM_URLoop
.0183d9	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.0183dc					_TIMURFail:
.0183dc	4c f7 81	jmp $0181f7			jmp 	TIM_Error
.0183df					TIM_LoadMemory:
.0183df	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; target address => zTemp2
.0183e2	a5 14		lda $14				lda 	zTemp3
.0183e4	85 12		sta $12				sta 	zTemp2
.0183e6	a5 15		lda $15				lda 	zTemp3+1
.0183e8	85 13		sta $13				sta 	zTemp2+1
.0183ea					_TIM_LMLoop:
.0183ea	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; next byte ?
.0183ed	b0 0e		bcs $0183fd			bcs 	_TIMLMDone 					; no more
.0183ef	a2 00		ldx #$00			ldx 	#0							; write out.
.0183f1	a5 14		lda $14				lda 	zTemp3
.0183f3	81 12		sta ($12,x)			sta 	(zTemp2,x)
.0183f5	e6 12		inc $12				inc 	zTemp2 						; bump address
.0183f7	d0 f1		bne $0183ea			bne 	_TIM_LMLoop
.0183f9	e6 13		inc $13				inc 	zTemp2+1
.0183fb	80 ed		bra $0183ea			bra 	_TIM_LMLoop
.0183fd					_TIMLMDone:
.0183fd	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/skip.asm

.018400					StructureSearchSingle:
.018400	a2 00		ldx #$00			ldx 	#0
.018402					StructureSearchDouble:
.018402	85 10		sta $10				sta 	zTemp1 						; save the target on zTemp1,zTemp1+1
.018404	86 11		stx $11				stx 	zTemp1+1
.018406	a9 00		lda #$00			lda 	#0 							; set the structure depth to zero (zTemp2)
.018408	85 12		sta $12				sta 	zTemp2
.01840a	80 18		bra $018424			bra 	_SSWLoop 					; jump in, start scanning from here.
.01840c					_SSWNextLine:
.01840c	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01840e	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018410	18		clc				clc
.018411	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018413	85 16		sta $16				sta 	zCodePtr
.018415	90 02		bcc $018419			bcc 	_SNLNoCarry
.018417	e6 17		inc $17				inc 	zCodePtr+1
.018419					_SNLNoCarry:
.018419	a0 00		ldy #$00			ldy 	#0
.01841b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01841d	c9 00		cmp #$00			cmp 	#0					 		; if zero, fail.
.01841f	f0 54		beq $018475			beq 	_SSWFail
.018421	c8		iny				iny
.018422	c8		iny				iny
.018423					_SSWNextSimple:
.018423	c8		iny				iny
.018424					_SSWLoop:
.018424	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018426	c9 00		cmp #$00			cmp 	#0 							; end of line ?
.018428	f0 e2		beq $01840c			beq 	_SSWNextLine 				; if so, then next line
.01842a	10 f7		bpl $018423			bpl 	_SSWNextSimple 				; needs to be a token, just skip char/number.
.01842c	a6 12		ldx $12				ldx 	zTemp2 						; check structure count
.01842e	d0 08		bne $018438			bne 	_SSWCheckUpDown 			; if it's non zero, then a match doesn't work.
.018430	c5 10		cmp $10				cmp 	zTemp1 						; found the right keyword, either choice.
.018432	f0 2d		beq $018461			beq 	_SSWFound 					; so exit.
.018434	c5 11		cmp $11				cmp 	zTemp1+1
.018436	f0 29		beq $018461			beq 	_SSWFound
.018438					_SSWCheckUpDown:
.018438	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus 			; if < keyword +
.01843a	90 10		bcc $01844c			bcc 	_SSWNext
.01843c	c9 93		cmp #$93			cmp 	#firstKeywordMinus 			; if < keyword - then as keyword +
.01843e	90 08		bcc $018448			bcc 	_SSWPlus
.018440	c9 98		cmp #$98			cmp 	#firstUnaryFunction			; if < first unary down as keyword -
.018442	b0 08		bcs $01844c			bcs 	_SSWNext
.018444	c6 12		dec $12				dec 	zTemp2 						; reduce structure count.
.018446	c6 12		dec $12				dec 	zTemp2
.018448					_SSWPlus:
.018448	e6 12		inc $12				inc 	zTemp2
.01844a	30 16		bmi $018462			bmi 	_SSWUnder					; error if driven -ve
.01844c					_SSWNext:
.01844c	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.01844e	c8		iny				iny 								; skip
.01844f	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018451	90 0c		bcc $01845f			bcc 	_SEDone 					; so just skip over it.
.018453	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018455	90 07		bcc $01845e			bcc 	_SEDouble
.018457	98		tya				tya 								; this is Y + 1
.018458	18		clc				clc
.018459	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.01845b	a8		tay				tay 								; back in Y.
.01845c	88		dey				dey 								; fix up, one for the +1, one for the iny
.01845d	88		dey				dey
.01845e					_SEDouble:
.01845e	c8		iny				iny
.01845f					_SEDone:
.01845f	80 c3		bra $018424			bra 	_SSWLoop
.018461					_SSWFound:
.018461	60		rts				rts
.018462					_SSWUnder:
.018462	20 57 85	jsr $018557			jsr ERR_Handler
>018465	53 74 72 75 63 74 75 72			.text "Structure order",0
>01846d	65 20 6f 72 64 65 72 00
.018475					_SSWFail:
.018475	20 57 85	jsr $018557			jsr ERR_Handler
>018478	43 61 6e 27 74 20 66 69			.text "Can't find structure",0
>018480	6e 64 20 73 74 72 75 63 74 75 72 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stack.asm

.01848d					StackReset:
.01848d	48		pha				pha
.01848e	5a		phy				phy
.01848f	a9 00		lda #$00			lda 	#(BasicStack & $FF) 		; reset pointer
.018491	85 26		sta $26				sta 	zBasicSP
.018493	a9 04		lda #$04			lda 	#(BasicStack >> 8)
.018495	85 27		sta $27				sta 	zBasicSP+1
.018497	a0 00		ldy #$00			ldy 	#0 							; reset stack top to $00 which cannot
.018499	98		tya				tya 								; be a legal token.
.01849a	91 26		sta ($26),y			sta 	(zBasicSP),y
.01849c	7a		ply				ply
.01849d	68		pla				pla
.01849e	60		rts				rts
.01849f					StackPushFrame:
.01849f	48		pha				pha
.0184a0	5a		phy				phy
.0184a1	1a		inc a				inc 	a 							; one extra byte in frame, for the marker.
.0184a2	48		pha				pha 								; save it.
.0184a3	29 0f		and #$0f			and 	#$0F 						; lower 4 bits
.0184a5	18		clc				clc 								; add to Basic Stack
.0184a6	65 26		adc $26				adc 	zBasicSP
.0184a8	85 26		sta $26				sta 	zBasicSP
.0184aa	90 02		bcc $0184ae			bcc 	_SPFNoBump
.0184ac	e6 27		inc $27				inc 	zBasicSP+1
.0184ae					_SPFNoBump:
.0184ae	a0 00		ldy #$00			ldy 	#0
.0184b0	68		pla				pla
.0184b1	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184b3	7a		ply				ply
.0184b4	68		pla				pla
.0184b5	60		rts				rts
.0184b6					StackPopFrame:
.0184b6	48		pha				pha
.0184b7	5a		phy				phy
.0184b8	a0 00		ldy #$00			ldy 	#0 							; compare with top of stack using EOR
.0184ba	51 26		eor ($26),y			eor 	(zBasicSP),y
.0184bc	29 f0		and #$f0			and 	#$F0 						; top 4 bits zero, match
.0184be	d0 12		bne $0184d2			bne 	_SPFError 					; mixed structures
.0184c0	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; get size from byte
.0184c2	29 0f		and #$0f			and 	#$0F
.0184c4	49 ff		eor #$ff			eor 	#$FF						; 2's complement
.0184c6	38		sec				sec
.0184c7	65 26		adc $26				adc 	zBasicSP
.0184c9	85 26		sta $26				sta 	zBasicSP
.0184cb	b0 02		bcs $0184cf			bcs 	_SPFNoBump
.0184cd	c6 27		dec $27				dec 	zBasicSP+1
.0184cf					_SPFNoBump:
.0184cf	7a		ply				ply
.0184d0	68		pla				pla
.0184d1	60		rts				rts
.0184d2					_SPFError:
.0184d2	20 57 85	jsr $018557			jsr ERR_Handler
>0184d5	4d 69 78 65 64 20 53 74			.text "Mixed Structures",0
>0184dd	72 75 63 74 75 72 65 73 00
.0184e6					StackSavePosition:
.0184e6	98		tya				tya
.0184e7	5a		phy				phy
.0184e8	a0 05		ldy #$05			ldy 	#5
.0184ea	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184ec	a0 01		ldy #$01			ldy 	#1
.0184ee	a5 16		lda $16				lda 	zCodePtr+0 					; 4 bytes, could reduce this for 65816/6502
.0184f0	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f2	c8		iny				iny
.0184f3	a5 17		lda $17				lda 	zCodePtr+1
.0184f5	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f7	c8		iny				iny
.0184f8	a5 18		lda $18				lda 	zCodePtr+2
.0184fa	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184fc	c8		iny				iny
.0184fd	a5 19		lda $19				lda 	zCodePtr+3
.0184ff	91 26		sta ($26),y			sta 	(zBasicSP),y
.018501	7a		ply				ply
.018502	60		rts				rts
.018503					StackRestorePosition:
.018503	5a		phy				phy
.018504	a0 01		ldy #$01			ldy 	#1 							; copy 4 bytes that are the pointer
.018506	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018508	85 16		sta $16				sta 	zCodePtr+0
.01850a	c8		iny				iny
.01850b	b1 26		lda ($26),y			lda 	(zBasicSP),y
.01850d	85 17		sta $17				sta 	zCodePtr+1
.01850f	c8		iny				iny
.018510	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018512	85 18		sta $18				sta 	zCodePtr+2
.018514	c8		iny				iny
.018515	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018517	85 19		sta $19				sta 	zCodePtr+3
.018519	c8		iny				iny
.01851a	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; offset
.01851c	7a		ply				ply 								; restore Y
.01851d	a8		tay				tay
.01851e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/vectors.asm

.01851f					CharPrint:
.01851f	4c 35 80	jmp $018035			jmp 	IFT_PrintCharacter
.018522					CharGet:
.018522	4c e6 81	jmp $0181e6			jmp 	IF_GetKey
.018525					CheckBreak:
.018525	4c e1 81	jmp $0181e1			jmp 	IF_CheckBreak

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/errors.asm

.018528					SyntaxError:
.018528	20 57 85	jsr $018557			jsr 	ERR_Handler
>01852b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>018533	72 72 6f 72 00
.018538					TypeError:
.018538	20 57 85	jsr $018557			jsr 	ERR_Handler
>01853b	57 72 6f 6e 67 20 74 79				.text 	"Wrong type",0
>018543	70 65 00
.018546					BadParamError:
.018546	20 57 85	jsr $018557			jsr 	ERR_Handler
>018549	42 61 64 20 50 61 72 61				.text 	"Bad Parameter",0
>018551	6d 65 74 65 72 00
.018557					ERR_Handler:
.018557	a0 00		ldy #$00			ldy 	#0
.018559	c8		iny				iny
.01855a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01855c	85 80		sta $80				sta 	XS_Mantissa
.01855e	c8		iny				iny
.01855f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018561	85 81		sta $81				sta 	XS_Mantissa+1
.018563	fa		plx				plx 								; address in XY
.018564	7a		ply				ply
.018565	e8		inx				inx 								; bump, because of RTS/JSR address -1
.018566	d0 01		bne $018569			bne 	_EHNoSkip
.018568	c8		iny				iny
.018569					_EHNoSkip:
.018569	20 88 85	jsr $018588			jsr 	PrintROMMessage 			; print message from ROM.
.01856c	a5 80		lda $80				lda 	XS_Mantissa					; line number = 0
.01856e	05 81		ora $81				ora 	XS_Mantissa+1
.018570	f0 0c		beq $01857e			beq 	_EHNoLine
.018572	a2 83		ldx #$83			ldx 	#_EHAt & $FF 				; print " at "
.018574	a0 85		ldy #$85			ldy 	#(_EHAt >> 8) & $FF
.018576	20 88 85	jsr $018588			jsr 	PrintROMMessage
.018579	a2 00		ldx #$00			ldx 	#0 							; Print line number
.01857b	20 9d 85	jsr $01859d			jsr 	Print16BitInteger
.01857e					_EHNoLine:
.01857e	80 fe		bra $01857e			bra 	_EHNoLine
.018580	4c 10 88	jmp $018810			jmp 	WarmStart
>018583	20 61 74 20 00			_EHAt:	.text 	" at ",0
.018588					PrintROMMessage:
.018588	86 1a		stx $1a				stx 	zLTemp1 					; save addres
.01858a	84 1b		sty $1b				sty 	zLTemp1+1
.01858c	4b		phk				phk
.01858d	68		pla				pla
.01858e	85 1c		sta $1c				sta 	ZLTemp1+2
.018590	a0 00		ldy #$00			ldy 	#0
.018592					_PRMLoop:
.018592	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018594	f0 06		beq $01859c			beq		_PRMExit
.018596	c8		iny				iny
.018597	20 1f 85	jsr $01851f			jsr 	CharPrint
.01859a	80 f6		bra $018592			bra 	_PRMLoop
.01859c					_PRMExit:
.01859c	60		rts				rts
.01859d					Print16BitInteger:
.01859d	a9 00		lda #$00			lda 	#0 							; make 32 bit
.01859f	85 82		sta $82				sta 	XS_Mantissa+2
.0185a1	85 83		sta $83				sta 	XS_Mantissa+3
.0185a3					Print32BitInteger:
.0185a3	a9 00		lda #$00			lda 	#0
.0185a5	8d 14 03	sta $0314			sta 	NumBufX 					; reset the conversion pointer
.0185a8	aa		tax				tax 								; convert bottom level.
.0185a9	20 07 9c	jsr $019c07			jsr 	INTToString 				; make string
.0185ac	a2 00		ldx #$00			ldx 	#0 							; print buffer
.0185ae	bd 15 03	lda $0315,x	_P1Loop:lda 	Num_Buffer,x
.0185b1	f0 06		beq $0185b9			beq 	_P1Exit
.0185b3	20 1f 85	jsr $01851f			jsr 	CharPrint
.0185b6	e8		inx				inx
.0185b7	80 f5		bra $0185ae			bra 	_P1Loop
.0185b9	8a		txa		_P1Exit:txa 								; return chars printed.
.0185ba	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/core.asm


;******  Processing file: modules/basic/../basic/header/header.src

=$93					firstKeywordMinus = $93
=$8f					firstKeywordPlus = $8f
=$98					firstUnaryFunction = $98
=$b6					lastUnaryFunction = $b6
.0185bb					VectorTable:
>0185bb	7b 90					.word BinaryOp_And         & $FFFF ; $80 and
>0185bd	97 90					.word BinaryOp_Or          & $FFFF ; $81 or
>0185bf	b3 90					.word BinaryOp_Xor         & $FFFF ; $82 xor
>0185c1	b3 90					.word BinaryOp_Eor         & $FFFF ; $83 eor
>0185c3	ea 90					.word Binary_Equal         & $FFFF ; $84 =
>0185c5	04 91					.word Binary_NotEqual      & $FFFF ; $85 <>
>0185c7	0d 91					.word Binary_Less          & $FFFF ; $86 <
>0185c9	16 91					.word Binary_LessEqual     & $FFFF ; $87 <=
>0185cb	28 91					.word Binary_Greater       & $FFFF ; $88 >
>0185cd	1f 91					.word Binary_GreaterEqual  & $FFFF ; $89 >=
>0185cf	ad 91					.word BinaryOp_Add         & $FFFF ; $8a +
>0185d1	c9 91					.word BinaryOp_Subtract    & $FFFF ; $8b -
>0185d3	da 91					.word BinaryOp_Multiply    & $FFFF ; $8c *
>0185d5	eb 91					.word BinaryOp_Divide      & $FFFF ; $8d /
>0185d7	79 86					.word NotImplemented       & $FFFF ; $8e ^
>0185d9	de 8a					.word Command_IF           & $FFFF ; $8f if
>0185db	77 8e					.word Command_WHILE        & $FFFF ; $90 while
>0185dd	9f 8e					.word Command_REPEAT       & $FFFF ; $91 repeat
>0185df	72 89					.word Command_FOR          & $FFFF ; $92 for
>0185e1	79 86					.word NotImplemented       & $FFFF ; $93 then
>0185e3	3b 8b					.word Command_ENDIF        & $FFFF ; $94 endif
>0185e5	94 8e					.word Command_WEND         & $FFFF ; $95 wend
>0185e7	a8 8e					.word Command_UNTIL        & $FFFF ; $96 until
>0185e9	ef 89					.word Command_NEXT         & $FFFF ; $97 next
>0185eb	79 86					.word NotImplemented       & $FFFF ; $98 not
>0185ed	79 86					.word NotImplemented       & $FFFF ; $99 fn(
>0185ef	f0 92					.word Unary_Abs            & $FFFF ; $9a abs(
>0185f1	31 94					.word Unary_Asc            & $FFFF ; $9b asc(
>0185f3	f6 a2					.word Unary_Int            & $FFFF ; $9c int(
>0185f5	0a 93					.word Unary_Peek           & $FFFF ; $9d peek(
>0185f7	77 a2					.word Unary_Rnd            & $FFFF ; $9e rnd(
>0185f9	71 93					.word Unary_Usr            & $FFFF ; $9f usr(
>0185fb	70 94					.word Unary_Left           & $FFFF ; $a0 left$(
>0185fd	85 94					.word Unary_Right          & $FFFF ; $a1 right$(
>0185ff	57 94					.word Unary_Mid            & $FFFF ; $a2 mid$(
>018601	ce 95					.word Unary_Spc            & $FFFF ; $a3 spc(
>018603	ff 93					.word Unary_Str            & $FFFF ; $a4 str$(
>018605	93 93					.word Unary_Val            & $FFFF ; $a5 val(
>018607	48 94					.word Unary_Len            & $FFFF ; $a6 len(
>018609	fd 94					.word Unary_Hex            & $FFFF ; $a7 hex$(
>01860b	79 86					.word NotImplemented       & $FFFF ; $a8 sin(
>01860d	79 86					.word NotImplemented       & $FFFF ; $a9 cos(
>01860f	79 86					.word NotImplemented       & $FFFF ; $aa tan(
>018611	79 86					.word NotImplemented       & $FFFF ; $ab atn(
>018613	79 86					.word NotImplemented       & $FFFF ; $ac exp(
>018615	79 86					.word NotImplemented       & $FFFF ; $ad log(
>018617	79 86					.word NotImplemented       & $FFFF ; $ae sqr(
>018619	53 95					.word Unary_Dec            & $FFFF ; $af dec(
>01861b	0e 93					.word Unary_Deek           & $FFFF ; $b0 deek(
>01861d	12 93					.word Unary_Leek           & $FFFF ; $b1 leek(
>01861f	3e 93					.word Unary_Mod            & $FFFF ; $b2 mod(
>018621	aa 92					.word Unary_Sgn            & $FFFF ; $b3 sgn(
>018623	b0 95					.word Unary_Chr            & $FFFF ; $b4 chr$(
>018625	79 86					.word NotImplemented       & $FFFF ; $b5 pos(
>018627	79 86					.word NotImplemented       & $FFFF ; $b6 tab(
>018629	79 86					.word NotImplemented       & $FFFF ; $b7 $
>01862b	79 86					.word NotImplemented       & $FFFF ; $b8 $(
>01862d	79 86					.word NotImplemented       & $FFFF ; $b9 #
>01862f	79 86					.word NotImplemented       & $FFFF ; $ba #(
>018631	79 86					.word NotImplemented       & $FFFF ; $bb %
>018633	79 86					.word NotImplemented       & $FFFF ; $bc %(
>018635	79 86					.word NotImplemented       & $FFFF ; $bd (
>018637	79 86					.word NotImplemented       & $FFFF ; $be )
>018639	79 86					.word NotImplemented       & $FFFF ; $bf ,
>01863b	71 89					.word Command_COLON        & $FFFF ; $c0 :
>01863d	79 86					.word NotImplemented       & $FFFF ; $c1 ;
>01863f	79 86					.word NotImplemented       & $FFFF ; $c2 def
>018641	5b 8e					.word Command_CLR          & $FFFF ; $c3 clr
>018643	6f 8e					.word Command_STOP         & $FFFF ; $c4 stop
>018645	79 86					.word NotImplemented       & $FFFF ; $c5 data
>018647	79 86					.word NotImplemented       & $FFFF ; $c6 read
>018649	1d 88					.word Command_DIM          & $FFFF ; $c7 dim
>01864b	79 86					.word NotImplemented       & $FFFF ; $c8 to
>01864d	79 86					.word NotImplemented       & $FFFF ; $c9 step
>01864f	d7 8d					.word Command_GOSUB        & $FFFF ; $ca gosub
>018651	e5 8d					.word Command_RETURN       & $FFFF ; $cb return
>018653	d1 8d					.word Command_GOTO         & $FFFF ; $cc goto
>018655	da 8a					.word Command_END          & $FFFF ; $cd end
>018657	79 86					.word NotImplemented       & $FFFF ; $ce input
>018659	9f 8a					.word Command_LET          & $FFFF ; $cf let
>01865b	41 8b					.word Command_LIST         & $FFFF ; $d0 list
>01865d	7a 8d					.word Command_NEW          & $FFFF ; $d1 new
>01865f	96 8d					.word Command_OLD          & $FFFF ; $d2 old
>018661	79 86					.word NotImplemented       & $FFFF ; $d3 on
>018663	79 86					.word NotImplemented       & $FFFF ; $d4 restore
>018665	49 8d					.word Command_POKE         & $FFFF ; $d5 poke
>018667	c2 8c					.word Command_PRINT        & $FFFF ; $d6 print
>018669	e3 88					.word Command_RUN          & $FFFF ; $d7 run
>01866b	a5 88					.word Command_WAIT         & $FFFF ; $d8 wait
>01866d	c0 8a					.word Command_SYS          & $FFFF ; $d9 sys
>01866f	4d 8d					.word Command_DOKE         & $FFFF ; $da doke
>018671	51 8d					.word Command_LOKE         & $FFFF ; $db loke
>018673	31 8d					.word Command_ASSERT       & $FFFF ; $dc assert
>018675	79 86					.word NotImplemented       & $FFFF ; $dd get
>018677	35 8b					.word Command_ELSE         & $FFFF ; $de else
.018679					NotImplemented:
.018679	20 57 85	jsr $018557			jsr ERR_Handler
>01867c	4e 6f 74 20 69 6d 70 6c			.text "Not implemented",0
>018684	65 6d 65 6e 74 65 64 00
.01868c					BinaryPrecedence:
>01868c	01					.byte 1    ; $80 and
>01868d	01					.byte 1    ; $81 or
>01868e	01					.byte 1    ; $82 xor
>01868f	01					.byte 1    ; $83 eor
>018690	02					.byte 2    ; $84 =
>018691	02					.byte 2    ; $85 <>
>018692	02					.byte 2    ; $86 <
>018693	02					.byte 2    ; $87 <=
>018694	02					.byte 2    ; $88 >
>018695	02					.byte 2    ; $89 >=
>018696	03					.byte 3    ; $8a +
>018697	03					.byte 3    ; $8b -
>018698	04					.byte 4    ; $8c *
>018699	04					.byte 4    ; $8d /
>01869a	05					.byte 5    ; $8e ^
.01869b					KeywordText:
>01869b	41 4e c4				.byte $41,$4e,$c4                      ; $80 and
>01869e	4f d2					.byte $4f,$d2                          ; $81 or
>0186a0	58 4f d2				.byte $58,$4f,$d2                      ; $82 xor
>0186a3	45 4f d2				.byte $45,$4f,$d2                      ; $83 eor
>0186a6	bd					.byte $bd                              ; $84 =
>0186a7	3c be					.byte $3c,$be                          ; $85 <>
>0186a9	bc					.byte $bc                              ; $86 <
>0186aa	3c bd					.byte $3c,$bd                          ; $87 <=
>0186ac	be					.byte $be                              ; $88 >
>0186ad	3e bd					.byte $3e,$bd                          ; $89 >=
>0186af	ab					.byte $ab                              ; $8a +
>0186b0	ad					.byte $ad                              ; $8b -
>0186b1	aa					.byte $aa                              ; $8c *
>0186b2	af					.byte $af                              ; $8d /
>0186b3	de					.byte $de                              ; $8e ^
>0186b4	49 c6					.byte $49,$c6                          ; $8f if
>0186b6	57 48 49 4c c5				.byte $57,$48,$49,$4c,$c5              ; $90 while
>0186bb	52 45 50 45 41 d4			.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
>0186c1	46 4f d2				.byte $46,$4f,$d2                      ; $92 for
>0186c4	54 48 45 ce				.byte $54,$48,$45,$ce                  ; $93 then
>0186c8	45 4e 44 49 c6				.byte $45,$4e,$44,$49,$c6              ; $94 endif
>0186cd	57 45 4e c4				.byte $57,$45,$4e,$c4                  ; $95 wend
>0186d1	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc              ; $96 until
>0186d6	4e 45 58 d4				.byte $4e,$45,$58,$d4                  ; $97 next
>0186da	4e 4f d4				.byte $4e,$4f,$d4                      ; $98 not
>0186dd	46 4e a8				.byte $46,$4e,$a8                      ; $99 fn(
>0186e0	41 42 53 a8				.byte $41,$42,$53,$a8                  ; $9a abs(
>0186e4	41 53 43 a8				.byte $41,$53,$43,$a8                  ; $9b asc(
>0186e8	49 4e 54 a8				.byte $49,$4e,$54,$a8                  ; $9c int(
>0186ec	50 45 45 4b a8				.byte $50,$45,$45,$4b,$a8              ; $9d peek(
>0186f1	52 4e 44 a8				.byte $52,$4e,$44,$a8                  ; $9e rnd(
>0186f5	55 53 52 a8				.byte $55,$53,$52,$a8                  ; $9f usr(
>0186f9	4c 45 46 54 24 a8			.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
>0186ff	52 49 47 48 54 24 a8			.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
>018706	4d 49 44 24 a8				.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
>01870b	53 50 43 a8				.byte $53,$50,$43,$a8                  ; $a3 spc(
>01870f	53 54 52 24 a8				.byte $53,$54,$52,$24,$a8              ; $a4 str$(
>018714	56 41 4c a8				.byte $56,$41,$4c,$a8                  ; $a5 val(
>018718	4c 45 4e a8				.byte $4c,$45,$4e,$a8                  ; $a6 len(
>01871c	48 45 58 24 a8				.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
>018721	53 49 4e a8				.byte $53,$49,$4e,$a8                  ; $a8 sin(
>018725	43 4f 53 a8				.byte $43,$4f,$53,$a8                  ; $a9 cos(
>018729	54 41 4e a8				.byte $54,$41,$4e,$a8                  ; $aa tan(
>01872d	41 54 4e a8				.byte $41,$54,$4e,$a8                  ; $ab atn(
>018731	45 58 50 a8				.byte $45,$58,$50,$a8                  ; $ac exp(
>018735	4c 4f 47 a8				.byte $4c,$4f,$47,$a8                  ; $ad log(
>018739	53 51 52 a8				.byte $53,$51,$52,$a8                  ; $ae sqr(
>01873d	44 45 43 a8				.byte $44,$45,$43,$a8                  ; $af dec(
>018741	44 45 45 4b a8				.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
>018746	4c 45 45 4b a8				.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
>01874b	4d 4f 44 a8				.byte $4d,$4f,$44,$a8                  ; $b2 mod(
>01874f	53 47 4e a8				.byte $53,$47,$4e,$a8                  ; $b3 sgn(
>018753	43 48 52 24 a8				.byte $43,$48,$52,$24,$a8              ; $b4 chr$(
>018758	50 4f 53 a8				.byte $50,$4f,$53,$a8                  ; $b5 pos(
>01875c	54 41 42 a8				.byte $54,$41,$42,$a8                  ; $b6 tab(
>018760	a4					.byte $a4                              ; $b7 $
>018761	24 a8					.byte $24,$a8                          ; $b8 $(
>018763	a3					.byte $a3                              ; $b9 #
>018764	23 a8					.byte $23,$a8                          ; $ba #(
>018766	a5					.byte $a5                              ; $bb %
>018767	25 a8					.byte $25,$a8                          ; $bc %(
>018769	a8					.byte $a8                              ; $bd (
>01876a	a9					.byte $a9                              ; $be )
>01876b	ac					.byte $ac                              ; $bf ,
>01876c	ba					.byte $ba                              ; $c0 :
>01876d	bb					.byte $bb                              ; $c1 ;
>01876e	44 45 c6				.byte $44,$45,$c6                      ; $c2 def
>018771	43 4c d2				.byte $43,$4c,$d2                      ; $c3 clr
>018774	53 54 4f d0				.byte $53,$54,$4f,$d0                  ; $c4 stop
>018778	44 41 54 c1				.byte $44,$41,$54,$c1                  ; $c5 data
>01877c	52 45 41 c4				.byte $52,$45,$41,$c4                  ; $c6 read
>018780	44 49 cd				.byte $44,$49,$cd                      ; $c7 dim
>018783	54 cf					.byte $54,$cf                          ; $c8 to
>018785	53 54 45 d0				.byte $53,$54,$45,$d0                  ; $c9 step
>018789	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2              ; $ca gosub
>01878e	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce          ; $cb return
>018794	47 4f 54 cf				.byte $47,$4f,$54,$cf                  ; $cc goto
>018798	45 4e c4				.byte $45,$4e,$c4                      ; $cd end
>01879b	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4              ; $ce input
>0187a0	4c 45 d4				.byte $4c,$45,$d4                      ; $cf let
>0187a3	4c 49 53 d4				.byte $4c,$49,$53,$d4                  ; $d0 list
>0187a7	4e 45 d7				.byte $4e,$45,$d7                      ; $d1 new
>0187aa	4f 4c c4				.byte $4f,$4c,$c4                      ; $d2 old
>0187ad	4f ce					.byte $4f,$ce                          ; $d3 on
>0187af	52 45 53 54 4f 52 c5			.byte $52,$45,$53,$54,$4f,$52,$c5      ; $d4 restore
>0187b6	50 4f 4b c5				.byte $50,$4f,$4b,$c5                  ; $d5 poke
>0187ba	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4              ; $d6 print
>0187bf	52 55 ce				.byte $52,$55,$ce                      ; $d7 run
>0187c2	57 41 49 d4				.byte $57,$41,$49,$d4                  ; $d8 wait
>0187c6	53 59 d3				.byte $53,$59,$d3                      ; $d9 sys
>0187c9	44 4f 4b c5				.byte $44,$4f,$4b,$c5                  ; $da doke
>0187cd	4c 4f 4b c5				.byte $4c,$4f,$4b,$c5                  ; $db loke
>0187d1	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4          ; $dc assert
>0187d7	47 45 d4				.byte $47,$45,$d4                      ; $dd get
>0187da	45 4c 53 c5				.byte $45,$4c,$53,$c5                  ; $de else
>0187de	00					.byte $00
=$80					token_and = $80
=$81					token_or = $81
=$82					token_xor = $82
=$83					token_eor = $83
=$84					token_equal = $84
=$85					token_lessgreater = $85
=$86					token_less = $86
=$87					token_lessequal = $87
=$88					token_greater = $88
=$89					token_greaterequal = $89
=$8a					token_plus = $8a
=$8b					token_minus = $8b
=$8c					token_star = $8c
=$8d					token_slash = $8d
=$8e					token_hat = $8e
=$8f					token_if = $8f
=$90					token_while = $90
=$91					token_repeat = $91
=$92					token_for = $92
=$93					token_then = $93
=$94					token_endif = $94
=$95					token_wend = $95
=$96					token_until = $96
=$97					token_next = $97
=$98					token_not = $98
=$99					token_fn = $99
=$9a					token_abs = $9a
=$9b					token_asc = $9b
=$9c					token_int = $9c
=$9d					token_peek = $9d
=$9e					token_rnd = $9e
=$9f					token_usr = $9f
=$a0					token_leftdollarlparen = $a0
=$a1					token_rightdollarlparen = $a1
=$a2					token_middollarlparen = $a2
=$a3					token_spc = $a3
=$a4					token_strdollarlparen = $a4
=$a5					token_val = $a5
=$a6					token_len = $a6
=$a7					token_hexdollarlparen = $a7
=$a8					token_sin = $a8
=$a9					token_cos = $a9
=$aa					token_tan = $aa
=$ab					token_atn = $ab
=$ac					token_exp = $ac
=$ad					token_log = $ad
=$ae					token_sqr = $ae
=$af					token_dec = $af
=$b0					token_deek = $b0
=$b1					token_leek = $b1
=$b2					token_mod = $b2
=$b3					token_sgn = $b3
=$b4					token_chrdollarlparen = $b4
=$b5					token_pos = $b5
=$b6					token_tab = $b6
=$b7					token_dollar = $b7
=$b8					token_dollarlparen = $b8
=$b9					token_hash = $b9
=$ba					token_hashlparen = $ba
=$bb					token_percent = $bb
=$bc					token_percentlparen = $bc
=$bd					token_lparen = $bd
=$be					token_rparen = $be
=$bf					token_comma = $bf
=$c0					token_colon = $c0
=$c1					token_semicolon = $c1
=$c2					token_def = $c2
=$c3					token_clr = $c3
=$c4					token_stop = $c4
=$c5					token_data = $c5
=$c6					token_read = $c6
=$c7					token_dim = $c7
=$c8					token_to = $c8
=$c9					token_step = $c9
=$ca					token_gosub = $ca
=$cb					token_return = $cb
=$cc					token_goto = $cc
=$cd					token_end = $cd
=$ce					token_input = $ce
=$cf					token_let = $cf
=$d0					token_list = $d0
=$d1					token_new = $d1
=$d2					token_old = $d2
=$d3					token_on = $d3
=$d4					token_restore = $d4
=$d5					token_poke = $d5
=$d6					token_print = $d6
=$d7					token_run = $d7
=$d8					token_wait = $d8
=$d9					token_sys = $d9
=$da					token_doke = $da
=$db					token_loke = $db
=$dc					token_assert = $dc
=$dd					token_get = $dd
=$de					token_else = $de

;******  Return to file: modules/basic/core.asm

.0187df					BASIC_Start:
.0187df	20 a8 81	jsr $0181a8			jsr 	IF_Reset 					; set up and clear screen.
.0187e2	20 00 80	jsr $018000			jsr 	IFT_ClearScreen
.0187e5	a9 5c		lda #$5c			lda 	#$5C 						; JMP Long opcode
.0187e7	8d 10 03	sta $0310			sta 	LocalVector
.0187ea	8d 0c 03	sta $030c			sta 	UserVector
.0187ed	a9 81		lda #$81			lda 	#USRDefault & $FF 			; reset USR vector
.0187ef	8d 0d 03	sta $030d			sta 	UserVector+1
.0187f2	a9 93		lda #$93			lda 	#(USRDefault >> 8) & $FF
.0187f4	8d 0e 03	sta $030e			sta 	UserVector+2
.0187f7	a9 01		lda #$01			lda 	#(USRDefault >> 16) & $FF
.0187f9	8d 0f 03	sta $030f			sta 	UserVector+3
.0187fc	20 28 96	jsr $019628			jsr 	UpdateProgramEnd 			; update the program end.
.0187ff	20 5b 8e	jsr $018e5b			jsr 	ResetRunStatus 				; clear everything (CLR command)
.018802	c2 30		rep #$30			rep 	#$30
.018804	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018807	1b		tcs				tcs
.018808	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.01880b	e2 30		sep #$30			sep 	#$30
.01880d	4c e3 88	jmp $0188e3			jmp 	COMMAND_Run
.018810					WarmStart:
.018810	c2 30		rep #$30			rep 	#$30
.018812	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018815	1b		tcs				tcs
.018816	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.018819	e2 30		sep #$30			sep 	#$30
.01881b	80 f3		bra $018810			bra 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/dim.asm

.01881d					Command_DIM:
.01881d	98		tya				tya
.01881e	48		pha				pha 								; push on stack.
.01881f	20 90 97	jsr $019790			jsr 	VariableExtract 			; get the identifier
.018822	ad 95 03	lda $0395			lda 	Var_Type 					; check it is an array
.018825	29 01		and #$01			and 	#1
.018827	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.018829	d0 6c		bne $018897			bne 	_CDIError
.01882b	a9 00		lda #$00			lda 	#0 							; reset the DIM index. The dimensions are
.01882d	8d b9 03	sta $03b9			sta 	UsrArrayIdx 				; built up here and copied in case we autodim
.018830					_CDIGetDimension:
.018830	ad b9 03	lda $03b9			lda 	UsrArrayIdx 				; done too many ?
.018833	c9 06		cmp #$06			cmp 	#ArrayMaxDim*2
.018835	f0 60		beq $018897			beq 	_CDIError
.018837	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; evaluate an index size
.01883a	a5 81		lda $81				lda 	XS_Mantissa+1 				; check in range 0-7FFF
.01883c	29 80		and #$80			and 	#$80
.01883e	05 82		ora $82				ora 	XS_Mantissa+2
.018840	05 83		ora $83				ora 	XS_Mantissa+3
.018842	d0 53		bne $018897			bne 	_CDIError
.018844	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy into the array table.
.018847	18		clc				clc 								; add 1 - max index => size.
.018848	a5 80		lda $80				lda 	XS_Mantissa+0
.01884a	69 01		adc #$01			adc 	#1
.01884c	9d b1 03	sta $03b1,x			sta 	UsrArrayDef+0,x
.01884f	a5 81		lda $81				lda 	XS_Mantissa+1
.018851	69 00		adc #$00			adc 	#0
.018853	9d b2 03	sta $03b2,x			sta 	UsrArrayDef+1,x
.018856	30 3f		bmi $018897			bmi 	_CDIError 					; could be dim a(32767)
.018858	e8		inx				inx 								; bump index.
.018859	e8		inx				inx
.01885a	8e b9 03	stx $03b9			stx 	UsrArrayIdx
.01885d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01885f	c8		iny				iny
.018860	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another dimension
.018862	f0 cc		beq $018830			beq 	_CDIGetDimension
.018864	88		dey				dey
.018865	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; closing ) present ?
.018868	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy USR array to default
.01886b	a9 ff		lda #$ff			lda 	#$FF 						; put end marker in ArrayDef
.01886d	9d aa 03	sta $03aa,x			sta 	ArrayDef+1,x
.018870					_CDICopy:
.018870	bd b1 03	lda $03b1,x			lda 	UsrArrayDef,x
.018873	9d a9 03	sta $03a9,x			sta 	ArrayDef,x
.018876	ca		dex				dex
.018877	10 f7		bpl $018870			bpl 	_CDICopy
.018879	68		pla				pla									; position of array identifier
.01887a	85 10		sta $10				sta 	zTemp1
.01887c	98		tya				tya
.01887d	48		pha				pha
.01887e	a5 10		lda $10				lda 	zTemp1 						; point to identifier
.018880	a8		tay				tay
.018881	20 90 97	jsr $019790			jsr 	VariableExtract 			; get the identifier
.018884	20 29 9a	jsr $019a29			jsr 	VariableLocate 				; check if it exists already.
.018887	b0 0e		bcs $018897			bcs 	_CDIError
.018889	20 1c 98	jsr $01981c			jsr 	VariableCreate 				; create it using the current ArrayDef
.01888c	68		pla				pla 								; restore code position
.01888d	a8		tay				tay
.01888e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018890	c8		iny				iny
.018891	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another DIM
.018893	f0 88		beq $01881d			beq 	Command_DIM
.018895	88		dey				dey
.018896	60		rts				rts
.018897					_CDIError:
.018897	20 57 85	jsr $018557			jsr ERR_Handler
>01889a	42 61 64 20 44 49 4d 00			.text "Bad DIM",0
.0188a2					_CDISyntax:
.0188a2	4c 28 85	jmp $018528			jmp 	SyntaxError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/wait.asm

.0188a5					Command_WAIT:
.0188a5	20 5c 90	jsr $01905c			jsr		EvaluateInteger 			; address
.0188a8	a2 06		ldx #$06			ldx 	#XS_Size 					; and mask.
.0188aa	20 8c 96	jsr $01968c			jsr 	CheckNextComma
.0188ad	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX
.0188b0	a9 00		lda #$00			lda 	#0							; set default xor.
.0188b2	85 8c		sta $8c				sta 	XS_Mantissa+XS_Size*2
.0188b4	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188b6	c9 bf		cmp #$bf			cmp 	#token_Comma 				; no use the default
.0188b8	d0 06		bne $0188c0			bne 	_CWAXorDefault
.0188ba	c8		iny				iny
.0188bb	a2 0c		ldx #$0c			ldx 	#XS_Size*2
.0188bd	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX
.0188c0					_CWAXorDefault:
.0188c0	a5 80		lda $80				lda 	XS_Mantissa 				; copy 24 bits of mantissa to ZLTemp1
.0188c2	85 1a		sta $1a				sta 	zLTemp1
.0188c4	a5 81		lda $81				lda 	XS_Mantissa+1
.0188c6	85 1b		sta $1b				sta 	zLTemp1+1
.0188c8	a5 82		lda $82				lda 	XS_Mantissa+2
.0188ca	85 1c		sta $1c				sta 	zLTemp1+2
.0188cc					_CWAWaitLoop:
.0188cc	20 25 85	jsr $018525			jsr 	CheckBreak 					; exit on break.
.0188cf	c9 00		cmp #$00			cmp 	#0
.0188d1	d0 0f		bne $0188e2			bne 	_CWAWaitExit
.0188d3	a9 01		lda #$01			lda 	#1							; read 1 byte to mantissa/0
.0188d5	a2 00		ldx #$00			ldx 	#0
.0188d7	5a		phy				phy 								; this is the same routine as PEEK.
.0188d8	20 06 96	jsr $019606			jsr 	MemRead
.0188db	7a		ply				ply
.0188dc	25 86		and $86				and 	XS_Mantissa+XS_Size 		; process it
.0188de	45 8c		eor $8c				eor 	XS_Mantissa+XS_Size*2
.0188e0	f0 ea		beq $0188cc			beq 	_CWAWaitLoop
.0188e2					_CWAWaitExit:
.0188e2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/run.asm

.0188e3					Command_RUN:
.0188e3	20 5b 8e	jsr $018e5b			jsr 	ResetRunStatus 				; clear, reset stacks etc.
.0188e6	a9 00		lda #$00			lda 	#BasicProgram & $FF
.0188e8	85 16		sta $16				sta 	zCodePtr+0
.0188ea	a9 10		lda #$10			lda 	#BasicProgram >> 8
.0188ec	85 17		sta $17				sta 	zCodePtr+1
.0188ee	a9 00		lda #$00			lda 	#0
.0188f0	85 18		sta $18				sta 	zCodePtr+2
.0188f2	85 19		sta $19				sta 	zCodePtr+3
.0188f4	a0 03		ldy #$03			ldy 	#3
.0188f6					RUN_NewLine:
.0188f6	a0 00		ldy #$00			ldy 	#0
.0188f8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188fa	c8		iny				iny
.0188fb	c8		iny				iny
.0188fc	c8		iny				iny
.0188fd	c9 00		cmp #$00			cmp 	#0 							; if the offset is zero then END.
.0188ff	d0 16		bne $018917			bne 	RUN_NextCommand
.018901	4c da 8a	jmp $018ada			jmp 	Command_END 				; go do the command code.
.018904					RUN_Skip:
.018904	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018906	c8		iny				iny 								; skip
.018907	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018909	90 0c		bcc $018917			bcc 	_SEDone 					; so just skip over it.
.01890b	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.01890d	90 07		bcc $018916			bcc 	_SEDouble
.01890f	98		tya				tya 								; this is Y + 1
.018910	18		clc				clc
.018911	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018913	a8		tay				tay 								; back in Y.
.018914	88		dey				dey 								; fix up, one for the +1, one for the iny
.018915	88		dey				dey
.018916					_SEDouble:
.018916	c8		iny				iny
.018917					_SEDone:
.018917					RUN_NextCommand:
.018917	ad a8 03	lda $03a8			lda 	BreakCount 					; break counter
.01891a	69 10		adc #$10			adc 	#16 						; one time in 16
.01891c	8d a8 03	sta $03a8			sta 	BreakCount
.01891f	90 0a		bcc $01892b			bcc 	RUN_NoCheckBreak
.018921	20 25 85	jsr $018525			jsr 	CheckBreak 					; check for break
.018924	c9 00		cmp #$00			cmp 	#0
.018926	f0 03		beq $01892b			beq 	RUN_NoCheckBreak
.018928	4c 6f 8e	jmp $018e6f			jmp 	Command_STOP 				; stop on BREAK.
.01892b					RUN_NoCheckBreak:
.01892b	a9 00		lda #$00			lda 	#0 							; this resets temporary string allocation.
.01892d	85 21		sta $21				sta 	zTempStr+1 					; (initialised when first called)
.01892f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018931	c9 c0		cmp #$c0			cmp 	#token_Colon 				; skip over colons
.018933	f0 cf		beq $018904			beq 	RUN_Skip
.018935	c9 00		cmp #$00			cmp 	#0 							; if non-zero execute whatever
.018937	d0 0f		bne $018948			bne 	RUN_Execute
.018939					RUN_NextLine:
.018939	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01893b	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.01893d	18		clc				clc
.01893e	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018940	85 16		sta $16				sta 	zCodePtr
.018942	90 02		bcc $018946			bcc 	_SNLNoCarry
.018944	e6 17		inc $17				inc 	zCodePtr+1
.018946					_SNLNoCarry:
.018946	80 ae		bra $0188f6			bra 	RUN_NewLine 				; go do the new line code
.018948					RUN_Execute:
.018948	c9 f8		cmp #$f8			cmp 	#$F8 						; handle shifts, REM etc.
.01894a	b0 1e		bcs $01896a			bcs 	RUN_Extension
.01894c	c8		iny				iny
.01894d	0a		asl a				asl 	a 							; double the character read.
.01894e	90 14		bcc $018964			bcc 	RUN_Default 				; if carry clear was $00-$7F, so try LET.
.018950	aa		tax				tax 								; ready to look up.
.018951	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into LocalVector
.018955	8d 11 03	sta $0311			sta 	LocalVector+1
.018958	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.01895c	8d 12 03	sta $0312			sta 	LocalVector+2
.01895f	20 a9 8f	jsr $018fa9			jsr 	EVCallLocalVector 			; execute the appropriate code.
.018962	80 b3		bra $018917			bra 	RUN_NextCommand 			; do the next command.
.018964					RUN_Default:
.018964	88		dey				dey
.018965	20 9f 8a	jsr $018a9f			jsr 	Command_LET 				; and try LET.
.018968	80 ad		bra $018917			bra 	RUN_NextCommand
.01896a					RUN_Extension:
.01896a	c9 ff		cmp #$ff			cmp 	#$FF 						; if $FF (REM)
.01896c	f0 96		beq $018904			beq 	RUN_Skip 					; skip over it.
.01896e	4c 28 85	jmp $018528			jmp 	SyntaxError
.018971					Command_COLON:
.018971	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/for.asm

.018972					Command_FOR:
.018972	20 9f 8a	jsr $018a9f			jsr 	Command_LET 				; do the A = 99 bit
.018975	a5 24		lda $24				lda 	zVarType 					; obviously has to be integer/real.
.018977	c9 b7		cmp #$b7			cmp 	#token_Dollar
.018979	f0 71		beq $0189ec			beq 	_CFOError
.01897b	48		pha				pha 								; save the variable type.
.01897c	5a		phy				phy 								; save type/variable address.
.01897d	a0 01		ldy #$01			ldy 	#1							; type at + 1
.01897f	91 26		sta ($26),y			sta 	(zBasicSP),y
.018981	c8		iny				iny
.018982	a5 22		lda $22				lda 	zVarDataPtr 				; data low at +2
.018984	91 26		sta ($26),y			sta 	(zBasicSP),y
.018986	c8		iny				iny
.018987	a5 23		lda $23				lda 	zVarDataPtr+1 				; data high at +3
.018989	91 26		sta ($26),y			sta 	(zBasicSP),y
.01898b	7a		ply				ply
.01898c	a9 43		lda #$43			lda 	#(SMark_For << 4) + 3
.01898e	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on the stack with FOR marker.
.018991	a9 c8		lda #$c8			lda 	#token_TO
.018993	20 6d 96	jsr $01966d			jsr 	CheckNextToken
.018996	a2 00		ldx #$00			ldx 	#0 							; put in Mantissa, bottom
.018998	20 c6 8e	jsr $018ec6			jsr 	EvaluateExpression
.01899b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01899d	a2 06		ldx #$06			ldx 	#XS_Size 					; X to second level
.01899f	c9 c9		cmp #$c9			cmp 	#token_STEP
.0189a1	d0 06		bne $0189a9			bne 	_CFOStep1
.0189a3	c8		iny				iny
.0189a4	20 c8 8e	jsr $018ec8			jsr 	EvaluateExpressionX 		; get STEP value.
.0189a7	80 0e		bra $0189b7			bra 	_CFOHaveStep
.0189a9					_CFOStep1:
.0189a9	a9 00		lda #$00			lda 	#0							; set step to integer 1.
.0189ab	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0189ad	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0189af	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0189b1	a9 01		lda #$01			lda 	#1
.0189b3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0189b5	95 85		sta $85,x			sta 	XS_Type,x
.0189b7					_CFOHaveStep:
.0189b7	68		pla				pla 								; restore variable type
.0189b8	a2 00		ldx #$00			ldx 	#0
.0189ba	c9 bb		cmp #$bb			cmp 	#token_Percent 				; do conversion to type
.0189bc	f0 0a		beq $0189c8			beq 	_CFOInteger
.0189be	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat
.0189c1	a2 06		ldx #$06			ldx 	#6
.0189c3	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat
.0189c6	80 08		bra $0189d0			bra 	_CFOEndConv
.0189c8					_CFOInteger:
.0189c8	20 43 a0	jsr $01a043			jsr 	FPUToInteger
.0189cb	a2 06		ldx #$06			ldx 	#6
.0189cd	20 43 a0	jsr $01a043			jsr 	FPUToInteger
.0189d0					_CFOEndConv:
.0189d0	20 e6 84	jsr $0184e6			jsr 	StackSavePosition 			; save the loop position at 1-5
.0189d3	a9 45		lda #$45			lda 	#(SMark_For << 4)+SourcePosSize
.0189d5	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push the loop address frame.
.0189d8	5a		phy				phy
.0189d9	a0 00		ldy #$00			ldy 	#0
.0189db					_CFOCopy:
.0189db	b9 80 00	lda $0080,y			lda 	XS_Mantissa+0,y
.0189de	c8		iny				iny
.0189df	91 26		sta ($26),y			sta 	(zBasicSP),y
.0189e1	c0 0c		cpy #$0c			cpy 	#XS_Size*2
.0189e3	d0 f6		bne $0189db			bne 	_CFOCopy
.0189e5	7a		ply				ply
.0189e6	a9 4c		lda #$4c			lda 	#(SMark_For << 4)+(XS_Size*2)
.0189e8	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.0189eb	60		rts				rts
.0189ec					_CFOError:
.0189ec	4c 38 85	jmp $018538			jmp 	TypeError 					; wrong type.
.0189ef					Command_NEXT:
.0189ef	ea		nop				nop
.0189f0	a9 00		lda #$00			lda 	#0 							; set variable data pointer+1 to zero
.0189f2	85 23		sta $23				sta 	zVarDataPtr+1 				; this means we don't check
.0189f4	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0189f6	c9 00		cmp #$00			cmp 	#0 							; EOL
.0189f8	f0 07		beq $018a01			beq 	_CNextNoVariable
.0189fa	c9 40		cmp #$40			cmp 	#$40
.0189fc	b0 03		bcs $018a01			bcs 	_CNextNoVariable
.0189fe	20 25 97	jsr $019725			jsr 	VariableFind
.018a01					_CNextNoVariable:
.018a01	a9 40		lda #$40			lda 	#(SMark_For << 4) 			; pop loop address frame
.018a03	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a06	a9 40		lda #$40			lda 	#(SMark_For << 4) 			; pop STEP/TARGET frame.
.018a08	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a0b	a9 40		lda #$40			lda 	#(Smark_For << 4) 			; pop variable address frame.
.018a0d	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a10	a5 23		lda $23				lda 	zVarDataPtr+1 				; if zero, then no variable provided
.018a12	f0 11		beq $018a25			beq 	_CNextGetTarget 			; e.g. just NEXT not NEXT x
.018a14	5a		phy				phy 								; check addresses match.
.018a15	a0 02		ldy #$02			ldy 	#2
.018a17	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a19	c5 22		cmp $22				cmp 	zVarDataPtr
.018a1b	d0 6b		bne $018a88			bne 	_CNextWrong
.018a1d	c8		iny				iny
.018a1e	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a20	c5 23		cmp $23				cmp 	zVarDataPtr+1
.018a22	d0 64		bne $018a88			bne 	_CNextWrong
.018a24	7a		ply				ply
.018a25					_CNextGetTarget:
.018a25	5a		phy				phy
.018a26	a0 01		ldy #$01			ldy 	#1 							; restore variable type and data.
.018a28	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a2a	85 24		sta $24				sta 	zVarType
.018a2c	c8		iny				iny
.018a2d	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a2f	85 22		sta $22				sta 	zVarDataPtr
.018a31	c8		iny				iny
.018a32	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a34	85 23		sta $23				sta 	zVarDataPtr+1
.018a36	a2 0c		ldx #$0c			ldx 	#12
.018a38	20 6d 9a	jsr $019a6d			jsr 	VariableGet 				; get that variable value into expr[2]
.018a3b	a2 00		ldx #$00			ldx 	#0 							; copy stacked Target/Step into expr[0] and [1]
.018a3d	a0 0b		ldy #$0b			ldy 	#11
.018a3f					_CNXCopy:
.018a3f	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a41	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018a43	e8		inx				inx
.018a44	c8		iny				iny
.018a45	e0 0c		cpx #$0c			cpx 	#XS_Size*2
.018a47	d0 f6		bne $018a3f			bne 	_CNXCopy
.018a49	7a		ply				ply
.018a4a	a2 06		ldx #$06			ldx 	#6 							; point at expr[1] s
.018a4c	20 ce 92	jsr $0192ce			jsr 	GetSignCurrent
.018a4f	8d a7 03	sta $03a7			sta 	SignNext 					; save in temporary.
.018a52	a2 06		ldx #$06			ldx 	#6 							; add them, however
.018a54	20 ad 91	jsr $0191ad			jsr 	BinaryOp_Add
.018a57	20 be 9a	jsr $019abe			jsr 	VariableSet					; and write variable back.
.018a5a	a2 00		ldx #$00			ldx 	#0
.018a5c	20 31 91	jsr $019131			jsr 	CompareValues
.018a5f	09 00		ora #$00			ora 	#0
.018a61	f0 05		beq $018a68			beq 	_CNXAgain 					; if true, then do it again.
.018a63	cd a7 03	cmp $03a7			cmp 	SignNext 					; if sign different, then loop has finished.
.018a66	d0 13		bne $018a7b			bne 	_CNXLoopDone
.018a68					_CNXAgain:
.018a68	a9 43		lda #$43			lda 	#(SMark_For << 4) + 3		; re-stack variable address
.018a6a	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018a6d	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; get restore position back, e.g. loop round.
.018a70	a9 45		lda #$45			lda 	#(SMark_For << 4)+SourcePosSize
.018a72	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018a75	a9 4c		lda #$4c			lda 	#(SMark_For << 4)+(XS_Size*2)
.018a77	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018a7a					_CNXExit:
.018a7a	60		rts				rts
.018a7b					_CNXLoopDone:
.018a7b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018a7d	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma ?
.018a7f	d0 f9		bne $018a7a			bne 	_CNXExit
.018a81	c8		iny				iny
.018a82	20 25 97	jsr $019725			jsr 	VariableFind 				; identify the variable
.018a85	4c 01 8a	jmp $018a01			jmp 	_CNextNoVariable 			; go back with variable pre-found
.018a88					_CNextWrong:
.018a88	20 57 85	jsr $018557			jsr ERR_Handler
>018a8b	57 72 6f 6e 67 20 4e 65			.text "Wrong Next Variable",0
>018a93	78 74 20 56 61 72 69 61 62 6c 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/let.asm

.018a9f					Command_LET:
.018a9f	20 25 97	jsr $019725			jsr 	VariableFind 				; get reference to one variable.
.018aa2	a9 84		lda #$84			lda 	#token_Equal  				; get equals
.018aa4	20 6d 96	jsr $01966d			jsr 	CheckNextToken
.018aa7	a5 22		lda $22				lda 	zVarDataPtr 				; save variable info on stack
.018aa9	48		pha				pha
.018aaa	a5 23		lda $23				lda 	zVarDataPtr+1
.018aac	48		pha				pha
.018aad	a5 24		lda $24				lda 	zVarType
.018aaf	48		pha				pha
.018ab0	20 c6 8e	jsr $018ec6			jsr 	EvaluateExpression 			; evaluate the RHS.
.018ab3	68		pla				pla 								; restore target variable information.
.018ab4	85 24		sta $24				sta 	zVarType
.018ab6	68		pla				pla
.018ab7	85 23		sta $23				sta 	zVarDataPtr+1
.018ab9	68		pla				pla
.018aba	85 22		sta $22				sta 	zVarDataPtr
.018abc	20 be 9a	jsr $019abe			jsr 	VariableSet 				; set the value out.
.018abf	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/sys.asm

.018ac0					Command_SYS:
.018ac0	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; address
.018ac3	a5 80		lda $80				lda 	XS_Mantissa+0				; copy to localvector
.018ac5	8d 10 03	sta $0310			sta 	LocalVector+0 				; only three, can only do 24 bit calls
.018ac8	a5 81		lda $81				lda 	XS_Mantissa+1 				; and that only on 65816
.018aca	8d 11 03	sta $0311			sta 	LocalVector+1
.018acd	a5 82		lda $82				lda 	XS_Mantissa+2
.018acf	8d 12 03	sta $0312			sta 	LocalVector+2
.018ad2	22 d7 8a 01	jsl $018ad7			jsl 	_CSYLocalCall
.018ad6	60		rts				rts
.018ad7					_CSYLocalCall:
.018ad7	dc 10 03	jmp [$0310]			jmp 	[LocalVector]

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/end.asm

.018ada					Command_END:
>018ada	02						.byte 	2
.018adb	4c 10 88	jmp $018810			jmp 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/if.asm

.018ade					Command_IF:
.018ade	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; check success.
.018ae1	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018ae3	05 81		ora $81				ora 	XS_Mantissa+1
.018ae5	05 82		ora $82				ora 	XS_Mantissa+2
.018ae7	05 83		ora $83				ora 	XS_Mantissa+3
.018ae9	aa		tax				tax 								; put into X.
.018aea	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018aec	c9 93		cmp #$93			cmp 	#token_Then 				; then found.
.018aee	d0 2c		bne $018b1c			bne 	_FIFExtended
.018af0	c8		iny				iny
.018af1	e0 00		cpx #$00			cpx 	#0 							; was it successful.
.018af3	f0 0b		beq $018b00			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.018af5	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018af7	29 c0		and #$c0			and 	#$C0 						; is it a number
.018af9	c9 40		cmp #$40			cmp 	#$40
.018afb	d0 1e		bne $018b1b			bne 	_FIFContinue 				; if not, do what ever follows.
.018afd	4c d1 8d	jmp $018dd1			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.018b00					_FIFEndOfLine:
.018b00	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b02	c9 00		cmp #$00			cmp 	#0 							; if zero, end of line, so exit
.018b04	f0 15		beq $018b1b			beq 	_FIFContinue
.018b06	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018b08	c8		iny				iny 								; skip
.018b09	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018b0b	90 0c		bcc $018b19			bcc 	_SEDone 					; so just skip over it.
.018b0d	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018b0f	90 07		bcc $018b18			bcc 	_SEDouble
.018b11	98		tya				tya 								; this is Y + 1
.018b12	18		clc				clc
.018b13	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018b15	a8		tay				tay 								; back in Y.
.018b16	88		dey				dey 								; fix up, one for the +1, one for the iny
.018b17	88		dey				dey
.018b18					_SEDouble:
.018b18	c8		iny				iny
.018b19					_SEDone:
.018b19	80 e5		bra $018b00			bra 	_FIFEndOfLine
.018b1b					_FIFContinue:
.018b1b	60		rts				rts
.018b1c					_FIFExtended:
.018b1c	da		phx				phx 								; save result
.018b1d	a9 30		lda #$30			lda 	#(SMark_If << 4) 			; push marker on the stack, nothing else.
.018b1f	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018b22	68		pla				pla 								; restore result
.018b23	f0 01		beq $018b26			beq 	_FIXSkip 					; if zero then it has failed.
.018b25	60		rts				rts 								; test passed, so continue executing
.018b26					_FIXSkip:
.018b26	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found either ELSE or ENDIF
.018b28	a2 de		ldx #$de			ldx 	#token_else 				; at the same level.
.018b2a	20 02 84	jsr $018402			jsr 	StructureSearchDouble
.018b2d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b2f	c8		iny				iny
.018b30	c9 94		cmp #$94			cmp 	#token_endif 				; if endif, handle endif code.
.018b32	f0 07		beq $018b3b			beq 	Command_ENDIF
.018b34	60		rts				rts
.018b35					Command_ELSE:
.018b35	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found ENDIF
.018b37	20 00 84	jsr $018400			jsr 	StructureSearchSingle 		; then do the ENDIF pop.
.018b3a	c8		iny				iny
.018b3b					Command_ENDIF:
.018b3b	a9 30		lda #$30			lda 	#(SMark_If << 4)
.018b3d	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018b40	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/list.asm

.018b41					Command_LIST:
.018b41	20 5b 8c	jsr $018c5b			jsr 	ListGetRange				; get any parameters
.018b44	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018b46	85 16		sta $16				sta 	zCodePtr+0
.018b48	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018b4a	85 17		sta $17				sta 	zCodePtr+1
.018b4c	a9 00		lda #$00			lda 	#0
.018b4e	85 18		sta $18				sta 	zCodePtr+2
.018b50	85 19		sta $19				sta 	zCodePtr+3
.018b52	a0 03		ldy #$03			ldy 	#3
.018b54					_CILLoop:
.018b54	a0 00		ldy #$00			ldy 	#0
.018b56	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b58	c9 00		cmp #$00			cmp 	#0 							; if zero, end of program
.018b5a	f0 23		beq $018b7f			beq 	_CILExit
.018b5c	20 25 85	jsr $018525			jsr 	CheckBreak 					; check break
.018b5f	c9 00		cmp #$00			cmp 	#0
.018b61	d0 1c		bne $018b7f			bne 	_CILExit
.018b63	20 a2 8c	jsr $018ca2			jsr 	ListCheckRange 				; check current line in range.
.018b66	b0 08		bcs $018b70			bcs		_CILNext
.018b68	a0 00		ldy #$00			ldy 	#0
.018b6a	c8		iny				iny
.018b6b	c8		iny				iny
.018b6c	c8		iny				iny
.018b6d	20 82 8b	jsr $018b82			jsr 	ListLine 					; list one line.
.018b70					_CILNext:
.018b70	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018b72	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018b74	18		clc				clc
.018b75	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018b77	85 16		sta $16				sta 	zCodePtr
.018b79	90 02		bcc $018b7d			bcc 	_SNLNoCarry
.018b7b	e6 17		inc $17				inc 	zCodePtr+1
.018b7d					_SNLNoCarry:
.018b7d	80 d5		bra $018b54			bra 	_CILLoop
.018b7f					_CILExit:
.018b7f	4c 10 88	jmp $018810			jmp 	WarmStart
.018b82					ListLine:
.018b82	a0 00		ldy #$00			ldy 	#0
.018b84	c8		iny				iny
.018b85	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b87	85 80		sta $80				sta 	XS_Mantissa
.018b89	c8		iny				iny
.018b8a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b8c	85 81		sta $81				sta 	XS_Mantissa+1
.018b8e	20 9d 85	jsr $01859d			jsr 	Print16BitInteger 			; print integer.
.018b91	aa		tax				tax 								; print spaces to column 6
.018b92					_LISpace:
.018b92	a9 20		lda #$20			lda 	#" "
.018b94	20 1f 85	jsr $01851f			jsr 	CharPrint
.018b97	e8		inx				inx
.018b98	e0 06		cpx #$06			cpx 	#6
.018b9a	d0 f6		bne $018b92			bne 	_LISpace
.018b9c					_LIDecode:
.018b9c	c8		iny				iny
.018b9d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b9f	c9 00		cmp #$00			cmp 	#0 							; zero, exit.
.018ba1	f0 0f		beq $018bb2			beq 	_LIExit
.018ba3	30 12		bmi $018bb7			bmi 	_LIToken
.018ba5	c9 40		cmp #$40			cmp 	#$40 						; 01-$3F, character.
.018ba7	b0 50		bcs $018bf9			bcs 	_LIInteger
.018ba9	49 20		eor #$20			eor 	#$20 						; make 7 bit
.018bab	69 20		adc #$20			adc 	#$20
.018bad	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC 				; print in LC
.018bb0	80 ea		bra $018b9c			bra 	_LIDecode
.018bb2					_LIExit:
.018bb2	a9 0d		lda #$0d			lda 	#13 						; print new line.
.018bb4	4c 1f 85	jmp $01851f			jmp 	CharPrint
.018bb7					_LIToken:
.018bb7	c9 fc		cmp #$fc			cmp 	#$FC 						; $FC-$FF ?
.018bb9	90 49		bcc $018c04			bcc		_LICommandToken
.018bbb	48		pha				pha 								; save in case end
.018bbc	a2 22		ldx #$22			ldx 	#'"'						; print if $FE quoted string
.018bbe	c9 fe		cmp #$fe			cmp 	#$FE
.018bc0	f0 17		beq $018bd9			beq 	_LIPrint
.018bc2	a2 2e		ldx #$2e			ldx 	#'.'						; print if $FD decimals
.018bc4	c9 fd		cmp #$fd			cmp 	#$FD
.018bc6	f0 11		beq $018bd9			beq 	_LIPrint
.018bc8	a9 52		lda #$52			lda 	#'R'						; must be REM
.018bca	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018bcd	a9 45		lda #$45			lda 	#'E'
.018bcf	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018bd2	a9 4d		lda #$4d			lda 	#'M'
.018bd4	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018bd7	a2 20		ldx #$20			ldx 	#' '
.018bd9					_LIPrint:
.018bd9	8a		txa				txa
.018bda	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018bdd	c8		iny				iny
.018bde	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018be0	aa		tax				tax 								; put in X
.018be1	ca		dex				dex
.018be2					_LILoop:
.018be2	ca		dex				dex 								; exit when count reached zero.
.018be3	f0 08		beq $018bed			beq 	_LIEnd
.018be5	c8		iny				iny
.018be6	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018be8	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018beb	80 f5		bra $018be2			bra 	_LILoop
.018bed	68		pla		_LIEnd:	pla 								; get A back
.018bee	c9 fe		cmp #$fe			cmp 	#$FE 						; if '"' need closing quotes
.018bf0	d0 aa		bne $018b9c			bne 	_LIDecode
.018bf2	a9 22		lda #$22			lda 	#'"'
.018bf4	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018bf7	80 a3		bra $018b9c			bra 	_LIDecode
.018bf9					_LIInteger:
.018bf9	a2 00		ldx #$00			ldx 	#0
.018bfb	20 ce 8f	jsr $018fce			jsr 	EvaluateGetInteger 			; get an atom
.018bfe	88		dey				dey
.018bff	20 a3 85	jsr $0185a3			jsr 	Print32BitInteger 			; print integer.
.018c02	80 98		bra $018b9c			bra 	_LIDecode
.018c04					_LICommandToken:
.018c04	5a		phy				phy 								; save Y
.018c05	48		pha				pha 								; save token
.018c06	a2 9b		ldx #$9b			ldx  	#KeywordText & $FF 			; address of keyword text table.
.018c08	a9 86		lda #$86			lda 	(#KeywordText >> 8) & $FF
.018c0a	86 1a		stx $1a				stx 	zLTemp1
.018c0c	85 1b		sta $1b				sta 	zLTemp1+1
.018c0e	a9 01		lda #$01			lda 	(#KeywordText >> 16) & $FF 	; this is for 65816 (it's a table in code
.018c10	85 1c		sta $1c				sta 	zLTemp1+2 					; space) and won't affect a 6502 at all.
.018c12	68		pla				pla 								; get token, chuck bit 7.
.018c13	29 7f		and #$7f			and 	#127
.018c15	f0 16		beq $018c2d			beq 	_LIFoundToken
.018c17	aa		tax				tax
.018c18					_LITokenLoop:
.018c18	a0 00		ldy #$00			ldy 	#0
.018c1a					_LIFindEnd:
.018c1a	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c1c	c8		iny				iny
.018c1d	0a		asl a				asl 	a
.018c1e	90 fa		bcc $018c1a			bcc 	_LIFindEnd
.018c20	98		tya				tya 								; that is step to the next
.018c21	18		clc				clc 								; we don't bother bumping the 3rd byte
.018c22	65 1a		adc $1a				adc 	zLTemp1 					; here.
.018c24	85 1a		sta $1a				sta 	zLTemp1
.018c26	90 02		bcc $018c2a			bcc 	_LINoBump
.018c28	e6 1b		inc $1b				inc 	zLTemp1+1
.018c2a					_LINoBump:
.018c2a	ca		dex				dex 								; no go round again.
.018c2b	d0 eb		bne $018c18			bne 	_LITokenLoop
.018c2d					_LIFoundToken:
.018c2d	a0 00		ldy #$00			ldy 	#0
.018c2f					_LIPrintToken:
.018c2f	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c31	c8		iny				iny
.018c32	48		pha				pha 								; save it
.018c33	29 7f		and #$7f			and 	#$7F
.018c35	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018c38	68		pla				pla
.018c39	10 f4		bpl $018c2f			bpl 	_LIPrintToken 				; go back if not end
.018c3b	7a		ply				ply 								; restore Y
.018c3c	29 7f		and #$7f			and 	#$7F 						; if last char is a letter
.018c3e	c9 41		cmp #$41			cmp 	#"A"
.018c40	90 09		bcc $018c4b			bcc 	_LINotLetter
.018c42	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c44	b0 05		bcs $018c4b			bcs 	_LINotLetter
.018c46	a9 20		lda #$20			lda 	#" " 						; add spacing
.018c48	20 4e 8c	jsr $018c4e			jsr 	ListPrintLC
.018c4b					_LINotLetter:
.018c4b	4c 9c 8b	jmp $018b9c			jmp 	_LIDecode
.018c4e					ListPrintLC:
.018c4e	c9 41		cmp #$41			cmp 	#"A"
.018c50	90 06		bcc $018c58			bcc 	_LPLC0
.018c52	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c54	b0 02		bcs $018c58			bcs 	_LPLC0
.018c56	69 20		adc #$20			adc 	#$20
.018c58	4c 1f 85	jmp $01851f	_LPLC0:	jmp 	CharPrint
.018c5b					ListGetRange:
.018c5b	a2 0b		ldx #$0b			ldx 	#XS_Size*2-1 				; clear first 2 slots back to defaults.
.018c5d					_LGRClear:
.018c5d	a9 00		lda #$00			lda 	#0
.018c5f	95 80		sta $80,x			sta 	XS_Mantissa,x
.018c61	ca		dex				dex
.018c62	10 f9		bpl $018c5d			bpl 	_LGRClear
.018c64	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c66	c9 00		cmp #$00			cmp 	#0 							; nothing
.018c68	f0 21		beq $018c8b			beq 	_LGRBlank
.018c6a	c9 c0		cmp #$c0			cmp 	#token_Colon 				; or colon
.018c6c	f0 1d		beq $018c8b			beq 	_LGRBlank
.018c6e	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma
.018c70	f0 18		beq $018c8a			beq 	_LGREnd 					; then it's LIST ,x
.018c72	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; get the first number into bottom
.018c75	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c77	c9 bf		cmp #$bf			cmp 	#token_Comma
.018c79	f0 0f		beq $018c8a			beq 	_LGREnd 					; then it is LIST a,b
.018c7b	a5 80		lda $80				lda 	XS_Mantissa+0 				; copy first to second LIST n is n,n
.018c7d	85 86		sta $86				sta 	XS_Mantissa+XS_Size+0
.018c7f	a5 81		lda $81				lda 	XS_Mantissa+1
.018c81	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018c83					_LGRBumpExit:
.018c83	e6 86		inc $86				inc 	XS_Mantissa+XS_Size 		; bump it so we can use cc.
.018c85	d0 02		bne $018c89			bne 	_LGRBump2
.018c87	e6 87		inc $87				inc 	XS_Mantissa+XS_Size+1
.018c89					_LGRBump2:
.018c89	60		rts				rts
.018c8a					_LGREnd:
.018c8a	c8		iny				iny
.018c8b					_LGRBlank:
.018c8b	a9 ff		lda #$ff			lda 	#$FF 						; default to the end.
.018c8d	85 86		sta $86				sta 	XS_Mantissa+XS_Size
.018c8f	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018c91	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c93	c9 00		cmp #$00			cmp 	#0
.018c95	f0 f2		beq $018c89			beq 	_LGRBump2
.018c97	0a		asl a				asl 	a 							; if not a number, then exit (to end)
.018c98	b0 ef		bcs $018c89			bcs 	_LGRBump2
.018c9a	a2 06		ldx #$06			ldx 	#XS_Size 					; get to range
.018c9c	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX
.018c9f	80 e2		bra $018c83			bra 	_LGRBumpExit
.018ca1	60		rts				rts
.018ca2					ListCheckRange:
.018ca2	c8		iny				iny
.018ca3	a2 00		ldx #$00			ldx 	#0 							; test low
.018ca5	20 b2 8c	jsr $018cb2			jsr 	_LCRCompare
.018ca8	90 06		bcc $018cb0			bcc 	_LCRFail
.018caa	a2 06		ldx #$06			ldx 	#XS_Size 					; test high
.018cac	20 b2 8c	jsr $018cb2			jsr 	_LCRCompare
.018caf	60		rts				rts
.018cb0					_LCRFail:
.018cb0	38		sec				sec
.018cb1	60		rts				rts
.018cb2					_LCRCompare:
.018cb2	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cb4	38		sec				sec
.018cb5	f5 80		sbc $80,x			sbc	 	XS_Mantissa+0,x
.018cb7	08		php				php
.018cb8	c8		iny				iny
.018cb9	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cbb	28		plp				plp
.018cbc	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.018cbe	08		php				php
.018cbf	88		dey				dey
.018cc0	28		plp				plp
.018cc1	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/print.asm

.018cc2					Command_PRINT:
.018cc2	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cc4	c9 00		cmp #$00			cmp 	#0 							; end
.018cc6	f0 65		beq $018d2d			beq 	_CPR_NewLine
.018cc8	c9 c0		cmp #$c0			cmp 	#token_Colon
.018cca	f0 61		beq $018d2d			beq 	_CPR_NewLine
.018ccc	c9 c1		cmp #$c1			cmp 	#token_SemiColon
.018cce	f0 50		beq $018d20			beq 	_CPR_Skip
.018cd0	c9 bf		cmp #$bf			cmp 	#token_Comma
.018cd2	f0 49		beq $018d1d			beq 	_CPR_Tab
.018cd4	20 c6 8e	jsr $018ec6			jsr 	EvaluateExpression 			; get expression.
.018cd7	a5 85		lda $85				lda 	XS_Type 					; get type.
.018cd9	29 02		and #$02			and 	#2
.018cdb	d0 24		bne $018d01			bne 	_CPR_String 				; if type = 2 output as string.
.018cdd					_CPR_Number:
.018cdd	a9 00		lda #$00			lda 	#0 							; reset buffer index
.018cdf	8d 14 03	sta $0314			sta 	NumBufX
.018ce2	a5 85		lda $85				lda 	XS_Type 					; get type
.018ce4	4a		lsr a				lsr 	a
.018ce5	b0 05		bcs $018cec			bcs 	_CPRInt 					; if msb set do as integer
.018ce7	20 42 a1	jsr $01a142			jsr 	FPToString 					; call fp to str otherwise
.018cea	80 03		bra $018cef			bra 	_CPRNPrint
.018cec	20 07 9c	jsr $019c07	_CPRInt:jsr 	IntToString
.018cef					_CPRNPrint:
.018cef	ad 15 03	lda $0315			lda 	Num_Buffer 					; is first character -
.018cf2	c9 2d		cmp #$2d			cmp 	#"-"
.018cf4	f0 05		beq $018cfb			beq 	_CPRNoSpace
.018cf6	a9 20		lda #$20			lda 	#" "						; print the leading space
.018cf8	20 1f 85	jsr $01851f			jsr 	CharPrint 					; so beloved of MS Basics.
.018cfb					_CPRNoSpace:
.018cfb	a2 14		ldx #$14			ldx 	#(Num_Buffer-1) & $FF
.018cfd	a9 03		lda #$03			lda 	#(Num_Buffer-1) >> 8
.018cff	80 04		bra $018d05			bra 	_CPRPrint
.018d01					_CPR_String:
.018d01	a6 80		ldx $80				ldx 	XS_Mantissa
.018d03	a5 81		lda $81				lda 	XS_Mantissa+1
.018d05					_CPRPrint:
.018d05	86 1e		stx $1e				stx 	zGenPtr
.018d07	85 1f		sta $1f				sta 	zGenPtr+1
.018d09	5a		phy				phy
.018d0a	a0 00		ldy #$00			ldy 	#0							; get length into X
.018d0c	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d0e	aa		tax				tax
.018d0f	f0 09		beq $018d1a			beq 	_CPREndPrint 				; nothing to print
.018d11					_CPRLoop:
.018d11	c8		iny				iny
.018d12	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d14	20 1f 85	jsr $01851f			jsr 	CharPrint
.018d17	ca		dex				dex
.018d18	d0 f7		bne $018d11			bne 	_CPRLoop
.018d1a					_CPREndPrint:
.018d1a	7a		ply				ply
.018d1b	80 a5		bra $018cc2			bra 	Command_Print
.018d1d					_CPR_Tab:
.018d1d	20 4f 80	jsr $01804f			jsr 	IFT_Tab
.018d20					_CPR_Skip:
.018d20	c8		iny				iny
.018d21	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d23	c9 c0		cmp #$c0			cmp 	#token_Colon 				; colon or $00, exit
.018d25	f0 09		beq $018d30			beq 	_CPR_Exit
.018d27	c9 00		cmp #$00			cmp 	#0
.018d29	d0 97		bne $018cc2			bne 	Command_PRINT 				; if not go round again.
.018d2b	80 03		bra $018d30			bra 	_CPR_Exit
.018d2d					_CPR_NewLine:
.018d2d	20 5c 80	jsr $01805c			jsr 	IFT_NewLine
.018d30					_CPR_Exit:
.018d30	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/assert.asm

.018d31					Command_ASSERT:
.018d31	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; calculate thing being asserted
.018d34	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; check if true (non-zero)
.018d36	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.018d38	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.018d3a	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.018d3c	f0 01		beq $018d3f			beq 	_ASFail
.018d3e	60		rts				rts
.018d3f					_ASFail:
.018d3f	20 57 85	jsr $018557			jsr ERR_Handler
>018d42	41 73 73 65 72 74 00			.text "Assert",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/poke.asm

.018d49					Command_POKE:
.018d49	a9 01		lda #$01			lda 	#1
.018d4b	80 06		bra $018d53			bra 	CmdPoke_Main
.018d4d					Command_DOKE:
.018d4d	a9 02		lda #$02			lda 	#2
.018d4f	80 02		bra $018d53			bra 	CmdPoke_Main
.018d51					Command_LOKE:
.018d51	a9 04		lda #$04			lda 	#4
.018d53					CmdPoke_Main:
.018d53	48		pha				pha
.018d54	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; get two parameters.
.018d57	e8		inx				inx
.018d58	e8		inx				inx
.018d59	e8		inx				inx
.018d5a	e8		inx				inx
.018d5b	e8		inx				inx
.018d5c	e8		inx				inx
.018d5d	20 8c 96	jsr $01968c			jsr 	CheckNextComma
.018d60	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX
.018d63	a5 80		lda $80				lda 	XS_Mantissa+0 			; copy the mantissa into ZLTemp1 (address)
.018d65	85 1a		sta $1a				sta 	zLTemp1
.018d67	a5 81		lda $81				lda 	XS_Mantissa+1
.018d69	85 1b		sta $1b				sta 	zLTemp1+1
.018d6b	a5 82		lda $82				lda 	XS_Mantissa+2
.018d6d	85 1c		sta $1c				sta 	zLTemp1+2
.018d6f	a5 83		lda $83				lda 	XS_Mantissa+3
.018d71	85 1d		sta $1d				sta 	zLTemp1+3
.018d73	68		pla				pla 								; get count
.018d74	5a		phy				phy 								; save Y
.018d75	20 17 96	jsr $019617			jsr 	MemWrite 					; write it out
.018d78	7a		ply				ply 								; restore Y and done.
.018d79	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/newold.asm

.018d7a					Command_NEW:
.018d7a	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018d7c	85 16		sta $16				sta 	zCodePtr+0
.018d7e	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018d80	85 17		sta $17				sta 	zCodePtr+1
.018d82	a9 00		lda #$00			lda 	#0
.018d84	85 18		sta $18				sta 	zCodePtr+2
.018d86	85 19		sta $19				sta 	zCodePtr+3
.018d88	a0 03		ldy #$03			ldy 	#3
.018d8a	a0 00		ldy #$00			ldy 	#0
.018d8c	a9 00		lda #$00			lda 	#0 							; write a 0 there.
.018d8e	97 16		sta [$16],y			sta 	[zCodePtr],y
.018d90	20 28 96	jsr $019628			jsr 	UpdateProgramEnd 			; update program end.
.018d93	4c 10 88	jmp $018810			jmp 	WarmStart
.018d96					Command_OLD:
.018d96	ea		nop				nop
.018d97	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018d99	85 16		sta $16				sta 	zCodePtr+0
.018d9b	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018d9d	85 17		sta $17				sta 	zCodePtr+1
.018d9f	a9 00		lda #$00			lda 	#0
.018da1	85 18		sta $18				sta 	zCodePtr+2
.018da3	85 19		sta $19				sta 	zCodePtr+3
.018da5	a0 03		ldy #$03			ldy 	#3
.018da7					_COL_Find:
.018da7	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018da9	c8		iny				iny
.018daa	c9 00		cmp #$00			cmp 	#0 							; if zero, then the position Y/Z is new offset
.018dac	f0 18		beq $018dc6			beq 	_COL_Found
.018dae	98		tya				tya
.018daf	c9 00		cmp #$00			cmp 	#0
.018db1	d0 f4		bne $018da7			bne 	_COL_Find 					; can't find old EOL, give up.
.018db3	20 57 85	jsr $018557			jsr ERR_Handler
>018db6	50 72 6f 67 72 61 6d 20			.text "Program Corrupt",0
>018dbe	43 6f 72 72 75 70 74 00
.018dc6					_COL_Found:
.018dc6	98		tya				tya
.018dc7	48		pha				pha
.018dc8	a0 00		ldy #$00			ldy 	#0
.018dca	68		pla				pla
.018dcb	97 16		sta [$16],y			sta 	[zCodePtr],y
.018dcd	20 28 96	jsr $019628			jsr 	UpdateProgramEnd 			; reset variable pointer
.018dd0	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/branch.asm

.018dd1					Command_GOTO:
.018dd1	20 ee 8d	jsr $018dee			jsr 	GotoGetLineNumber
.018dd4	4c 0b 8e	jmp $018e0b			jmp 	GotoChangeToLineNumber
.018dd7					Command_GOSUB:
.018dd7	20 ee 8d	jsr $018dee			jsr 	GotoGetLineNumber
.018dda	20 e6 84	jsr $0184e6			jsr 	StackSavePosition
.018ddd	a9 05		lda #$05			lda 	#(SMark_Gosub << 4)+SourcePosSize
.018ddf	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018de2	4c 0b 8e	jmp $018e0b			jmp 	GotoChangeToLineNumber
.018de5					Command_RETURN:
.018de5	a9 00		lda #$00			lda 	#(SMark_Gosub << 4)
.018de7	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018dea	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018ded	60		rts				rts
.018dee					GotoGetLineNumber:
.018dee	20 5c 90	jsr $01905c			jsr 	EvaluateInteger
.018df1	a5 82		lda $82				lda 	XS_Mantissa+2 				; check range
.018df3	05 83		ora $83				ora 	XS_Mantissa+3
.018df5	d0 01		bne $018df8			bne 	_GLINError
.018df7	60		rts				rts
.018df8					_GLINError:
.018df8	20 57 85	jsr $018557			jsr ERR_Handler
>018dfb	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018e03	20 4e 75 6d 62 65 72 00
.018e0b					GotoChangeToLineNumber:
.018e0b	a5 80		lda $80				lda 	XS_Mantissa+0 				; check line number not zero
.018e0d	05 81		ora $81				ora 	XS_Mantissa+1
.018e0f	f0 37		beq $018e48			beq 	_GCTLFail
.018e11	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018e13	85 16		sta $16				sta 	zCodePtr+0
.018e15	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018e17	85 17		sta $17				sta 	zCodePtr+1
.018e19	a9 00		lda #$00			lda 	#0
.018e1b	85 18		sta $18				sta 	zCodePtr+2
.018e1d	85 19		sta $19				sta 	zCodePtr+3
.018e1f	a0 03		ldy #$03			ldy 	#3
.018e21					_GCTLLoop:
.018e21	a0 00		ldy #$00			ldy 	#0
.018e23	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e25	c9 00		cmp #$00			cmp 	#0
.018e27	f0 1f		beq $018e48			beq 	_GCTLFail
.018e29	c8		iny				iny
.018e2a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e2c	c5 80		cmp $80				cmp 	XS_Mantissa+0
.018e2e	d0 07		bne $018e37			bne 	_GCTLNext
.018e30	c8		iny				iny
.018e31	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e33	c5 81		cmp $81				cmp 	XS_Mantissa+1
.018e35	f0 0f		beq $018e46			beq 	_GCTLExit
.018e37					_GCTLNext:
.018e37	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018e39	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018e3b	18		clc				clc
.018e3c	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018e3e	85 16		sta $16				sta 	zCodePtr
.018e40	90 02		bcc $018e44			bcc 	_SNLNoCarry
.018e42	e6 17		inc $17				inc 	zCodePtr+1
.018e44					_SNLNoCarry:
.018e44	80 db		bra $018e21			bra 	_GCTLLoop 					; try next line.
.018e46					_GCTLExit:
.018e46	c8		iny				iny
.018e47	60		rts				rts
.018e48					_GCTLFail:
.018e48	20 57 85	jsr $018557			jsr ERR_Handler
>018e4b	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018e53	20 4e 75 6d 62 65 72 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/clr.asm

.018e5b					Command_CLR:
.018e5b					ResetRunStatus:
.018e5b	20 61 97	jsr $019761			jsr 	VariableClear
.018e5e	20 8d 84	jsr $01848d			jsr 	StackReset
.018e61	a9 00		lda #$00			lda 	#HighMemory & $FF
.018e63	8d 00 03	sta $0300			sta 	StringPtr
.018e66	a9 7f		lda #$7f			lda 	#HighMemory >> 8
.018e68	8d 01 03	sta $0301			sta 	StringPtr+1
.018e6b	20 2b 99	jsr $01992b			jsr 	ArrayResetDefault
.018e6e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/stop.asm

.018e6f					Command_STOP:
.018e6f	20 57 85	jsr $018557			jsr ERR_Handler
>018e72	53 74 6f 70 00				.text "Stop",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/while.asm

.018e77					Command_WHILE:
.018e77	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack, but don't yet push.
.018e7a	20 5c 90	jsr $01905c			jsr 	EvaluateInteger 			; calculate the while loop value.
.018e7d	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018e7f	05 81		ora $81				ora 	XS_Mantissa+1
.018e81	05 82		ora $82				ora 	XS_Mantissa+2
.018e83	05 83		ora $83				ora 	XS_Mantissa+3
.018e85	f0 06		beq $018e8d			beq 	_CWHSkip 					; if it is zero, then skip to WEND.
.018e87	a9 25		lda #$25			lda 	#(SMark_While << 4)+SourcePosSize
.018e89	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018e8c	60		rts				rts
.018e8d					_CWHSkip:
.018e8d	a9 95		lda #$95			lda 	#token_Wend 				; look for the WEND token.
.018e8f	20 00 84	jsr $018400			jsr 	StructureSearchSingle
.018e92	c8		iny				iny
.018e93	60		rts				rts
.018e94					Command_WEND:
.018e94	a9 20		lda #$20			lda 	#(SMark_While << 4)			; remove the frame
.018e96	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018e99	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018e9c	80 d9		bra $018e77			bra 	Command_WHILE 				; and do the while again.
.018e9e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/repeat.asm

.018e9f					Command_REPEAT:
.018e9f	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack
.018ea2	a9 15		lda #$15			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018ea4	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018ea7	60		rts				rts
.018ea8					Command_UNTIL:
.018ea8	a9 10		lda #$10			lda 	#(SMark_Repeat << 4)		; remove the frame
.018eaa	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018ead	20 5c 90	jsr $01905c			jsr 	EvaluateInteger				; work out UNTIL
.018eb0	a5 80		lda $80				lda 	XS_Mantissa+0 				; check if zero.
.018eb2	05 81		ora $81				ora 	XS_Mantissa+1
.018eb4	05 82		ora $82				ora 	XS_Mantissa+2
.018eb6	05 83		ora $83				ora 	XS_Mantissa+3
.018eb8	d0 08		bne $018ec2			bne 	_CUTExit 					; if not, just exit
.018eba	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; otherwise loop round again.
.018ebd	a9 15		lda #$15			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018ebf	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; fix the stack back.
.018ec2					_CUTExit:
.018ec2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/evaluate.asm

.018ec3					EVESyntax:
.018ec3	4c 28 85	jmp $018528			jmp 	SyntaxError
.018ec6					EvaluateExpression:
.018ec6	a2 00		ldx #$00			ldx 	#0 							; start with stack at 0.
.018ec8					EvaluateExpressionX:
.018ec8	a9 00		lda #$00			lda 	#0 							; start at precedence level 0.
.018eca					EvaluateExpressionXA:
.018eca	48		pha				pha 								; save precedence on stack.
.018ecb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ecd	f0 f4		beq $018ec3			beq 	EVESyntax 					; end of line, syntax error.
.018ecf	c9 1b		cmp #$1b			cmp 	#26+1 						; is it A-Z ?
.018ed1	b0 03		bcs $018ed6			bcs 	_EVNotVariable
.018ed3	4c a0 8f	jmp $018fa0			jmp 	_EVVariableHandler 			; if so, go to the variable handler.
.018ed6					_EVNotVariable:
.018ed6	c9 40		cmp #$40			cmp 	#$40 						; up to $40, syntax error.
.018ed8	90 e9		bcc $018ec3			bcc 	EVESyntax
.018eda	c9 80		cmp #$80			cmp 	#$80 						; $40-$7F not integer
.018edc	b0 58		bcs $018f36			bcs 	_EVNotInteger
.018ede	20 ce 8f	jsr $018fce			jsr 	EvaluateGetInteger
.018ee1					_EVCheckDecimal:
.018ee1	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ee3	c9 fd		cmp #$fd			cmp 	#$FD 						; decimal ?
.018ee5	d0 05		bne $018eec			bne 	_EVGotAtom 					; no, get atom.
.018ee7					_EVIsDecimal:
.018ee7	20 f4 8f	jsr $018ff4			jsr 	EVGetDecimal 				; extend to the decimal part.
.018eea	80 00		bra $018eec			bra 	_EVGotAtom 					; and continue to got atom.
.018eec					_EVGotAtom:
.018eec	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018eee	10 44		bpl $018f34			bpl 	_EVExitDrop 				; must be a token.
.018ef0	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus  			; check it's in the binary token range (they're first)
.018ef2	b0 40		bcs $018f34			bcs 	_EVExitDrop
.018ef4	68		pla				pla 								; get current precedence
.018ef5	85 1e		sta $1e				sta 	zGenPtr 					; save in zGenPtr as temp.
.018ef7	da		phx				phx 								; save X
.018ef8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018efa	aa		tax				tax 								; put in X
.018efb	bf 0c 86 01	lda $01860c,x			lda 	BinaryPrecedence-$80,x 		; read the binary precedence.
.018eff	85 1f		sta $1f				sta 	zGenPtr+1 					; save it.
.018f01	fa		plx				plx 								; restore X
.018f02	c5 1e		cmp $1e				cmp 	zGenPtr 					; compared against the current precedence
.018f04	90 2f		bcc $018f35			bcc 	_EVExit 					; exit if too low.
.018f06	f0 2d		beq $018f35			beq 	_EVExit 					; exit if equals
.018f08	a5 1e		lda $1e				lda 	zGenPtr 					; push precedence
.018f0a	48		pha				pha
.018f0b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f0d	48		pha				pha
.018f0e	c8		iny				iny
.018f0f	da		phx				phx 								; save current position
.018f10	e8		inx				inx
.018f11	e8		inx				inx
.018f12	e8		inx				inx
.018f13	e8		inx				inx
.018f14	e8		inx				inx
.018f15	e8		inx				inx
.018f16	a5 1f		lda $1f				lda 	zGenPtr+1 					; get the precedence of the operator in A.
.018f18	20 ca 8e	jsr $018eca			jsr 	EvaluateExpressionXA 		; do the RHS.
.018f1b	fa		plx				plx 								; restore X
.018f1c	68		pla				pla 								; get the binary operator in A.
.018f1d					_EVCallA:
.018f1d	da		phx				phx 								; save X again
.018f1e	0a		asl a				asl 	a 							; double, lose the MSB.
.018f1f	aa		tax				tax									; put in X
.018f20	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into zGenPtr
.018f24	8d 11 03	sta $0311			sta 	LocalVector+1
.018f27	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.018f2b	8d 12 03	sta $0312			sta 	LocalVector+2
.018f2e	fa		plx				plx 								; restore X
.018f2f	20 a9 8f	jsr $018fa9			jsr 	EVCallLocalVector
.018f32	80 b8		bra $018eec			bra 	_EVGotAtom 					; and loop back.
.018f34					_EVExitDrop:
.018f34	68		pla				pla
.018f35					_EVExit:
.018f35	60		rts				rts
.018f36					_EVNotInteger:
.018f36	c8		iny				iny
.018f37	c9 8b		cmp #$8b			cmp 	#token_minus 				; is it unary minus ?
.018f39	d0 16		bne $018f51			bne 	_EVNotMinus
.018f3b	20 3d 90	jsr $01903d			jsr 	EvaluateGetAtomX 			; get a numeric value into X.
.018f3e	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.018f40	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.018f42	f0 05		beq $018f49			beq 	_EVMinusFloat
.018f44	20 ea 9b	jsr $019bea			jsr 	IntegerNegateAlways 		; negation
.018f47	80 a3		bra $018eec			bra 	_EVGotAtom 					; and go back.
.018f49					_EVMinusFloat:
.018f49	b5 85		lda $85,x			lda 	XS_Type,x 					; invert the sign bit.
.018f4b	49 80		eor #$80			eor 	#$80
.018f4d	95 85		sta $85,x			sta 	XS_Type,x
.018f4f	80 9b		bra $018eec			bra 	_EVGotAtom
.018f51					_EVNotMinus:
.018f51	c9 bd		cmp #$bd			cmp 	#token_lparen 				; is it left parenthesis
.018f53	d0 17		bne $018f6c			bne 	_EVNotParenthesis
.018f55	20 c8 8e	jsr $018ec8			jsr 	EvaluateExpressionX 		; full evaluate at level x.
.018f58	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f5a	c8		iny				iny
.018f5b	c9 be		cmp #$be			cmp 	#token_rparen 				; okay if right bracket.
.018f5d	f0 8d		beq $018eec			beq 	_EVGotAtom
.018f5f	20 57 85	jsr $018557			jsr ERR_Handler
>018f62	4d 69 73 73 69 6e 67 20			.text "Missing )",0
>018f6a	29 00
.018f6c					_EVNotParenthesis:
.018f6c	c9 98		cmp #$98			cmp 	#token_not 					; is it not ?
.018f6e	d0 0c		bne $018f7c			bne 	_EVNotNot
.018f70	20 3d 90	jsr $01903d			jsr 	EvaluateGetAtomX 			; get expression in parenthesis.
.018f73	20 43 a0	jsr $01a043			jsr 	FPUToInteger 				; make it an integer - if possible.
.018f76	20 22 90	jsr $019022			jsr 	NotInteger 					; do the not calculation
.018f79	4c ec 8e	jmp $018eec			jmp 	_EVGotAtom
.018f7c					_EVNotNot:
.018f7c	c9 fe		cmp #$fe			cmp 	#$FE
.018f7e	d0 12		bne $018f92			bne 	_EVNotString
.018f80	20 ff 96	jsr $0196ff			jsr 	CreateTempStringCopy 		; copy of string in code in temporary memory.
.018f83	a5 20		lda $20				lda 	zTempStr 					; copy address of string into mantissa
.018f85	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018f87	a5 21		lda $21				lda 	zTempStr+1
.018f89	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.018f8b	a9 02		lda #$02			lda 	#2 							; set to type 2 (e.g. string)
.018f8d	95 85		sta $85,x			sta 	XS_Type,x
.018f8f	4c ec 8e	jmp $018eec			jmp 	_EVGotAtom
.018f92					_EVNotString:
.018f92	c9 98		cmp #$98			cmp 	#firstUnaryFunction
.018f94	90 04		bcc $018f9a			bcc 	_EVBadElement
.018f96	c9 b7		cmp #$b7			cmp 	#lastUnaryFunction+1
.018f98	90 03		bcc $018f9d			bcc 	_EVUnaryFunction
.018f9a					_EVBadElement:
.018f9a	4c 28 85	jmp $018528			jmp 	SyntaxError
.018f9d					_EVUnaryFunction:
.018f9d	4c 1d 8f	jmp $018f1d			jmp 	_EVCallA
.018fa0					_EVVariableHandler:
.018fa0	20 25 97	jsr $019725			jsr 	VariableFind 				; locate a variable
.018fa3	20 6d 9a	jsr $019a6d			jsr 	VariableGet 				; copy into memory.
.018fa6	4c ec 8e	jmp $018eec			jmp 	_EVGotAtom 					; and go round.
.018fa9					EVCallLocalVector:
.018fa9	6c 11 03	jmp ($0311)			jmp 	(LocalVector+1)
.018fac					EVShiftMantissaLeft6:
.018fac	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 				; copy up, using exponent as a temp
.018fae	95 84		sta $84,x			sta 	XS_Exponent,x
.018fb0	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.018fb2	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.018fb4	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.018fb6	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.018fb8	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.018fba	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.018fbc	a9 00		lda #$00			lda 	#0
.018fbe	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018fc0	20 c3 8f	jsr $018fc3			jsr 	_EVSMLShift 					; call it here to do it twice
.018fc3					_EVSMLShift:
.018fc3	56 84		lsr $84,x			lsr 	XS_Exponent,x
.018fc5	76 83		ror $83,x			ror 	XS_Mantissa+3,x
.018fc7	76 82		ror $82,x			ror 	XS_Mantissa+2,x
.018fc9	76 81		ror $81,x			ror 	XS_Mantissa+1,x
.018fcb	76 80		ror $80,x			ror 	XS_Mantissa+0,x
.018fcd	60		rts				rts
.018fce					EvaluateGetInteger:
.018fce	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018fd0	29 3f		and #$3f			and 	#$3F 						; it's a constant 0-63
.018fd2	95 80		sta $80,x			sta 	XS_Mantissa,x 				; put into the mantissa space (32 bit integer)
.018fd4	a9 00		lda #$00			lda 	#0
.018fd6	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.018fd8	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.018fda	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.018fdc	1a		inc a				inc 	a 							; set to type 1 (integer)
.018fdd	95 85		sta $85,x			sta 	XS_Type,x
.018fdf					_EVCheckNextInteger:
.018fdf	c8		iny				iny
.018fe0	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018fe2	49 40		eor #$40			eor 	#$40 						; 40-7F now 00-3F.
.018fe4	c9 40		cmp #$40			cmp 	#$40 						; if not, we have an atom.
.018fe6	b0 0b		bcs $018ff3			bcs 	_EVEndInteger
.018fe8	48		pha				pha 								; save it.
.018fe9	20 ac 8f	jsr $018fac			jsr 	EVShiftMantissaLeft6 		; shift the mantissa left 6.
.018fec	68		pla				pla
.018fed	15 80		ora $80,x			ora 	XS_Mantissa+0,x 			; put in lower 6 bits.
.018fef	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018ff1	80 ec		bra $018fdf			bra 	_EVCheckNextInteger
.018ff3					_EVEndInteger:
.018ff3	60		rts				rts
.018ff4					EVGetDecimal:
.018ff4	a9 2e		lda #$2e			lda 	#'.'							; put DP in NUM_Buffer
.018ff6	8d 15 03	sta $0315			sta 	Num_Buffer
.018ff9	da		phx				phx
.018ffa	c8		iny				iny
.018ffb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ffd	c8		iny				iny
.018ffe	3a		dec a				dec 	a								; convert to a string length.
.018fff	3a		dec a				dec 	a
.019000	a2 01		ldx #$01			ldx 	#1 								; offset in X.
.019002					_EVGDCopy:
.019002	48		pha				pha 									; save count
.019003	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019005	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.019008	e8		inx				inx 									; forward ....
.019009	c8		iny				iny
.01900a	68		pla				pla 									; get count
.01900b	3a		dec a				dec 	a 								; until zero
.01900c	d0 f4		bne $019002			bne 	_EVGDCopy
.01900e	9d 15 03	sta $0315,x			sta 	Num_Buffer,x 					; make string ASCIIZ.
.019011	fa		plx				plx 									; restore X
.019012	a9 15		lda #$15			lda 	#Num_Buffer & $FF 				; set zGenPtr
.019014	85 1e		sta $1e				sta 	zGenPtr
.019016	a9 03		lda #$03			lda 	#Num_Buffer >> 8
.019018	85 1f		sta $1f				sta 	zGenPtr+1
.01901a	5a		phy				phy 									; save Y
.01901b	a0 00		ldy #$00			ldy 	#0 								; start position
.01901d	20 fd a1	jsr $01a1fd			jsr 	FPFromString 					; convert current
.019020	7a		ply				ply 									; restore Y
.019021	60		rts				rts
.019022					NotInteger:
.019022	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019024	49 ff		eor #$ff			eor 	#$FF
.019026	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019028	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01902a	49 ff		eor #$ff			eor 	#$FF
.01902c	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01902e	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019030	49 ff		eor #$ff			eor 	#$FF
.019032	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019034	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019036	49 ff		eor #$ff			eor 	#$FF
.019038	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01903a	60		rts				rts
.01903b					EvaluateGetAtom:
.01903b	a2 00		ldx #$00			ldx 	#0 								; start at the bottom :)
.01903d					EvaluateGetAtomX:
.01903d	a9 08		lda #$08			lda 	#8 								; very high precedence so no binary operations.
.01903f	20 ca 8e	jsr $018eca			jsr 	EvaluateExpressionXA
.019042	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0 (float) 1 (integer)
.019044	29 0f		and #$0f			and 	#15
.019046	c9 02		cmp #$02			cmp 	#2
.019048	b0 01		bcs $01904b			bcs 	EvaluateType
.01904a	60		rts				rts
.01904b					EvaluateType:
.01904b	4c 38 85	jmp $018538			jmp 	TypeError
.01904e					EvaluateNumber:
.01904e	a2 00		ldx #$00			ldx 	#0
.019050					EvaluateNumberX:
.019050	20 c8 8e	jsr $018ec8			jsr 	EvaluateExpressionX
.019053	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0/1
.019055	29 0f		and #$0f			and 	#15
.019057	c9 02		cmp #$02			cmp 	#2
.019059	b0 f0		bcs $01904b			bcs 	EvaluateType
.01905b	60		rts				rts
.01905c					EvaluateInteger:
.01905c	a2 00		ldx #$00			ldx 	#0
.01905e					EvaluateIntegerX:
.01905e	20 50 90	jsr $019050			jsr 	EvaluateNumberX
.019061	20 43 a0	jsr $01a043			jsr 	FPUToInteger
.019064	60		rts				rts
.019065					EvaluateString:
.019065	a2 00		ldx #$00			ldx 	#0
.019067					EvaluateStringX:
.019067	20 c8 8e	jsr $018ec8			jsr 	EvaluateExpressionX
.01906a	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 2
.01906c	29 0f		and #$0f			and 	#15
.01906e	c9 02		cmp #$02			cmp 	#2
.019070	d0 d9		bne $01904b			bne 	EvaluateType
.019072	b5 80		lda $80,x			lda 	XS_Mantissa,x 					; copy to zGenPtr
.019074	85 1e		sta $1e				sta 	zGenPtr
.019076	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019078	85 1f		sta $1f				sta 	zGenPtr+1
.01907a	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/logical.asm

.01907b					BinaryOp_And:
.01907b	20 cf 90	jsr $0190cf			jsr 	BinaryMakeBothInteger
.01907e	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.019080	35 86		and $86,x			and 	XS2_Mantissa+0,x
.019082	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019084	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.019086	35 87		and $87,x			and 	XS2_Mantissa+1,x
.019088	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01908a	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01908c	35 88		and $88,x			and 	XS2_Mantissa+2,x
.01908e	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019090	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.019092	35 89		and $89,x			and 	XS2_Mantissa+3,x
.019094	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019096	60		rts				rts
.019097					BinaryOp_Or:
.019097	20 cf 90	jsr $0190cf			jsr 	BinaryMakeBothInteger
.01909a	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.01909c	15 86		ora $86,x			ora 	XS2_Mantissa+0,x
.01909e	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190a0	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190a2	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.0190a4	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190a6	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.0190a8	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.0190aa	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190ac	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.0190ae	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.0190b0	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190b2	60		rts				rts
.0190b3					BinaryOp_Eor:
.0190b3					BinaryOp_Xor:
.0190b3	20 cf 90	jsr $0190cf			jsr 	BinaryMakeBothInteger
.0190b6	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.0190b8	55 86		eor $86,x			eor 	XS2_Mantissa+0,x
.0190ba	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190bc	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190be	55 87		eor $87,x			eor 	XS2_Mantissa+1,x
.0190c0	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190c2	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.0190c4	55 88		eor $88,x			eor 	XS2_Mantissa+2,x
.0190c6	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190c8	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.0190ca	55 89		eor $89,x			eor 	XS2_Mantissa+3,x
.0190cc	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190ce	60		rts				rts
.0190cf					BinaryMakeBothInteger:
.0190cf	da		phx				phx 								; save X
.0190d0	e8		inx				inx
.0190d1	e8		inx				inx
.0190d2	e8		inx				inx
.0190d3	e8		inx				inx
.0190d4	e8		inx				inx
.0190d5	e8		inx				inx
.0190d6	20 da 90	jsr $0190da			jsr 	BinaryMakeInteger 			; convert to integer.
.0190d9	fa		plx				plx 								; restore X and fall through.
.0190da					BinaryMakeInteger:
.0190da	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.0190dc	29 0f		and #$0f			and 	#15 						; check type zero
.0190de	f0 04		beq $0190e4			beq 	_BMIConvert 				; if float convert to integer.
.0190e0	4a		lsr a				lsr 	a 							; if bit 0 clear it's not an integer
.0190e1	90 04		bcc $0190e7			bcc 	_BMIError
.0190e3	60		rts				rts
.0190e4					_BMIConvert:
.0190e4	4c 43 a0	jmp $01a043			jmp 	FPUToInteger 				; convert to integer
.0190e7					_BMIError:
.0190e7	4c 38 85	jmp $018538			jmp 	TypeError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/compare.asm

.0190ea					Binary_Equal:
.0190ea	20 31 91	jsr $019131			jsr 	CompareValues
.0190ed	09 00		ora #$00			ora 	#0
.0190ef	f0 04		beq $0190f5			beq 	CCTrue
.0190f1	a9 00		lda #$00	CCFalse:lda 	#0							; set false
.0190f3	80 02		bra $0190f7			bra 	CCWrite
.0190f5	a9 ff		lda #$ff	CCTrue:	lda 	#$FF 						; set true
.0190f7	95 80		sta $80,x	CCWrite:sta 	XS_Mantissa+0,x 			; write into integer slot
.0190f9	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190fb	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190fd	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190ff	a9 01		lda #$01			lda 	#1
.019101	95 85		sta $85,x			sta 	XS_Type,x 					; set type to integer whatever.
.019103	60		rts				rts
.019104					Binary_NotEqual:
.019104	20 31 91	jsr $019131			jsr 	CompareValues
.019107	09 00		ora #$00			ora 	#0
.019109	f0 e6		beq $0190f1			beq 	CCFalse
.01910b	80 e8		bra $0190f5			bra 	CCTrue
.01910d					Binary_Less:
.01910d	20 31 91	jsr $019131			jsr 	CompareValues
.019110	09 00		ora #$00			ora 	#0
.019112	30 e1		bmi $0190f5			bmi 	CCTrue
.019114	80 db		bra $0190f1			bra 	CCFalse
.019116					Binary_LessEqual:
.019116	20 31 91	jsr $019131			jsr 	CompareValues
.019119	c9 01		cmp #$01			cmp 	#1
.01911b	d0 d8		bne $0190f5			bne 	CCTrue
.01911d	80 d2		bra $0190f1			bra 	CCFalse
.01911f					Binary_GreaterEqual:
.01911f	20 31 91	jsr $019131			jsr 	CompareValues
.019122	09 00		ora #$00			ora 	#0
.019124	10 cf		bpl $0190f5			bpl 	CCTrue
.019126	80 c9		bra $0190f1			bra 	CCFalse
.019128					Binary_Greater:
.019128	20 31 91	jsr $019131			jsr 	CompareValues
.01912b	c9 01		cmp #$01			cmp 	#1
.01912d	f0 c6		beq $0190f5			beq 	CCTrue
.01912f	80 c0		bra $0190f1			bra 	CCFalse
.019131					CompareValues:
.019131	b5 85		lda $85,x			lda 	XS_Type,x 					; and the types together
.019133	35 8b		and $8b,x			and 	XS2_Type,x
.019135	c9 02		cmp #$02			cmp 	#2
.019137	f0 11		beq $01914a			beq 	_CVString
.019139	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.01913b	35 8b		and $8b,x			and 	XS2_Type,x
.01913d	4a		lsr a				lsr 	a 							; shift bit 0 into C
.01913e	90 03		bcc $019143			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019140	4c 8c 91	jmp $01918c			jmp 	CompareInteger32 							; so execute code at \1
.019143					_BCFloat:
.019143	20 30 92	jsr $019230			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.019146	4c 79 9f	jmp $019f79			jmp 	FPCompare 							; and execute code at \2
.019149	60		rts				rts
.01914a					_CVString:
.01914a	da		phx				phx 								; save XY
.01914b	5a		phy				phy
.01914c	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.01914e	85 1a		sta $1a				sta		zLTemp1+0
.019150	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019152	85 1b		sta $1b				sta 	zLTemp1+1
.019154	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.019156	85 1c		sta $1c				sta 	zLTemp1+2
.019158	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.01915a	85 1d		sta $1d				sta 	zLTemp1+3
.01915c	a0 00		ldy #$00			ldy 	#0 							; find the shorter string length, we compare this.
.01915e	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.019160	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.019162	90 02		bcc $019166			bcc 	_CVCommon
.019164	b1 1c		lda ($1c),y			lda 	(zLTemp1+2),y
.019166					_CVCommon:
.019166	aa		tax				tax 								; put shorter string length in zero.
.019167	f0 0c		beq $019175			beq 	_CVMatch 					; if the shorter is zero, then the 'common parts' match
.019169					_CVCompare:
.019169	c8		iny				iny 								; next character
.01916a	b1 1a		lda ($1a),y			lda 	(zLTemp1),y 				; compare characters
.01916c	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.01916e	90 13		bcc $019183			bcc 	_CVReturnLess 				; <
.019170	d0 15		bne $019187			bne 	_CVReturnGreater 			; >
.019172	ca		dex				dex 								; until common length matched.
.019173	d0 f4		bne $019169			bne 	_CVCompare
.019175					_CVMatch:
.019175	a0 00		ldy #$00			ldy 	#0
.019177	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.019179	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.01917b	90 06		bcc $019183			bcc 	_CVReturnLess 				; <
.01917d	d0 08		bne $019187			bne 	_CVReturnGreater 			; >
.01917f	a9 00		lda #$00			lda 	#0
.019181	80 06		bra $019189			bra 	_CVExit 					; same common, same length, same string
.019183					_CVReturnLess:
.019183	a9 ff		lda #$ff			lda 	#$FF
.019185	80 02		bra $019189			bra 	_CVExit
.019187					_CVReturnGreater:
.019187	a9 01		lda #$01			lda 	#$01
.019189					_CVExit:
.019189	7a		ply				ply
.01918a	fa		plx				plx
.01918b	60		rts				rts
.01918c					CompareInteger32:
.01918c	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; invert both sign flags, makes compare signed
.01918e	49 80		eor #$80			eor 	#$80
.019190	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019192	b5 89		lda $89,x			lda 	XS2_Mantissa+3,x
.019194	49 80		eor #$80			eor 	#$80
.019196	95 89		sta $89,x			sta 	XS2_Mantissa+3,x
.019198	20 16 92	jsr $019216			jsr 	SubInteger32 				; subtraction
.01919b	90 0d		bcc $0191aa			bcc 	_CI32Less 					; cc return -1
.01919d	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; check if zero
.01919f	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.0191a1	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0191a3	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0191a5	f0 02		beq $0191a9			beq 	_CI32Exit
.0191a7	a9 01		lda #$01			lda 	#1							; otherwise it's positive
.0191a9					_CI32Exit:
.0191a9	60		rts				rts
.0191aa					_CI32Less:
.0191aa	a9 ff		lda #$ff			lda 	#$FF
.0191ac	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/arithmetic.asm

.0191ad					BinaryOp_Add:
.0191ad	b5 85		lda $85,x			lda 	XS_Type,x  					; and types together
.0191af	35 8b		and $8b,x			and 	XS2_Type,x
.0191b1	29 02		and #$02			and 	#2 							; if bit 1 set they are both strings
.0191b3	d0 11		bne $0191c6			bne 	_BOAString
.0191b5	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191b7	35 8b		and $8b,x			and 	XS2_Type,x
.0191b9	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191ba	90 03		bcc $0191bf			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191bc	4c fc 91	jmp $0191fc			jmp 	AddInteger32 							; so execute code at \1
.0191bf					_BCFloat:
.0191bf	20 30 92	jsr $019230			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191c2	4c 54 9d	jmp $019d54			jmp 	FPAdd 							; and execute code at \2
.0191c5	60		rts				rts
.0191c6					_BOAString:
.0191c6	4c 4a 92	jmp $01924a			jmp 	ConcatenateString 			; concatenate two strings.
.0191c9					BinaryOp_Subtract:
.0191c9	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191cb	35 8b		and $8b,x			and 	XS2_Type,x
.0191cd	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191ce	90 03		bcc $0191d3			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191d0	4c 16 92	jmp $019216			jmp 	SubInteger32 							; so execute code at \1
.0191d3					_BCFloat:
.0191d3	20 30 92	jsr $019230			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191d6	4c 4c 9d	jmp $019d4c			jmp 	FPSubtract 							; and execute code at \2
.0191d9	60		rts				rts
.0191da					BinaryOp_Multiply:
.0191da	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191dc	35 8b		and $8b,x			and 	XS2_Type,x
.0191de	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191df	90 03		bcc $0191e4			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191e1	4c 25 9b	jmp $019b25			jmp 	MulInteger32 							; so execute code at \1
.0191e4					_BCFloat:
.0191e4	20 30 92	jsr $019230			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191e7	4c 7b 9e	jmp $019e7b			jmp 	FPMultiply 							; and execute code at \2
.0191ea	60		rts				rts
.0191eb					BinaryOp_Divide:
.0191eb	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191ed	35 8b		and $8b,x			and 	XS2_Type,x
.0191ef	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191f0	90 03		bcc $0191f5			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191f2	4c 63 9b	jmp $019b63			jmp 	DivInteger32 							; so execute code at \1
.0191f5					_BCFloat:
.0191f5	20 30 92	jsr $019230			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191f8	4c 08 9e	jmp $019e08			jmp 	FPDivide 							; and execute code at \2
.0191fb	60		rts				rts
.0191fc					AddInteger32:
.0191fc	18		clc				clc
.0191fd	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.0191ff	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019201	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019203	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019205	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019207	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019209	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01920b	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.01920d	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01920f	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019211	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019213	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019215	60		rts				rts
.019216					SubInteger32:
.019216	38		sec				sec
.019217	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019219	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.01921b	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01921d	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01921f	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019221	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019223	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019225	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019227	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019229	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01922b	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.01922d	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01922f	60		rts				rts
.019230					BinaryMakeBothFloat:
.019230	da		phx				phx 								; save X
.019231	e8		inx				inx
.019232	e8		inx				inx
.019233	e8		inx				inx
.019234	e8		inx				inx
.019235	e8		inx				inx
.019236	e8		inx				inx
.019237	20 3b 92	jsr $01923b			jsr 	BinaryMakeFloat 			; convert to float.
.01923a	fa		plx				plx 								; restore X and fall through.
.01923b					BinaryMakeFloat:
.01923b	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.01923d	4a		lsr a				lsr 	a 							; if bit 0 set, it's integer so convert
.01923e	b0 04		bcs $019244			bcs 	_BMFConvert
.019240	4a		lsr a				lsr 	a 							; if bit 1 set, it's a string so error (type)
.019241	b0 04		bcs $019247			bcs 	_BMFError
.019243	60		rts				rts
.019244					_BMFConvert:
.019244	4c f7 9f	jmp $019ff7			jmp 	FPUToFloat 					; convert to float
.019247					_BMFError:
.019247	4c 38 85	jmp $018538			jmp 	TypeError
.01924a					ConcatenateString:
.01924a	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.01924c	85 1a		sta $1a				sta		zLTemp1+0
.01924e	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019250	85 1b		sta $1b				sta 	zLTemp1+1
.019252	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.019254	85 1c		sta $1c				sta 	zLTemp1+2
.019256	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.019258	85 1d		sta $1d				sta 	zLTemp1+3
.01925a	5a		phy				phy
.01925b	a0 00		ldy #$00			ldy 	#0 							; work out total length.
.01925d	b1 1a		lda ($1a),y			lda 	(zlTemp1),y
.01925f	71 1c		adc ($1c),y			adc 	(zlTemp1+2),y
.019261	7a		ply				ply
.019262	b0 33		bcs $019297			bcs 	_CSError					; check in range.
.019264	c9 fe		cmp #$fe			cmp 	#maxString+1
.019266	b0 2f		bcs $019297			bcs 	_CSError
.019268	20 c4 96	jsr $0196c4			jsr 	AllocateTempString 			; store the result
.01926b	20 82 92	jsr $019282			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.01926e	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; point zLTemp1 to second string
.019270	85 1a		sta $1a				sta 	zLTemp1
.019272	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.019274	85 1b		sta $1b				sta 	zLTemp1+1
.019276	20 82 92	jsr $019282			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.019279	a5 20		lda $20				lda 	zTempStr 					; point current to new string
.01927b	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01927d	a5 21		lda $21				lda 	zTempStr+1
.01927f	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019281	60		rts				rts
.019282					_CSCopyString:
.019282	da		phx				phx
.019283	5a		phy				phy
.019284	a0 00		ldy #$00			ldy 	#0 							; get length
.019286	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.019288	f0 0a		beq $019294			beq 	_CSCSExit 					; if zero, exit
.01928a	aa		tax				tax 								; put in X
.01928b					_CSCSLoop:
.01928b	c8		iny				iny 								; get next char
.01928c	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.01928e	20 ef 96	jsr $0196ef			jsr		WriteTempString 			; copy out
.019291	ca		dex				dex 								; do whole string
.019292	d0 f7		bne $01928b			bne 	_CSCSLoop
.019294					_CSCSExit:
.019294	7a		ply				ply
.019295	fa		plx				plx
.019296	60		rts				rts
.019297					_CSError:
.019297	20 57 85	jsr $018557			jsr ERR_Handler
>01929a	53 74 72 69 6e 67 20 74			.text "String too long",0
>0192a2	6f 6f 20 6c 6f 6e 67 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/sgn.asm

.0192aa					Unary_Sgn:
.0192aa	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; get value
.0192ad	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; check right bracket.
.0192b0	20 ce 92	jsr $0192ce			jsr 	GetSignCurrent 				; get sign.
.0192b3	09 00		ora #$00			ora 	#0
.0192b5	10 08		bpl $0192bf			bpl		UnarySetAInteger			; if 0,1 return that.
.0192b7	80 00		bra $0192b9			bra 	UnarySetAMinus1 			; -1 return $FFFFF...
.0192b9					UnarySetAMinus1:
.0192b9	a9 ff		lda #$ff			lda 	#$FF
.0192bb	95 80		sta $80,x			sta 	XS_Mantissa,x
.0192bd	80 04		bra $0192c3			bra 	UnarySetAFill
.0192bf					UnarySetAInteger:
.0192bf	95 80		sta $80,x			sta 	XS_Mantissa,x
.0192c1	a9 00		lda #$00			lda 	#0
.0192c3					UnarySetAFill:
.0192c3	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0192c5	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0192c7	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0192c9	a9 01		lda #$01			lda 	#1
.0192cb	95 85		sta $85,x			sta 	XS_Type,x
.0192cd	60		rts				rts
.0192ce					GetSignCurrent:
.0192ce	b5 85		lda $85,x			lda 	XS_Type,x 					; identify type.
.0192d0	4a		lsr a				lsr 	a 							; if LSB set it is integer.
.0192d1	90 15		bcc $0192e8			bcc 	_GSCFloat
.0192d3	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.0192d5	30 0e		bmi $0192e5			bmi 	_GSCMinus1
.0192d7	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.0192d9	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.0192db	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0192dd	d0 03		bne $0192e2			bne 	_GSCPlus1
.0192df					_GSCZero:
.0192df	a9 00		lda #$00			lda 	#0
.0192e1	60		rts				rts
.0192e2					_GSCPlus1:
.0192e2	a9 01		lda #$01			lda 	#$01
.0192e4	60		rts				rts
.0192e5					_GSCMinus1:
.0192e5	a9 ff		lda #$ff			lda 	#$FF
.0192e7	60		rts				rts
.0192e8					_GSCFloat:
.0192e8	34 85		bit $85,x			bit 	XS_Type,x
.0192ea	70 f3		bvs $0192df			bvs 	_GSCZero
.0192ec	30 f7		bmi $0192e5			bmi 	_GSCMinus1
.0192ee	80 f2		bra $0192e2			bra 	_GSCPlus1

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/abs.asm

.0192f0					Unary_Abs:
.0192f0	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; get value
.0192f3	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; check right bracket.
.0192f6	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.0192f8	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.0192fa	f0 07		beq $019303			beq 	_UAMinusFloat
.0192fc	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; check MSB
.0192fe	10 09		bpl $019309			bpl 	_UAExit
.019300	4c ea 9b	jmp $019bea			jmp 	IntegerNegateAlways 		; negation
.019303					_UAMinusFloat:
.019303	b5 85		lda $85,x			lda 	XS_Type,x 					; clear the sign bit.
.019305	29 7f		and #$7f			and		#$7F
.019307	95 85		sta $85,x			sta 	XS_Type,x
.019309					_UAExit:
.019309	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/peek.asm

.01930a					Unary_Peek:
.01930a	a9 01		lda #$01			lda 	#1
.01930c	80 06		bra $019314			bra 	UPMain
.01930e					Unary_Deek:
.01930e	a9 02		lda #$02			lda 	#2
.019310	80 02		bra $019314			bra 	UPMain
.019312					Unary_Leek:
.019312	a9 04		lda #$04			lda 	#4
.019314					UPMain:
.019314	48		pha				pha 								; set bytes to copy.
.019315	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 			; numeric parameter
.019318	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.01931b	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy the mantissa into ZLTemp1 (address)
.01931d	85 1a		sta $1a				sta 	zLTemp1
.01931f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019321	85 1b		sta $1b				sta 	zLTemp1+1
.019323	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019325	85 1c		sta $1c				sta 	zLTemp1+2
.019327	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019329	85 1d		sta $1d				sta 	zLTemp1+3
.01932b	a9 00		lda #$00			lda 	#0 							; clear target area
.01932d	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01932f	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019331	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019333	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019335	68		pla				pla 								; restore bytes to copy
.019336	da		phx				phx 								; save XY
.019337	5a		phy				phy
.019338	20 06 96	jsr $019606			jsr 	MemRead 					; read the bytes in
.01933b	7a		ply				ply 								; restore and exit
.01933c	fa		plx				plx
.01933d	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/mod.asm

.01933e					Unary_Mod:
.01933e	20 66 93	jsr $019366			jsr 	_UMParameter 				; first parameter
.019341	20 8c 96	jsr $01968c			jsr 	CheckNextComma
.019344	da		phx				phx 								; second parameter
.019345	e8		inx				inx
.019346	e8		inx				inx
.019347	e8		inx				inx
.019348	e8		inx				inx
.019349	e8		inx				inx
.01934a	e8		inx				inx
.01934b	20 66 93	jsr $019366			jsr 	_UMParameter
.01934e	fa		plx				plx
.01934f	20 84 96	jsr $019684			jsr 	CheckNextRParen
.019352	20 63 9b	jsr $019b63			jsr 	DivInteger32 				; divide
.019355	a5 1a		lda $1a				lda 	zLTemp1+0 					; modulus is in zLTemp, copy it.
.019357	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019359	a5 1b		lda $1b				lda 	zLTemp1+1
.01935b	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01935d	a5 1c		lda $1c				lda 	zLTemp1+2
.01935f	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019361	a5 1d		lda $1d				lda 	zLTemp1+3
.019363	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019365	60		rts				rts
.019366					_UMParameter:
.019366	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 			; get value
.019369	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; absolute value
.01936b	10 03		bpl $019370			bpl 	_UMNotSigned
.01936d	20 ea 9b	jsr $019bea			jsr 	IntegerNegateAlways
.019370					_UMNotSigned:
.019370	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/usr.asm

.019371					Unary_Usr:
.019371	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; numeric parameter
.019374	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.019377	da		phx				phx 								; save XY
.019378	5a		phy				phy
.019379	ea		nop				nop
.01937a	22 0c 03 00	jsl $00030c			jsl 	UserVector
.01937e	7a		ply				ply 								; and exit
.01937f	fa		plx				plx
.019380	60		rts				rts
.019381					USRDefault:
.019381	20 57 85	jsr $018557			jsr ERR_Handler
>019384	4e 6f 20 55 53 52 20 76			.text "No USR vector.",0
>01938c	65 63 74 6f 72 2e 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/val.asm

.019393					Unary_Val:
.019393	20 67 90	jsr $019067			jsr 	EvaluateStringX 			; get string
.019396	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; check right bracket.
.019399	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; put string address +1 into zGenPtr
.01939b	85 1e		sta $1e				sta 	zGenPtr
.01939d	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01939f	85 1f		sta $1f				sta 	zGenPtr+1
.0193a1	5a		phy				phy
.0193a2	a0 00		ldy #$00			ldy 	#0 							; get count of characters.
.0193a4	b1 1e		lda ($1e),y			lda 	(zGenPtr),y  				; if zero, it's bad obviously :)
.0193a6	f0 54		beq $0193fc			beq 	_UVBadNumber
.0193a8	48		pha				pha 								; save length.
.0193a9	1a		inc a				inc 	a 							; one for the length, one for the terminator
.0193aa	1a		inc a				inc 	a
.0193ab	20 c4 96	jsr $0196c4			jsr 	AllocateTempString
.0193ae	c8		iny				iny 								; move to the next.
.0193af	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get character
.0193b1	49 2d		eor #$2d			eor 	#"-"						; zero if minus sign
.0193b3	8d a0 03	sta $03a0			sta 	ValSign
.0193b6	d0 04		bne $0193bc			bne 	_UVNotMinus
.0193b8	c8		iny				iny 								; skip over it.
.0193b9	68		pla				pla 								; decrement character count.
.0193ba	3a		dec a				dec 	a
.0193bb	48		pha				pha
.0193bc					_UVNotMinus:
.0193bc	68		pla				pla 								; this is the count.
.0193bd	48		pha		_UVCopy:pha									; copy into new temp string which is ASCIIZ
.0193be	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.0193c0	c8		iny				iny
.0193c1	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.0193c4	68		pla				pla
.0193c5	3a		dec a				dec 	a
.0193c6	d0 f5		bne $0193bd			bne 	_UVCopy
.0193c8	20 ef 96	jsr $0196ef			jsr 	WriteTempString 			; make it ASCIIZ
.0193cb	18		clc				clc
.0193cc	a5 20		lda $20				lda 	zTempStr 					; tempstring +1 => genptr
.0193ce	69 01		adc #$01			adc 	#1
.0193d0	85 1e		sta $1e				sta 	zGenPtr
.0193d2	a5 21		lda $21				lda 	zTempStr+1
.0193d4	69 00		adc #$00			adc 	#0
.0193d6	85 1f		sta $1f				sta 	zGenPtr+1
.0193d8	18		clc				clc
.0193d9	20 bc 9c	jsr $019cbc			jsr 	IntFromString 				; first bit.
.0193dc	b0 1e		bcs $0193fc			bcs 	_UVBadNumber
.0193de	20 fd a1	jsr $01a1fd			jsr 	FPFromString				; try for a float part.
.0193e1	ad a0 03	lda $03a0			lda 	ValSign 					; was it negative
.0193e4	d0 10		bne $0193f6			bne 	_UVNotNegative
.0193e6	b5 85		lda $85,x			lda 	XS_Type,x 					; check if integer
.0193e8	4a		lsr a				lsr 	a
.0193e9	b0 08		bcs $0193f3			bcs 	_UVInteger
.0193eb	b5 85		lda $85,x			lda 	XS_Type,x 					; set sign bit
.0193ed	09 80		ora #$80			ora 	#$80
.0193ef	95 85		sta $85,x			sta 	XS_Type,x
.0193f1	80 03		bra $0193f6			bra 	_UVNotNegative
.0193f3					_UVInteger:
.0193f3	20 ea 9b	jsr $019bea			jsr 	IntegerNegateAlways 		; sign it.
.0193f6					_UVNotNegative:
.0193f6	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; used everything
.0193f8	d0 02		bne $0193fc			bne 	_UVBadNumber
.0193fa	7a		ply				ply
.0193fb	60		rts				rts
.0193fc					_UVBadNumber:
.0193fc	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/str.asm

.0193ff					Unary_Str:
.0193ff	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; numeric parameter
.019402	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.019405	a9 00		lda #$00			lda 	#0 							; reset buffer index
.019407	8d 14 03	sta $0314			sta 	NumBufX
.01940a	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.01940c	4a		lsr a				lsr 	a
.01940d	b0 05		bcs $019414			bcs 	_USInt 						; if msb set do as integer
.01940f	20 42 a1	jsr $01a142			jsr 	FPToString 					; call fp to str otherwise
.019412	80 03		bra $019417			bra 	_USDuplicate
.019414	20 07 9c	jsr $019c07	_USInt:	jsr 	IntToString
.019417					_USDuplicate:
.019417	ad 14 03	lda $0314			lda 	NumBufX 					; chars in buffer
.01941a	1a		inc a				inc 	a 							; one more for length
.01941b	20 c4 96	jsr $0196c4			jsr 	AllocateTempString 			; allocate space for it.
.01941e	5a		phy				phy 								; save Y
.01941f	a0 00		ldy #$00			ldy 	#0 							; start copying
.019421	b9 15 03	lda $0315,y	_USCopy:lda 	Num_Buffer,y 				; get and write
.019424	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.019427	c8		iny				iny
.019428	cc 14 03	cpy $0314			cpy 	NumBufX 					; done the lot
.01942b	d0 f4		bne $019421			bne 	_USCopy
.01942d	7a		ply				ply 								; restore Y
.01942e	4c f9 95	jmp $0195f9			jmp 	UnaryReturnTempStr 			; return new temporary string.

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/asc.asm

.019431					Unary_Asc:
.019431	20 67 90	jsr $019067			jsr 	EvaluateStringX 			; string parameter
.019434	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.019437	5a		phy				phy 								; get the string length
.019438	a0 00		ldy #$00			ldy 	#0
.01943a	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.01943c	f0 07		beq $019445			beq 	_UAIllegal 					; must be at least one character
.01943e	c8		iny				iny
.01943f	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; read it.
.019441	7a		ply				ply
.019442	4c bf 92	jmp $0192bf			jmp 	UnarySetAInteger
.019445					_UAIllegal:
.019445	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/len.asm

.019448					Unary_Len:
.019448	20 67 90	jsr $019067			jsr 	EvaluateStringX 			; string parameter
.01944b	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.01944e	5a		phy				phy 								; get the string length
.01944f	a0 00		ldy #$00			ldy 	#0
.019451	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.019453	7a		ply				ply
.019454	4c bf 92	jmp $0192bf			jmp 	UnarySetAInteger

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/slice.asm

.019457					Unary_Mid:
.019457	20 67 90	jsr $019067			jsr 	EvaluateStringX 				; get string.
.01945a	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.01945c	48		pha				pha
.01945d	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01945f	48		pha				pha
.019460	20 8c 96	jsr $01968c			jsr 	CheckNextComma 					; skip comma
.019463	20 ec 94	jsr $0194ec			jsr 	SLIByteParameter 				; get a byte parameter (start)
.019466	48		pha				pha 									; and push it.
.019467	20 8c 96	jsr $01968c			jsr 	CheckNextComma 					; skip comma
.01946a	20 ec 94	jsr $0194ec			jsr 	SLIByteParameter 				; get a byte parameter (#chars)
.01946d	48		pha				pha 									; and push it.
.01946e	80 41		bra $0194b1			bra 	SLIProcess
.019470					Unary_Left:
.019470	20 67 90	jsr $019067			jsr 	EvaluateStringX 				; get string.
.019473	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.019475	48		pha				pha
.019476	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019478	48		pha				pha
.019479	a9 01		lda #$01			lda 	#1 								; push start position (1)
.01947b	48		pha				pha
.01947c	20 8c 96	jsr $01968c			jsr 	CheckNextComma 					; skip comma
.01947f	20 ec 94	jsr $0194ec			jsr 	SLIByteParameter 				; get a byte parameter (# chars)
.019482	48		pha				pha 									; and push it.
.019483	80 2c		bra $0194b1			bra 	SLIProcess
.019485					Unary_Right:
.019485	20 67 90	jsr $019067			jsr 	EvaluateStringX 				; get string.
.019488	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.01948a	48		pha				pha
.01948b	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01948d	48		pha				pha
.01948e	da		phx				phx 									; get the string length and push on stack.
.01948f	a2 00		ldx #$00			ldx 	#0
.019491	a1 1e		lda ($1e,x)			lda		(zGenPtr,x)
.019493	fa		plx				plx
.019494	48		pha				pha
.019495	20 8c 96	jsr $01968c			jsr 	CheckNextComma 					; skip comma
.019498	20 ec 94	jsr $0194ec			jsr 	SLIByteParameter 				; get a byte parameter.
.01949b	8d 9e 03	sta $039e			sta 	SignCount 						; save in temporary.
.01949e	68		pla				pla 									; restore string length.
.01949f	1a		inc a				inc 	a 								; we add one. length 5, right 2, we start at 4.
.0194a0	38		sec				sec
.0194a1	ed 9e 03	sbc $039e			sbc 	SignCount 						; subtract characters needed, gives start position.
.0194a4	f0 02		beq $0194a8			beq 	_URStart 						; if <= 0 start from 1.
.0194a6	10 02		bpl $0194aa			bpl 	_UROkay
.0194a8					_URStart:
.0194a8	a9 01		lda #$01			lda 	#1
.0194aa					_UROkay:
.0194aa	48		pha				pha 									; push start
.0194ab	ad 9e 03	lda $039e			lda 	SignCount 						; push count of characters
.0194ae	48		pha				pha
.0194af	80 00		bra $0194b1			bra 	SLIProcess
.0194b1					SLIProcess:
.0194b1	20 84 96	jsr $019684			jsr 	CheckNextRParen 				; closing right bracket.
.0194b4	68		pla				pla
.0194b5	8d a2 03	sta $03a2			sta 	SliceCount 						; count in signcount
.0194b8	1a		inc a				inc 	a 								; allocate +1 for it.
.0194b9	20 c4 96	jsr $0196c4			jsr 	AllocateTempString
.0194bc	68		pla				pla 									; pop start number off stack.
.0194bd	f0 3b		beq $0194fa			beq 	SLIError 						; exit if start = 0
.0194bf	8d a1 03	sta $03a1			sta 	SliceStart
.0194c2	68		pla				pla  									; pop string address.
.0194c3	85 1f		sta $1f				sta 	zGenPtr+1
.0194c5	68		pla				pla
.0194c6	85 1e		sta $1e				sta 	zGenPtr
.0194c8	da		phx				phx
.0194c9	5a		phy				phy
.0194ca	a2 00		ldx #$00			ldx 	#0 								; point to string length.
.0194cc	ac a1 03	ldy $03a1			ldy 	SliceStart 						; start of the string (+1 for count)
.0194cf					_SLICopy:
.0194cf	ad a2 03	lda $03a2			lda 	SliceCount 						; done count characters
.0194d2	f0 12		beq $0194e6			beq 	_SLIExit
.0194d4	ce a2 03	dec $03a2			dec 	SliceCount
.0194d7	98		tya				tya 									; index of character
.0194d8	c1 1e		cmp ($1e,x)			cmp 	(zGenPtr,x)						; compare against length
.0194da	f0 02		beq $0194de			beq 	_SLIOk 							; if equal, okay.
.0194dc	b0 08		bcs $0194e6			bcs 	_SLIExit 						; if past end, then exit.
.0194de	b1 1e		lda ($1e),y	_SLIOk:	lda 	(zGenPtr),y 					; copy one character
.0194e0	c8		iny				iny
.0194e1	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.0194e4	80 e9		bra $0194cf			bra 	_SLICopy 						; go round till copied characters
.0194e6					_SLIExit:
.0194e6	7a		ply				ply 									; restore YX
.0194e7	fa		plx				plx
.0194e8	4c f9 95	jmp $0195f9			jmp 	UnaryReturnTempStr 				; return new temporary string.
.0194eb	ea		nop				nop
.0194ec					SLIByteParameter:
.0194ec	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 				; get integer
.0194ef	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 				; check high bytes zero
.0194f1	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0194f3	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0194f5	d0 03		bne $0194fa			bne 	SLIError
.0194f7	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.0194f9	60		rts				rts
.0194fa					SLIError:
.0194fa	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/hex.asm

.0194fd					Unary_Hex:
.0194fd	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 			; numeric parameter
.019500	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.019503	a9 09		lda #$09			lda 	#9 							; allocate 9 bytes (8 chars + length)
.019505	20 c4 96	jsr $0196c4			jsr 	AllocateTempString			; allocate string space
.019508	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; do each byte in turn.
.01950a	20 2e 95	jsr $01952e			jsr 	_UHConvert
.01950d	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01950f	20 2e 95	jsr $01952e			jsr 	_UHConvert
.019512	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019514	20 2e 95	jsr $01952e			jsr 	_UHConvert
.019517	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019519	20 2e 95	jsr $01952e			jsr 	_UHConvert
.01951c	5a		phy				phy 								; get length of new string
.01951d	a0 00		ldy #$00			ldy 	#0
.01951f	b1 20		lda ($20),y			lda 	(zTempStr),y
.019521	7a		ply				ply
.019522	c9 00		cmp #$00			cmp 	#0
.019524	d0 05		bne $01952b			bne 	_UHExit 					; if it was non zero okay
.019526	a9 30		lda #$30			lda 	#"0" 						; empty, output one zero.
.019528	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.01952b					_UHExit:
.01952b	4c f9 95	jmp $0195f9			jmp 	UnaryReturnTempStr 			; return new temporary string.
.01952e					_UHConvert:
.01952e	48		pha				pha
.01952f	4a		lsr a				lsr 	a 							; do MSB
.019530	4a		lsr a				lsr 	a
.019531	4a		lsr a				lsr 	a
.019532	4a		lsr a				lsr 	a
.019533	20 37 95	jsr $019537			jsr 	_UHNibble
.019536	68		pla				pla 								; do LSB
.019537					_UHNibble:
.019537	29 0f		and #$0f			and 	#15 						; get nibble
.019539	d0 0c		bne $019547			bne 	_UHNonZero
.01953b	5a		phy				phy									; get the length
.01953c	a0 00		ldy #$00			ldy 	#0
.01953e	b1 20		lda ($20),y			lda 	(zTempStr),y
.019540	7a		ply				ply
.019541	c9 00		cmp #$00			cmp 	#0 							; suppress leading zeros.
.019543	f0 0d		beq $019552			beq 	_UHExit2
.019545	a9 00		lda #$00			lda 	#0
.019547					_UHNonZero:
.019547	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.019549	90 02		bcc $01954d			bcc 	_UHDigit
.01954b	69 06		adc #$06			adc 	#7-1
.01954d					_UHDigit:
.01954d	69 30		adc #$30			adc 	#48
.01954f	20 ef 96	jsr $0196ef			jsr 	WriteTempString				; output.
.019552					_UHExit2:
.019552	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/dec.asm

.019553					Unary_Dec:
.019553	20 67 90	jsr $019067			jsr 	EvaluateStringX 			; string parameter
.019556	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.019559	5a		phy				phy
.01955a	a0 00		ldy #$00			ldy 	#0 							; get length of hex string.
.01955c	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.01955e	f0 41		beq $0195a1			beq 	_UDFail 					; must fail if zero.
.019560	8d 9e 03	sta $039e			sta 	SignCount 					; use SignCount as a counter
.019563	a9 00		lda #$00			lda 	#0 							; set result to zero integer.
.019565	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019567	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019569	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01956b	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01956d	a9 01		lda #$01			lda 	#1
.01956f	95 85		sta $85,x			sta 	XS_Type,x
.019571					_UDConvertLoop:
.019571	5a		phy				phy 								; shift mantissa left 4
.019572	a0 04		ldy #$04			ldy 	#4
.019574					_UDShift:
.019574	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.019576	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019578	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.01957a	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.01957c	88		dey				dey
.01957d	d0 f5		bne $019574			bne 	_UDShift
.01957f	7a		ply				ply
.019580	c8		iny				iny 								; next character
.019581	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; fetch it.
.019583	20 a4 95	jsr $0195a4			jsr 	ConvertUpper 				; convert to U/C
.019586	c9 30		cmp #$30			cmp 	#"0"
.019588	90 17		bcc $0195a1			bcc 	_UDFail
.01958a	c9 3a		cmp #$3a			cmp 	#"9"+1
.01958c	90 06		bcc $019594			bcc 	_UDOkay
.01958e	e9 37		sbc #$37			sbc 	#7+"0" 						; alpha fudge
.019590	c9 10		cmp #$10			cmp 	#16
.019592	b0 0d		bcs $0195a1			bcs 	_UDFail
.019594					_UDOkay:
.019594	29 0f		and #$0f			and 	#15 						; nibble only
.019596	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.019598	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01959a	ce 9e 03	dec $039e			dec 	SignCount 					; do it for each character
.01959d	d0 d2		bne $019571			bne 	_UDConvertLoop
.01959f	7a		ply				ply
.0195a0	60		rts				rts
.0195a1					_UDFail:
.0195a1	4c 46 85	jmp $018546			jmp 	BadParamError
.0195a4					ConvertUpper:
.0195a4	c9 61		cmp #$61			cmp 	#"a"
.0195a6	90 07		bcc $0195af			bcc 	_CUExit
.0195a8	c9 7b		cmp #$7b			cmp 	#"z"+1
.0195aa	b0 03		bcs $0195af			bcs 	_CUExit
.0195ac	38		sec				sec
.0195ad	e9 20		sbc #$20			sbc 	#32
.0195af	60		rts		_CUExit:rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/chr.asm

.0195b0					Unary_Chr:
.0195b0	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX			; numeric parameter
.0195b3	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.0195b6	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.0195b8	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0195ba	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0195bc	d0 0d		bne $0195cb			bne 	_UCChar
.0195be	a9 01		lda #$01			lda 	#1 							; one character string
.0195c0	20 c4 96	jsr $0196c4			jsr 	AllocateTempString
.0195c3	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; get char# and write it.
.0195c5	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.0195c8	4c f9 95	jmp $0195f9			jmp 	UnaryReturnTempStr
.0195cb					_UCChar:
.0195cb	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/spc.asm

.0195ce					Unary_Spc:
.0195ce	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 			; numeric parameter
.0195d1	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; right bracket.
.0195d4	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.0195d6	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0195d8	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0195da	d0 1a		bne $0195f6			bne 	_USSize
.0195dc	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.0195de	c9 fe		cmp #$fe			cmp 	#maxString+1
.0195e0	b0 14		bcs $0195f6			bcs 	_USSize
.0195e2	48		pha				pha 								; save length
.0195e3	1a		inc a				inc 	a 							; allocate one more.
.0195e4	20 c4 96	jsr $0196c4			jsr 	AllocateTempString
.0195e7	68		pla				pla 								; get length
.0195e8	f0 0f		beq $0195f9			beq 	UnaryReturnTempStr 			; return the current temp string
.0195ea					_USLoop:
.0195ea	48		pha				pha
.0195eb	a9 20		lda #$20			lda 	#" "
.0195ed	20 ef 96	jsr $0196ef			jsr 	WriteTempString
.0195f0	68		pla				pla
.0195f1	3a		dec a				dec 	a
.0195f2	d0 f6		bne $0195ea			bne 	_USLoop
.0195f4	80 03		bra $0195f9			bra 	UnaryReturnTempStr
.0195f6					_USSize:
.0195f6	4c 46 85	jmp $018546			jmp 	BadParamError
.0195f9					UnaryReturnTempStr:
.0195f9	a5 20		lda $20				lda 	zTempStr 					; copy temp string addr -> mantissa
.0195fb	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0195fd	a5 21		lda $21				lda 	zTempStr+1
.0195ff	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019601	a9 02		lda #$02			lda 	#2 							; set type to string
.019603	95 85		sta $85,x			sta 	XS_Type,x
.019605	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/memory/65816.asm

.019606					MemRead:
.019606	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.019609	a0 00		ldy #$00			ldy 	#0 							; start from here
.01960b	b7 1a		lda [$1a],y	_MLoop1:lda 	[zlTemp1],y 				; read the long address
.01960d	95 80		sta $80,x			sta 	XS_Mantissa,x 				; copy into mantissa
.01960f	c8		iny				iny 								; next to copy
.019610	e8		inx				inx
.019611	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.019614	d0 f5		bne $01960b			bne 	_MLoop1
.019616	60		rts				rts
.019617					MemWrite:
.019617	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.01961a	a0 00		ldy #$00			ldy 	#0 							; start from here
.01961c	b5 80		lda $80,x	_MLoop1:lda 	XS_Mantissa,x 				; read mantisssa
.01961e	97 1a		sta [$1a],y			sta 	[zlTemp1],y 				; write it out
.019620	c8		iny				iny 								; next to copy
.019621	e8		inx				inx
.019622	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.019625	d0 f5		bne $01961c			bne 	_MLoop1
.019627	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/programend.asm

.019628					UpdateProgramEnd:
.019628	a9 00		lda #$00			lda 	#BasicProgram & $FF
.01962a	85 16		sta $16				sta 	zCodePtr+0
.01962c	a9 10		lda #$10			lda 	#BasicProgram >> 8
.01962e	85 17		sta $17				sta 	zCodePtr+1
.019630	a9 00		lda #$00			lda 	#0
.019632	85 18		sta $18				sta 	zCodePtr+2
.019634	85 19		sta $19				sta 	zCodePtr+3
.019636	a0 03		ldy #$03			ldy 	#3
.019638					_UPDLoop:
.019638	a0 00		ldy #$00			ldy 	#0
.01963a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01963c	c9 00		cmp #$00			cmp 	#0 							; end if offset is zero.
.01963e	f0 0f		beq $01964f			beq 	_UPDFoundEnd
.019640	a0 00		ldy #$00			ldy 	#0 							; point to offset
.019642	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.019644	18		clc				clc
.019645	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.019647	85 16		sta $16				sta 	zCodePtr
.019649	90 02		bcc $01964d			bcc 	_SNLNoCarry
.01964b	e6 17		inc $17				inc 	zCodePtr+1
.01964d					_SNLNoCarry:
.01964d	80 e9		bra $019638			bra 	_UPDLoop
.01964f					_UPDFoundEnd:
.01964f	18		clc				clc 								; end of program 2 on.
.019650	a5 16		lda $16				lda 	zCodePtr
.019652	69 02		adc #$02			adc 	#2
.019654	8d 04 03	sta $0304			sta 	endOfProgram
.019657	a5 17		lda $17				lda 	zCodePtr+1
.019659	69 00		adc #$00			adc 	#0
.01965b	8d 05 03	sta $0305			sta 	endOfProgram+1
.01965e	a5 18		lda $18				lda 	zCodePtr+2
.019660	69 00		adc #$00			adc		#0
.019662	8d 06 03	sta $0306			sta 	endOfProgram+2
.019665	a5 19		lda $19				lda 	zCodePtr+3
.019667	69 00		adc #$00			adc 	#0
.019669	8d 07 03	sta $0307			sta 	endOfProgram+3
.01966c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.asm

.01966d					CheckNextToken:
.01966d	d7 16		cmp [$16],y			cmp 	[zCodePtr],y
.01966f	d0 02		bne $019673			bne 	CTFail 						; no, then fail
.019671	c8		iny				iny
.019672	60		rts				rts
.019673					CTFail:
.019673	20 57 85	jsr $018557			jsr ERR_Handler
>019676	4d 69 73 73 69 6e 67 20			.text "Missing token",0
>01967e	74 6f 6b 65 6e 00
.019684					CheckNextRParen:
.019684	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019686	c9 be		cmp #$be			cmp 	#token_rparen
.019688	d0 e9		bne $019673			bne 	CTFail
.01968a	c8		iny				iny
.01968b	60		rts				rts
.01968c					CheckNextComma:
.01968c	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01968e	c9 bf		cmp #$bf			cmp 	#token_comma
.019690	d0 e1		bne $019673			bne 	CTFail
.019692	c8		iny				iny
.019693	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/concrete.asm

.019694					StringConcrete:
.019694	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; save source to zTemp1
.019696	85 10		sta $10				sta 	zTemp1
.019698	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01969a	85 11		sta $11				sta 	zTemp1+1
.01969c	a0 00		ldy #$00			ldy 	#0 							; subtract the length+1 (clc) of the string.
.01969e	18		clc				clc 								; from the string pointer
.01969f	ad 00 03	lda $0300			lda 	StringPtr 					; and put in zTemp2 as well
.0196a2	f1 10		sbc ($10),y			sbc 	(zTemp1),y
.0196a4	8d 00 03	sta $0300			sta 	StringPtr
.0196a7	85 12		sta $12				sta 	zTemp2
.0196a9	ad 01 03	lda $0301			lda 	StringPtr+1
.0196ac	e9 00		sbc #$00			sbc 	#0
.0196ae	8d 01 03	sta $0301			sta 	StringPtr+1
.0196b1	85 13		sta $13				sta 	zTemp2+1
.0196b3	b1 10		lda ($10),y			lda 	(zTemp1),y 					; length add one for count
.0196b5	1a		inc a				inc 	a
.0196b6	aa		tax				tax
.0196b7	b1 10		lda ($10),y	_SCCopy:lda 	(zTemp1),y 					; copy whole thing including length
.0196b9	91 12		sta ($12),y			sta 	(zTemp2),y
.0196bb	c8		iny				iny
.0196bc	ca		dex				dex
.0196bd	d0 f8		bne $0196b7			bne 	_SCCopy
.0196bf	a5 13		lda $13				lda 	zTemp2+1 					; return concrete string in AX
.0196c1	a6 12		ldx $12				ldx 	zTemp2
.0196c3	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/tempalloc.asm

.0196c4					AllocateTempString:
.0196c4	48		pha				pha 								; save required count.
.0196c5	a5 21		lda $21				lda 	zTempStr+1 					; check if initialised yet ?
.0196c7	d0 0b		bne $0196d4			bne 	_ATSInitialised
.0196c9	ad 00 03	lda $0300			lda 	StringPtr 					; set temporary string ptr 1 page below available
.0196cc	85 20		sta $20				sta 	zTempStr					; space, this is for strings to be concreted.
.0196ce	ad 01 03	lda $0301			lda 	StringPtr+1
.0196d1	3a		dec a				dec 	a
.0196d2	85 21		sta $21				sta 	zTempStr+1
.0196d4					_ATSInitialised:
.0196d4	68		pla				pla 								; get required count back.
.0196d5	49 ff		eor #$ff			eor 	#$FF 						; negate 2's complement.
.0196d7	1a		inc a				inc 	a
.0196d8	18		clc				clc
.0196d9	65 20		adc $20				adc 	zTempStr 					; "add" to the temp string pointer
.0196db	85 20		sta $20				sta 	zTempStr
.0196dd	a9 ff		lda #$ff			lda 	#$FF
.0196df	65 21		adc $21				adc 	zTempStr+1
.0196e1	85 21		sta $21				sta 	zTempStr+1
.0196e3	a9 00		lda #$00			lda 	#0 							; clear temp string.
.0196e5	5a		phy				phy
.0196e6	a8		tay				tay
.0196e7	91 20		sta ($20),y			sta 	(zTempStr),y
.0196e9	7a		ply				ply
.0196ea	1a		inc a				inc 	a 							; reset the write index.
.0196eb	8d 9f 03	sta $039f			sta 	TempStringWriteIndex
.0196ee	60		rts				rts
.0196ef					WriteTempString:
.0196ef	5a		phy				phy 								; save Y
.0196f0	ac 9f 03	ldy $039f			ldy 	TempStringWriteIndex	 	; write position.
.0196f3	91 20		sta ($20),y			sta 	(zTempStr),y 				; write character out.
.0196f5	ee 9f 03	inc $039f			inc 	TempStringWriteIndex 		; increment the write position.
.0196f8	98		tya				tya 								; unchanged Y is now length
.0196f9	a0 00		ldy #$00			ldy 	#0
.0196fb	91 20		sta ($20),y			sta 	(zTempStr),y
.0196fd	7a		ply				ply 								; restore Y and exit
.0196fe	60		rts				rts
.0196ff					CreateTempStringCopy:
.0196ff	da		phx				phx 								; save X
.019700	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019702	3a		dec a				dec 	a 							; we need one more than actual length for temp str
.019703	20 c4 96	jsr $0196c4			jsr 	AllocateTempString 			; allocate memory for temporary string.
.019706	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019708	c8		iny				iny
.019709	3a		dec a				dec 	a 							; make the actual length in charactes
.01970a	3a		dec a				dec 	a
.01970b	a2 00		ldx #$00			ldx 	#0 							; set that as the length of the string.
.01970d	81 20		sta ($20,x)			sta 	(zTempStr,x)
.01970f	85 1a		sta $1a				sta 	zLTemp1 					; that's used as a count.
.019711	09 00		ora #$00			ora 	#0 							; if zero already, exit
.019713	f0 0e		beq $019723			beq 	_CTSCExit
.019715					_CTSCLoop:
.019715	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019717	c8		iny				iny
.019718	5a		phy				phy 								; save in Y
.019719	e8		inx				inx 								; bump index
.01971a	da		phx				phx 								; index into Y
.01971b	7a		ply				ply
.01971c	91 20		sta ($20),y			sta 	(zTempStr),y 				; save at index
.01971e	7a		ply				ply 								; restore Y
.01971f	c6 1a		dec $1a				dec 	zLTemp1 					; do for each character
.019721	d0 f2		bne $019715			bne 	_CTSCLoop
.019723					_CTSCExit:
.019723	fa		plx				plx 								; restore X
.019724	60		rts				rts 								; exit

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/variables.asm

.019725					VariableFind:
.019725	20 90 97	jsr $019790			jsr 	VariableExtract 		; find out all about it ....
.019728	20 29 9a	jsr $019a29			jsr 	VariableLocate 			; does it already exist ?
.01972b	b0 03		bcs $019730			bcs 	_VFExists 				; if so, use that.
.01972d	20 1c 98	jsr $01981c			jsr 	VariableCreate 			; otherwise create it.
.019730					_VFExists:
.019730	a5 24		lda $24				lda 	zVarType 				; is it still an array ?
.019732	29 01		and #$01			and 	#1
.019734	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.019736	d0 28		bne $019760			bne 	_VFSingleElement
.019738					_VFNextIndex:
.019738	a5 22		lda $22				lda 	zVarDataPtr 			; push the data ptr and type on the stack.
.01973a	48		pha				pha
.01973b	a5 23		lda $23				lda 	zVarDataPtr+1
.01973d	48		pha				pha
.01973e	a5 24		lda $24				lda 	zVarType
.019740	48		pha				pha
.019741	20 5e 90	jsr $01905e			jsr 	EvaluateIntegerX 		; calculate the index.
.019744	68		pla				pla 							; restore and index.
.019745	85 24		sta $24				sta 	zVarType
.019747	68		pla				pla
.019748	85 23		sta $23				sta 	zVarDataPtr+1
.01974a	68		pla				pla
.01974b	85 22		sta $22				sta 	zVarDataPtr
.01974d	20 a7 98	jsr $0198a7			jsr 	ArrayIndexFollow 		; do the index.
.019750	a5 24		lda $24				lda 	zVarType 				; is it still an array ??
.019752	29 01		and #$01			and 	#1
.019754	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.019756	d0 05		bne $01975d			bne 	_VFArrayDone 			; if so then exit.
.019758	20 8c 96	jsr $01968c			jsr 	CheckNextComma 			; comma should follow
.01975b	80 db		bra $019738			bra 	_VFNextIndex
.01975d					_VFArrayDone:
.01975d	20 84 96	jsr $019684			jsr 	CheckNextRParen 		; check closing right bracket.
.019760					_VFSingleElement:
.019760	60		rts				rts
.019761					VariableClear:
.019761	48		pha				pha 							; save registers
.019762	da		phx				phx
.019763	a2 00		ldx #$00			ldx 	#0 						; clear out the hash table.
.019765	8a		txa				txa
.019766	9d 35 03	sta $0335,x	_VCLoop:sta 	HashTableBase,x
.019769	e8		inx				inx
.01976a	e0 60		cpx #$60			cpx 	#HashTableEnd-HashTableBase
.01976c	d0 f8		bne $019766			bne 	_VCLoop
.01976e	a9 00		lda #$00			lda 	#VariableMemory & $FF
.019770	8d 02 03	sta $0302			sta 	VarMemPtr
.019773	a9 30		lda #$30			lda 	#VariableMemory >> 8
.019775	8d 03 03	sta $0303			sta 	VarMemPtr+1
.019778	fa		plx				plx 							; restore registers
.019779	68		pla				pla
.01977a	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/extract.asm

.01977b					VariableNameError:
.01977b	20 57 85	jsr $018557			jsr ERR_Handler
>01977e	42 61 64 20 56 61 72 69			.text "Bad Variable Name",0
>019786	61 62 6c 65 20 4e 61 6d 65 00
.019790					VariableExtract:
.019790	da		phx				phx 							; save X.
.019791	a9 ba		lda #$ba			lda 	#token_hashlParen  		; set the type to #( e.g. real array.
.019793	8d 95 03	sta $0395			sta 	Var_Type
.019796	8d 96 03	sta $0396			sta 	Var_Hash 				; we initialise the hash with this. It doesn't matter
.019799	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01979b	c9 00		cmp #$00			cmp 	#0 						; first one must be A-Z
.01979d	f0 dc		beq $01977b			beq 	VariableNameError
.01979f	c9 1b		cmp #$1b			cmp 	#26+1
.0197a1	b0 d8		bcs $01977b			bcs 	VariableNameError
.0197a3	a2 ff		ldx #$ff			ldx 	#255 					; now copy it into the variable buffer.
.0197a5					_VECopyBuffer:
.0197a5	e8		inx				inx
.0197a6	e0 1f		cpx #$1f			cpx 	#31 					; too long
.0197a8	f0 d1		beq $01977b			beq 	VariableNameError
.0197aa	9d 15 03	sta $0315,x			sta 	Var_Buffer,x 			; save character
.0197ad	18		clc				clc  							; update the hash value for it.
.0197ae	6d 96 03	adc $0396			adc 	Var_Hash
.0197b1	8d 96 03	sta $0396			sta 	Var_Hash
.0197b4	c8		iny				iny
.0197b5	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0197b7	c9 00		cmp #$00			cmp 	#0 						; zero or token, end of variable
.0197b9	f0 0e		beq $0197c9			beq 	_VECopyEnd
.0197bb	30 0c		bmi $0197c9			bmi 	_VECopyEnd
.0197bd	c9 1b		cmp #$1b			cmp 	#26+1 					; A-Z continue copying
.0197bf	90 e4		bcc $0197a5			bcc 	_VECopyBuffer
.0197c1	c9 30		cmp #$30			cmp 	#"0" 					; 0-9 copy as well.
.0197c3	90 04		bcc $0197c9			bcc 	_VECopyEnd
.0197c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.0197c7	90 dc		bcc $0197a5			bcc 	_VECopyBuffer
.0197c9					_VECopyEnd:
.0197c9	c8		iny				iny
.0197ca	c9 b7		cmp #$b7			cmp 	#token_Dollar 			; first type token.
.0197cc	90 04		bcc $0197d2			bcc 	_VEDefaultRequired
.0197ce	c9 bd		cmp #$bd			cmp 	#token_PercentLParen+1	; last type token.
.0197d0	90 0b		bcc $0197dd			bcc 	_VEHaveType
.0197d2					_VEDefaultRequired:
.0197d2	c9 bd		cmp #$bd			cmp 	#token_LParen 			; if it ends in ( then use the real array
.0197d4	f0 04		beq $0197da			beq 	_VESetType 				; default set above.
.0197d6	ce 95 03	dec $0395			dec 	Var_Type 				; this changes that default to the variable default
.0197d9	88		dey				dey
.0197da					_VESetType:
.0197da	ad 95 03	lda $0395			lda 	Var_Type 				; get type ....
.0197dd					_VEHaveType:
.0197dd	8d 95 03	sta $0395			sta 	Var_Type 				; save as type.
.0197e0	bd 15 03	lda $0315,x			lda 	Var_Buffer,x 			; set bit 7 of name, marks the end.
.0197e3	09 80		ora #$80			ora 	#$80
.0197e5	9d 15 03	sta $0315,x			sta 	Var_Buffer,x
.0197e8	e8		inx				inx 							; offset 3 => length 4.
.0197e9	8e 97 03	stx $0397			stx 	Var_Length 				; save length of variable name.
.0197ec	ad 95 03	lda $0395			lda 	Var_Type 				; get offset of var type from first type token
.0197ef	38		sec				sec
.0197f0	e9 b7		sbc #$b7			sbc 	#token_Dollar
.0197f2	0a		asl a				asl 	a 						; multiply by 16. This requires HashTableSize
.0197f3	0a		asl a				asl 	a 						; in data.asm to be 8 (8 sets of links,2 bytes each)
.0197f4	0a		asl a				asl 	a
.0197f5	0a		asl a				asl 	a
.0197f6	8d 98 03	sta $0398			sta 	Var_HashAddress
.0197f9	ad 96 03	lda $0396			lda 	Var_Hash 				; get the hash
.0197fc	29 07		and #$07			and 	#(HashTableSize-1) 		; force into range 0-tableSize-1
.0197fe	0a		asl a				asl 	a 						; double it (2 bytes per entry) & clears carry
.0197ff	6d 98 03	adc $0398			adc 	Var_HashAddress 		; add table offset.
.019802	69 35		adc #$35			adc 	#HashTableBase & $FF 	; now the low byte of the actual table address
.019804	8d 98 03	sta $0398			sta 	Var_HashAddress
.019807	a2 05		ldx #$05			ldx 	#5 						; hash is 5 bytes (real)
.019809	ad 95 03	lda $0395			lda 	Var_Type
.01980c	c9 b9		cmp #$b9			cmp 	#token_Hash
.01980e	f0 07		beq $019817			beq 	_VEHaveSize
.019810	ca		dex				dex
.019811	c9 bb		cmp #$bb			cmp 	#token_Percent 			; percent is 4 bytes (integer)
.019813	f0 02		beq $019817			beq 	_VEHaveSize
.019815	a2 02		ldx #$02			ldx 	#2 						; everything else is two.
.019817					_VEHaveSize:
.019817	8e 99 03	stx $0399			stx 	Var_DataSize
.01981a	fa		plx				plx
.01981b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varcreate.asm

.01981c					VariableCreate:
.01981c	da		phx				phx
.01981d	5a		phy				phy
.01981e	ad 02 03	lda $0302			lda 	VarMemPtr 					; get address of next free into zTemp1
.019821	85 10		sta $10				sta 	zTemp1
.019823	ad 03 03	lda $0303			lda 	VarMemPtr+1
.019826	85 11		sta $11				sta 	zTemp1+1
.019828	ad 99 03	lda $0399			lda 	Var_DataSize 				; bytes for the data bit
.01982b	18		clc				clc
.01982c	6d 97 03	adc $0397			adc 	Var_Length 					; add the length of the name
.01982f	69 03		adc #$03			adc 	#3 							; 3 for the link and the hash.
.019831	6d 02 03	adc $0302			adc 	VarMemPtr 					; add to variable memory pointer
.019834	8d 02 03	sta $0302			sta 	VarMemPtr
.019837	90 03		bcc $01983c			bcc 	_VCNoCarry
.019839	ee 03 03	inc $0303			inc 	VarMemPtr+1
.01983c					_VCNoCarry:
.01983c	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.01983f	85 12		sta $12				sta 	zTemp2
.019841	a9 03		lda #$03			lda 	#HashTableBase >> 8
.019843	85 13		sta $13				sta 	zTemp2+1
.019845	a0 00		ldy #$00			ldy 	#0 							; put current hash link in position.
.019847	b1 12		lda ($12),y			lda 	(zTemp2),y
.019849	91 10		sta ($10),y			sta 	(zTemp1),y
.01984b	c8		iny				iny
.01984c	b1 12		lda ($12),y			lda 	(zTemp2),y
.01984e	91 10		sta ($10),y			sta 	(zTemp1),y
.019850	c8		iny				iny
.019851	ad 96 03	lda $0396			lda 	Var_Hash 					; write the hash out.
.019854	91 10		sta ($10),y			sta 	(zTemp1),y
.019856	c8		iny				iny
.019857	a2 00		ldx #$00			ldx 	#0 							; copy the name out.
.019859					_VCCopyName:
.019859	bd 15 03	lda $0315,x			lda 	Var_Buffer,x
.01985c	91 10		sta ($10),y			sta 	(zTemp1),y
.01985e	e8		inx				inx
.01985f	c8		iny				iny
.019860	ec 97 03	cpx $0397			cpx 	Var_Length
.019863	d0 f4		bne $019859			bne 	_VCCopyName
.019865	5a		phy				phy 								; save the data offset.
.019866	ae 99 03	ldx $0399			ldx 	Var_DataSize 				; and write the data out.
.019869	a9 00		lda #$00			lda 	#0 							; which is all zeroes.
.01986b					_VCClearData:
.01986b	91 10		sta ($10),y			sta 	(zTemp1),y
.01986d	c8		iny				iny
.01986e	ca		dex				dex
.01986f	d0 fa		bne $01986b			bne 	_VCClearData
.019871	68		pla				pla 								; offset to the data
.019872	18		clc				clc
.019873	65 10		adc $10				adc 	zTemp1 						; add to start and save as data pointer.
.019875	85 22		sta $22				sta 	zVarDataPtr
.019877	a5 11		lda $11				lda 	zTemp1+1
.019879	69 00		adc #$00			adc 	#0
.01987b	85 23		sta $23				sta 	zVarDataPtr+1
.01987d	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.019880	85 24		sta $24				sta 	zVarType
.019882	a5 10		lda $10				lda 	zTemp1 						; fix hash link to point to new record
.019884	a0 00		ldy #$00			ldy 	#0
.019886	91 12		sta ($12),y			sta 	(zTemp2),y
.019888	c8		iny				iny
.019889	a5 11		lda $11				lda 	zTemp1+1
.01988b	91 12		sta ($12),y			sta 	(zTemp2),y
.01988d	ad 95 03	lda $0395			lda 	Var_Type 					; array ? if so create the empty one.
.019890	29 01		and #$01			and 	#1
.019892	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.019894	d0 0e		bne $0198a4			bne 	_VCNotArray
.019896	a2 00		ldx #$00			ldx 	#0 							; call recursive array creator
.019898	20 3e 99	jsr $01993e			jsr 	ArrayCreate
.01989b	5a		phy				phy 								; save YA at zVarDataPtr
.01989c	a0 00		ldy #$00			ldy 	#0
.01989e	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.0198a0	c8		iny				iny
.0198a1	68		pla				pla
.0198a2	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.0198a4					_VCNotArray:
.0198a4	7a		ply				ply
.0198a5	fa		plx				plx
.0198a6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arrayidx.asm

.0198a7					ArrayIndexFollow:
.0198a7	5a		phy				phy
.0198a8	a0 00		ldy #$00			ldy 	#0 							; make zVarDataPtr point to the array.
.0198aa	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; e.g. it points to itself.
.0198ac	48		pha				pha
.0198ad	c8		iny				iny
.0198ae	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198b0	85 23		sta $23				sta 	zVarDataPtr+1
.0198b2	68		pla				pla
.0198b3	85 22		sta $22				sta 	zVarDataPtr
.0198b5	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; MSB of 16 bit integer and bytes 2&3
.0198b7	29 80		and #$80			and 	#$80 						; must be zero.
.0198b9	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0198bb	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0198bd	d0 59		bne $019918			bne 	_AIFError
.0198bf	a0 00		ldy #$00			ldy 	#0 							; calculate size - current - 1
.0198c1	18		clc				clc
.0198c2	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198c4	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.0198c6	c8		iny				iny
.0198c7	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198c9	08		php				php 								; clear bit 7 retaining borrow.
.0198ca	29 7f		and #$7f			and 	#$7F
.0198cc	28		plp				plp
.0198cd	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.0198cf	90 47		bcc $019918			bcc 	_AIFError 					; eror if size-current < 0
.0198d1	b5 80		lda $80,x			lda  	XS_Mantissa+0,x 			; copy and double the index
.0198d3	0a		asl a				asl 	a 							; (e.g. index * 2)
.0198d4	85 10		sta $10				sta 	zTemp1
.0198d6	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0198d8	2a		rol a				rol 	a
.0198d9	85 11		sta $11				sta 	zTemp1+1
.0198db	a0 01		ldy #$01			ldy 	#1 							; is this a data entry.
.0198dd	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; if so, then type is unchanged, offset set
.0198df	30 1d		bmi $0198fe			bmi 	_AIFCalculate
.0198e1	c6 24		dec $24				dec 	zVarType 					; converts from an array to a type.
.0198e3	a5 24		lda $24				lda 	zVarType 					; check that type
.0198e5	c9 b7		cmp #$b7			cmp 	#token_Dollar 				; if string, use x 2
.0198e7	f0 15		beq $0198fe			beq 	_AIFCalculate
.0198e9	06 10		asl $10				asl 	zTemp1			 			; double the index
.0198eb	26 11		rol $11				rol 	zTemp1+1					; (e.g. index * 4)
.0198ed	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if integer, use x 4
.0198ef	f0 0d		beq $0198fe			beq 	_AIFCalculate
.0198f1	18		clc				clc 								; add the original mantissa in again
.0198f2	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; which makes it x5, for float.
.0198f4	65 10		adc $10				adc 	zTemp1
.0198f6	85 10		sta $10				sta 	zTemp1
.0198f8	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0198fa	65 11		adc $11				adc 	zTemp1+1
.0198fc	85 11		sta $11				sta 	zTemp1+1
.0198fe					_AIFCalculate:
.0198fe	18		clc				clc 								; add index x 2,4 or 5 to base
.0198ff	a5 22		lda $22				lda 	zVarDataPtr
.019901	65 10		adc $10				adc 	zTemp1
.019903	85 22		sta $22				sta 	zVarDataPtr
.019905	a5 23		lda $23				lda 	zVarDataPtr+1
.019907	65 11		adc $11				adc 	zTemp1+1
.019909	85 23		sta $23				sta 	zVarDataPtr+1
.01990b	18		clc				clc 								; add 2 more for the length prefix.
.01990c	a5 22		lda $22				lda 	zVarDataPtr
.01990e	69 02		adc #$02			adc 	#2
.019910	85 22		sta $22				sta 	zVarDataPtr
.019912	90 02		bcc $019916			bcc 	_AIFNoBump
.019914	e6 23		inc $23				inc 	zVarDataPtr+1
.019916					_AIFNoBump:
.019916	7a		ply				ply
.019917	60		rts				rts
.019918					_AIFError:
.019918	20 57 85	jsr $018557			jsr ERR_Handler
>01991b	42 61 64 20 61 72 72 61			.text "Bad array index",0
>019923	79 20 69 6e 64 65 78 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arraydef.asm

.01992b					ArrayResetDefault:
.01992b	a9 0b		lda #$0b			lda 	#11 						; 0..10 one array
.01992d	8d a9 03	sta $03a9			sta 	ArrayDef+0
.019930	a9 00		lda #$00			lda 	#0
.019932	8d aa 03	sta $03aa			sta 	ArrayDef+1
.019935	a9 ff		lda #$ff			lda 	#$FF
.019937	8d ab 03	sta $03ab			sta 	ArrayDef+2 					; $FFFF implies no second element.
.01993a	8d ac 03	sta $03ac			sta 	ArrayDef+3					; (test bit 7 of 2nd byte)
.01993d	60		rts				rts
.01993e					ArrayCreate:
.01993e	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; put size x 2 in zTemp1
.019941	0a		asl a				asl 	a
.019942	85 10		sta $10				sta 	zTemp1
.019944	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.019947	2a		rol a				rol 	a
.019948	85 11		sta $11				sta 	zTemp1+1
.01994a	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; if this is the last element it's array of ptrs.
.01994d	10 22		bpl $019971			bpl 	_ACSized 					; if not multiply size x 2 (str) 4 (int) 5 (real)
.01994f	ad 95 03	lda $0395			lda 	Var_Type 					; check the type
.019952	c9 b8		cmp #$b8			cmp 	#token_DollarLParen 		; also if it is an array of strings $(
.019954	f0 1b		beq $019971			beq 	_ACSized
.019956	06 10		asl $10				asl 	zTemp1 						; double again
.019958	26 11		rol $11				rol 	zTemp1+1
.01995a	b0 6f		bcs $0199cb			bcs 	ArrayIndexError 			; too large.
.01995c	c9 bc		cmp #$bc			cmp 	#token_PercentLParen 		; if %( four bytes/entry is enough.
.01995e	f0 11		beq $019971			beq 	_ACSized
.019960	18		clc				clc 								; add original value x 5 for reals.
.019961	a5 10		lda $10				lda 	zTemp1
.019963	7d a9 03	adc $03a9,x			adc 	ArrayDef+0,x
.019966	85 10		sta $10				sta 	zTemp1
.019968	a5 11		lda $11				lda 	zTemp1+1
.01996a	7d aa 03	adc $03aa,x			adc 	ArrayDef+1,x
.01996d	85 11		sta $11				sta 	zTemp1+1
.01996f	b0 5a		bcs $0199cb			bcs 	ArrayIndexError
.019971					_ACSized:
.019971	18		clc				clc
.019972	a5 10		lda $10				lda 	zTemp1
.019974	69 02		adc #$02			adc 	#2
.019976	85 10		sta $10				sta 	zTemp1
.019978	90 04		bcc $01997e			bcc 	_ACNoBump
.01997a	e6 10		inc $10				inc 	zTemp1
.01997c	f0 4d		beq $0199cb			beq 	ArrayIndexError
.01997e					_ACNoBump:
.01997e	18		clc				clc
.01997f	ad 02 03	lda $0302			lda 	VarMemPtr 					; add this allocated count to VarMemPtr
.019982	85 12		sta $12				sta 	zTemp2						; save start in zTemp2/zTemp3
.019984	85 14		sta $14				sta 	zTemp3
.019986	65 10		adc $10				adc 	zTemp1
.019988	8d 02 03	sta $0302			sta 	VarMemPtr
.01998b	ad 03 03	lda $0303			lda 	VarMemPtr+1
.01998e	85 13		sta $13				sta 	zTemp2+1
.019990	85 15		sta $15				sta 	zTemp3+1
.019992	65 11		adc $11				adc 	zTemp1+1
.019994	8d 03 03	sta $0303			sta 	VarMemPtr+1
.019997	85 11		sta $11				sta 	zTemp1+1
.019999	b0 30		bcs $0199cb			bcs 	ArrayIndexError
.01999b	a0 00		ldy #$00			ldy 	#0							; write $00 out.
.01999d					_ACClear:
.01999d	98		tya				tya
.01999e	91 12		sta ($12),y			sta 	(zTemp2),y
.0199a0	e6 12		inc $12				inc 	zTemp2
.0199a2	d0 02		bne $0199a6			bne 	_ACCBump
.0199a4	e6 13		inc $13				inc 	zTemp2+1
.0199a6					_ACCBump:
.0199a6	a5 12		lda $12				lda 	zTemp2
.0199a8	cd 02 03	cmp $0302			cmp 	VarMemPtr
.0199ab	d0 f0		bne $01999d			bne 	_ACClear
.0199ad	a5 13		lda $13				lda 	zTemp2+1
.0199af	cd 03 03	cmp $0303			cmp 	VarMemPtr+1
.0199b2	d0 e9		bne $01999d			bne 	_ACClear
.0199b4	a0 00		ldy #$00			ldy 	#0
.0199b6	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; copy the size into the start
.0199b9	91 14		sta ($14),y			sta 	(zTemp3),y
.0199bb	c8		iny				iny
.0199bc	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.0199bf	91 14		sta ($14),y			sta 	(zTemp3),y
.0199c1	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; have we reached the end
.0199c4	10 18		bpl $0199de			bpl 	ACCFillRecursive
.0199c6	a4 15		ldy $15				ldy 	zTemp3+1 					; return address
.0199c8	a5 14		lda $14				lda 	zTemp3
.0199ca	60		rts				rts
.0199cb					ArrayIndexError:
.0199cb	20 57 85	jsr $018557			jsr ERR_Handler
>0199ce	42 61 64 20 61 72 72 61			.text "Bad array index",0
>0199d6	79 20 69 6e 64 65 78 00
.0199de					ACCFillRecursive:
.0199de	a9 ff		lda #$ff			lda 	#$FF 						; we mark the end, this is free space.
.0199e0	a0 00		ldy #$00			ldy 	#0 							; this is overwritten by size of next allocated
.0199e2	91 12		sta ($12),y			sta 	(zTemp2),y 					; array, but we might change that.
.0199e4	c8		iny				iny
.0199e5	b1 14		lda ($14),y			lda 	(zTemp3),y 					; set bit 15 of the max index indicating
.0199e7	09 80		ora #$80			ora 	#$80 						; an array of pointers
.0199e9	91 14		sta ($14),y			sta 	(zTemp3),y
.0199eb	a5 14		lda $14				lda 	zTemp3 						; push the start on the stack
.0199ed	48		pha				pha
.0199ee	a5 15		lda $15				lda 	zTemp3+1
.0199f0	48		pha				pha
.0199f1					_ACCFillLoop:
.0199f1	18		clc				clc
.0199f2	a5 14		lda $14				lda 	zTemp3 						; and work forwards.
.0199f4	69 02		adc #$02			adc 	#2
.0199f6	85 14		sta $14				sta 	zTemp3
.0199f8	90 02		bcc $0199fc			bcc 	_ACCSkip2
.0199fa	e6 15		inc $15				inc 	zTemp3+1
.0199fc					_ACCSkip2:
.0199fc	a0 00		ldy #$00			ldy 	#0 							; reached the end ?
.0199fe	b1 14		lda ($14),y			lda 	(zTemp3),y					; (looking for FF marker, everything else 00)
.019a00	c8		iny				iny
.019a01	11 14		ora ($14),y			ora 	(zTemp3),y
.019a03	d0 21		bne $019a26			bne 	_ACCExit
.019a05	a5 14		lda $14				lda 	zTemp3 						; push zTemp3
.019a07	48		pha				pha
.019a08	a5 15		lda $15				lda 	zTemp3+1
.019a0a	48		pha				pha
.019a0b	e8		inx				inx
.019a0c	e8		inx				inx
.019a0d	20 3e 99	jsr $01993e			jsr 	ArrayCreate 				; create array recursively.
.019a10	ca		dex				dex
.019a11	ca		dex				dex
.019a12	85 12		sta $12				sta 	zTemp2 						; save A
.019a14	68		pla				pla
.019a15	85 15		sta $15				sta 	zTemp3+1 					; restore zTemp3
.019a17	68		pla				pla
.019a18	85 14		sta $14				sta 	zTemp3
.019a1a	98		tya				tya 								; write high bye from Y
.019a1b	a0 01		ldy #$01			ldy 	#1
.019a1d	91 14		sta ($14),y			sta 	(zTemp3),y
.019a1f	88		dey				dey 								; write low byte out.
.019a20	a5 12		lda $12				lda 	zTemp2
.019a22	91 14		sta ($14),y			sta 	(zTemp3),y
.019a24	80 cb		bra $0199f1			bra 	_ACCFillLoop 				; and try again.
.019a26					_ACCExit:
.019a26	7a		ply				ply 								; restore the original address
.019a27	68		pla				pla
.019a28	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varfind.asm

.019a29					VariableLocate:
.019a29	da		phx				phx
.019a2a	5a		phy				phy
.019a2b	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.019a2e	85 12		sta $12				sta 	zTemp2 						; points to first address.
.019a30	a9 03		lda #$03			lda 	#HashTableBase >> 8
.019a32	85 13		sta $13				sta 	zTemp2+1
.019a34	a0 00		ldy #$00	_VLNext:ldy 	#0 							; get next link into AX
.019a36	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a38	aa		tax				tax
.019a39	c8		iny				iny
.019a3a	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a3c	85 13		sta $13				sta 	zTemp2+1 					; save in zTemp
.019a3e	86 12		stx $12				stx 	zTemp2
.019a40	05 12		ora $12				ora 	zTemp2 						; got zero
.019a42	18		clc				clc
.019a43	f0 25		beq $019a6a			beq 	_VLExit 					; if so, then fail as end of chain.
.019a45	c8		iny				iny 								; point to hash (offset + 2)
.019a46	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a48	cd 96 03	cmp $0396			cmp 	Var_Hash
.019a4b	d0 e7		bne $019a34			bne 	_VLNext 					; try next if different.
.019a4d					_VLCompare:
.019a4d	c8		iny				iny 								; next character
.019a4e	b1 12		lda ($12),y			lda 	(zTemp2),y 					; compare variable field against buffer.
.019a50	d9 12 03	cmp $0312,y			cmp 	Var_Buffer-3,y 				; the -3 is because name starts at 3.
.019a53	d0 df		bne $019a34			bne 	_VLNext 					; fail if different, try next.
.019a55	0a		asl a				asl 	a 							; until end character (bit 7 set) matched
.019a56	90 f5		bcc $019a4d			bcc 	_VLCompare
.019a58	98		tya				tya
.019a59	38		sec				sec 								; add 1 as Y points to last character
.019a5a	65 12		adc $12				adc 	zTemp2 						; add to the current address
.019a5c	85 22		sta $22				sta 	zVarDataPtr
.019a5e	a5 13		lda $13				lda 	zTemp2+1
.019a60	69 00		adc #$00			adc 	#0
.019a62	85 23		sta $23				sta 	zVarDataPtr+1
.019a64	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.019a67	85 24		sta $24				sta 	zVarType
.019a69	38		sec				sec 								; return CS
.019a6a	7a		ply		_VLExit:ply
.019a6b	fa		plx				plx
.019a6c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/vargetset.asm

.019a6d					VariableGet:
.019a6d	5a		phy				phy
.019a6e	a0 00		ldy #$00			ldy 	#0 							; copy first two bytes
.019a70	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019a72	95 80		sta $80,x			sta 	XS_Mantissa,x
.019a74	c8		iny				iny
.019a75	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019a77	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019a79	c8		iny				iny
.019a7a	a5 24		lda $24				lda 	zVarType 					; if it is a string, set up for that.
.019a7c	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019a7e	f0 2c		beq $019aac			beq 	_VGString
.019a80	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; copy the next two bytes.
.019a82	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019a84	c8		iny				iny
.019a85	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019a87	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019a89	c8		iny				iny
.019a8a	a9 01		lda #$01			lda 	#1 							; set type to 1.
.019a8c	95 85		sta $85,x			sta 	XS_Type,x
.019a8e	a5 24		lda $24				lda 	zVarType
.019a90	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if it is a %, then exit with default integer.
.019a92	f0 28		beq $019abc			beq 	_VGExit
.019a94	a9 40		lda #$40			lda 	#$40 						; set type byte to zero
.019a96	95 85		sta $85,x			sta 	XS_Type,x 					; which is the code for zero/float.
.019a98	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; the last value to copy is the exponent.
.019a9a	95 84		sta $84,x			sta 	XS_Exponent,x
.019a9c	f0 1e		beq $019abc			beq 	_VGExit 					; if exponent is zero ... it's zero.
.019a9e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; the sign bit is the top mantissa bit.
.019aa0	48		pha				pha
.019aa1	29 80		and #$80			and 	#$80
.019aa3	95 85		sta $85,x			sta 	XS_Type,x 					; this is the type byte.
.019aa5	68		pla				pla
.019aa6	09 80		ora #$80			ora 	#$80 						; set the MSB as you would expect.
.019aa8	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; so it's a normalised float.
.019aaa	80 10		bra $019abc			bra 	_VGExit
.019aac					_VGString:
.019aac	a9 02		lda #$02			lda 	#2 							; set type to 2, a string
.019aae	95 85		sta $85,x			sta 	XS_Type,x
.019ab0	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; is the value there $0000
.019ab2	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019ab4	d0 06		bne $019abc			bne 	_VGExit 					; if not, exit.
.019ab6	85 25		sta $25				sta 	zNullString 				; make zNullString a 00 string.
.019ab8	a9 25		lda #$25			lda 	#zNullString
.019aba	95 80		sta $80,x			sta 	XS_Mantissa,x 				; make it point to it.
.019abc					_VGExit:
.019abc	7a		ply				ply
.019abd	60		rts				rts
.019abe					VariableSet:
.019abe	b5 85		lda $85,x			lda 	XS_Type,x 					; is the result a string
.019ac0	29 02		and #$02			and 	#2 							; if so, it has to be
.019ac2	d0 4b		bne $019b0f			bne 	_VSString
.019ac4	a5 24		lda $24				lda 	zVarType 					; if type is $ there's an error.
.019ac6	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019ac8	f0 42		beq $019b0c			beq 	_VSBadType
.019aca	c9 bb		cmp #$bb			cmp 	#token_Percent 				; type convert to float/int
.019acc	f0 05		beq $019ad3			beq 	_VSMakeInt
.019ace	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat
.019ad1	80 03		bra $019ad6			bra 	_VSCopy
.019ad3					_VSMakeInt:
.019ad3	20 43 a0	jsr $01a043			jsr 	FPUToInteger
.019ad6					_VSCopy:
.019ad6	5a		phy				phy
.019ad7	a0 00		ldy #$00			ldy 	#0 							; copy mantissa to target.
.019ad9	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019adb	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019add	c8		iny				iny
.019ade	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019ae0	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019ae2	c8		iny				iny
.019ae3	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019ae5	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019ae7	c8		iny				iny
.019ae8	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019aea	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019aec	a5 24		lda $24				lda 	zVarType 					; if target is integer, alrady done.
.019aee	c9 bb		cmp #$bb			cmp 	#token_Percent
.019af0	f0 18		beq $019b0a			beq 	_VSExit
.019af2	b5 85		lda $85,x			lda 	XS_Type,x 					; get the sign bit into carry flag.
.019af4	0a		asl a				asl 	a
.019af5	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; shift the sign into the mantissa high.
.019af7	08		php				php
.019af8	0a		asl a				asl 	a
.019af9	28		plp				plp
.019afa	6a		ror a				ror 	a
.019afb	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019afd	c8		iny				iny
.019afe	b5 84		lda $84,x			lda 	XS_Exponent,x 				; copy the exponent in
.019b00	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b02	34 85		bit $85,x			bit 	XS_Type,x 					; if the result is non zero
.019b04	50 04		bvc $019b0a			bvc 	_VSExit
.019b06	a9 00		lda #$00			lda 	#00 						; zero exponent indicating 0.
.019b08	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b0a					_VSExit:
.019b0a	7a		ply				ply
.019b0b	60		rts				rts
.019b0c					_VSBadType:
.019b0c	4c 38 85	jmp $018538			jmp 	TypeError
.019b0f					_VSString:
.019b0f	a5 24		lda $24				lda 	zVarType 					; type must be $
.019b11	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019b13	d0 f7		bne $019b0c			bne 	_VSBadType
.019b15	da		phx				phx
.019b16	5a		phy				phy
.019b17	20 94 96	jsr $019694			jsr 	StringConcrete 				; concrete the string in the mantissa -> AX
.019b1a	a0 01		ldy #$01			ldy 	#1 							; save high byte
.019b1c	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b1e	88		dey				dey 								; save low byte
.019b1f	8a		txa				txa
.019b20	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b22	7a		ply				ply 								; and exit.
.019b23	fa		plx				plx
.019b24	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/multiply.asm

.019b25					MulInteger32:
.019b25	b5 80		lda $80,x			lda 	XS_Mantissa+0,x					; copy +0 to +8
.019b27	95 8c		sta $8c,x			sta 	XS3_Mantissa,x
.019b29	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019b2b	95 8d		sta $8d,x			sta 	XS3_Mantissa+1,x
.019b2d	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019b2f	95 8e		sta $8e,x			sta 	XS3_Mantissa+2,x
.019b31	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019b33	95 8f		sta $8f,x			sta 	XS3_Mantissa+3,x
.019b35	a9 00		lda #$00			lda 	#0
.019b37	95 80		sta $80,x			sta 	XS_Mantissa+0,x 				; zero +0
.019b39	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019b3b	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019b3d	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019b3f					_BFMMultiply:
.019b3f	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; get LSBit of 8-11
.019b41	29 01		and #$01			and 	#1
.019b43	f0 03		beq $019b48			beq 	_BFMNoAdd
.019b45	20 fc 91	jsr $0191fc			jsr 	AddInteger32
.019b48					_BFMNoAdd:
.019b48	16 86		asl $86,x			asl 	XS2_Mantissa+0,x 				; shift +4 left
.019b4a	36 87		rol $87,x			rol 	XS2_Mantissa+1,x
.019b4c	36 88		rol $88,x			rol 	XS2_Mantissa+2,x
.019b4e	36 89		rol $89,x			rol 	XS2_Mantissa+3,x
.019b50	56 8f		lsr $8f,x			lsr 	XS3_Mantissa+3,x 				; shift +8 right
.019b52	76 8e		ror $8e,x			ror 	XS3_Mantissa+2,x
.019b54	76 8d		ror $8d,x			ror 	XS3_Mantissa+1,x
.019b56	76 8c		ror $8c,x			ror 	XS3_Mantissa,x
.019b58	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; continue if +8 is nonzero
.019b5a	15 8d		ora $8d,x			ora 	XS3_Mantissa+1,x
.019b5c	15 8e		ora $8e,x			ora 	XS3_Mantissa+2,x
.019b5e	15 8f		ora $8f,x			ora 	XS3_Mantissa+3,x
.019b60	d0 dd		bne $019b3f			bne 	_BFMMultiply
.019b62	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/divide.asm

.019b63					DivInteger32:
.019b63	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; check for /0
.019b65	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.019b67	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.019b69	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.019b6b	d0 14		bne $019b81			bne 	_BFDOkay
.019b6d	20 57 85	jsr $018557			jsr ERR_Handler
>019b70	44 69 76 69 73 69 6f 6e			.text "Division by Zero",0
>019b78	20 62 79 20 5a 65 72 6f 00
.019b81					_BFDOkay:
.019b81	a9 00		lda #$00			lda 	#0 							; zLTemp1 is 'A' (and holds the remainder)
.019b83	85 1a		sta $1a				sta 	zLTemp1 					; Q/Dividend/Left in +0
.019b85	85 1b		sta $1b				sta 	zLTemp1+1 					; M/Divisor/Right in +4
.019b87	85 1c		sta $1c				sta 	zLTemp1+2
.019b89	85 1d		sta $1d				sta 	zLTemp1+3
.019b8b	8d 9e 03	sta $039e			sta 	SignCount 					; Count of signs.
.019b8e	20 e5 9b	jsr $019be5			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.019b91	da		phx				phx
.019b92	e8		inx				inx
.019b93	e8		inx				inx
.019b94	e8		inx				inx
.019b95	e8		inx				inx
.019b96	e8		inx				inx
.019b97	e8		inx				inx
.019b98	20 e5 9b	jsr $019be5			jsr 	CheckIntegerNegate
.019b9b	fa		plx				plx
.019b9c	5a		phy				phy 								; Y is the counter
.019b9d	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.019b9f					_BFDLoop:
.019b9f	16 80		asl $80,x			asl 	XS_Mantissa+0,x 			; shift AQ left.
.019ba1	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019ba3	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019ba5	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019ba7	26 1a		rol $1a				rol 	zLTemp1
.019ba9	26 1b		rol $1b				rol 	zLTemp1+1
.019bab	26 1c		rol $1c				rol 	zLTemp1+2
.019bad	26 1d		rol $1d				rol 	zLTemp1+3
.019baf	38		sec				sec
.019bb0	a5 1a		lda $1a				lda 	zLTemp1+0 					; Calculate A-M on stack.
.019bb2	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019bb4	48		pha				pha
.019bb5	a5 1b		lda $1b				lda 	zLTemp1+1
.019bb7	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019bb9	48		pha				pha
.019bba	a5 1c		lda $1c				lda 	zLTemp1+2
.019bbc	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019bbe	48		pha				pha
.019bbf	a5 1d		lda $1d				lda 	zLTemp1+3
.019bc1	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019bc3	90 13		bcc $019bd8			bcc 	_BFDNoAdd
.019bc5	85 1d		sta $1d				sta 	zLTemp1+3 					; update A
.019bc7	68		pla				pla
.019bc8	85 1c		sta $1c				sta 	zLTemp1+2
.019bca	68		pla				pla
.019bcb	85 1b		sta $1b				sta 	zLTemp1+1
.019bcd	68		pla				pla
.019bce	85 1a		sta $1a				sta 	zLTemp1+0
.019bd0	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; set Q bit 1.
.019bd2	09 01		ora #$01			ora 	#1
.019bd4	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019bd6	80 03		bra $019bdb			bra 	_BFDNext
.019bd8					_BFDNoAdd:
.019bd8	68		pla				pla 								; Throw away the intermediate calculations
.019bd9	68		pla				pla
.019bda	68		pla				pla
.019bdb					_BFDNext:
.019bdb	88		dey				dey
.019bdc	d0 c1		bne $019b9f			bne 	_BFDLoop
.019bde	7a		ply				ply 								; restore Y and exit
.019bdf	4e 9e 03	lsr $039e			lsr 	SignCount 					; if sign count odd,
.019be2	b0 06		bcs $019bea			bcs		IntegerNegateAlways 			; negate the result
.019be4	60		rts				rts
.019be5					CheckIntegerNegate:
.019be5	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019be7	30 01		bmi $019bea			bmi 	IntegerNegateAlways
.019be9	60		rts				rts
.019bea					IntegerNegateAlways:
.019bea	ee 9e 03	inc $039e			inc 	SignCount
.019bed	38		sec				sec
.019bee	a9 00		lda #$00			lda 	#0
.019bf0	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.019bf2	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019bf4	a9 00		lda #$00			lda 	#0
.019bf6	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.019bf8	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019bfa	a9 00		lda #$00			lda 	#0
.019bfc	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.019bfe	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019c00	a9 00		lda #$00			lda 	#0
.019c02	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.019c04	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019c06	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/inttostr.asm

.019c07					INTToString:
.019c07	48		pha				pha
.019c08	5a		phy				phy
.019c09	b5 83		lda $83,x			lda 		XS_Mantissa+3,x 		; check -ve
.019c0b	10 08		bpl $019c15			bpl 		_ITSNotMinus
.019c0d	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.019c0f	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.019c12	20 ea 9b	jsr $019bea			jsr 		IntegerNegateAlways 	; negate the number.
.019c15					_ITSNotMinus:
.019c15	a9 00		lda #$00			lda 		#0
.019c17	8d 9a 03	sta $039a			sta 		NumSuppress 			; clear the suppression flag.
.019c1a	8a		txa				txa 								; use Y for the mantissa index.
.019c1b	a8		tay				tay
.019c1c	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.019c1e					_ITSNextSubtractor:
.019c1e	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.019c20	8d 9b 03	sta $039b			sta 		NumConvCount
.019c23					_ITSSubtract:
.019c23	38		sec				sec
.019c24	b9 80 00	lda $0080,y			lda 		XS_Mantissa,y 			; subtract number and push on stack
.019c27	ff 85 9c 01	sbc $019c85,x			sbc 		_ITSSubtractors+0,x
.019c2b	48		pha				pha
.019c2c	b9 81 00	lda $0081,y			lda 		XS_Mantissa+1,y
.019c2f	ff 86 9c 01	sbc $019c86,x			sbc 		_ITSSubtractors+1,x
.019c33	48		pha				pha
.019c34	b9 82 00	lda $0082,y			lda 		XS_Mantissa+2,y
.019c37	ff 87 9c 01	sbc $019c87,x			sbc 		_ITSSubtractors+2,x
.019c3b	48		pha				pha
.019c3c	b9 83 00	lda $0083,y			lda 		XS_Mantissa+3,y
.019c3f	ff 88 9c 01	sbc $019c88,x			sbc 		_ITSSubtractors+3,x
.019c43	90 14		bcc $019c59			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.019c45	99 83 00	sta $0083,y			sta 		XS_Mantissa+3,y 		; save subtract off stack
.019c48	68		pla				pla
.019c49	99 82 00	sta $0082,y			sta 		XS_Mantissa+2,y
.019c4c	68		pla				pla
.019c4d	99 81 00	sta $0081,y			sta 		XS_Mantissa+1,y
.019c50	68		pla				pla
.019c51	99 80 00	sta $0080,y			sta 		XS_Mantissa+0,y
.019c54	ee 9b 03	inc $039b			inc 		NumConvCount 			; bump count.
.019c57	80 ca		bra $019c23			bra 		_ITSSubtract 			; go round again.
.019c59					_ITSCantSubtract:
.019c59	68		pla				pla 								; throw away interim answers
.019c5a	68		pla				pla
.019c5b	68		pla				pla
.019c5c	ad 9b 03	lda $039b			lda 		NumConvCount 			; if not zero then no suppression check
.019c5f	c9 30		cmp #$30			cmp 		#"0"
.019c61	d0 05		bne $019c68			bne 		_ITSOutputDigit
.019c63	ad 9a 03	lda $039a			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.019c66	10 09		bpl $019c71			bpl	 		_ITSGoNextSubtractor
.019c68					_ITSOutputDigit:
.019c68	ce 9a 03	dec $039a			dec 		NumSuppress 			; suppression check will be non-zero.
.019c6b	ad 9b 03	lda $039b			lda 		NumConvCount 			; count of subtractions
.019c6e	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter 		; output it.
.019c71					_ITSGoNextSubtractor:
.019c71	e8		inx				inx 								; next dword
.019c72	e8		inx				inx
.019c73	e8		inx				inx
.019c74	e8		inx				inx
.019c75	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.019c77	d0 a5		bne $019c1e			bne 		_ITSNextSubtractor 		; do all the subtractors.
.019c79	98		tya				tya 								; X is back as the mantissa index
.019c7a	aa		tax				tax
.019c7b	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.019c7d	09 30		ora #$30			ora 		#"0"
.019c7f	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.019c82	7a		ply				ply 								; and exit
.019c83	68		pla				pla
.019c84	60		rts				rts
.019c85					_ITSSubtractors:
>019c85	00 ca 9a 3b					.dword 		1000000000
>019c89	00 e1 f5 05					.dword 		100000000
>019c8d	80 96 98 00					.dword 		10000000
>019c91	40 42 0f 00					.dword 		1000000
>019c95	a0 86 01 00					.dword 		100000
>019c99	10 27 00 00					.dword 		10000
>019c9d	e8 03 00 00					.dword 		1000
>019ca1	64 00 00 00					.dword 		100
>019ca5	0a 00 00 00					.dword 		10
.019ca9					_ITSSubtractorsEnd:
.019ca9					ITSOutputCharacter:
.019ca9	48		pha				pha
.019caa	da		phx				phx
.019cab	ae 14 03	ldx $0314			ldx 	NumBufX 					; save digit
.019cae	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.019cb1	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.019cb3	9d 16 03	sta $0316,x			sta 	Num_Buffer+1,x
.019cb6	ee 14 03	inc $0314			inc 	NumBufX						; bump pointer.
.019cb9	fa		plx				plx
.019cba	68		pla				pla
.019cbb	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/intfromstr.asm

.019cbc					IntFromString:
.019cbc	a0 00		ldy #$00			ldy 	#0
.019cbe	8c 9c 03	sty $039c			sty 	ExpTemp 					; this is the converted digit count.
.019cc1					IntFromStringY:
.019cc1	48		pha				pha
.019cc2	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.019cc4	95 80		sta $80,x			sta 	XS_Mantissa,x
.019cc6	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019cc8	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019cca	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019ccc	a9 01		lda #$01			lda 	#1
.019cce	95 85		sta $85,x			sta 	XS_Type,x
.019cd0					_IFSLoop:
.019cd0	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get next
.019cd2	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.019cd4	90 4e		bcc $019d24			bcc 	_IFSExit
.019cd6	c9 3a		cmp #$3a			cmp 	#"9"+1
.019cd8	b0 4a		bcs $019d24			bcs 	_IFSExit
.019cda	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.019cdc	c9 0c		cmp #$0c			cmp 	#12
.019cde	b0 4e		bcs $019d2e			bcs 	_IFSOverflow
.019ce0	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.019ce2	48		pha				pha
.019ce3	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019ce5	48		pha				pha
.019ce6	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019ce8	48		pha				pha
.019ce9	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019ceb	48		pha				pha
.019cec	20 43 9d	jsr $019d43			jsr 	IFSX1ShiftLeft 				; double
.019cef	20 43 9d	jsr $019d43			jsr 	IFSX1ShiftLeft 				; x 4
.019cf2	18		clc				clc 								; add saved value x 5
.019cf3	68		pla				pla
.019cf4	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019cf6	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019cf8	68		pla				pla
.019cf9	75 81		adc $81,x			adc 	XS_Mantissa+1,x
.019cfb	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019cfd	68		pla				pla
.019cfe	75 82		adc $82,x			adc 	XS_Mantissa+2,x
.019d00	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019d02	68		pla				pla
.019d03	75 83		adc $83,x			adc 	XS_Mantissa+3,x
.019d05	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019d07	20 43 9d	jsr $019d43			jsr 	IFSX1ShiftLeft 				; x 10
.019d0a	ee 9c 03	inc $039c			inc 	ExpTemp 					; bump count of digits processed.
.019d0d	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; add digit
.019d0f	29 0f		and #$0f			and 	#15
.019d11	c8		iny				iny
.019d12	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019d14	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019d16	90 b8		bcc $019cd0			bcc 	_IFSLoop
.019d18	f6 81		inc $81,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.019d1a	d0 b4		bne $019cd0			bne 	_IFSLoop
.019d1c	f6 82		inc $82,x			inc 	XS_Mantissa+2,x
.019d1e	d0 b0		bne $019cd0			bne 	_IFSLoop
.019d20	f6 83		inc $83,x			inc 	XS_Mantissa+3,x
.019d22	80 ac		bra $019cd0			bra 	_IFSLoop
.019d24					_IFSExit:
.019d24	98		tya				tya 								; get offset
.019d25					_IFSOkay:
.019d25	38		sec				sec
.019d26	ad 9c 03	lda $039c			lda 	ExpTemp
.019d29	f0 01		beq $019d2c			beq 	_IFSSkipFail
.019d2b	18		clc				clc
.019d2c					_IFSSkipFail:
.019d2c	68		pla				pla 								; and exit.
.019d2d	60		rts				rts
.019d2e					_IFSOverflow:
.019d2e	20 57 85	jsr $018557			jsr 	ERR_Handler
>019d31	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>019d39	20 6f 76 65 72 66 6c 6f 77 00
.019d43					IFSX1ShiftLeft:
.019d43	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.019d45	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019d47	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019d49	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019d4b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.019d4c					FPSubtract:
.019d4c	48		pha				pha
.019d4d	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.019d4f	49 80		eor #$80			eor 	#$80
.019d51	95 8b		sta $8b,x			sta 	XS2_Type,x
.019d53	68		pla				pla 								; --- and fall through ---
.019d54					FPAdd:
.019d54	48		pha				pha
.019d55	b5 85		lda $85,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.019d57	d0 05		bne $019d5e			bne 	_FPA_NegativeLHS
.019d59	20 75 9d	jsr $019d75			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.019d5c	68		pla				pla
.019d5d	60		rts				rts
.019d5e					_FPA_NegativeLHS:
.019d5e	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.019d60	49 80		eor #$80			eor 	#$80
.019d62	95 85		sta $85,x			sta 	XS_Type,x
.019d64	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.019d66	49 80		eor #$80			eor 	#$80
.019d68	95 8b		sta $8b,x			sta 	XS2_Type,x
.019d6a	20 75 9d	jsr $019d75			jsr 	FPAdd_Worker 				; do the add calculation.
.019d6d	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 back
.019d6f	49 80		eor #$80			eor 	#$80
.019d71	95 85		sta $85,x			sta 	XS_Type,x
.019d73	68		pla				pla
.019d74	60		rts				rts
.019d75					FPAdd_Worker:
.019d75	34 8b		bit $8b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.019d77	70 07		bvs $019d80			bvs 	_FPAWExit 					; no change.
.019d79	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.019d7b	50 07		bvc $019d84			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.019d7d	20 b5 9f	jsr $019fb5			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.019d80					_FPAWExit:
.019d80	20 24 a0	jsr $01a024			jsr 	FPUNormalise 				; normalise the result.
.019d83	60		rts				rts
.019d84					_FPAWMakeSame:
.019d84	b5 84		lda $84,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.019d86	38		sec				sec
.019d87	f5 8a		sbc $8a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.019d89	f0 16		beq $019da1			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.019d8b	da		phx				phx 								; save X
.019d8c	90 06		bcc $019d94			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.019d8e	e8		inx				inx
.019d8f	e8		inx				inx
.019d90	e8		inx				inx
.019d91	e8		inx				inx
.019d92	e8		inx				inx
.019d93	e8		inx				inx
.019d94					_FPAWShiftA:
.019d94	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019d96	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.019d98	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019d9a	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019d9c	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019d9e	fa		plx				plx 								; restore original X
.019d9f	80 e3		bra $019d84			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.019da1					_FPAW_DoArithmetic:
.019da1	34 8b		bit $8b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.019da3	30 28		bmi $019dcd			bmi 	_FPAW_BNegative
.019da5	18		clc				clc
.019da6	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019da8	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019daa	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019dac	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019dae	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019db0	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019db2	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019db4	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019db6	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019db8	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019dba	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019dbc	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019dbe	90 c0		bcc $019d80			bcc 	_FPAWExit 					; no carry.
.019dc0	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019dc2	38		sec				sec
.019dc3	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019dc5	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019dc7	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019dc9	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019dcb	80 b3		bra $019d80			bra 	_FPAWExit
.019dcd					_FPAW_BNegative:
.019dcd	38		sec				sec
.019dce	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019dd0	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019dd2	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019dd4	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019dd6	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019dd8	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019dda	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019ddc	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019dde	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019de0	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019de2	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019de4	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019de6	b0 09		bcs $019df1			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.019de8	20 db 9f	jsr $019fdb			jsr 	FPUNegateInteger			; negate the mantissa
.019deb	b5 85		lda $85,x			lda 	XS_Type,x 					; flip result sign
.019ded	49 80		eor #$80			eor 	#$80
.019def	95 85		sta $85,x			sta 	XS_Type,x
.019df1					_FPAWGoExit:
.019df1	4c 80 9d	jmp $019d80			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.019df4					FPD_IsDivZero:
.019df4	20 57 85	jsr $018557			jsr ERR_Handler
>019df7	44 69 76 69 73 69 6f 6e			.text "Division by zero",0
>019dff	20 62 79 20 7a 65 72 6f 00
.019e08					FPDivide:
.019e08	48		pha				pha
.019e09	5a		phy				phy
.019e0a	34 8b		bit $8b,x			bit 	XS2_Type,x 					; check if division by zero
.019e0c	70 e6		bvs $019df4			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.019e0e	34 85		bit $85,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.019e10	f0 03		beq $019e15			beq 	_FPDCalculateExp
.019e12					_FPD_Exit:
.019e12	7a		ply				ply
.019e13	68		pla				pla
.019e14	60		rts				rts
.019e15					_FPDCalculateExp:
.019e15	b5 8a		lda $8a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.019e17	49 ff		eor #$ff			eor 	#$FF
.019e19	1a		inc a				inc 	a
.019e1a	95 8a		sta $8a,x			sta 	XS2_Exponent,x
.019e1c	20 ec 9e	jsr $019eec			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.019e1f	18		clc				clc 	 							; add 1 to the resulting exponent
.019e20	69 01		adc #$01			adc 	#1
.019e22	b0 54		bcs $019e78			bcs 	_FPD_Overflow 				; which can overflow.
.019e24	95 84		sta $84,x			sta 	XS_Exponent,x
.019e26	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.019e28	85 1a		sta $1a				sta 	zLTemp1+0
.019e2a	85 1b		sta $1b				sta 	zLTemp1+1
.019e2c	85 1c		sta $1c				sta 	zLTemp1+2
.019e2e	85 1d		sta $1d				sta 	zLTemp1+3
.019e30	a0 20		ldy #$20			ldy 	#32 						; times round.
.019e32					_FPD_Loop:
.019e32	38		sec				sec 								; calculate X1-X2 stacking result because we might
.019e33	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; not save it.
.019e35	f5 86		sbc $86,x			sbc 	XS2_Mantissa,x
.019e37	48		pha				pha
.019e38	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019e3a	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019e3c	48		pha				pha
.019e3d	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019e3f	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019e41	48		pha				pha
.019e42	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019e44	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019e46	90 13		bcc $019e5b			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.019e48	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; save results out to A
.019e4a	68		pla				pla
.019e4b	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019e4d	68		pla				pla
.019e4e	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019e50	68		pla				pla
.019e51	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019e53	a5 1d		lda $1d				lda 	zLTemp1+3 					; set high bit of result
.019e55	09 80		ora #$80			ora 	#$80
.019e57	85 1d		sta $1d				sta 	zLTemp1+3
.019e59	80 03		bra $019e5e			bra 	_FPD_Rotates
.019e5b					_FPD_NoSubtract:
.019e5b	68		pla				pla 								; throw away unwanted results
.019e5c	68		pla				pla
.019e5d	68		pla				pla
.019e5e					_FPD_Rotates:
.019e5e	56 89		lsr $89,x			lsr 	3+XS2_Mantissa,x
.019e60	76 88		ror $88,x			ror 	2+XS2_Mantissa,x
.019e62	76 87		ror $87,x			ror 	1+XS2_Mantissa,x
.019e64	76 86		ror $86,x			ror 	0+XS2_Mantissa,x
.019e66	06 1a		asl $1a				asl 	zLTemp1 					; rotate result round left
.019e68	26 1b		rol $1b				rol 	zLTemp1+1
.019e6a	26 1c		rol $1c				rol 	zLTemp1+2
.019e6c	26 1d		rol $1d				rol 	zLTemp1+3
.019e6e	90 02		bcc $019e72			bcc 	_FPD_NoCarry
.019e70	e6 1a		inc $1a				inc 	zLTemp1 					; if rotated out, set LSB.
.019e72					_FPD_NoCarry:
.019e72	88		dey				dey 								; do 32 times
.019e73	d0 bd		bne $019e32			bne 	_FPD_Loop
.019e75	4c d0 9e	jmp $019ed0			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.019e78					_FPD_Overflow:
.019e78	4c 81 a0	jmp $01a081			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.019e7b					FPMultiply:
.019e7b	48		pha				pha
.019e7c	5a		phy				phy
.019e7d	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.019e7f	70 07		bvs $019e88			bvs 	_FPM_Exit
.019e81	34 8b		bit $8b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.019e83	50 06		bvc $019e8b			bvc 	_FPM_CalcExponent
.019e85	20 b5 9f	jsr $019fb5			jsr 	FPUCopyX2ToX1
.019e88					_FPM_Exit:
.019e88	7a		ply				ply
.019e89	68		pla				pla
.019e8a	60		rts				rts
.019e8b					_FPM_CalcExponent:
.019e8b	18		clc				clc
.019e8c	20 ec 9e	jsr $019eec			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.019e8f	95 84		sta $84,x			sta 	XS_Exponent,x 				; save the result.
.019e91	a9 00		lda #$00			lda 	#0
.019e93	85 1a		sta $1a				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.019e95	85 1b		sta $1b				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.019e97	85 1c		sta $1c				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.019e99	85 1d		sta $1d				sta 	zLTemp1+3
.019e9b	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.019e9d					_FPM_Loop:
.019e9d	b5 80		lda $80,x			lda 	XS_Mantissa,x				; check LSB of long product
.019e9f	29 01		and #$01			and 	#1
.019ea1	18		clc				clc 								; clear carry for the long rotate.
.019ea2	f0 19		beq $019ebd			beq 	_FPM_NoAddition
.019ea4	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.019ea5	a5 1a		lda $1a				lda 	zLTemp1+0
.019ea7	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019ea9	85 1a		sta $1a				sta 	zLTemp1+0
.019eab	a5 1b		lda $1b				lda 	zLTemp1+1
.019ead	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019eaf	85 1b		sta $1b				sta 	zLTemp1+1
.019eb1	a5 1c		lda $1c				lda 	zLTemp1+2
.019eb3	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019eb5	85 1c		sta $1c				sta 	zLTemp1+2
.019eb7	a5 1d		lda $1d				lda 	zLTemp1+3
.019eb9	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019ebb	85 1d		sta $1d				sta 	zLTemp1+3
.019ebd					_FPM_NoAddition:
.019ebd	66 1d		ror $1d				ror 	3+zLTemp1
.019ebf	66 1c		ror $1c				ror 	2+zLTemp1
.019ec1	66 1b		ror $1b				ror 	1+zLTemp1
.019ec3	66 1a		ror $1a				ror 	0+zLTemp1
.019ec5	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019ec7	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019ec9	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019ecb	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019ecd	88		dey				dey
.019ece	d0 cd		bne $019e9d			bne 	_FPM_Loop 					; do this 32 times.
.019ed0					FPM_CopySignNormalize:
.019ed0	a5 1a		lda $1a				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.019ed2	95 80		sta $80,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.019ed4	a5 1b		lda $1b				lda 	zLTemp1+1
.019ed6	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019ed8	a5 1c		lda $1c				lda 	zLTemp1+2
.019eda	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019edc	a5 1d		lda $1d				lda 	zLTemp1+3
.019ede	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019ee0	b5 85		lda $85,x			lda 	XS_Type,x 					; sign is xor of signs
.019ee2	55 8b		eor $8b,x			eor 	XS2_Type,x
.019ee4	95 85		sta $85,x			sta 	XS_Type,x
.019ee6	20 24 a0	jsr $01a024			jsr 	FPUNormalise 				; normalise and exit.
.019ee9	7a		ply				ply
.019eea	68		pla				pla
.019eeb	60		rts				rts
.019eec					FPCalculateExponent:
.019eec	18		clc				clc
.019eed	b5 84		lda $84,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.019eef	75 8a		adc $8a,x			adc 	XS2_Exponent,x
.019ef1	b0 08		bcs $019efb			bcs 	_FPCECarry 					; carry out ?
.019ef3	10 03		bpl $019ef8			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.019ef5	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.019ef7	60		rts				rts
.019ef8					_FPCEExpZero:
.019ef8	a9 00		lda #$00			lda 	#0
.019efa	60		rts				rts
.019efb					_FPCECarry:
.019efb	30 03		bmi $019f00			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.019efd	09 80		ora #$80			ora 	#$80 						; put in right range
.019eff	60		rts				rts
.019f00					_FPCEOverflow:
.019f00	4c 81 a0	jmp $01a081			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.019f03					FPFractionalPart:
.019f03	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.019f05	38		sec				sec 								; this flag tells us to keep the fractional part
.019f06	30 0d		bmi $019f15			bmi 	FPGetPart
.019f08	60		rts				rts
.019f09					FPIntegerPart:
.019f09	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.019f0b	18		clc				clc 								; this flag says keep the integer part.
.019f0c	30 07		bmi $019f15			bmi 	FPGetPart 					; -ve exponents are 0..127
.019f0e	48		pha				pha
.019f0f	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.019f11	95 85		sta $85,x			sta 	XS_Type,x
.019f13	68		pla				pla
.019f14	60		rts				rts
.019f15					FPGetPart:
.019f15	48		pha				pha
.019f16	5a		phy				phy 								; save Y
.019f17	08		php				php 								; save action
.019f18	34 85		bit $85,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.019f1a	70 59		bvs $019f75			bvs 	_FPGP_Exit 					; then do nothing.
.019f1c	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.019f1e	85 1a		sta $1a				sta 	zLTemp1+0 					; this mask is applied to chop out the
.019f20	85 1b		sta $1b				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.019f22	85 1c		sta $1c				sta 	zLTemp1+2
.019f24	85 1d		sta $1d				sta 	zLTemp1+3
.019f26	b5 84		lda $84,x			lda 	XS_Exponent,x				; the number of shifts.
.019f28	38		sec				sec
.019f29	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.019f2b	f0 12		beq $019f3f			beq 	_FPGP_NoShift 				; ... if any
.019f2d	c9 20		cmp #$20			cmp 	#32
.019f2f	90 02		bcc $019f33			bcc 	_FPGP_NotMax
.019f31	a9 20		lda #$20			lda 	#32 						; max of 32.
.019f33					_FPGP_NotMax:
.019f33	a8		tay				tay 								; Y is the mask shift count.
.019f34					_FPGP_ShiftMask:
.019f34	46 1d		lsr $1d				lsr 	3+zLTemp1
.019f36	66 1c		ror $1c				ror 	2+zLTemp1
.019f38	66 1b		ror $1b				ror 	1+zLTemp1
.019f3a	66 1a		ror $1a				ror 	0+zLTemp1
.019f3c	88		dey				dey
.019f3d	d0 f5		bne $019f34			bne 	_FPGP_ShiftMask
.019f3f					_FPGP_NoShift:
.019f3f	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.019f41	8e 9c 03	stx $039c			stx 	ExpTemp						; save X
.019f44					_FPGP_MaskLoop:
.019f44	b9 1a 00	lda $001a,y			lda 	zlTemp1,y 					; get mask byte
.019f47	28		plp				plp 								; if CC we keep the top part, so we
.019f48	08		php				php		 							; flip the mask.
.019f49	b0 02		bcs $019f4d			bcs		_FPGP_NoFlip
.019f4b	49 ff		eor #$ff			eor 	#$FF
.019f4d					_FPGP_NoFlip:
.019f4d	35 80		and $80,x			and 	XS_Mantissa,x 				; and into the mantissa.
.019f4f	95 80		sta $80,x			sta 	XS_Mantissa,x
.019f51	e8		inx				inx
.019f52	c8		iny				iny
.019f53	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.019f55	d0 ed		bne $019f44			bne 	_FPGP_MaskLoop
.019f57	ae 9c 03	ldx $039c			ldx 	ExpTemp						; restore X
.019f5a	28		plp				plp
.019f5b	08		php				php 								; get action flag on the stack
.019f5c	90 04		bcc $019f62			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.019f5e	a9 00		lda #$00			lda 	#0
.019f60	95 85		sta $85,x			sta 	XS_Type,x
.019f62					_FPGP_NotFractional:
.019f62	b5 80		lda $80,x			lda 	XS_Mantissa,x 						; check if \1 zero
.019f64	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019f66	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019f68	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019f6a	f0 05		beq $019f71			beq 	_FPGP_Zero 					; if zero, return zero
.019f6c	20 24 a0	jsr $01a024			jsr 	FPUNormalise
.019f6f	80 04		bra $019f75			bra 	_FPGP_Exit 					; and exit
.019f71					_FPGP_Zero:
.019f71	a9 40		lda #$40			lda 	#$40 						; set zero flag
.019f73	95 85		sta $85,x			sta 	XS_Type,x
.019f75					_FPGP_Exit:
.019f75	68		pla				pla 								; throw saved action flag.
.019f76	7a		ply				ply
.019f77	68		pla				pla
.019f78	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.019f79					FPCompare:
.019f79	b5 84		lda $84,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.019f7b	48		pha				pha
.019f7c	b5 8a		lda $8a,x			lda 	XS2_Exponent,x
.019f7e	48		pha				pha
.019f7f	20 4c 9d	jsr $019d4c			jsr 	FPSubtract 					; calculate X1-X2
.019f82	34 85		bit $85,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.019f84	70 2a		bvs $019fb0			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.019f86	68		pla				pla
.019f87	8d 9c 03	sta $039c			sta 	ExpTemp						; save first exponent in temporary reg.
.019f8a	68		pla				pla
.019f8b	38		sec				sec
.019f8c	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; calculate AX-BX
.019f8f	70 14		bvs $019fa5			bvs 	_FPCNotEqual				; overflow, can't be equal.
.019f91	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.019f92	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.019f94	b0 0f		bcs $019fa5			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.019f96	38		sec				sec
.019f97	ad 9c 03	lda $039c			lda 	ExpTemp 					; get one of the exponents back.
.019f9a	e9 12		sbc #$12			sbc 	#18 						; allow for 2^18 error, relatively.
.019f9c	b0 02		bcs $019fa0			bcs 	_FPCNotRange 				; keep in range.
.019f9e	a9 01		lda #$01			lda 	#1
.019fa0					_FPCNotRange:
.019fa0	38		sec				sec
.019fa1	f5 84		sbc $84,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.019fa3	b0 0d		bcs $019fb2			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.019fa5					_FPCNotEqual:
.019fa5	b5 85		lda $85,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.019fa7	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.019fa9	f0 02		beq $019fad			beq 	_FPCNE2
.019fab	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.019fad	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.019fae	80 04		bra $019fb4			bra 	_FPCExit
.019fb0					_FPCPullZero:
.019fb0	68		pla				pla 								; throw saved exponents
.019fb1	68		pla				pla
.019fb2					_FPCZero:
.019fb2	a9 00		lda #$00			lda 	#0 							; and return zero
.019fb4					_FPCExit:
.019fb4	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.019fb5					FPUCopyX2ToX1:
.019fb5	48		pha				pha
.019fb6	da		phx				phx
.019fb7	5a		phy				phy
.019fb8	a0 08		ldy #$08			ldy 	#8
.019fba	b5 86		lda $86,x	_FPUC21:lda 	XS2_Mantissa,x
.019fbc	95 80		sta $80,x			sta 	XS_Mantissa,x
.019fbe	e8		inx				inx
.019fbf	88		dey				dey
.019fc0	10 f8		bpl $019fba			bpl 	_FPUC21
.019fc2	7a		ply				ply
.019fc3	fa		plx				plx
.019fc4	68		pla				pla
.019fc5	60		rts				rts
.019fc6					FPUSetInteger:
.019fc6	48		pha				pha
.019fc7	95 80		sta $80,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.019fc9	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.019fcb	10 02		bpl $019fcf			bpl 	_FPUSIExtend
.019fcd	a9 ff		lda #$ff			lda 	#$FF
.019fcf					_FPUSIExtend:
.019fcf	95 81		sta $81,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.019fd1	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019fd3	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019fd5	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.019fd7	95 85		sta $85,x			sta 	XS_Type,x
.019fd9	68		pla				pla
.019fda	60		rts				rts
.019fdb					FPUNegateInteger:
.019fdb	48		pha				pha
.019fdc	38		sec				sec
.019fdd	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.019fdf	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.019fe1	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019fe3	a9 00		lda #$00			lda 	#0
.019fe5	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.019fe7	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019fe9	a9 00		lda #$00			lda 	#0
.019feb	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.019fed	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019fef	a9 00		lda #$00			lda 	#0
.019ff1	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.019ff3	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019ff5	68		pla				pla
.019ff6	60		rts				rts
.019ff7					FPUToFloat:
.019ff7	48		pha				pha
.019ff8	b5 85		lda $85,x			lda 	XS_Type,x					; exit if already float.
.019ffa	29 0f		and #$0f			and 	#$0F
.019ffc	f0 24		beq $01a022			beq 	_FPUFExit
.019ffe	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.01a000	95 85		sta $85,x			sta 	XS_Type,x
.01a002	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.01a004	95 84		sta $84,x			sta 	XS_Exponent,x 				; x mantissa.
.01a006	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.01a008	10 07		bpl $01a011			bpl		_FPUFPositive
.01a00a	20 db 9f	jsr $019fdb			jsr 	FPUNegateInteger 			; negate the mantissa
.01a00d	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.01a00f	95 85		sta $85,x			sta 	XS_Type,x
.01a011					_FPUFPositive:
.01a011	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.01a013	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.01a015	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.01a017	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01a019	d0 04		bne $01a01f			bne 	_FPUFNonZero
.01a01b	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.01a01d	95 85		sta $85,x			sta 	XS_Type,x
.01a01f					_FPUFNonZero:
.01a01f	20 24 a0	jsr $01a024			jsr 	FPUNormalise 				; normalise the floating point.
.01a022					_FPUFExit:
.01a022	68		pla				pla
.01a023	60		rts				rts
.01a024					FPUNormalise:
.01a024	48		pha				pha
.01a025	34 85		bit $85,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.01a027	70 18		bvs $01a041			bvs 	_FPUNExit
.01a029	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.01a02b	f0 10		beq $01a03d			beq 	_FPUNSetZero
.01a02d					_FPUNLoop:
.01a02d	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.01a02f	30 10		bmi $01a041			bmi 	_FPUNExit 					; if so, we are normalised.
.01a031	16 80		asl $80,x			asl 	0+XS_Mantissa+0,x
.01a033	36 81		rol $81,x			rol 	1+XS_Mantissa+0,x
.01a035	36 82		rol $82,x			rol 	2+XS_Mantissa+0,x
.01a037	36 83		rol $83,x			rol 	3+XS_Mantissa+0,x
.01a039	d6 84		dec $84,x			dec 	XS_Exponent,x 				; decrement exponent
.01a03b	d0 f0		bne $01a02d			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.01a03d					_FPUNSetZero:
.01a03d	a9 40		lda #$40			lda 	#$40
.01a03f	95 85		sta $85,x			sta 	XS_Type,x 					; the result is now zero.
.01a041					_FPUNExit:
.01a041	68		pla				pla
.01a042	60		rts				rts
.01a043					FPUToInteger:
.01a043	48		pha				pha
.01a044	b5 85		lda $85,x			lda 	XS_Type,x 					; if already integer, exit
.01a046	29 01		and #$01			and 	#1
.01a048	d0 31		bne $01a07b			bne 	_FPUTOI_Exit
.01a04a	34 85		bit $85,x			bit 	XS_Type,x					; if zero, return zero.
.01a04c	70 23		bvs $01a071			bvs 	_FPUTOI_Zero
.01a04e	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.01a050	10 1f		bpl $01a071			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.01a052	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.01a054	b0 2b		bcs $01a081			bcs 	FP_Overflow
.01a056					_FPUToIToInteger:
.01a056	b5 84		lda $84,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.01a058	c9 a0		cmp #$a0			cmp 	#128+32
.01a05a	f0 0c		beq $01a068			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.01a05c	f6 84		inc $84,x			inc 	XS_Exponent,X 				; increment Exponent
.01a05e	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.01a060	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a062	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a064	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a066	80 ee		bra $01a056			bra 	_FPUToIToInteger 			; keep going.
.01a068					_FPUToICheckSign:
.01a068	b5 85		lda $85,x			lda 	XS_Type,x 					; check sign
.01a06a	10 0f		bpl $01a07b			bpl 	_FPUToI_Exit 				; exit if unsigned.
.01a06c	20 db 9f	jsr $019fdb			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.01a06f	80 0a		bra $01a07b			bra 	_FPUTOI_Exit
.01a071					_FPUTOI_Zero:
.01a071	a9 00		lda #$00			lda 	#0 							; return zero integer.
.01a073	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a075	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a077	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a079	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a07b					_FPUToI_Exit:
.01a07b	a9 01		lda #$01			lda 	#1 							; set type to integer
.01a07d	95 85		sta $85,x			sta 	XS_Type,x
.01a07f	68		pla				pla
.01a080	60		rts				rts
.01a081					FP_Overflow:
.01a081	20 57 85	jsr $018557			jsr ERR_Handler
>01a084	46 6c 6f 61 74 69 6e 67			.text "Floating Point overflow",0
>01a08c	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.01a09c					FPUTimes10:
.01a09c	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.01a09e	85 1a		sta $1a				sta 	ZLTemp1+0
.01a0a0	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a0a2	85 1b		sta $1b				sta 	ZLTemp1+1
.01a0a4	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a0a6	85 1c		sta $1c				sta 	ZLTemp1+2
.01a0a8	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a0aa	85 1d		sta $1d				sta 	ZLTemp1+3
.01a0ac	20 e1 a0	jsr $01a0e1			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.01a0af	20 e1 a0	jsr $01a0e1			jsr 	_FPUT_LSR_ZLTemp1
.01a0b2	18		clc				clc
.01a0b3	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.01a0b5	65 1a		adc $1a				adc 	ZLTemp1+0
.01a0b7	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a0b9	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a0bb	65 1b		adc $1b				adc 	ZLTemp1+1
.01a0bd	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a0bf	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a0c1	65 1c		adc $1c				adc 	ZLTemp1+2
.01a0c3	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a0c5	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a0c7	65 1d		adc $1d				adc 	ZLTemp1+3
.01a0c9	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a0cb	90 0a		bcc $01a0d7			bcc 	_FPUTimes10
.01a0cd	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.01a0cf	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a0d1	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a0d3	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a0d5	f6 84		inc $84,x			inc 	XS_Exponent,x				; fix exponent
.01a0d7					_FPUTimes10:
.01a0d7	b5 84		lda $84,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.01a0d9	18		clc				clc
.01a0da	69 03		adc #$03			adc 	#3
.01a0dc	95 84		sta $84,x			sta 	XS_Exponent,x
.01a0de	b0 a1		bcs $01a081			bcs 	FP_Overflow 				; error
.01a0e0	60		rts				rts
.01a0e1					_FPUT_LSR_ZLTemp1:
.01a0e1	46 1d		lsr $1d				lsr 	ZLTemp1+3
.01a0e3	66 1c		ror $1c				ror 	ZLTemp1+2
.01a0e5	66 1b		ror $1b				ror 	ZLTemp1+1
.01a0e7	66 1a		ror $1a				ror 	ZLTemp1+0
.01a0e9	60		rts				rts
.01a0ea					FPUScale10A:
.01a0ea	5a		phy				phy
.01a0eb	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.01a0ed	f0 37		beq $01a126			beq 	_FPUScaleExit
.01a0ef	da		phx				phx 								; save X
.01a0f0	e8		inx				inx
.01a0f1	e8		inx				inx
.01a0f2	e8		inx				inx
.01a0f3	e8		inx				inx
.01a0f4	e8		inx				inx
.01a0f5	e8		inx				inx
.01a0f6	a8		tay				tay 								; save power scalar in Y.
.01a0f7	a9 00		lda #$00			lda 	#0
.01a0f9	95 80		sta $80,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.01a0fb	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a0fd	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a0ff	95 85		sta $85,x			sta 	XS_Type,x
.01a101	a9 80		lda #$80			lda 	#$80
.01a103	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a105	a9 81		lda #$81			lda 	#$81
.01a107	95 84		sta $84,x			sta 	XS_Exponent,x
.01a109	5a		phy				phy 								; save 10^n on stack.
.01a10a	c0 00		cpy #$00			cpy 	#0
.01a10c	10 05		bpl $01a113			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.01a10e	98		tya				tya
.01a10f	49 ff		eor #$ff			eor 	#$FF
.01a111	1a		inc a				inc 	a
.01a112	a8		tay				tay
.01a113					_FPUSAbs:
.01a113	20 9c a0	jsr $01a09c			jsr 	FPUTimes10
.01a116	88		dey				dey
.01a117	d0 fa		bne $01a113			bne 	_FPUSAbs 					; tos is now 10^|AC|
.01a119	68		pla				pla 								; restore count in A
.01a11a	fa		plx				plx 								; restore X pointing to number to scale.
.01a11b	0a		asl a				asl 	a
.01a11c	b0 05		bcs $01a123			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.01a11e	20 7b 9e	jsr $019e7b			jsr 	FPMultiply 					; if clear multiply.
.01a121	80 03		bra $01a126			bra		_FPUScaleExit
.01a123					_FPUSDivide:
.01a123	20 08 9e	jsr $019e08			jsr 	FPDivide
.01a126					_FPUScaleExit:
.01a126	7a		ply				ply
.01a127	60		rts				rts
.01a128					FPUCopyToNext:
.01a128	a0 06		ldy #$06			ldy 		#6
.01a12a	da		phx				phx
.01a12b					_FPUCopy1:
.01a12b	b5 80		lda $80,x			lda 	XS_Mantissa,x
.01a12d	95 86		sta $86,x			sta 	XS2_Mantissa,x
.01a12f	e8		inx				inx
.01a130	88		dey				dey
.01a131	d0 f8		bne $01a12b			bne 	_FPUCopy1
.01a133	fa		plx				plx
.01a134	60		rts				rts
.01a135					FPUCopyFromNext:
.01a135	a0 06		ldy #$06			ldy 		#6
.01a137	da		phx				phx
.01a138					_FPUCopy1:
.01a138	b5 86		lda $86,x			lda 	XS2_Mantissa,x
.01a13a	95 80		sta $80,x			sta 	XS_Mantissa,x
.01a13c	e8		inx				inx
.01a13d	88		dey				dey
.01a13e	d0 f8		bne $01a138			bne 	_FPUCopy1
.01a140	fa		plx				plx
.01a141	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fptostr.asm

.01a142					FPToString:
.01a142	48		pha				pha
.01a143	5a		phy				phy
.01a144	34 85		bit $85,x			bit 		XS_Type,x 				; check zero flag
.01a146	50 0a		bvc $01a152			bvc 		_FPTSIsFloat 			; if zero,
.01a148					_FPTSZero:
.01a148	a9 30		lda #$30			lda 		#"0"
.01a14a	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.01a14d					_FPTSExit:
.01a14d	7a		ply				ply
.01a14e	68		pla				pla
.01a14f	60		rts				rts
.01a150	80 fb		bra $01a14d			bra 		_FPTSExit
.01a152					_FPTSIsFloat:
.01a152	b5 85		lda $85,x			lda 		XS_Type,x 				; is it signed ?
.01a154	10 09		bpl $01a15f			bpl 		_FPTSNotSigned
.01a156	a9 00		lda #$00			lda 		#0 						; clear sign flag
.01a158	95 85		sta $85,x			sta 		XS_Type,x
.01a15a	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.01a15c	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.01a15f					_FPTSNotSigned:
.01a15f	b5 84		lda $84,x			lda 		XS_Exponent,x
.01a161	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.01a163	b0 09		bcs $01a16e			bcs 		_FPTSExponent
.01a165	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.01a167	90 05		bcc $01a16e			bcc 		_FPTSExponent 			;
.01a169					_FPTSStandard:
.01a169	20 ad a1	jsr $01a1ad			jsr 		FPTOutputBody 			; output the body.
.01a16c	80 df		bra $01a14d			bra 		_FPTSExit
.01a16e					_FPTSExponent:
.01a16e	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.01a170	8d 9d 03	sta $039d			sta 		ExpCount
.01a173					_FPTSExponentLoop:
.01a173	b5 84		lda $84,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.01a175	10 0e		bpl $01a185			bpl 		_FPTSTimes
.01a177	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.01a179	90 14		bcc $01a18f			bcc 		_FPTSScaledToExp
.01a17b	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.01a17d	20 ea a0	jsr $01a0ea			jsr 		FPUScale10A
.01a180	ee 9d 03	inc $039d			inc 		ExpCount
.01a183	80 ee		bra $01a173			bra 		_FPTSExponentLoop
.01a185					_FPTSTimes:
.01a185	a9 01		lda #$01			lda 		#1
.01a187	20 ea a0	jsr $01a0ea			jsr 		FPUScale10A
.01a18a	ce 9d 03	dec $039d			dec 		ExpCount
.01a18d	80 e4		bra $01a173			bra 		_FPTSExponentLoop
.01a18f					_FPTSScaledToExp:
.01a18f	20 ad a1	jsr $01a1ad			jsr 		FPTOutputBody 			; output the body.
.01a192	a9 65		lda #$65			lda 		#"e"					; output E
.01a194	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.01a197	ad 9d 03	lda $039d			lda 		ExpCount 				; get the exponent
.01a19a	95 80		sta $80,x			sta 		XS_Mantissa,x
.01a19c	29 80		and #$80			and 		#$80 					; sign extend it
.01a19e	f0 02		beq $01a1a2			beq 		_FPTSSExt
.01a1a0	a9 ff		lda #$ff			lda 		#$FF
.01a1a2					_FPTSSExt:
.01a1a2	95 81		sta $81,x			sta 		XS_Mantissa+1,x
.01a1a4	95 82		sta $82,x			sta 		XS_Mantissa+2,x
.01a1a6	95 83		sta $83,x			sta 		XS_Mantissa+3,x
.01a1a8	20 07 9c	jsr $019c07			jsr 		INTToString 			; output the exponent.
.01a1ab	80 a0		bra $01a14d			bra			_FPTSExit 				; and exit.
.01a1ad					FPTOutputBody:
.01a1ad	20 28 a1	jsr $01a128			jsr 		FPUCopyToNext 			; copy to next slot.
.01a1b0	20 43 a0	jsr $01a043			jsr 		FPUToInteger 			; convert to an integer
.01a1b3	20 07 9c	jsr $019c07			jsr 		INTToString 			; output the main integer part.
.01a1b6	20 35 a1	jsr $01a135			jsr 		FPUCopyFromNext 		; get the fractional part back.
.01a1b9	20 03 9f	jsr $019f03			jsr 		FPFractionalPart 		; get the decimal part.
.01a1bc	34 85		bit $85,x			bit 		XS_Type,x 				; any fractional part.
.01a1be	70 3c		bvs $01a1fc			bvs 		_FPTOExit 				; if not, exit now.
.01a1c0	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.01a1c2	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.01a1c5					_FPOutLoop:
.01a1c5	34 85		bit $85,x			bit 		XS_Type,x 				; finally reached zero.
.01a1c7	70 1d		bvs $01a1e6			bvs 		_FPStripZeros 			; strip trailing zeros
.01a1c9	20 9c a0	jsr $01a09c			jsr 		FPUTimes10 				; multiply by 10
.01a1cc	20 28 a1	jsr $01a128			jsr 		FPUCopyToNext			; copy to next slot.
.01a1cf	20 43 a0	jsr $01a043			jsr 		FPUToInteger 			; convert to integer
.01a1d2	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; print digit.
.01a1d4	09 30		ora #$30			ora 		#"0"
.01a1d6	20 a9 9c	jsr $019ca9			jsr 		ITSOutputCharacter
.01a1d9	20 35 a1	jsr $01a135			jsr 		FPUCopyFromNext 		; get it back
.01a1dc	20 03 9f	jsr $019f03			jsr 		FPFractionalPart 		; get fractional part
.01a1df	ad 14 03	lda $0314			lda 		NumBufX 				; done 11 characters yet ?
.01a1e2	c9 0b		cmp #$0b			cmp 	 	#11
.01a1e4	90 df		bcc $01a1c5			bcc 		_FPOutLoop 				; if so, keep going till zero.
.01a1e6					_FPStripZeros:
.01a1e6	ac 14 03	ldy $0314			ldy 		NumBufX 				; strip trailing zeros.
.01a1e9					_FPStripLoop:
.01a1e9	88		dey				dey 								; back one, if at start then no strip
.01a1ea	f0 10		beq $01a1fc			beq 		_FPToExit
.01a1ec	b9 15 03	lda $0315,y			lda 		Num_Buffer,y 			; keep going if "0"
.01a1ef	c9 30		cmp #$30			cmp 		#"0"
.01a1f1	f0 f6		beq $01a1e9			beq 		_FPStripLoop
.01a1f3	c8		iny				iny
.01a1f4	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.01a1f6	99 15 03	sta $0315,y			sta 		Num_Buffer,y
.01a1f9	8c 14 03	sty $0314			sty 		NumBufX 				; update position.
.01a1fc					_FPTOExit:
.01a1fc	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fpfromstr.asm

.01a1fd					FPFromString:
.01a1fd	48		pha				pha 								; push A
.01a1fe	b1 1e		lda ($1e),y			lda		(zGenPtr),y					; is it followed by a DP ?
.01a200	c9 2e		cmp #$2e			cmp 	#"."
.01a202	f0 03		beq $01a207			beq	 	_FPFIsDecimal
.01a204	4c 63 a2	jmp $01a263			jmp 	_FPFNotDecimal
.01a207					_FPFIsDecimal:
.01a207	c8		iny				iny 								; consume the decimal.
.01a208	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat 					; convert the integer to float.
.01a20b	da		phx				phx 								; save X.
.01a20c	5a		phy				phy 								; save decimal start position
.01a20d	e8		inx				inx
.01a20e	e8		inx				inx
.01a20f	e8		inx				inx
.01a210	e8		inx				inx
.01a211	e8		inx				inx
.01a212	e8		inx				inx
.01a213	20 c1 9c	jsr $019cc1			jsr 	INTFromStringY 				; get the part after the DP.
.01a216	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat 					; convert that to a float.
.01a219	68		pla				pla 								; calculate - chars consumed.
.01a21a	8c 9c 03	sty $039c			sty 	ExpTemp
.01a21d	38		sec				sec
.01a21e	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; this is the shift amount
.01a221	20 ea a0	jsr $01a0ea			jsr 	FPUScale10A 				; scale it by 10^AC
.01a224	fa		plx				plx 								; restore original X
.01a225	20 54 9d	jsr $019d54			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.01a228	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; exponent ?
.01a22a	c9 45		cmp #$45			cmp 	#"E"
.01a22c	f0 04		beq $01a232			beq 	_FPFExponent
.01a22e	c9 65		cmp #$65			cmp 	#"e"
.01a230	d0 31		bne $01a263			bne 	_FPFNotDecimal 				; no, then exit normally.
.01a232					_FPFExponent:
.01a232	c8		iny				iny 								; skip over E symbol.
.01a233	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; look at next
.01a235	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.01a237	d0 01		bne $01a23a			bne 	_FPFGotSign
.01a239	c8		iny				iny 								; if it was - skip over it.
.01a23a					_FPFGotSign:
.01a23a	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.01a23b	da		phx				phx
.01a23c	e8		inx				inx
.01a23d	e8		inx				inx
.01a23e	e8		inx				inx
.01a23f	e8		inx				inx
.01a240	e8		inx				inx
.01a241	e8		inx				inx
.01a242	20 c1 9c	jsr $019cc1			jsr 	INTFromStringY 				; get the exponent
.01a245	fa		plx				plx 								; restore X.
.01a246	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.01a248	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.01a24a	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.01a24c	d0 17		bne $01a265			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.01a24e	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.01a250	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.01a252	b0 11		bcs $01a265			bcs 	_FPFXOverflow
.01a254	68		pla				pla 								; get direction
.01a255	d0 07		bne $01a25e			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.01a257	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.01a259	49 ff		eor #$ff			eor 	#$FF
.01a25b	1a		inc a				inc 	a
.01a25c	95 86		sta $86,x			sta 	XS2_Mantissa+0,x
.01a25e					_FPFXScale:
.01a25e	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.01a260	20 ea a0	jsr $01a0ea			jsr 	FPUScale10A 				; scale by the exponent.
.01a263					_FPFNotDecimal:
.01a263	68		pla				pla
.01a264	60		rts				rts
.01a265					_FPFXOverflow:
.01a265	20 57 85	jsr $018557			jsr 	ERR_Handler
>01a268	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>01a270	20 52 61 6e 67 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/rnd.asm

.01a277					Unary_Rnd:
.01a277	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; get value
.01a27a	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; check right bracket.
.01a27d	20 ce 92	jsr $0192ce			jsr 	GetSignCurrent 				; get sign -1,0,1.
.01a280	09 00		ora #$00			ora 	#0 							; if -ve set seed.
.01a282	30 10		bmi $01a294			bmi 	_URSetSeed
.01a284	f0 28		beq $01a2ae			beq 	_URMakeRandom 				; if zero return same number.
.01a286	da		phx				phx
.01a287	a2 00		ldx #$00			ldx 	#0
.01a289	20 e5 a2	jsr $01a2e5			jsr 	Random16
.01a28c	a2 02		ldx #$02			ldx 	#2
.01a28e	20 e5 a2	jsr $01a2e5			jsr 	Random16
.01a291	fa		plx				plx
.01a292	80 1a		bra $01a2ae			bra 	_URMakeRandom
.01a294					_URSetSeed:
.01a294	20 f7 9f	jsr $019ff7			jsr 	FPUToFloat 					; make it a float to twiddle it.
.01a297	b5 80		lda $80,x			lda		XS_Mantissa+0,x 			; copy mantissa to seed.
.01a299	8d a3 03	sta $03a3			sta 	RandomSeed+0
.01a29c	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.01a29e	8d a4 03	sta $03a4			sta 	RandomSeed+1
.01a2a1	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01a2a3	8d a5 03	sta $03a5			sta 	RandomSeed+2
.01a2a6	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.01a2a8	0a		asl a				asl 	a
.01a2a9	49 db		eor #$db			eor 	#$DB
.01a2ab	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a2ae					_URMakeRandom:
.01a2ae	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; check if seed is zero.
.01a2b1	0d a4 03	ora $03a4			ora 	RandomSeed+1
.01a2b4	0d a5 03	ora $03a5			ora 	RandomSeed+2
.01a2b7	0d a6 03	ora $03a6			ora 	RandomSeed+3
.01a2ba	d0 0a		bne $01a2c6			bne 	_URNotZero
.01a2bc	a9 47		lda #$47			lda 	#$47
.01a2be	8d a4 03	sta $03a4			sta 	RandomSeed+1				; if it is, make it non zero.
.01a2c1	a9 3d		lda #$3d			lda 	#$3D
.01a2c3	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a2c6					_URNotZero:
.01a2c6	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; copy seed into mantissa.
.01a2c9	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a2cb	ad a4 03	lda $03a4			lda 	RandomSeed+1
.01a2ce	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a2d0	ad a5 03	lda $03a5			lda 	RandomSeed+2
.01a2d3	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a2d5	ad a6 03	lda $03a6			lda 	RandomSeed+3
.01a2d8	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a2da	a9 00		lda #$00			lda 	#$00 						; set type to float.
.01a2dc	95 85		sta $85,x			sta 	XS_Type,x
.01a2de	a9 80		lda #$80			lda 	#$80
.01a2e0	95 84		sta $84,x			sta	 	XS_Exponent,x				; exponent to 128 (e.g. 0.x 2^0)
.01a2e2	4c 24 a0	jmp $01a024			jmp 	FPUNormalise
.01a2e5					Random16:
.01a2e5	5e a4 03	lsr $03a4,x			lsr 	RandomSeed+1,x				; shift seed right
.01a2e8	7e a3 03	ror $03a3,x			ror 	RandomSeed,x
.01a2eb	90 08		bcc $01a2f5			bcc 	_R16_NoXor
.01a2ed	bd a4 03	lda $03a4,x			lda 	RandomSeed+1,x				; xor MSB with $B4 if bit set.
.01a2f0	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.01a2f2	9d a4 03	sta $03a4,x			sta 	RandomSeed+1,x
.01a2f5					_R16_NoXor:
.01a2f5	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/int.asm

.01a2f6					Unary_Int:
.01a2f6	20 50 90	jsr $019050			jsr 	EvaluateNumberX 			; get value
.01a2f9	20 84 96	jsr $019684			jsr 	CheckNextRParen 			; check right bracket.
.01a2fc	4c 43 a0	jmp $01a043			jmp 	FPUToInteger				; Convert to integer.

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>01a2ff	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	00 c0						.word 	StartROM
>fffe	19 c0					.word TIM_BreakHandler

;******  End of listing
