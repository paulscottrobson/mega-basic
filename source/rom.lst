
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -b -q -L rom.lst -o rom.bin basic.asm
; Mon Aug 19 12:48:57 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				CPU = "65816"
="em65816"				HARDWARE = "em65816"

;******  Processing file: modules/float/fpmacros.inc


;******  Return to file: _include.asm


;******  Processing file: modules/common/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zLTemp1:	.dword ?						; long word (used in multiply)
>001a					zGenPtr:	.word ? 						; general pointer.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0304					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0305					XS_Type 	.byte ? 						; bit 7 sign (float only)
=774					XS2_Mantissa = XS_Mantissa+6
=778					XS2_Exponent = XS_Exponent+6
=779					XS2_Type = XS_Type+6
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0425					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0427					Tim_SR:		.byte ? 						; Processor Status
>0428					Tim_A:		.byte ? 						; Processor Registers
>0429					Tim_X:		.byte ?
>042a					Tim_Y:		.byte ?
>042b					Tim_Z:		.byte ?
>042c					Tim_SP:		.byte ?							; Stack Pointer
>042d					ExpTemp:	.byte ?							; Working temp for exponents.
>042e					ExpCount:	.byte ? 						; Count of decimal exponents.

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

.c000					StartROM:
.c000	18		clc				clc
.c001	fb		xce				xce
.c002	c2 30		rep #$30			rep 	#$30
.c004	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c007	1b		tcs				tcs
.c008	e2 30		sep #$30			sep 	#$30
.c00a	c2 30		rep #$30			rep 	#$30
.c00c	a9 00 00	lda #$0000			lda 	#$0000
.c00f	aa		tax				tax
.c010	a8		tay				tay
.c011	e2 30		sep #$30			sep 	#$30
.c013	20 b7 c1	jsr $c1b7			jsr 	IF_Reset 					; reset external interface
.c016	20 1c c0	jsr $c01c			jsr 	IFT_ClearScreen
.c019	4c ae c8	jmp $c8ae		jmp FPTTest

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.c01c					IFT_ClearScreen:
.c01c	48		pha				pha
.c01d	da		phx				phx
.c01e	5a		phy				phy
.c01f	20 b8 c1	jsr $c1b8			jsr 	IF_Home 					; home cursor
.c022	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.c024					_IFT_CS0:
.c024	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.c026					_IFT_CS1:
.c026	a9 20		lda #$20			lda 	#' '						; clear line.
.c028	20 e4 c1	jsr $c1e4			jsr 	IF_Write
.c02b	88		dey				dey
.c02c	d0 f8		bne $c026			bne 	_IFT_CS1
.c02e	20 cb c1	jsr $c1cb			jsr 	IF_NewLine 					; next line down
.c031	ca		dex				dex
.c032	d0 f0		bne $c024			bne 	_IFT_CS0
.c034	7a		ply				ply
.c035	fa		plx				plx
.c036	68		pla				pla
.c037					IFT_HomeCursor:
.c037	48		pha				pha
.c038	20 b8 c1	jsr $c1b8			jsr 	IF_Home
.c03b	a9 00		lda #$00			lda 	#0
.c03d	8d 00 02	sta $0200			sta 	IFT_XCursor
.c040	8d 01 02	sta $0201			sta 	IFT_YCursor
.c043	68		pla				pla
.c044	60		rts				rts
.c045					IFT_UpLine:
.c045	48		pha				pha
.c046	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.c049	3a		dec a				dec 	a 							; line above
.c04a	30 03		bmi $c04f			bmi 	_IFTULExit 					; too far, abort
.c04c	20 da c0	jsr $c0da			jsr 	IFT_SetYPos					; set to that line.
.c04f					_IFTULExit:
.c04f	68		pla				pla
.c050	60		rts				rts
.c051					IFT_PrintCharacter:
.c051	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.c053	f0 16		beq $c06b			beq 	IFT_NewLine
.c055	48		pha				pha
.c056	20 83 c0	jsr $c083			jsr 	IFT_UpperCase 				; make upper case
.c059	20 e4 c1	jsr $c1e4			jsr 	IF_Write 					; write out.
.c05c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.c05f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.c062	c9 40		cmp #$40			cmp 	#IF_Width
.c064	d0 03		bne $c069			bne 	_IFT_PCNotEOL
.c066	20 6b c0	jsr $c06b			jsr 	IFT_NewLine 				; if so do new line.
.c069					_IFT_PCNotEOL:
.c069	68		pla				pla
.c06a	60		rts				rts
.c06b					IFT_NewLine:
.c06b	48		pha				pha
.c06c	20 cb c1	jsr $c1cb			jsr 	IF_NewLine 					; new line on actual screen.
.c06f	a9 00		lda #$00			lda 	#0 							; reset x position
.c071	8d 00 02	sta $0200			sta 	IFT_XCursor
.c074	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.c077	ad 01 02	lda $0201			lda 	IFT_YCursor
.c07a	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.c07c	d0 03		bne $c081			bne 	_IFT_NL_NotEOS
.c07e	20 8e c0	jsr $c08e			jsr 	IFT_Scroll 					; scroll screen up.
.c081					_IFT_NL_NotEOS:
.c081	68		pla				pla
.c082	60		rts				rts
.c083					IFT_UpperCase:
.c083	c9 61		cmp #$61			cmp 	#"a"
.c085	90 06		bcc $c08d			bcc 	_IFT_UCExit
.c087	c9 7b		cmp #$7b			cmp 	#"z"+1
.c089	b0 02		bcs $c08d			bcs 	_IFT_UCExit
.c08b	49 20		eor #$20			eor 	#$20
.c08d					_IFT_UCExit:
.c08d	60		rts				rts
.c08e					IFT_Scroll:
.c08e	48		pha				pha 								; save AXY
.c08f	da		phx				phx
.c090	5a		phy				phy
.c091	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.c093					_IFT_SLoop:
.c093	20 b3 c0	jsr $c0b3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.c096	e8		inx				inx
.c097	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.c099	d0 f8		bne $c093			bne 	_IFT_SLoop
.c09b	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.c09d	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c0a0	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.c0a2					_IFT_SBlank:
.c0a2	a9 20		lda #$20			lda 	#32
.c0a4	20 e4 c1	jsr $c1e4			jsr 	IF_Write
.c0a7	ca		dex				dex
.c0a8	d0 f8		bne $c0a2			bne 	_IFT_SBlank
.c0aa	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.c0ac	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c0af	7a		ply				ply
.c0b0	fa		plx				plx
.c0b1	68		pla				pla
.c0b2	60		rts				rts
.c0b3					_IFT_ScrollLine:
.c0b3	da		phx				phx
.c0b4	da		phx				phx
.c0b5	8a		txa				txa 								; copy line into buffer.
.c0b6	1a		inc a				inc 	a 							; next line down.
.c0b7	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c0ba	a2 00		ldx #$00			ldx 	#0
.c0bc					_IFTScrollCopy1:
.c0bc	20 db c1	jsr $c1db			jsr 	IF_Read
.c0bf	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.c0c2	e8		inx				inx
.c0c3	e0 40		cpx #$40			cpx 	#IF_Width
.c0c5	d0 f5		bne $c0bc			bne 	_IFTScrollCopy1
.c0c7	68		pla				pla
.c0c8	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c0cb	a2 00		ldx #$00			ldx 	#0
.c0cd					_IFTScrollCopy2:
.c0cd	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.c0d0	20 e4 c1	jsr $c1e4			jsr 	IF_Write
.c0d3	e8		inx				inx
.c0d4	e0 40		cpx #$40			cpx 	#IF_Width
.c0d6	d0 f5		bne $c0cd			bne 	_IFTScrollCopy2
.c0d8	fa		plx				plx
.c0d9	60		rts				rts
.c0da					IFT_SetYPos:
.c0da	48		pha				pha
.c0db	da		phx				phx
.c0dc	aa		tax				tax
.c0dd	20 37 c0	jsr $c037			jsr 	IFT_HomeCursor
.c0e0	e0 00		cpx #$00			cpx 	#0
.c0e2	f0 09		beq $c0ed			beq 	_IFT_MOAExit
.c0e4					_IFT_MOALoop:
.c0e4	20 cb c1	jsr $c1cb			jsr 	IF_NewLine
.c0e7	ee 01 02	inc $0201			inc 	IFT_YCursor
.c0ea	ca		dex				dex
.c0eb	d0 f7		bne $c0e4			bne		_IFT_MOALoop
.c0ed					_IFT_MOAExit:
.c0ed	fa		plx				plx
.c0ee	68		pla				pla
.c0ef	60		rts				rts
.c0f0					IFT_GetKeyCursor:
.c0f0	20 f8 c0	jsr $c0f8			jsr 	_IFT_FlipCursor 			; reverse current
.c0f3					_IFT_GKCWait:
.c0f3	20 f5 c1	jsr $c1f5			jsr 	IF_GetKey 					; get key
.c0f6	f0 fb		beq $c0f3			beq 	_IFT_GKCWait
.c0f8					_IFT_FlipCursor:
.c0f8	48		pha				pha 								; save
.c0f9	20 db c1	jsr $c1db			jsr 	IF_Read 					; read
.c0fc	20 ed c1	jsr $c1ed			jsr 	IF_LeftOne
.c0ff	49 80		eor #$80			eor 	#$80 						; reverse
.c101	20 e4 c1	jsr $c1e4			jsr 	IF_Write 					; write
.c104	20 ed c1	jsr $c1ed			jsr 	IF_LeftOne
.c107	68		pla				pla
.c108	60		rts				rts
.c109					IFT_ReadLine:
.c109	48		pha				pha
.c10a					_IFT_RLLoop:
.c10a	20 f0 c0	jsr $c0f0			jsr 	IFT_GetKeyCursor 			; get keystroke
.c10d	c9 0d		cmp #$0d			cmp 	#13							; return
.c10f	f0 7d		beq $c18e			beq 	_IFT_RLExit
.c111	c9 20		cmp #$20			cmp 	#32 						; control character
.c113	90 05		bcc $c11a			bcc 	_IFT_Control
.c115	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c118	80 f0		bra $c10a			bra 	_IFT_RLLoop
.c11a					_IFT_Control:
.c11a	c9 01		cmp #$01			cmp 	#"A"-64
.c11c	f0 26		beq $c144			beq 	_IFT_Left
.c11e	c9 04		cmp #$04			cmp 	#"D"-64
.c120	f0 2e		beq $c150			beq 	_IFT_Right
.c122	c9 17		cmp #$17			cmp 	#"W"-64
.c124	f0 36		beq $c15c			beq 	_IFT_Up
.c126	c9 13		cmp #$13			cmp 	#"S"-64
.c128	f0 3e		beq $c168			beq 	_IFT_Down
.c12a	c9 08		cmp #$08			cmp 	#"H"-64
.c12c	f0 09		beq $c137			beq 	_IFT_Backspace
.c12e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.c130	d0 d8		bne $c10a			bne 	_IFT_RLLoop
.c132	20 1c c0	jsr $c01c			jsr 	IFT_ClearScreen				; clear CTL-Z
.c135	80 d3		bra $c10a			bra 	_IFT_RLLoop
.c137					_IFT_Backspace:
.c137	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.c13a	f0 ce		beq $c10a			beq 	_IFT_RLLoop
.c13c	20 ed c1	jsr $c1ed			jsr 	IF_LeftOne
.c13f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.c141	20 e4 c1	jsr $c1e4			jsr 	IF_Write
.c144					_IFT_Left:
.c144	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.c147	10 29		bpl $c172			bpl 	_IFT_Reposition
.c149	a9 3f		lda #$3f			lda 	#IF_Width-1
.c14b					_IFT_SetX:
.c14b	8d 00 02	sta $0200			sta 	IFT_XCursor
.c14e	80 22		bra $c172			bra 	_IFT_Reposition
.c150					_IFT_Right:
.c150	ee 00 02	inc $0200			inc 	IFT_XCursor
.c153	ad 00 02	lda $0200			lda 	IFT_XCursor
.c156	49 40		eor #$40			eor 	#IF_Width
.c158	f0 f1		beq $c14b			beq 	_IFT_SetX
.c15a	80 16		bra $c172			bra 	_IFT_Reposition
.c15c					_IFT_Up:
.c15c	ce 01 02	dec $0201			dec 	IFT_YCursor
.c15f	10 11		bpl $c172			bpl 	_IFT_Reposition
.c161	a9 1f		lda #$1f			lda 	#IF_Height-1
.c163					_IFT_SetY:
.c163	8d 01 02	sta $0201			sta 	IFT_YCursor
.c166	80 0a		bra $c172			bra 	_IFT_Reposition
.c168					_IFT_Down:
.c168	ee 01 02	inc $0201			inc 	IFT_YCursor
.c16b	ad 01 02	lda $0201			lda 	IFT_YCursor
.c16e	49 20		eor #$20			eor 	#IF_Height
.c170	f0 f1		beq $c163			beq 	_IFT_SetY
.c172					_IFT_Reposition:
.c172	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.c175	48		pha				pha
.c176	ad 01 02	lda $0201			lda 	IFT_YCursor
.c179	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c17c	68		pla				pla
.c17d	aa		tax				tax
.c17e	e0 00		cpx #$00			cpx 	#0
.c180	f0 88		beq $c10a			beq 	_IFT_RLLoop
.c182					_IFT_MoveRight:
.c182	20 db c1	jsr $c1db			jsr 	IF_Read
.c185	ee 00 02	inc $0200			inc 	IFT_XCursor
.c188	ca		dex				dex
.c189	d0 f7		bne $c182			bne 	_IFT_MoveRight
.c18b	4c 0a c1	jmp $c10a			jmp 	_IFT_RLLoop
.c18e					_IFT_RLExit:
.c18e	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.c191	20 da c0	jsr $c0da			jsr 	IFT_SetYPos
.c194	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.c196					_IFT_RLRead:
.c196	20 db c1	jsr $c1db			jsr 	IF_Read
.c199	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.c19c	e8		inx				inx
.c19d	e0 40		cpx #$40			cpx 	#IF_Width
.c19f	d0 f5		bne $c196			bne 	_IFT_RLRead
.c1a1					_IFT_RL_Trim:
.c1a1	ca		dex				dex 	 							; previous char
.c1a2	30 07		bmi $c1ab			bmi 	_IFT_Found 					; gone too far
.c1a4	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.c1a7	c9 20		cmp #$20			cmp 	#" "
.c1a9	f0 f6		beq $c1a1			beq 	_IFT_RL_Trim
.c1ab					_IFT_Found:
.c1ab	e8		inx				inx 								; forward to non-space
.c1ac	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.c1ae	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.c1b1	68		pla				pla
.c1b2	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.c1b4	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.c1b6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.c1b7					IF_Reset:
.c1b7	60		rts				rts
.c1b8					IF_Home:
.c1b8	48		pha				pha
.c1b9	64 08		stz $08				stz 	IF_XPos 					; zero X position
.c1bb	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.c1bd	85 04		sta $04				sta 	IF_Pos
.c1bf	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.c1c1	85 05		sta $05				sta 	IF_Pos+1
.c1c3	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.c1c5	85 06		sta $06				sta 	IF_Pos+2
.c1c7	64 07		stz $07				stz 	IF_Pos+3
.c1c9	68		pla				pla
.c1ca	60		rts				rts
.c1cb					IF_NewLine:
.c1cb	48		pha				pha
.c1cc	64 08		stz $08				stz 	IF_XPos						; back to start of line
.c1ce	18		clc				clc 								; down one line
.c1cf	a5 04		lda $04				lda 	IF_Pos
.c1d1	69 40		adc #$40			adc 	#64
.c1d3	85 04		sta $04				sta 	IF_Pos
.c1d5	90 02		bcc $c1d9			bcc 	_IF_NoCarry 				; carry through.
.c1d7	e6 05		inc $05				inc 	IF_Pos+1
.c1d9					_IF_NoCarry:
.c1d9	68		pla				pla
.c1da	60		rts				rts
.c1db					IF_Read:
.c1db	5a		phy				phy 								; save current Y
.c1dc	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.c1de	b7 04		lda [$04],y			lda 	[IF_Pos],y
.c1e0	e6 08		inc $08				inc 	IF_XPos 					; step right.
.c1e2	7a		ply				ply									; restore Y
.c1e3	60		rts				rts
.c1e4					IF_Write:
.c1e4	5a		phy				phy 								; save current Y
.c1e5	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.c1e7	97 04		sta [$04],y			sta 	[IF_Pos],y
.c1e9	e6 08		inc $08				inc 	IF_XPos 					; step right.
.c1eb	7a		ply				ply									; restore Y
.c1ec	60		rts				rts
.c1ed					IF_LeftOne:
.c1ed	c6 08		dec $08				dec 	IF_XPos
.c1ef	60		rts				rts
.c1f0					IF_CheckBreak:
.c1f0	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.c1f4	60		rts				rts
.c1f5					IF_GetKey:
.c1f5	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.c1f9	f0 08		beq $c203			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.c1fb	48		pha				pha 								; key pressed, clear queue.
.c1fc	a9 00		lda #$00			lda 	#0
.c1fe	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.c202	68		pla				pla
.c203					_IFGK_NoKey:
.c203	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.c205	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.c206					FPSubtract:
.c206	48		pha				pha
.c207	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.c20a	49 80		eor #$80			eor 	#$80
.c20c	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c20f	68		pla				pla 								; --- and fall through ---
.c210					FPAdd:
.c210	48		pha				pha
.c211	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.c214	d0 05		bne $c21b			bne 	_FPA_NegativeLHS
.c216	20 38 c2	jsr $c238			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.c219	68		pla				pla
.c21a	60		rts				rts
.c21b					_FPA_NegativeLHS:
.c21b	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.c21e	49 80		eor #$80			eor 	#$80
.c220	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c223	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.c226	49 80		eor #$80			eor 	#$80
.c228	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c22b	20 38 c2	jsr $c238			jsr 	FPAdd_Worker 				; do the add calculation.
.c22e	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 back
.c231	49 80		eor #$80			eor 	#$80
.c233	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c236	68		pla				pla
.c237	60		rts				rts
.c238					FPAdd_Worker:
.c238	3c 0b 03	bit $030b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.c23b	70 08		bvs $c245			bvs 	_FPAWExit 					; no change.
.c23d	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.c240	50 07		bvc $c249			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.c242	20 dc c4	jsr $c4dc			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.c245					_FPAWExit:
.c245	20 64 c5	jsr $c564			jsr 	FPUNormalise 				; normalise the result.
.c248	60		rts				rts
.c249					_FPAWMakeSame:
.c249	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.c24c	38		sec				sec
.c24d	fd 0a 03	sbc $030a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.c250	f0 1b		beq $c26d			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.c252	da		phx				phx 								; save X
.c253	90 06		bcc $c25b			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.c255	e8		inx				inx
.c256	e8		inx				inx
.c257	e8		inx				inx
.c258	e8		inx				inx
.c259	e8		inx				inx
.c25a	e8		inx				inx
.c25b					_FPAWShiftA:
.c25b	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c25e	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c261	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c264	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c267	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c26a	fa		plx				plx 								; restore original X
.c26b	80 dc		bra $c249			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.c26d					_FPAW_DoArithmetic:
.c26d	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.c270	30 39		bmi $c2ab			bmi 	_FPAW_BNegative
.c272	18		clc				clc
.c273	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c276	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c279	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c27c	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c27f	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c282	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c285	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c288	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c28b	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c28e	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c291	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c294	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c297	90 ac		bcc $c245			bcc 	_FPAWExit 					; no carry.
.c299	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c29c	38		sec				sec
.c29d	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c2a0	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c2a3	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c2a6	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c2a9	80 9a		bra $c245			bra 	_FPAWExit
.c2ab					_FPAW_BNegative:
.c2ab	38		sec				sec
.c2ac	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c2af	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa+0,x
.c2b2	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c2b5	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c2b8	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c2bb	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c2be	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c2c1	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c2c4	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c2c7	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c2ca	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c2cd	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c2d0	b0 0b		bcs $c2dd			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.c2d2	20 09 c5	jsr $c509			jsr 	FPUNegateInteger			; negate the mantissa
.c2d5	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip result sign
.c2d8	49 80		eor #$80			eor 	#$80
.c2da	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c2dd					_FPAWGoExit:
.c2dd	4c 45 c2	jmp $c245			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.c2e0					FPD_IsDivZero:
.c2e0	80 fe		bra $c2e0		_error: bra _error
>c2e2	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>c2ea	20 62 79 20 7a 65 72 6f 00
.c2f3					FPDivide:
.c2f3	48		pha				pha
.c2f4	5a		phy				phy
.c2f5	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; check if division by zero
.c2f8	70 e6		bvs $c2e0			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.c2fa	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.c2fd	f0 03		beq $c302			beq 	_FPDCalculateExp
.c2ff					_FPD_Exit:
.c2ff	7a		ply				ply
.c300	68		pla				pla
.c301	60		rts				rts
.c302					_FPDCalculateExp:
.c302	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.c305	49 ff		eor #$ff			eor 	#$FF
.c307	1a		inc a				inc 	a
.c308	9d 0a 03	sta $030a,x			sta 	XS2_Exponent,x
.c30b	20 ff c3	jsr $c3ff			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.c30e	18		clc				clc 	 							; add 1 to the resulting exponent
.c30f	69 01		adc #$01			adc 	#1
.c311	b0 65		bcs $c378			bcs 	_FPD_Overflow 				; which can overflow.
.c313	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c316	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.c318	85 16		sta $16				sta 	zLTemp1+0
.c31a	85 17		sta $17				sta 	zLTemp1+1
.c31c	85 18		sta $18				sta 	zLTemp1+2
.c31e	85 19		sta $19				sta 	zLTemp1+3
.c320	a0 20		ldy #$20			ldy 	#32 						; times round.
.c322					_FPD_Loop:
.c322	38		sec				sec 								; calculate X1-X2 stacking result because we might
.c323	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; not save it.
.c326	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa,x
.c329	48		pha				pha
.c32a	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c32d	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c330	48		pha				pha
.c331	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c334	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c337	48		pha				pha
.c338	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c33b	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c33e	90 17		bcc $c357			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.c340	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x 			; save results out to A
.c343	68		pla				pla
.c344	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c347	68		pla				pla
.c348	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c34b	68		pla				pla
.c34c	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c34f	a5 19		lda $19				lda 	zLTemp1+3 					; set high bit of result
.c351	09 80		ora #$80			ora 	#$80
.c353	85 19		sta $19				sta 	zLTemp1+3
.c355	80 03		bra $c35a			bra 	_FPD_Rotates
.c357					_FPD_NoSubtract:
.c357	68		pla				pla 								; throw away unwanted results
.c358	68		pla				pla
.c359	68		pla				pla
.c35a					_FPD_Rotates:
.c35a	5e 09 03	lsr $0309,x			lsr 	3+XS2_Mantissa,x
.c35d	7e 08 03	ror $0308,x			ror 	2+XS2_Mantissa,x
.c360	7e 07 03	ror $0307,x			ror 	1+XS2_Mantissa,x
.c363	7e 06 03	ror $0306,x			ror 	0+XS2_Mantissa,x
.c366	06 16		asl $16				asl 	zLTemp1 					; rotate result round left
.c368	26 17		rol $17				rol 	zLTemp1+1
.c36a	26 18		rol $18				rol 	zLTemp1+2
.c36c	26 19		rol $19				rol 	zLTemp1+3
.c36e	90 02		bcc $c372			bcc 	_FPD_NoCarry
.c370	e6 16		inc $16				inc 	zLTemp1 					; if rotated out, set LSB.
.c372					_FPD_NoCarry:
.c372	88		dey				dey 								; do 32 times
.c373	d0 ad		bne $c322			bne 	_FPD_Loop
.c375	4c dc c3	jmp $c3dc			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.c378					_FPD_Overflow:
.c378	4c d9 c5	jmp $c5d9			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.c37b					FPMultiply:
.c37b	48		pha				pha
.c37c	5a		phy				phy
.c37d	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.c380	70 08		bvs $c38a			bvs 	_FPM_Exit
.c382	3c 0b 03	bit $030b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.c385	50 06		bvc $c38d			bvc 	_FPM_CalcExponent
.c387	20 dc c4	jsr $c4dc			jsr 	FPUCopyX2ToX1
.c38a					_FPM_Exit:
.c38a	7a		ply				ply
.c38b	68		pla				pla
.c38c	60		rts				rts
.c38d					_FPM_CalcExponent:
.c38d	18		clc				clc
.c38e	20 ff c3	jsr $c3ff			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.c391	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; save the result.
.c394	a9 00		lda #$00			lda 	#0
.c396	85 16		sta $16				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.c398	85 17		sta $17				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.c39a	85 18		sta $18				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.c39c	85 19		sta $19				sta 	zLTemp1+3
.c39e	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.c3a0					_FPM_Loop:
.c3a0	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x				; check LSB of long product
.c3a3	29 01		and #$01			and 	#1
.c3a5	18		clc				clc 								; clear carry for the long rotate.
.c3a6	f0 1d		beq $c3c5			beq 	_FPM_NoAddition
.c3a8	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.c3a9	a5 16		lda $16				lda 	zLTemp1+0
.c3ab	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c3ae	85 16		sta $16				sta 	zLTemp1+0
.c3b0	a5 17		lda $17				lda 	zLTemp1+1
.c3b2	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c3b5	85 17		sta $17				sta 	zLTemp1+1
.c3b7	a5 18		lda $18				lda 	zLTemp1+2
.c3b9	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c3bc	85 18		sta $18				sta 	zLTemp1+2
.c3be	a5 19		lda $19				lda 	zLTemp1+3
.c3c0	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c3c3	85 19		sta $19				sta 	zLTemp1+3
.c3c5					_FPM_NoAddition:
.c3c5	66 19		ror $19				ror 	3+zLTemp1
.c3c7	66 18		ror $18				ror 	2+zLTemp1
.c3c9	66 17		ror $17				ror 	1+zLTemp1
.c3cb	66 16		ror $16				ror 	0+zLTemp1
.c3cd	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c3d0	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c3d3	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c3d6	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c3d9	88		dey				dey
.c3da	d0 c4		bne $c3a0			bne 	_FPM_Loop 					; do this 32 times.
.c3dc					FPM_CopySignNormalize:
.c3dc	a5 16		lda $16				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.c3de	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.c3e1	a5 17		lda $17				lda 	zLTemp1+1
.c3e3	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c3e6	a5 18		lda $18				lda 	zLTemp1+2
.c3e8	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c3eb	a5 19		lda $19				lda 	zLTemp1+3
.c3ed	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c3f0	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; sign is xor of signs
.c3f3	5d 0b 03	eor $030b,x			eor 	XS2_Type,x
.c3f6	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c3f9	20 64 c5	jsr $c564			jsr 	FPUNormalise 				; normalise and exit.
.c3fc	7a		ply				ply
.c3fd	68		pla				pla
.c3fe	60		rts				rts
.c3ff					FPCalculateExponent:
.c3ff	18		clc				clc
.c400	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.c403	7d 0a 03	adc $030a,x			adc 	XS2_Exponent,x
.c406	b0 08		bcs $c410			bcs 	_FPCECarry 					; carry out ?
.c408	10 03		bpl $c40d			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.c40a	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.c40c	60		rts				rts
.c40d					_FPCEExpZero:
.c40d	a9 00		lda #$00			lda 	#0
.c40f	60		rts				rts
.c410					_FPCECarry:
.c410	30 03		bmi $c415			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.c412	09 80		ora #$80			ora 	#$80 						; put in right range
.c414	60		rts				rts
.c415					_FPCEOverflow:
.c415	4c d9 c5	jmp $c5d9			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.c418					FPFractionalPart:
.c418	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.c41b	38		sec				sec 								; this flag tells us to keep the fractional part
.c41c	30 0f		bmi $c42d			bmi 	FPGetPart
.c41e	60		rts				rts
.c41f					FPIntegerPart:
.c41f	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.c422	18		clc				clc 								; this flag says keep the integer part.
.c423	30 08		bmi $c42d			bmi 	FPGetPart 					; -ve exponents are 0..127
.c425	48		pha				pha
.c426	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.c428	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c42b	68		pla				pla
.c42c	60		rts				rts
.c42d					FPGetPart:
.c42d	48		pha				pha
.c42e	5a		phy				phy 								; save Y
.c42f	08		php				php 								; save action
.c430	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.c433	70 62		bvs $c497			bvs 	_FPGP_Exit 					; then do nothing.
.c435	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.c437	85 16		sta $16				sta 	zLTemp1+0 					; this mask is applied to chop out the
.c439	85 17		sta $17				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.c43b	85 18		sta $18				sta 	zLTemp1+2
.c43d	85 19		sta $19				sta 	zLTemp1+3
.c43f	bd 04 03	lda $0304,x			lda 	XS_Exponent,x				; the number of shifts.
.c442	38		sec				sec
.c443	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.c445	f0 12		beq $c459			beq 	_FPGP_NoShift 				; ... if any
.c447	c9 20		cmp #$20			cmp 	#32
.c449	90 02		bcc $c44d			bcc 	_FPGP_NotMax
.c44b	a9 20		lda #$20			lda 	#32 						; max of 32.
.c44d					_FPGP_NotMax:
.c44d	a8		tay				tay 								; Y is the mask shift count.
.c44e					_FPGP_ShiftMask:
.c44e	46 19		lsr $19				lsr 	3+zLTemp1
.c450	66 18		ror $18				ror 	2+zLTemp1
.c452	66 17		ror $17				ror 	1+zLTemp1
.c454	66 16		ror $16				ror 	0+zLTemp1
.c456	88		dey				dey
.c457	d0 f5		bne $c44e			bne 	_FPGP_ShiftMask
.c459					_FPGP_NoShift:
.c459	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.c45b	8e 2d 04	stx $042d			stx 	ExpTemp						; save X
.c45e					_FPGP_MaskLoop:
.c45e	b9 16 00	lda $0016,y			lda 	zlTemp1,y 					; get mask byte
.c461	28		plp				plp 								; if CC we keep the top part, so we
.c462	08		php				php		 							; flip the mask.
.c463	b0 02		bcs $c467			bcs		_FPGP_NoFlip
.c465	49 ff		eor #$ff			eor 	#$FF
.c467					_FPGP_NoFlip:
.c467	3d 00 03	and $0300,x			and 	XS_Mantissa,x 				; and into the mantissa.
.c46a	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c46d	e8		inx				inx
.c46e	c8		iny				iny
.c46f	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.c471	d0 eb		bne $c45e			bne 	_FPGP_MaskLoop
.c473	ae 2d 04	ldx $042d			ldx 	ExpTemp						; restore X
.c476	28		plp				plp
.c477	08		php				php 								; get action flag on the stack
.c478	90 05		bcc $c47f			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.c47a	a9 00		lda #$00			lda 	#0
.c47c	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c47f					_FPGP_NotFractional:
.c47f	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 						; check if \1 zero
.c482	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c485	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c488	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c48b	f0 05		beq $c492			beq 	_FPGP_Zero 					; if zero, return zero
.c48d	20 64 c5	jsr $c564			jsr 	FPUNormalise
.c490	80 05		bra $c497			bra 	_FPGP_Exit 					; and exit
.c492					_FPGP_Zero:
.c492	a9 40		lda #$40			lda 	#$40 						; set zero flag
.c494	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c497					_FPGP_Exit:
.c497	68		pla				pla 								; throw saved action flag.
.c498	7a		ply				ply
.c499	68		pla				pla
.c49a	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.c49b					FPCompare:
.c49b	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.c49e	48		pha				pha
.c49f	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x
.c4a2	48		pha				pha
.c4a3	20 06 c2	jsr $c206			jsr 	FPSubtract 					; calculate X1-X2
.c4a6	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.c4a9	70 2c		bvs $c4d7			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.c4ab	68		pla				pla
.c4ac	8d 2d 04	sta $042d			sta 	ExpTemp						; save first exponent in temporary reg.
.c4af	68		pla				pla
.c4b0	38		sec				sec
.c4b1	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; calculate AX-BX
.c4b4	70 15		bvs $c4cb			bvs 	_FPCNotEqual				; overflow, can't be equal.
.c4b6	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.c4b7	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.c4b9	b0 10		bcs $c4cb			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.c4bb	38		sec				sec
.c4bc	ad 2d 04	lda $042d			lda 	ExpTemp 					; get one of the exponents back.
.c4bf	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.c4c1	b0 02		bcs $c4c5			bcs 	_FPCNotRange 				; keep in range.
.c4c3	a9 01		lda #$01			lda 	#1
.c4c5					_FPCNotRange:
.c4c5	38		sec				sec
.c4c6	fd 04 03	sbc $0304,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.c4c9	b0 0e		bcs $c4d9			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.c4cb					_FPCNotEqual:
.c4cb	bd 05 03	lda $0305,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.c4ce	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.c4d0	f0 02		beq $c4d4			beq 	_FPCNE2
.c4d2	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.c4d4	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.c4d5	80 04		bra $c4db			bra 	_FPCExit
.c4d7					_FPCPullZero:
.c4d7	68		pla				pla 								; throw saved exponents
.c4d8	68		pla				pla
.c4d9					_FPCZero:
.c4d9	a9 00		lda #$00			lda 	#0 							; and return zero
.c4db					_FPCExit:
.c4db	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.c4dc					FPUCopyX2ToX1:
.c4dc	48		pha				pha
.c4dd	da		phx				phx
.c4de	5a		phy				phy
.c4df	a0 08		ldy #$08			ldy 	#8
.c4e1	bd 06 03	lda $0306,x	_FPUC21:lda 	XS2_Mantissa,x
.c4e4	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c4e7	e8		inx				inx
.c4e8	88		dey				dey
.c4e9	10 f6		bpl $c4e1			bpl 	_FPUC21
.c4eb	7a		ply				ply
.c4ec	fa		plx				plx
.c4ed	68		pla				pla
.c4ee	60		rts				rts
.c4ef					FPUSetInteger:
.c4ef	48		pha				pha
.c4f0	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.c4f3	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.c4f5	10 02		bpl $c4f9			bpl 	_FPUSIExtend
.c4f7	a9 ff		lda #$ff			lda 	#$FF
.c4f9					_FPUSIExtend:
.c4f9	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.c4fc	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c4ff	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c502	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.c504	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c507	68		pla				pla
.c508	60		rts				rts
.c509					FPUNegateInteger:
.c509	48		pha				pha
.c50a	38		sec				sec
.c50b	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.c50d	fd 00 03	sbc $0300,x			sbc 	XS_Mantissa+0,x
.c510	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c513	a9 00		lda #$00			lda 	#0
.c515	fd 01 03	sbc $0301,x			sbc 	XS_Mantissa+1,x
.c518	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c51b	a9 00		lda #$00			lda 	#0
.c51d	fd 02 03	sbc $0302,x			sbc 	XS_Mantissa+2,x
.c520	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c523	a9 00		lda #$00			lda 	#0
.c525	fd 03 03	sbc $0303,x			sbc 	XS_Mantissa+3,x
.c528	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c52b	68		pla				pla
.c52c	60		rts				rts
.c52d					FPUToFloat:
.c52d	48		pha				pha
.c52e	bd 05 03	lda $0305,x			lda 	XS_Type,x					; exit if already float.
.c531	29 0f		and #$0f			and 	#$0F
.c533	f0 2d		beq $c562			beq 	_FPUFExit
.c535	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.c537	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c53a	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.c53c	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; x mantissa.
.c53f	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.c542	10 08		bpl $c54c			bpl		_FPUFPositive
.c544	20 09 c5	jsr $c509			jsr 	FPUNegateInteger 			; negate the mantissa
.c547	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.c549	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c54c					_FPUFPositive:
.c54c	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.c54f	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c552	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c555	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c558	d0 05		bne $c55f			bne 	_FPUFNonZero
.c55a	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.c55c	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c55f					_FPUFNonZero:
.c55f	20 64 c5	jsr $c564			jsr 	FPUNormalise 				; normalise the floating point.
.c562					_FPUFExit:
.c562	68		pla				pla
.c563	60		rts				rts
.c564					FPUNormalise:
.c564	48		pha				pha
.c565	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.c568	70 20		bvs $c58a			bvs 	_FPUNExit
.c56a	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.c56d	f0 16		beq $c585			beq 	_FPUNSetZero
.c56f					_FPUNLoop:
.c56f	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.c572	30 16		bmi $c58a			bmi 	_FPUNExit 					; if so, we are normalised.
.c574	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa+0,x
.c577	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa+0,x
.c57a	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa+0,x
.c57d	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa+0,x
.c580	de 04 03	dec $0304,x			dec 	XS_Exponent,x 				; decrement exponent
.c583	d0 ea		bne $c56f			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.c585					_FPUNSetZero:
.c585	a9 40		lda #$40			lda 	#$40
.c587	9d 05 03	sta $0305,x			sta 	XS_Type,x 					; the result is now zero.
.c58a					_FPUNExit:
.c58a	68		pla				pla
.c58b	60		rts				rts
.c58c					FPUToInteger:
.c58c	48		pha				pha
.c58d	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if already integer, exit
.c590	29 01		and #$01			and 	#1
.c592	d0 3e		bne $c5d2			bne 	_FPUTOI_Exit
.c594	3c 05 03	bit $0305,x			bit 	XS_Type,x					; if zero, return zero.
.c597	70 2b		bvs $c5c4			bvs 	_FPUTOI_Zero
.c599	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.c59c	10 26		bpl $c5c4			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.c59e	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.c5a0	b0 37		bcs $c5d9			bcs 	FP_Overflow
.c5a2					_FPUToIToInteger:
.c5a2	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.c5a5	c9 a0		cmp #$a0			cmp 	#128+32
.c5a7	f0 11		beq $c5ba			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.c5a9	fe 04 03	inc $0304,x			inc 	XS_Exponent,X 				; increment Exponent
.c5ac	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c5af	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c5b2	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c5b5	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c5b8	80 e8		bra $c5a2			bra 	_FPUToIToInteger 			; keep going.
.c5ba					_FPUToICheckSign:
.c5ba	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; check sign
.c5bd	10 13		bpl $c5d2			bpl 	_FPUToI_Exit 				; exit if unsigned.
.c5bf	20 09 c5	jsr $c509			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.c5c2	80 0e		bra $c5d2			bra 	_FPUTOI_Exit
.c5c4					_FPUTOI_Zero:
.c5c4	a9 00		lda #$00			lda 	#0 							; return zero integer.
.c5c6	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c5c9	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c5cc	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c5cf	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c5d2					_FPUToI_Exit:
.c5d2	a9 01		lda #$01			lda 	#1 							; set type to integer
.c5d4	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c5d7	68		pla				pla
.c5d8	60		rts				rts
.c5d9					FP_Overflow:
.c5d9	80 fe		bra $c5d9		_error: bra _error
>c5db	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>c5e3	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.c5f3					FPUTimes10:
.c5f3	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.c5f6	85 16		sta $16				sta 	ZLTemp1+0
.c5f8	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c5fb	85 17		sta $17				sta 	ZLTemp1+1
.c5fd	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c600	85 18		sta $18				sta 	ZLTemp1+2
.c602	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c605	85 19		sta $19				sta 	ZLTemp1+3
.c607	20 4b c6	jsr $c64b			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.c60a	20 4b c6	jsr $c64b			jsr 	_FPUT_LSR_ZLTemp1
.c60d	18		clc				clc
.c60e	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.c611	65 16		adc $16				adc 	ZLTemp1+0
.c613	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c616	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c619	65 17		adc $17				adc 	ZLTemp1+1
.c61b	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c61e	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c621	65 18		adc $18				adc 	ZLTemp1+2
.c623	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c626	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c629	65 19		adc $19				adc 	ZLTemp1+3
.c62b	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c62e	90 0f		bcc $c63f			bcc 	_FPUTimes10
.c630	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c633	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c636	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c639	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c63c	fe 04 03	inc $0304,x			inc 	XS_Exponent,x				; fix exponent
.c63f					_FPUTimes10:
.c63f	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.c642	18		clc				clc
.c643	69 03		adc #$03			adc 	#3
.c645	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c648	b0 8f		bcs $c5d9			bcs 	FP_Overflow 				; error
.c64a	60		rts				rts
.c64b					_FPUT_LSR_ZLTemp1:
.c64b	46 19		lsr $19				lsr 	ZLTemp1+3
.c64d	66 18		ror $18				ror 	ZLTemp1+2
.c64f	66 17		ror $17				ror 	ZLTemp1+1
.c651	66 16		ror $16				ror 	ZLTemp1+0
.c653	60		rts				rts
.c654					FPUScale10A:
.c654	5a		phy				phy
.c655	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.c657	f0 3d		beq $c696			beq 	_FPUScaleExit
.c659	da		phx				phx 								; save X
.c65a	e8		inx				inx
.c65b	e8		inx				inx
.c65c	e8		inx				inx
.c65d	e8		inx				inx
.c65e	e8		inx				inx
.c65f	e8		inx				inx
.c660	a8		tay				tay 								; save power scalar in Y.
.c661	a9 00		lda #$00			lda 	#0
.c663	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.c666	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c669	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c66c	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c66f	a9 80		lda #$80			lda 	#$80
.c671	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c674	a9 81		lda #$81			lda 	#$81
.c676	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c679	5a		phy				phy 								; save 10^n on stack.
.c67a	c0 00		cpy #$00			cpy 	#0
.c67c	10 05		bpl $c683			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.c67e	98		tya				tya
.c67f	49 ff		eor #$ff			eor 	#$FF
.c681	1a		inc a				inc 	a
.c682	a8		tay				tay
.c683					_FPUSAbs:
.c683	20 f3 c5	jsr $c5f3			jsr 	FPUTimes10
.c686	88		dey				dey
.c687	d0 fa		bne $c683			bne 	_FPUSAbs 					; tos is now 10^|AC|
.c689	68		pla				pla 								; restore count in A
.c68a	fa		plx				plx 								; restore X pointing to number to scale.
.c68b	0a		asl a				asl 	a
.c68c	b0 05		bcs $c693			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.c68e	20 7b c3	jsr $c37b			jsr 	FPMultiply 					; if clear multiply.
.c691	80 03		bra $c696			bra		_FPUScaleExit
.c693					_FPUSDivide:
.c693	20 f3 c2	jsr $c2f3			jsr 	FPDivide
.c696					_FPUScaleExit:
.c696	7a		ply				ply
.c697	60		rts				rts
.c698					FPUCopyToNext:
.c698	a0 06		ldy #$06			ldy 		#6
.c69a	da		phx				phx
.c69b					_FPUCopy1:
.c69b	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x
.c69e	9d 06 03	sta $0306,x			sta 	XS2_Mantissa,x
.c6a1	e8		inx				inx
.c6a2	88		dey				dey
.c6a3	d0 f6		bne $c69b			bne 	_FPUCopy1
.c6a5	fa		plx				plx
.c6a6	60		rts				rts
.c6a7					FPUCopyFromNext:
.c6a7	a0 06		ldy #$06			ldy 		#6
.c6a9	da		phx				phx
.c6aa					_FPUCopy1:
.c6aa	bd 06 03	lda $0306,x			lda 	XS2_Mantissa,x
.c6ad	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c6b0	e8		inx				inx
.c6b1	88		dey				dey
.c6b2	d0 f6		bne $c6aa			bne 	_FPUCopy1
.c6b4	fa		plx				plx
.c6b5	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.c6b6					TIM_Error:
.c6b6	20 45 c0	jsr $c045			jsr 	IFT_UpLine 					; go up one line.
.c6b9	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.c6bb	80 02		bra $c6bf			bra 	TIM_ShowPrompt
.c6bd					TIM_NewCommand:
.c6bd	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.c6bf					TIM_ShowPrompt:
.c6bf	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.c6c2	20 09 c1	jsr $c109			jsr 	IFT_ReadLine	 			; get character, go to next line
.c6c5	20 6b c0	jsr $c06b			jsr 	IFT_NewLine					; go to next line.
.c6c8	86 10		stx $10				stx 	zTemp1 						; save line read address
.c6ca	84 11		sty $11				sty 	zTemp1+1
.c6cc	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.c6ce	b1 10		lda ($10),y			lda 	(zTemp1),y
.c6d0	c9 52		cmp #$52			cmp 	#"R"						; show registers
.c6d2	f0 6b		beq $c73f			beq 	TIM_ShowRegisters
.c6d4	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.c6d6	f0 12		beq $c6ea			beq 	TIM_ShowMemory
.c6d8	c9 47		cmp #$47			cmp 	#"G"						; execute
.c6da	f0 49		beq $c725			beq 	TIM_Execute
.c6dc	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.c6de	f0 07		beq $c6e7			beq 	TIM_GoLoadMemory
.c6e0	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.c6e2	d0 d2		bne $c6b6			bne 	TIM_Error
.c6e4	4c 62 c8	jmp $c862			jmp 	TIM_UpdateRegisters
.c6e7					TIM_GoLoadMemory:
.c6e7	4c 8d c8	jmp $c88d			jmp 	TIM_LoadMemory
.c6ea					TIM_ShowMemory:
.c6ea	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.c6ed	b0 c7		bcs $c6b6			bcs 	TIM_Error
.c6ef	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.c6f1	85 12		sta $12				sta 	zTemp2
.c6f3	a5 15		lda $15				lda 	zTemp3+1
.c6f5	85 13		sta $13				sta 	zTemp2+1
.c6f7	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.c6fa	90 08		bcc $c704			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.c6fc	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.c6fe	85 14		sta $14				sta 	zTemp3
.c700	a5 13		lda $13				lda 	zTemp2+1
.c702	85 15		sta $15				sta 	zTemp3+1
.c704					_TIMSM_Start:
.c704	20 b6 c7	jsr $c7b6			jsr 	TIM_WriteLine 				; write one line of hex out
.c707	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.c709	18		clc				clc
.c70a	69 10		adc #$10			adc 	#16
.c70c	85 12		sta $12				sta 	zTemp2
.c70e	90 02		bcc $c712			bcc 	_TIMSM_NoCarry
.c710	e6 13		inc $13				inc 	zTemp2+1
.c712					_TIMSM_NoCarry:
.c712	20 f0 c1	jsr $c1f0			jsr 	IF_CheckBreak 				; check CTL+C
.c715	d0 0b		bne $c722			bne 	_TIMSM_Ends 				; if pressed break out.
.c717	38		sec				sec 								; check past the end address in zTemp3
.c718	a5 14		lda $14				lda 	zTemp3
.c71a	e5 12		sbc $12				sbc 	zTemp2
.c71c	a5 15		lda $15				lda 	zTemp3+1
.c71e	e5 13		sbc $13				sbc 	zTemp2+1
.c720	10 e2		bpl $c704			bpl 	_TIMSM_Start
.c722					_TIMSM_Ends:
.c722	4c bd c6	jmp $c6bd			jmp 	TIM_NewCommand
.c725					TIM_Execute:
.c725	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; get the execute address
.c728	b0 8c		bcs $c6b6			bcs 	TIM_Error 					; not legitimate
.c72a	ae 2c 04	ldx $042c			ldx 	TIM_SP 						; set up SP
.c72d	9a		txs				txs
.c72e	ad 27 04	lda $0427			lda 	TIM_SR 						; Status for PLP
.c731	48		pha				pha
.c732	ad 28 04	lda $0428			lda 	TIM_A 						; restore AXYZ
.c735	ae 29 04	ldx $0429			ldx 	TIM_X
.c738	ac 2a 04	ldy $042a			ldy 	TIM_Y
.c73b	28		plp				plp 								; and PS Byte.
.c73c	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.c73f					TIM_Start:
.c73f					TIM_ShowRegisters:
.c73f	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.c742	8d 26 04	sta $0426			sta 	TIM_IRQ+1
.c745	ad ff ff	lda $ffff			lda 	$FFFF
.c748	8d 25 04	sta $0425			sta 	TIM_IRQ
.c74b	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.c74d					_TIMSR_Text:
.c74d	bd 7d c7	lda $c77d,x			lda 	_TIMSR_Label,x
.c750	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c753	e8		inx				inx
.c754	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.c756	d0 f5		bne $c74d			bne 	_TIMSR_Text
.c758	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.c75a					_TIMSR_Skip:
.c75a	e8		inx				inx
.c75b					_TIMSR_LoopSpace:
.c75b	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.c75d	b0 04		bcs $c763			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.c75f	8a		txa				txa
.c760	4a		lsr a				lsr 	a
.c761	b0 05		bcs $c768			bcs 	_TIMSR_NoSpace
.c763					_TIMSR_Space:
.c763	a9 20		lda #$20			lda 	#" "
.c765	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c768					_TIMSR_NoSpace:
.c768	bd 23 04	lda $0423,x			lda 	TIM_PC,x 					; output hex value.
.c76b	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c76e	e8		inx				inx
.c76f	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.c771	f0 e7		beq $c75a			beq 	_TIMSR_Skip
.c773	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.c775	d0 e4		bne $c75b			bne 	_TimSR_LoopSpace
.c777	20 6b c0	jsr $c06b			jsr 	IFT_NewLine 				; new line
.c77a	4c bd c6	jmp $c6bd			jmp	 	TIM_NewCommand 				; new command.
.c77d					_TIMSR_Label:
>c77d	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>c785	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>c795	52
>c796	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.c79d					_TIMSR_LabelEnd:
.c79d					TIM_WriteHex:
.c79d	48		pha				pha 								; save A
.c79e	4a		lsr a				lsr 	a 							; shift MSB->LSB
.c79f	4a		lsr a				lsr 	a
.c7a0	4a		lsr a				lsr 	a
.c7a1	4a		lsr a				lsr 	a
.c7a2	20 a6 c7	jsr $c7a6			jsr 	_TIMWH_Nibble 				; print MSB
.c7a5	68		pla				pla 								; restore and print LSB
.c7a6					_TIMWH_Nibble:
.c7a6	48		pha				pha
.c7a7	29 0f		and #$0f			and 	#15 						; mask out
.c7a9	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.c7ab	90 02		bcc $c7af			bcc 	_TIMWHNoLetter
.c7ad	69 06		adc #$06			adc 	#6
.c7af					_TIMWHNoLetter:
.c7af	69 30		adc #$30			adc 	#48
.c7b1	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter 			; print it out.
.c7b4	68		pla				pla
.c7b5	60		rts				rts
.c7b6					TIM_WriteLine:
.c7b6	a9 2e		lda #$2e			lda 	#"." 						; prompt
.c7b8	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c7bb	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.c7bd	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c7c0	a5 13		lda $13				lda 	zTemp2+1 					; write address
.c7c2	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c7c5	a5 12		lda $12				lda 	zTemp2
.c7c7	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c7ca	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.c7cc					_TIMWL_Loop:
.c7cc	a9 20		lda #$20			lda 	#" "
.c7ce	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
.c7d1	b1 12		lda ($12),y			lda 	(zTemp2),y
.c7d3	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c7d6	c8		iny				iny
.c7d7	c0 10		cpy #$10			cpy 	#16
.c7d9	d0 f1		bne $c7cc			bne 	_TIMWL_Loop
.c7db	4c 6b c0	jmp $c06b			jmp 	IFT_NewLine 				; new line and exit
.c7de					TIM_GetHex:
.c7de	c8		iny				iny
.c7df	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.c7e1	c9 20		cmp #$20			cmp 	#32
.c7e3	f0 f9		beq $c7de			beq 	TIM_GetHex
.c7e5	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.c7e7	f0 f5		beq $c7de			beq 	TIM_GetHex
.c7e9	20 12 c8	jsr $c812			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.c7ec	b0 23		bcs $c811			bcs 	_TIMGH_Exit					; if first bad then exit now.
.c7ee	a9 00		lda #$00			lda 	#0 							; zero result
.c7f0	85 14		sta $14				sta 	zTemp3
.c7f2	85 15		sta $15				sta 	zTemp3+1
.c7f4					_TIM_GHLoop:
.c7f4	20 12 c8	jsr $c812			jsr 	TIM_GetHexCharacter 		; get next character
.c7f7	b0 17		bcs $c810			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.c7f9	c8		iny				iny 								; skip over it.
.c7fa	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.c7fc	26 15		rol $15				rol 	zTemp3+1
.c7fe	06 14		asl $14				asl 	zTemp3 						; now x 2
.c800	26 15		rol $15				rol 	zTemp3+1
.c802	06 14		asl $14				asl 	zTemp3						; now x 4
.c804	26 15		rol $15				rol 	zTemp3+1
.c806	06 14		asl $14				asl 	zTemp3 						; now x 8
.c808	26 15		rol $15				rol 	zTemp3+1
.c80a	05 14		ora $14				ora 	zTemp3 						; OR result in
.c80c	85 14		sta $14				sta 	zTemp3
.c80e	80 e4		bra $c7f4			bra 	_TIM_GHLoop 				; loop round again.
.c810					_TIMGH_Okay:
.c810	18		clc				clc
.c811					_TIMGH_Exit:
.c811	60		rts				rts
.c812					TIM_GetHexCharacter:
.c812	b1 10		lda ($10),y			lda 	(zTemp1),y
.c814	38		sec				sec
.c815	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.c817	90 0e		bcc $c827			bcc 	_TIM_GHCFail
.c819	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.c81b	90 0b		bcc $c828			bcc 	_TIM_GHCExit
.c81d	c9 11		cmp #$11			cmp 	#65-48						; < A
.c81f	90 06		bcc $c827			bcc		_TIM_GHCFail
.c821	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.c823	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.c825	90 01		bcc $c828			bcc		_TIM_GHCExit
.c827					_TIM_GHCFail:
.c827	38		sec				sec
.c828					_TIM_GHCExit:
.c828	60		rts				rts
.c829					TIM_BreakVector:
.c829	da		phx				phx									; save X/A on stack
.c82a	48		pha				pha
.c82b	ba		tsx				tsx 								; X points to S
.c82c	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.c82f	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.c831	d0 03		bne $c836			bne 	_TIMBreak					; if set, it's BRK
.c833	68		pla				pla 								; abandon routine.
.c834	fa		plx				plx
.c835	40		rti				rti
.c836					_TIMBreak:
.c836	68		pla				pla 								; save A X Y and maybe Z
.c837	8d 28 04	sta $0428			sta 	TIM_A
.c83a	fa		plx				plx
.c83b	8e 29 04	stx $0429			stx 	TIM_X
.c83e	8c 2a 04	sty $042a			sty 	TIM_Y
.c841	68		pla				pla 								; get Status Register
.c842	8d 27 04	sta $0427			sta 	TIM_SR
.c845	68		pla				pla
.c846	8d 24 04	sta $0424			sta 	TIM_PC+1 					; save calling address
.c849	68		pla				pla
.c84a	8d 23 04	sta $0423			sta 	TIM_PC 						; high byte
.c84d	ad 24 04	lda $0424			lda 	TIM_PC+1 					; dec PC to point right.
.c850	d0 03		bne $c855			bne 	_TIMDecrement 				; brk bumps it.
.c852	ce 23 04	dec $0423			dec 	TIM_PC
.c855					_TIMDecrement:
.c855	ce 24 04	dec $0424			dec 	TIM_PC+1
.c858	ba		tsx				tsx 								; and copy SP
.c859	8e 2c 04	stx $042c			stx 	TIM_SP
.c85c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.c85e	9a		txs				txs
.c85f	4c 3f c7	jmp $c73f			jmp 	TIM_Start 					; and start up TIM monitor.
.c862					TIM_UpdateRegisters:
.c862	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; PC
.c865	b0 23		bcs $c88a			bcs 	_TIMURFail
.c867	a5 14		lda $14				lda 	zTemp3
.c869	8d 24 04	sta $0424			sta 	Tim_PC+1
.c86c	a5 15		lda $15				lda 	zTemp3+1
.c86e	8d 23 04	sta $0423			sta 	Tim_PC
.c871	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; ignore IRQ
.c874	b0 14		bcs $c88a			bcs 	_TIMURFail
.c876	a2 00		ldx #$00			ldx 	#0
.c878					_TIM_URLoop:
.c878	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; registers
.c87b	b0 0d		bcs $c88a			bcs 	_TIMURFail
.c87d	a5 14		lda $14				lda 	zTemp3
.c87f	9d 27 04	sta $0427,x			sta 	Tim_SR,x
.c882	e8		inx				inx
.c883	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.c885	d0 f1		bne $c878			bne 	_TIM_URLoop
.c887	4c bd c6	jmp $c6bd			jmp 	TIM_NewCommand
.c88a					_TIMURFail:
.c88a	4c b6 c6	jmp $c6b6			jmp 	TIM_Error
.c88d					TIM_LoadMemory:
.c88d	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; target address => zTemp2
.c890	a5 14		lda $14				lda 	zTemp3
.c892	85 12		sta $12				sta 	zTemp2
.c894	a5 15		lda $15				lda 	zTemp3+1
.c896	85 13		sta $13				sta 	zTemp2+1
.c898					_TIM_LMLoop:
.c898	20 de c7	jsr $c7de			jsr 	TIM_GetHex 					; next byte ?
.c89b	b0 0e		bcs $c8ab			bcs 	_TIMLMDone 					; no more
.c89d	a2 00		ldx #$00			ldx 	#0							; write out.
.c89f	a5 14		lda $14				lda 	zTemp3
.c8a1	81 12		sta ($12,x)			sta 	(zTemp2,x)
.c8a3	e6 12		inc $12				inc 	zTemp2 						; bump address
.c8a5	d0 f1		bne $c898			bne 	_TIM_LMLoop
.c8a7	e6 13		inc $13				inc 	zTemp2+1
.c8a9	80 ed		bra $c898			bra 	_TIM_LMLoop
.c8ab					_TIMLMDone:
.c8ab	4c bd c6	jmp $c6bd			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/testing/fptest.asm

.c8ae					FPTTest:
.c8ae	a9 66		lda #$66			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.c8b0	85 1a		sta $1a				sta 	zGenPtr
.c8b2	a9 c9		lda #$c9			lda 	#FPTTestData >> 8
.c8b4	85 1b		sta $1b				sta 	zGenPtr+1
.c8b6	a2 00		ldx #$00			ldx 	#0 							; start at stack bottom.
.c8b8	a5 1b		lda $1b		FPTLoop:lda 	zGenPtr+1
.c8ba	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c8bd	a5 1a		lda $1a				lda 	zGenPtr
.c8bf	20 9d c7	jsr $c79d			jsr 	TIM_WriteHex
.c8c2	a9 2e		lda #$2e			lda 	#"."
.c8c4	20 51 c0	jsr $c051			jsr		IFT_PrintCharacter
.c8c7	20 57 c9	jsr $c957			jsr 	FPTGet 						; get next command
.c8ca	c9 00		cmp #$00			cmp 	#0 							; zero, exit
.c8cc	f0 58		beq $c926			beq 	FPTExit
.c8ce	c9 01		cmp #$01			cmp 	#1 							; 1,load
.c8d0	f0 46		beq $c918			beq 	FPTLoad
.c8d2	c9 2b		cmp #$2b			cmp 	#"+" 						; the -1/0/1 value in AC.
.c8d4	d0 0b		bne $c8e1			bne 	_skip1
.c8d6	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c8d9	20 10 c2	jsr $c210			jsr 	FPAdd
.c8dc	20 51 c9	jsr $c951			jsr 	FPT_Postamble
.c8df	80 d7		bra $c8b8			bra 	FPTLoop
.c8e1					_skip1:
.c8e1	c9 2d		cmp #$2d			cmp 	#"-" 						; the -1/0/1 value in AC.
.c8e3	d0 0b		bne $c8f0			bne 	_skip1
.c8e5	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c8e8	20 06 c2	jsr $c206			jsr 	FPSubtract
.c8eb	20 51 c9	jsr $c951			jsr 	FPT_Postamble
.c8ee	80 c8		bra $c8b8			bra 	FPTLoop
.c8f0					_skip1:
.c8f0	c9 2a		cmp #$2a			cmp 	#"*" 						; the -1/0/1 value in AC.
.c8f2	d0 0b		bne $c8ff			bne 	_skip1
.c8f4	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c8f7	20 7b c3	jsr $c37b			jsr 	FPMultiply
.c8fa	20 51 c9	jsr $c951			jsr 	FPT_Postamble
.c8fd	80 b9		bra $c8b8			bra 	FPTLoop
.c8ff					_skip1:
.c8ff	c9 2f		cmp #$2f			cmp 	#"/" 						; the -1/0/1 value in AC.
.c901	d0 0b		bne $c90e			bne 	_skip1
.c903	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c906	20 f3 c2	jsr $c2f3			jsr 	FPDivide
.c909	20 51 c9	jsr $c951			jsr 	FPT_Postamble
.c90c	80 aa		bra $c8b8			bra 	FPTLoop
.c90e					_skip1:
.c90e	c9 7e		cmp #$7e			cmp 	#"~" 						; ~, compare
.c910	f0 1a		beq $c92c			beq 	FPTCompare
.c912	c9 3d		cmp #$3d			cmp 	#"="						; = check equal
.c914	f0 28		beq $c93e			beq 	FPTCheck
.c916					FPTError:
.c916	80 fe		bra $c916			bra 	FPTError
.c918					FPTLoad:
.c918	a0 06		ldy #$06			ldy 	#6 							; data to copy
.c91a					_FPTLoadLoop:
.c91a	20 57 c9	jsr $c957			jsr 	FPTGet
.c91d	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c920	e8		inx				inx
.c921	88		dey				dey
.c922	d0 f6		bne $c91a			bne 	_FPTLoadLoop
.c924	80 92		bra $c8b8			bra 	FPTLoop
.c926					FPTExit:
.c926	a9 2a		lda #$2a			lda 	#42
.c928	20 51 c0	jsr $c051			jsr 	IFT_PrintCharacter
>c92b	02						.byte 	2
.c92c					FPTCompare:
.c92c	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c92f	20 9b c4	jsr $c49b			jsr 	FPCompare
.c932	20 ef c4	jsr $c4ef			jsr 	FPUSetInteger
.c935	20 2d c5	jsr $c52d			jsr 	FPUToFloat
.c938	20 51 c9	jsr $c951			jsr 	FPT_Postamble
.c93b	4c b8 c8	jmp $c8b8			jmp 	FPTLoop
.c93e					FPTCheck:
.c93e	20 4b c9	jsr $c94b			jsr 	FPT_Preamble
.c941	20 9b c4	jsr $c49b			jsr 	FPCompare
.c944	09 00		ora #$00			ora 	#0
.c946					_FPTCFail:
.c946	d0 fe		bne $c946			bne 	_FPTCFail
.c948	4c b8 c8	jmp $c8b8			jmp 	FPTLoop
.c94b					FPT_Preamble:
.c94b	8a		txa				txa
.c94c	38		sec				sec
.c94d	e9 0c		sbc #$0c			sbc 	#12
.c94f	aa		tax				tax
.c950	60		rts				rts
.c951					FPT_Postamble:
.c951	8a		txa				txa
.c952	18		clc				clc
.c953	69 06		adc #$06			adc 	#6
.c955	aa		tax				tax
.c956	60		rts				rts
.c957	5a		phy		FPTGet:	phy
.c958	a0 00		ldy #$00			ldy 	#0
.c95a	b1 1a		lda ($1a),y			lda 	(zGenPtr),y
.c95c	48		pha				pha
.c95d	e6 1a		inc $1a				inc 	zGenPtr
.c95f	d0 02		bne $c963			bne 	_FPTGet1
.c961	e6 1b		inc $1b				inc 	zGenPtr+1
.c963					_FPTGet1:
.c963	68		pla				pla
.c964	7a		ply				ply
.c965	60		rts				rts
.c966					FPTTestData:

;******  Processing file: modules/testing/script.inc

>c966	01					.byte 	1	; *** Load Integer 99999 ***
>c967	9f 86 01 00				.dword 	$1869f
>c96b	00 01					.byte 	0,$01
>c96d	01					.byte 	1     ; *** Load Float 307.68 ***
>c96e	3d 0a d7 99				.dword 	$99d70a3d
>c972	89 00					.byte 	$89,$0
>c974	01					.byte 	1     ; *** Load Float 1.5575060388073325e-12 ***
>c975	a5 11 33 db				.dword 	$db3311a5
>c979	59 00					.byte 	$59,$0
>c97b	7e					.byte 	$7e   ; *** Command ~ ***
>c97c	01					.byte 	1     ; *** Load Float 1 ***
>c97d	00 00 00 80				.dword 	$80000000
>c981	81 00					.byte 	$81,$0
>c983	3d					.byte 	$3d   ; *** Command = ***
>c984	01					.byte 	1     ; *** Load Float -9.0 ***
>c985	00 00 00 90				.dword 	$90000000
>c989	84 80					.byte 	$84,$80
>c98b	01					.byte 	1     ; *** Load Float 589.08 ***
>c98c	b8 1e 45 93				.dword 	$93451eb8
>c990	8a 00					.byte 	$8a,$0
>c992	7e					.byte 	$7e   ; *** Command ~ ***
>c993	01					.byte 	1     ; *** Load Float -1 ***
>c994	00 00 00 80				.dword 	$80000000
>c998	81 80					.byte 	$81,$80
>c99a	3d					.byte 	$3d   ; *** Command = ***
>c99b	01					.byte 	1     ; *** Load Float 8.167641 ***
>c99c	54 a8 ae 82				.dword 	$82aea854
>c9a0	84 00					.byte 	$84,$0
>c9a2	01					.byte 	1     ; *** Load Float -489.91 ***
>c9a3	e1 7a f4 f4				.dword 	$f4f47ae1
>c9a7	89 80					.byte 	$89,$80
>c9a9	2b					.byte 	$2b   ; *** Command + ***
>c9aa	01					.byte 	1     ; *** Load Float -481.742359 ***
>c9ab	9e 05 df f0				.dword 	$f0df059e
>c9af	89 80					.byte 	$89,$80
>c9b1	3d					.byte 	$3d   ; *** Command = ***
>c9b2	01					.byte 	1     ; *** Load Float 345070729261.21985 ***
>c9b3	f0 a2 af a0				.dword 	$a0afa2f0
>c9b7	a7 00					.byte 	$a7,$0
>c9b9	01					.byte 	1     ; *** Load Float 19.0 ***
>c9ba	00 00 00 98				.dword 	$98000000
>c9be	85 00					.byte 	$85,$0
>c9c0	2d					.byte 	$2d   ; *** Command - ***
>c9c1	01					.byte 	1     ; *** Load Float 345070729242.21985 ***
>c9c2	f0 a2 af a0				.dword 	$a0afa2f0
>c9c6	a7 00					.byte 	$a7,$0
>c9c8	3d					.byte 	$3d   ; *** Command = ***
>c9c9	01					.byte 	1     ; *** Load Float -2.3725910125449443e-16 ***
>c9ca	6b 43 c5 88				.dword 	$88c5436b
>c9ce	4d 80					.byte 	$4d,$80
>c9d0	01					.byte 	1     ; *** Load Float -9.0 ***
>c9d1	00 00 00 90				.dword 	$90000000
>c9d5	84 80					.byte 	$84,$80
>c9d7	2f					.byte 	$2f   ; *** Command / ***
>c9d8	01					.byte 	1     ; *** Load Float 2.6362122361610493e-17 ***
>c9d9	30 cd 25 f3				.dword 	$f325cd30
>c9dd	49 00					.byte 	$49,$0
>c9df	3d					.byte 	$3d   ; *** Command = ***
>c9e0	01					.byte 	1     ; *** Load Float -384.85 ***
>c9e1	cc cc 6c c0				.dword 	$c06ccccc
>c9e5	89 80					.byte 	$89,$80
>c9e7	01					.byte 	1     ; *** Load Float 2.5819428265094755e-10 ***
>c9e8	66 9d f1 8d				.dword 	$8df19d66
>c9ec	61 00					.byte 	$61,$0
>c9ee	2a					.byte 	$2a   ; *** Command * ***
>c9ef	01					.byte 	1     ; *** Load Float -9.936606967821717e-08 ***
>c9f0	13 13 63 d5				.dword 	$d5631313
>c9f4	69 80					.byte 	$69,$80
>c9f6	3d					.byte 	$3d   ; *** Command = ***
>c9f7	01					.byte 	1     ; *** Load Float -943.73376 ***
>c9f8	ec f5 ee eb				.dword 	$ebeef5ec
>c9fc	8a 80					.byte 	$8a,$80
>c9fe	01					.byte 	1     ; *** Load Float 7.66448 ***
>c9ff	8f 6b 43 f5				.dword 	$f5436b8f
>ca03	83 00					.byte 	$83,$0
>ca05	2b					.byte 	$2b   ; *** Command + ***
>ca06	01					.byte 	1     ; *** Load Float -936.0692799999999 ***
>ca07	15 6f 04 ea				.dword 	$ea046f15
>ca0b	8a 80					.byte 	$8a,$80
>ca0d	3d					.byte 	$3d   ; *** Command = ***
>ca0e	01					.byte 	1     ; *** Load Float 1.053887939453125e-05 ***
>ca0f	70 24 d0 b0				.dword 	$b0d02470
>ca13	70 00					.byte 	$70,$0
>ca15	01					.byte 	1     ; *** Load Float -2424960010.15808 ***
>ca16	0a f4 89 90				.dword 	$9089f40a
>ca1a	a0 80					.byte 	$a0,$80
>ca1c	7e					.byte 	$7e   ; *** Command ~ ***
>ca1d	01					.byte 	1     ; *** Load Float 1 ***
>ca1e	00 00 00 80				.dword 	$80000000
>ca22	81 00					.byte 	$81,$0
>ca24	3d					.byte 	$3d   ; *** Command = ***
>ca25	01					.byte 	1     ; *** Load Float -3861845614.002176 ***
>ca26	6e 16 2f e6				.dword 	$e62f166e
>ca2a	a0 80					.byte 	$a0,$80
>ca2c	01					.byte 	1     ; *** Load Float -1.6783738136291503e-07 ***
>ca2d	c0 c9 36 b4				.dword 	$b436c9c0
>ca31	6a 80					.byte 	$6a,$80
>ca33	2b					.byte 	$2b   ; *** Command + ***
>ca34	01					.byte 	1     ; *** Load Float -3861845614.002176 ***
>ca35	6e 16 2f e6				.dword 	$e62f166e
>ca39	a0 80					.byte 	$a0,$80
>ca3b	3d					.byte 	$3d   ; *** Command = ***
>ca3c	01					.byte 	1     ; *** Load Float -496677989568.74133 ***
>ca3d	59 a1 48 e7				.dword 	$e748a159
>ca41	a7 80					.byte 	$a7,$80
>ca43	01					.byte 	1     ; *** Load Float 4.586367 ***
>ca44	ba 84 c3 92				.dword 	$92c384ba
>ca48	83 00					.byte 	$83,$0
>ca4a	2f					.byte 	$2f   ; *** Command / ***
>ca4b	01					.byte 	1     ; *** Load Float -108294427717.7865 ***
>ca4c	a2 ce b6 c9				.dword 	$c9b6cea2
>ca50	a5 80					.byte 	$a5,$80
>ca52	3d					.byte 	$3d   ; *** Command = ***
>ca53	01					.byte 	1     ; *** Load Float 7.859669 ***
>ca54	90 68 82 fb				.dword 	$fb826890
>ca58	83 00					.byte 	$83,$0
>ca5a	01					.byte 	1     ; *** Load Float 0.0 ***
>ca5b	00 00 00 00				.dword 	$0
>ca5f	80 40					.byte 	$80,$40
>ca61	2d					.byte 	$2d   ; *** Command - ***
>ca62	01					.byte 	1     ; *** Load Float 7.859669 ***
>ca63	90 68 82 fb				.dword 	$fb826890
>ca67	83 00					.byte 	$83,$0
>ca69	3d					.byte 	$3d   ; *** Command = ***
>ca6a	01					.byte 	1     ; *** Load Float 8.801742 ***
>ca6b	6b ef d3 8c				.dword 	$8cd3ef6b
>ca6f	84 00					.byte 	$84,$0
>ca71	01					.byte 	1     ; *** Load Float 2.792442 ***
>ca72	a6 5e b7 b2				.dword 	$b2b75ea6
>ca76	82 00					.byte 	$82,$0
>ca78	7e					.byte 	$7e   ; *** Command ~ ***
>ca79	01					.byte 	1     ; *** Load Float 1 ***
>ca7a	00 00 00 80				.dword 	$80000000
>ca7e	81 00					.byte 	$81,$0
>ca80	3d					.byte 	$3d   ; *** Command = ***
>ca81	01					.byte 	1     ; *** Load Float 8.306261 ***
>ca82	ef 71 e6 84				.dword 	$84e671ef
>ca86	84 00					.byte 	$84,$0
>ca88	01					.byte 	1     ; *** Load Float -3471853100237.587 ***
>ca89	87 a4 16 ca				.dword 	$ca16a487
>ca8d	aa 80					.byte 	$aa,$80
>ca8f	7e					.byte 	$7e   ; *** Command ~ ***
>ca90	01					.byte 	1     ; *** Load Float 1 ***
>ca91	00 00 00 80				.dword 	$80000000
>ca95	81 00					.byte 	$81,$0
>ca97	3d					.byte 	$3d   ; *** Command = ***
>ca98	01					.byte 	1     ; *** Load Float 19.0 ***
>ca99	00 00 00 98				.dword 	$98000000
>ca9d	85 00					.byte 	$85,$0
>ca9f	01					.byte 	1     ; *** Load Float 19.0 ***
>caa0	00 00 00 98				.dword 	$98000000
>caa4	85 00					.byte 	$85,$0
>caa6	2b					.byte 	$2b   ; *** Command + ***
>caa7	01					.byte 	1     ; *** Load Float 38.0 ***
>caa8	00 00 00 98				.dword 	$98000000
>caac	86 00					.byte 	$86,$0
>caae	3d					.byte 	$3d   ; *** Command = ***
>caaf	01					.byte 	1     ; *** Load Float -2.0 ***
>cab0	00 00 00 80				.dword 	$80000000
>cab4	82 80					.byte 	$82,$80
>cab6	01					.byte 	1     ; *** Load Float 129.18 ***
>cab7	7a 14 2e 81				.dword 	$812e147a
>cabb	88 00					.byte 	$88,$0
>cabd	2d					.byte 	$2d   ; *** Command - ***
>cabe	01					.byte 	1     ; *** Load Float -131.18 ***
>cabf	7a 14 2e 83				.dword 	$832e147a
>cac3	88 80					.byte 	$88,$80
>cac5	3d					.byte 	$3d   ; *** Command = ***
>cac6	01					.byte 	1     ; *** Load Float 5.467755 ***
>cac7	55 d9 f7 ae				.dword 	$aef7d955
>cacb	83 00					.byte 	$83,$0
>cacd	01					.byte 	1     ; *** Load Float -13.0 ***
>cace	00 00 00 d0				.dword 	$d0000000
>cad2	84 80					.byte 	$84,$80
>cad4	2d					.byte 	$2d   ; *** Command - ***
>cad5	01					.byte 	1     ; *** Load Float 18.467755 ***
>cad6	55 f6 bd 93				.dword 	$93bdf655
>cada	85 00					.byte 	$85,$0
>cadc	3d					.byte 	$3d   ; *** Command = ***
>cadd	01					.byte 	1     ; *** Load Float -300.83 ***
>cade	70 3d 6a 96				.dword 	$966a3d70
>cae2	89 80					.byte 	$89,$80
>cae4	01					.byte 	1     ; *** Load Float 1.078747 ***
>cae5	b6 61 14 8a				.dword 	$8a1461b6
>cae9	81 00					.byte 	$81,$0
>caeb	2d					.byte 	$2d   ; *** Command - ***
>caec	01					.byte 	1     ; *** Load Float -301.908747 ***
>caed	d2 51 f4 96				.dword 	$96f451d2
>caf1	89 80					.byte 	$89,$80
>caf3	3d					.byte 	$3d   ; *** Command = ***
>caf4	01					.byte 	1     ; *** Load Float -805.2 ***
>caf5	cc cc 4c c9				.dword 	$c94ccccc
>caf9	8a 80					.byte 	$8a,$80
>cafb	01					.byte 	1     ; *** Load Float 2.5971978902816773e-09 ***
>cafc	73 63 7a b2				.dword 	$b27a6373
>cb00	64 00					.byte 	$64,$0
>cb02	7e					.byte 	$7e   ; *** Command ~ ***
>cb03	01					.byte 	1     ; *** Load Float -1 ***
>cb04	00 00 00 80				.dword 	$80000000
>cb08	81 80					.byte 	$81,$80
>cb0a	3d					.byte 	$3d   ; *** Command = ***
>cb0b	01					.byte 	1     ; *** Load Float -1.8034931272268295e-09 ***
>cb0c	f3 c5 de f7				.dword 	$f7dec5f3
>cb10	63 80					.byte 	$63,$80
>cb12	01					.byte 	1     ; *** Load Float -632.59136 ***
>cb13	d7 d8 25 9e				.dword 	$9e25d8d7
>cb17	8a 80					.byte 	$8a,$80
>cb19	2d					.byte 	$2d   ; *** Command - ***
>cb1a	01					.byte 	1     ; *** Load Float 632.5913599981965 ***
>cb1b	d7 d8 25 9e				.dword 	$9e25d8d7
>cb1f	8a 00					.byte 	$8a,$0
>cb21	3d					.byte 	$3d   ; *** Command = ***
>cb22	01					.byte 	1     ; *** Load Float 782.92 ***
>cb23	47 e1 ba c3				.dword 	$c3bae147
>cb27	8a 00					.byte 	$8a,$0
>cb29	01					.byte 	1     ; *** Load Float 14.81 ***
>cb2a	8f c2 f5 ec				.dword 	$ecf5c28f
>cb2e	84 00					.byte 	$84,$0
>cb30	2a					.byte 	$2a   ; *** Command * ***
>cb31	01					.byte 	1     ; *** Load Float 11595.0452 ***
>cb32	48 2e 2c b5				.dword 	$b52c2e48
>cb36	8e 00					.byte 	$8e,$0
>cb38	3d					.byte 	$3d   ; *** Command = ***
>cb39	01					.byte 	1     ; *** Load Float -1.0 ***
>cb3a	00 00 00 80				.dword 	$80000000
>cb3e	81 80					.byte 	$81,$80
>cb40	01					.byte 	1     ; *** Load Float 0.0 ***
>cb41	00 00 00 00				.dword 	$0
>cb45	80 40					.byte 	$80,$40
>cb47	2b					.byte 	$2b   ; *** Command + ***
>cb48	01					.byte 	1     ; *** Load Float -1.0 ***
>cb49	00 00 00 80				.dword 	$80000000
>cb4d	81 80					.byte 	$81,$80
>cb4f	3d					.byte 	$3d   ; *** Command = ***
>cb50	01					.byte 	1     ; *** Load Float 9.9971 ***
>cb51	21 1f f4 9f				.dword 	$9ff41f21
>cb55	84 00					.byte 	$84,$0
>cb57	01					.byte 	1     ; *** Load Float -13976159.125504 ***
>cb58	20 5f 42 d5				.dword 	$d5425f20
>cb5c	98 80					.byte 	$98,$80
>cb5e	2f					.byte 	$2f   ; *** Command / ***
>cb5f	01					.byte 	1     ; *** Load Float -7.152966641426594e-07 ***
>cb60	fe cf 02 c0				.dword 	$c002cffe
>cb64	6c 80					.byte 	$6c,$80
>cb66	3d					.byte 	$3d   ; *** Command = ***
>cb67	01					.byte 	1     ; *** Load Float 2.514451 ***
>cb68	e3 c3 ec a0				.dword 	$a0ecc3e3
>cb6c	82 00					.byte 	$82,$0
>cb6e	01					.byte 	1     ; *** Load Float 3.8643479347229005e-09 ***
>cb6f	f5 29 c7 84				.dword 	$84c729f5
>cb73	65 00					.byte 	$65,$0
>cb75	7e					.byte 	$7e   ; *** Command ~ ***
>cb76	01					.byte 	1     ; *** Load Float 1 ***
>cb77	00 00 00 80				.dword 	$80000000
>cb7b	81 00					.byte 	$81,$0
>cb7d	3d					.byte 	$3d   ; *** Command = ***
>cb7e	01					.byte 	1     ; *** Load Float 2.0 ***
>cb7f	00 00 00 80				.dword 	$80000000
>cb83	82 00					.byte 	$82,$0
>cb85	01					.byte 	1     ; *** Load Float -1.0009682682721176e-13 ***
>cb86	60 e4 65 e1				.dword 	$e165e460
>cb8a	55 80					.byte 	$55,$80
>cb8c	7e					.byte 	$7e   ; *** Command ~ ***
>cb8d	01					.byte 	1     ; *** Load Float 1 ***
>cb8e	00 00 00 80				.dword 	$80000000
>cb92	81 00					.byte 	$81,$0
>cb94	3d					.byte 	$3d   ; *** Command = ***
>cb95	01					.byte 	1     ; *** Load Float 5.230438 ***
>cb96	83 bf 5f a7				.dword 	$a75fbf83
>cb9a	83 00					.byte 	$83,$0
>cb9c	01					.byte 	1     ; *** Load Float -92512.97689600001 ***
>cb9d	0a 7d b0 b4				.dword 	$b4b07d0a
>cba1	91 80					.byte 	$91,$80
>cba3	2f					.byte 	$2f   ; *** Command / ***
>cba4	01					.byte 	1     ; *** Load Float -5.653734400828852e-05 ***
>cba5	c9 82 22 ed				.dword 	$ed2282c9
>cba9	72 80					.byte 	$72,$80
>cbab	3d					.byte 	$3d   ; *** Command = ***
>cbac	01					.byte 	1     ; *** Load Float 5.389333423977405e-16 ***
>cbad	02 43 56 9b				.dword 	$9b564302
>cbb1	4e 00					.byte 	$4e,$0
>cbb3	01					.byte 	1     ; *** Load Float -127.78 ***
>cbb4	28 5c 8f ff				.dword 	$ff8f5c28
>cbb8	87 80					.byte 	$87,$80
>cbba	2a					.byte 	$2a   ; *** Command * ***
>cbbb	01					.byte 	1     ; *** Load Float -6.886490249158328e-14 ***
>cbbc	da e9 11 9b				.dword 	$9b11e9da
>cbc0	55 80					.byte 	$55,$80
>cbc2	3d					.byte 	$3d   ; *** Command = ***
>cbc3	01					.byte 	1     ; *** Load Float 18.0 ***
>cbc4	00 00 00 90				.dword 	$90000000
>cbc8	85 00					.byte 	$85,$0
>cbca	01					.byte 	1     ; *** Load Float -3545839100.23168 ***
>cbcb	fc 35 59 d3				.dword 	$d35935fc
>cbcf	a0 80					.byte 	$a0,$80
>cbd1	2a					.byte 	$2a   ; *** Command * ***
>cbd2	01					.byte 	1     ; *** Load Float -63825103804.17024 ***
>cbd3	bb 5c c4 ed				.dword 	$edc45cbb
>cbd7	a4 80					.byte 	$a4,$80
>cbd9	3d					.byte 	$3d   ; *** Command = ***
>cbda	01					.byte 	1     ; *** Load Float 0.0 ***
>cbdb	00 00 00 00				.dword 	$0
>cbdf	80 40					.byte 	$80,$40
>cbe1	01					.byte 	1     ; *** Load Float -4.1910552978515627e-07 ***
>cbe2	e7 6c 01 e1				.dword 	$e1016ce7
>cbe6	6b 80					.byte 	$6b,$80
>cbe8	7e					.byte 	$7e   ; *** Command ~ ***
>cbe9	01					.byte 	1     ; *** Load Float 1 ***
>cbea	00 00 00 80				.dword 	$80000000
>cbee	81 00					.byte 	$81,$0
>cbf0	3d					.byte 	$3d   ; *** Command = ***
>cbf1	01					.byte 	1     ; *** Load Float 4.083514 ***
>cbf2	8d 25 ac 82				.dword 	$82ac258d
>cbf6	83 00					.byte 	$83,$0
>cbf8	01					.byte 	1     ; *** Load Float 6.883311 ***
>cbf9	6e 15 44 dc				.dword 	$dc44156e
>cbfd	83 00					.byte 	$83,$0
>cbff	2b					.byte 	$2b   ; *** Command + ***
>cc00	01					.byte 	1     ; *** Load Float 10.966825 ***
>cc01	7d 1d 78 af				.dword 	$af781d7d
>cc05	84 00					.byte 	$84,$0
>cc07	3d					.byte 	$3d   ; *** Command = ***
>cc08	01					.byte 	1     ; *** Load Float -33848053144.223743 ***
>cc09	b3 09 30 fc				.dword 	$fc3009b3
>cc0d	a3 80					.byte 	$a3,$80
>cc0f	01					.byte 	1     ; *** Load Float 7.525823 ***
>cc10	c1 8a d3 f0				.dword 	$f0d38ac1
>cc14	83 00					.byte 	$83,$0
>cc16	2d					.byte 	$2d   ; *** Command - ***
>cc17	01					.byte 	1     ; *** Load Float -33848053151.749565 ***
>cc18	b3 09 30 fc				.dword 	$fc3009b3
>cc1c	a3 80					.byte 	$a3,$80
>cc1e	3d					.byte 	$3d   ; *** Command = ***
>cc1f	01					.byte 	1     ; *** Load Float 2.1249206838547254e-14 ***
>cc20	c5 55 65 bf				.dword 	$bf6555c5
>cc24	53 00					.byte 	$53,$0
>cc26	01					.byte 	1     ; *** Load Float -877.1 ***
>cc27	66 66 46 db				.dword 	$db466666
>cc2b	8a 80					.byte 	$8a,$80
>cc2d	2a					.byte 	$2a   ; *** Command * ***
>cc2e	01					.byte 	1     ; *** Load Float -1.8637679318089798e-11 ***
>cc2f	a4 52 f0 a3				.dword 	$a3f052a4
>cc33	5d 80					.byte 	$5d,$80
>cc35	3d					.byte 	$3d   ; *** Command = ***
>cc36	01					.byte 	1     ; *** Load Float 8.947856 ***
>cc37	0d 6b 2a 8f				.dword 	$8f2a6b0d
>cc3b	84 00					.byte 	$84,$0
>cc3d	01					.byte 	1     ; *** Load Float 788.57 ***
>cc3e	e1 7a 24 c5				.dword 	$c5247ae1
>cc42	8a 00					.byte 	$8a,$0
>cc44	2b					.byte 	$2b   ; *** Command + ***
>cc45	01					.byte 	1     ; *** Load Float 797.517856 ***
>cc46	8d 24 61 c7				.dword 	$c761248d
>cc4a	8a 00					.byte 	$8a,$0
>cc4c	3d					.byte 	$3d   ; *** Command = ***
>cc4d	01					.byte 	1     ; *** Load Float 3.564957 ***
>cc4e	67 41 28 e4				.dword 	$e4284167
>cc52	82 00					.byte 	$82,$0
>cc54	01					.byte 	1     ; *** Load Float -87.73 ***
>cc55	8f c2 75 af				.dword 	$af75c28f
>cc59	87 80					.byte 	$87,$80
>cc5b	7e					.byte 	$7e   ; *** Command ~ ***
>cc5c	01					.byte 	1     ; *** Load Float 1 ***
>cc5d	00 00 00 80				.dword 	$80000000
>cc61	81 00					.byte 	$81,$0
>cc63	3d					.byte 	$3d   ; *** Command = ***
>cc64	01					.byte 	1     ; *** Load Float -8.614242688054219e-13 ***
>cc65	06 29 78 f2				.dword 	$f2782906
>cc69	58 80					.byte 	$58,$80
>cc6b	01					.byte 	1     ; *** Load Float -19.0 ***
>cc6c	00 00 00 98				.dword 	$98000000
>cc70	85 80					.byte 	$85,$80
>cc72	2a					.byte 	$2a   ; *** Command * ***
>cc73	01					.byte 	1     ; *** Load Float 1.6367061107303017e-11 ***
>cc74	5b 58 f7 8f				.dword 	$8ff7585b
>cc78	5d 00					.byte 	$5d,$0
>cc7a	3d					.byte 	$3d   ; *** Command = ***
>cc7b	01					.byte 	1     ; *** Load Float 376.36 ***
>cc7c	7a 14 2e bc				.dword 	$bc2e147a
>cc80	89 00					.byte 	$89,$0
>cc82	01					.byte 	1     ; *** Load Float 62700348.506112 ***
>cc83	20 cf 2e ef				.dword 	$ef2ecf20
>cc87	9a 00					.byte 	$9a,$0
>cc89	2d					.byte 	$2d   ; *** Command - ***
>cc8a	01					.byte 	1     ; *** Load Float -62699972.146112 ***
>cc8b	09 71 2e ef				.dword 	$ef2e7109
>cc8f	9a 80					.byte 	$9a,$80
>cc91	3d					.byte 	$3d   ; *** Command = ***
>cc92	01					.byte 	1     ; *** Load Float -47.15 ***
>cc93	99 99 99 bc				.dword 	$bc999999
>cc97	86 80					.byte 	$86,$80
>cc99	01					.byte 	1     ; *** Load Float -16504425447.161858 ***
>cc9a	f9 62 ef f5				.dword 	$f5ef62f9
>cc9e	a2 80					.byte 	$a2,$80
>cca0	2f					.byte 	$2f   ; *** Command / ***
>cca1	01					.byte 	1     ; *** Load Float 2.856809535778662e-09 ***
>cca2	5c 86 51 c4				.dword 	$c451865c
>cca6	64 00					.byte 	$64,$0
>cca8	3d					.byte 	$3d   ; *** Command = ***
>cca9	01					.byte 	1     ; *** Load Float 2076652009427.0425 ***
>ccaa	7b 0d c1 f1				.dword 	$f1c10d7b
>ccae	a9 00					.byte 	$a9,$0
>ccb0	01					.byte 	1     ; *** Load Float 6.127911 ***
>ccb1	cf d8 17 c4				.dword 	$c417d8cf
>ccb5	83 00					.byte 	$83,$0
>ccb7	2f					.byte 	$2f   ; *** Command / ***
>ccb8	01					.byte 	1     ; *** Load Float 338884166141.94336 ***
>ccb9	03 24 ce 9d				.dword 	$9dce2403
>ccbd	a7 00					.byte 	$a7,$0
>ccbf	3d					.byte 	$3d   ; *** Command = ***
>ccc0	01					.byte 	1     ; *** Load Float -3.683794602693524e-15 ***
>ccc1	14 02 b9 84				.dword 	$84b90214
>ccc5	51 80					.byte 	$51,$80
>ccc7	01					.byte 	1     ; *** Load Float 5.198191502131522e-12 ***
>ccc8	89 25 e5 b6				.dword 	$b6e52589
>cccc	5b 00					.byte 	$5b,$0
>ccce	2d					.byte 	$2d   ; *** Command - ***
>cccf	01					.byte 	1     ; *** Load Float -5.2018752967342156e-12 ***
>ccd0	c9 53 06 b7				.dword 	$b70653c9
>ccd4	5b 80					.byte 	$5b,$80
>ccd6	3d					.byte 	$3d   ; *** Command = ***
>ccd7	01					.byte 	1     ; *** Load Float 718.03 ***
>ccd8	85 eb 81 b3				.dword 	$b381eb85
>ccdc	8a 00					.byte 	$8a,$0
>ccde	01					.byte 	1     ; *** Load Float 23.24 ***
>ccdf	1e 85 eb b9				.dword 	$b9eb851e
>cce3	85 00					.byte 	$85,$0
>cce5	7e					.byte 	$7e   ; *** Command ~ ***
>cce6	01					.byte 	1     ; *** Load Float 1 ***
>cce7	00 00 00 80				.dword 	$80000000
>cceb	81 00					.byte 	$81,$0
>cced	3d					.byte 	$3d   ; *** Command = ***
>ccee	01					.byte 	1     ; *** Load Float -15.0 ***
>ccef	00 00 00 f0				.dword 	$f0000000
>ccf3	84 80					.byte 	$84,$80
>ccf5	01					.byte 	1     ; *** Load Float 5.0 ***
>ccf6	00 00 00 a0				.dword 	$a0000000
>ccfa	83 00					.byte 	$83,$0
>ccfc	2b					.byte 	$2b   ; *** Command + ***
>ccfd	01					.byte 	1     ; *** Load Float -10.0 ***
>ccfe	00 00 00 a0				.dword 	$a0000000
>cd02	84 80					.byte 	$84,$80
>cd04	3d					.byte 	$3d   ; *** Command = ***
>cd05	01					.byte 	1     ; *** Load Float 15.0 ***
>cd06	00 00 00 f0				.dword 	$f0000000
>cd0a	84 00					.byte 	$84,$0
>cd0c	01					.byte 	1     ; *** Load Float 787.84 ***
>cd0d	8f c2 f5 c4				.dword 	$c4f5c28f
>cd11	8a 00					.byte 	$8a,$0
>cd13	2f					.byte 	$2f   ; *** Command / ***
>cd14	01					.byte 	1     ; *** Load Float 0.01903939886271324 ***
>cd15	6e 83 f8 9b				.dword 	$9bf8836e
>cd19	7b 00					.byte 	$7b,$0
>cd1b	3d					.byte 	$3d   ; *** Command = ***
>cd1c	01					.byte 	1     ; *** Load Float -2.2767623886466027e-10 ***
>cd1d	fe 29 55 fa				.dword 	$fa5529fe
>cd21	60 80					.byte 	$60,$80
>cd23	01					.byte 	1     ; *** Load Float 5.0 ***
>cd24	00 00 00 a0				.dword 	$a0000000
>cd28	83 00					.byte 	$83,$0
>cd2a	2b					.byte 	$2b   ; *** Command + ***
>cd2b	01					.byte 	1     ; *** Load Float 4.9999999997723235 ***
>cd2c	ff ff ff 9f				.dword 	$9fffffff
>cd30	83 00					.byte 	$83,$0
>cd32	3d					.byte 	$3d   ; *** Command = ***
>cd33	01					.byte 	1     ; *** Load Float -438.65 ***
>cd34	33 33 53 db				.dword 	$db533333
>cd38	89 80					.byte 	$89,$80
>cd3a	01					.byte 	1     ; *** Load Float -1.0 ***
>cd3b	00 00 00 80				.dword 	$80000000
>cd3f	81 80					.byte 	$81,$80
>cd41	2f					.byte 	$2f   ; *** Command / ***
>cd42	01					.byte 	1     ; *** Load Float 438.65 ***
>cd43	33 33 53 db				.dword 	$db533333
>cd47	89 00					.byte 	$89,$0
>cd49	3d					.byte 	$3d   ; *** Command = ***
>cd4a	01					.byte 	1     ; *** Load Float 623.92 ***
>cd4b	47 e1 fa 9b				.dword 	$9bfae147
>cd4f	8a 00					.byte 	$8a,$0
>cd51	01					.byte 	1     ; *** Load Float 631.09 ***
>cd52	8f c2 c5 9d				.dword 	$9dc5c28f
>cd56	8a 00					.byte 	$8a,$0
>cd58	2f					.byte 	$2f   ; *** Command / ***
>cd59	01					.byte 	1     ; *** Load Float 0.9886387044637055 ***
>cd5a	17 6d 17 fd				.dword 	$fd176d17
>cd5e	80 00					.byte 	$80,$0
>cd60	3d					.byte 	$3d   ; *** Command = ***
>cd61	01					.byte 	1     ; *** Load Float -169.22 ***
>cd62	eb 51 38 a9				.dword 	$a93851eb
>cd66	88 80					.byte 	$88,$80
>cd68	01					.byte 	1     ; *** Load Float -63845272970.592255 ***
>cd69	d8 98 d7 ed				.dword 	$edd798d8
>cd6d	a4 80					.byte 	$a4,$80
>cd6f	2a					.byte 	$2a   ; *** Command * ***
>cd70	01					.byte 	1     ; *** Load Float 10803897092083.621 ***
>cd71	2c a7 37 9d				.dword 	$9d37a72c
>cd75	ac 00					.byte 	$ac,$0
>cd77	3d					.byte 	$3d   ; *** Command = ***
>cd78	01					.byte 	1     ; *** Load Float 3.593452 ***
>cd79	18 1e fb e5				.dword 	$e5fb1e18
>cd7d	82 00					.byte 	$82,$0
>cd7f	01					.byte 	1     ; *** Load Float 4.760993 ***
>cd80	fd 0d 5a 98				.dword 	$985a0dfd
>cd84	83 00					.byte 	$83,$0
>cd86	2b					.byte 	$2b   ; *** Command + ***
>cd87	01					.byte 	1     ; *** Load Float 8.354445 ***
>cd88	85 ce ab 85				.dword 	$85abce85
>cd8c	84 00					.byte 	$84,$0
>cd8e	3d					.byte 	$3d   ; *** Command = ***
>cd8f	01					.byte 	1     ; *** Load Float -113526739406755.45 ***
>cd90	f3 01 81 ce				.dword 	$ce8101f3
>cd94	af 80					.byte 	$af,$80
>cd96	01					.byte 	1     ; *** Load Float -113526739406755.45 ***
>cd97	f3 01 81 ce				.dword 	$ce8101f3
>cd9b	af 80					.byte 	$af,$80
>cd9d	2b					.byte 	$2b   ; *** Command + ***
>cd9e	01					.byte 	1     ; *** Load Float -227053478813510.9 ***
>cd9f	f3 01 81 ce				.dword 	$ce8101f3
>cda3	b0 80					.byte 	$b0,$80
>cda5	3d					.byte 	$3d   ; *** Command = ***
>cda6	01					.byte 	1     ; *** Load Float 6.001528 ***
>cda7	72 84 0c c0				.dword 	$c00c8472
>cdab	83 00					.byte 	$83,$0
>cdad	01					.byte 	1     ; *** Load Float -203.89 ***
>cdae	0a d7 e3 cb				.dword 	$cbe3d70a
>cdb2	88 80					.byte 	$88,$80
>cdb4	2b					.byte 	$2b   ; *** Command + ***
>cdb5	01					.byte 	1     ; *** Load Float -197.88847199999998 ***
>cdb6	e6 72 e3 c5				.dword 	$c5e372e6
>cdba	88 80					.byte 	$88,$80
>cdbc	3d					.byte 	$3d   ; *** Command = ***
>cdbd	01					.byte 	1     ; *** Load Float 4.822775 ***
>cdbe	3c 2c 54 9a				.dword 	$9a542c3c
>cdc2	83 00					.byte 	$83,$0
>cdc4	01					.byte 	1     ; *** Load Float 3.892628 ***
>cdc5	30 d1 20 f9				.dword 	$f920d130
>cdc9	82 00					.byte 	$82,$0
>cdcb	2a					.byte 	$2a   ; *** Command * ***
>cdcc	01					.byte 	1     ; *** Load Float 18.7732690027 ***
>cdcd	a8 a7 2f 96				.dword 	$962fa7a8
>cdd1	85 00					.byte 	$85,$0
>cdd3	3d					.byte 	$3d   ; *** Command = ***
>cdd4	01					.byte 	1     ; *** Load Float -13.0 ***
>cdd5	00 00 00 d0				.dword 	$d0000000
>cdd9	84 80					.byte 	$84,$80
>cddb	01					.byte 	1     ; *** Load Float 870.13 ***
>cddc	eb 51 88 d9				.dword 	$d98851eb
>cde0	8a 00					.byte 	$8a,$0
>cde2	2f					.byte 	$2f   ; *** Command / ***
>cde3	01					.byte 	1     ; *** Load Float -0.01494029627756772 ***
>cde4	f9 24 c8 f4				.dword 	$f4c824f9
>cde8	7a 80					.byte 	$7a,$80
>cdea	3d					.byte 	$3d   ; *** Command = ***
>cdeb	01					.byte 	1     ; *** Load Float -10929620569116.639 ***
>cdec	6c 02 0c 9f				.dword 	$9f0c026c
>cdf0	ac 80					.byte 	$ac,$80
>cdf2	01					.byte 	1     ; *** Load Float -378.96 ***
>cdf3	47 e1 7a bd				.dword 	$bd7ae147
>cdf7	89 80					.byte 	$89,$80
>cdf9	7e					.byte 	$7e   ; *** Command ~ ***
>cdfa	01					.byte 	1     ; *** Load Float -1 ***
>cdfb	00 00 00 80				.dword 	$80000000
>cdff	81 80					.byte 	$81,$80
>ce01	3d					.byte 	$3d   ; *** Command = ***
>ce02	01					.byte 	1     ; *** Load Float 655951044945.1172 ***
>ce03	a1 ba b9 98				.dword 	$98b9baa1
>ce07	a8 00					.byte 	$a8,$0
>ce09	01					.byte 	1     ; *** Load Float 6.255408 ***
>ce0a	65 4d 2c c8				.dword 	$c82c4d65
>ce0e	83 00					.byte 	$83,$0
>ce10	7e					.byte 	$7e   ; *** Command ~ ***
>ce11	01					.byte 	1     ; *** Load Float 1 ***
>ce12	00 00 00 80				.dword 	$80000000
>ce16	81 00					.byte 	$81,$0
>ce18	3d					.byte 	$3d   ; *** Command = ***
>ce19	01					.byte 	1     ; *** Load Float 7.549094 ***
>ce1a	94 2d 92 f1				.dword 	$f1922d94
>ce1e	83 00					.byte 	$83,$0
>ce20	01					.byte 	1     ; *** Load Float 1.0 ***
>ce21	00 00 00 80				.dword 	$80000000
>ce25	81 00					.byte 	$81,$0
>ce27	2a					.byte 	$2a   ; *** Command * ***
>ce28	01					.byte 	1     ; *** Load Float 7.549094 ***
>ce29	94 2d 92 f1				.dword 	$f1922d94
>ce2d	83 00					.byte 	$83,$0
>ce2f	3d					.byte 	$3d   ; *** Command = ***
>ce30	01					.byte 	1     ; *** Load Float 16.0 ***
>ce31	00 00 00 80				.dword 	$80000000
>ce35	85 00					.byte 	$85,$0
>ce37	01					.byte 	1     ; *** Load Float -211.83 ***
>ce38	e1 7a d4 d3				.dword 	$d3d47ae1
>ce3c	88 80					.byte 	$88,$80
>ce3e	2d					.byte 	$2d   ; *** Command - ***
>ce3f	01					.byte 	1     ; *** Load Float 227.83 ***
>ce40	e1 7a d4 e3				.dword 	$e3d47ae1
>ce44	88 00					.byte 	$88,$0
>ce46	3d					.byte 	$3d   ; *** Command = ***
>ce47	01					.byte 	1     ; *** Load Float 86674.898944 ***
>ce48	10 73 49 a9				.dword 	$a9497310
>ce4c	91 00					.byte 	$91,$0
>ce4e	01					.byte 	1     ; *** Load Float -2.0 ***
>ce4f	00 00 00 80				.dword 	$80000000
>ce53	82 80					.byte 	$82,$80
>ce55	2b					.byte 	$2b   ; *** Command + ***
>ce56	01					.byte 	1     ; *** Load Float 86672.898944 ***
>ce57	10 73 48 a9				.dword 	$a9487310
>ce5b	91 00					.byte 	$91,$0
>ce5d	3d					.byte 	$3d   ; *** Command = ***
>ce5e	01					.byte 	1     ; *** Load Float 399.66 ***
>ce5f	e1 7a d4 c7				.dword 	$c7d47ae1
>ce63	89 00					.byte 	$89,$0
>ce65	01					.byte 	1     ; *** Load Float -256.39 ***
>ce66	85 eb 31 80				.dword 	$8031eb85
>ce6a	89 80					.byte 	$89,$80
>ce6c	2f					.byte 	$2f   ; *** Command / ***
>ce6d	01					.byte 	1     ; *** Load Float -1.558797144974453 ***
>ce6e	33 aa 86 c7				.dword 	$c786aa33
>ce72	81 80					.byte 	$81,$80
>ce74	3d					.byte 	$3d   ; *** Command = ***
>ce75	01					.byte 	1     ; *** Load Float 0.0001166634521484375 ***
>ce76	c5 36 a9 f4				.dword 	$f4a936c5
>ce7a	73 00					.byte 	$73,$0
>ce7c	01					.byte 	1     ; *** Load Float 367.31 ***
>ce7d	14 ae a7 b7				.dword 	$b7a7ae14
>ce81	89 00					.byte 	$89,$0
>ce83	7e					.byte 	$7e   ; *** Command ~ ***
>ce84	01					.byte 	1     ; *** Load Float -1 ***
>ce85	00 00 00 80				.dword 	$80000000
>ce89	81 80					.byte 	$81,$80
>ce8b	3d					.byte 	$3d   ; *** Command = ***
>ce8c	01					.byte 	1     ; *** Load Float 569.37 ***
>ce8d	14 ae 57 8e				.dword 	$8e57ae14
>ce91	8a 00					.byte 	$8a,$0
>ce93	01					.byte 	1     ; *** Load Float -6.637133657932281e-09 ***
>ce94	55 d8 0c e4				.dword 	$e40cd855
>ce98	65 80					.byte 	$65,$80
>ce9a	7e					.byte 	$7e   ; *** Command ~ ***
>ce9b	01					.byte 	1     ; *** Load Float 1 ***
>ce9c	00 00 00 80				.dword 	$80000000
>cea0	81 00					.byte 	$81,$0
>cea2	3d					.byte 	$3d   ; *** Command = ***
>cea3	01					.byte 	1     ; *** Load Float 4.477676391601563e-06 ***
>cea4	84 f2 3e 96				.dword 	$963ef284
>cea8	6f 00					.byte 	$6f,$0
>ceaa	01					.byte 	1     ; *** Load Float 12.0 ***
>ceab	00 00 00 c0				.dword 	$c0000000
>ceaf	84 00					.byte 	$84,$0
>ceb1	2a					.byte 	$2a   ; *** Command * ***
>ceb2	01					.byte 	1     ; *** Load Float 5.373211669921875e-05 ***
>ceb3	c6 6b 5e e1				.dword 	$e15e6bc6
>ceb7	72 00					.byte 	$72,$0
>ceb9	3d					.byte 	$3d   ; *** Command = ***
>ceba	01					.byte 	1     ; *** Load Float 7.0 ***
>cebb	00 00 00 e0				.dword 	$e0000000
>cebf	83 00					.byte 	$83,$0
>cec1	01					.byte 	1     ; *** Load Float 3.1526997190667314e-13 ***
>cec2	f8 30 7b b1				.dword 	$b17b30f8
>cec6	57 00					.byte 	$57,$0
>cec8	2d					.byte 	$2d   ; *** Command - ***
>cec9	01					.byte 	1     ; *** Load Float 6.999999999999685 ***
>ceca	ff ff ff df				.dword 	$dfffffff
>cece	83 00					.byte 	$83,$0
>ced0	3d					.byte 	$3d   ; *** Command = ***
>ced1	01					.byte 	1     ; *** Load Float 271.64 ***
>ced2	85 eb d1 87				.dword 	$87d1eb85
>ced6	89 00					.byte 	$89,$0
>ced8	01					.byte 	1     ; *** Load Float -7.171700417529791e-12 ***
>ced9	45 ef 54 fc				.dword 	$fc54ef45
>cedd	5b 80					.byte 	$5b,$80
>cedf	7e					.byte 	$7e   ; *** Command ~ ***
>cee0	01					.byte 	1     ; *** Load Float 1 ***
>cee1	00 00 00 80				.dword 	$80000000
>cee5	81 00					.byte 	$81,$0
>cee7	3d					.byte 	$3d   ; *** Command = ***
>cee8	01					.byte 	1     ; *** Load Float 16.0 ***
>cee9	00 00 00 80				.dword 	$80000000
>ceed	85 00					.byte 	$85,$0
>ceef	01					.byte 	1     ; *** Load Float 1.357065 ***
>cef0	50 4e b4 ad				.dword 	$adb44e50
>cef4	81 00					.byte 	$81,$0
>cef6	2a					.byte 	$2a   ; *** Command * ***
>cef7	01					.byte 	1     ; *** Load Float 21.71304 ***
>cef8	50 4e b4 ad				.dword 	$adb44e50
>cefc	85 00					.byte 	$85,$0
>cefe	3d					.byte 	$3d   ; *** Command = ***
>ceff	01					.byte 	1     ; *** Load Float 8.0 ***
>cf00	00 00 00 80				.dword 	$80000000
>cf04	84 00					.byte 	$84,$0
>cf06	01					.byte 	1     ; *** Load Float 8.0 ***
>cf07	00 00 00 80				.dword 	$80000000
>cf0b	84 00					.byte 	$84,$0
>cf0d	2b					.byte 	$2b   ; *** Command + ***
>cf0e	01					.byte 	1     ; *** Load Float 16.0 ***
>cf0f	00 00 00 80				.dword 	$80000000
>cf13	85 00					.byte 	$85,$0
>cf15	3d					.byte 	$3d   ; *** Command = ***
>cf16	01					.byte 	1     ; *** Load Float -232.8 ***
>cf17	cc cc cc e8				.dword 	$e8cccccc
>cf1b	88 80					.byte 	$88,$80
>cf1d	01					.byte 	1     ; *** Load Float 2.557832 ***
>cf1e	fd 84 b3 a3				.dword 	$a3b384fd
>cf22	82 00					.byte 	$82,$0
>cf24	2a					.byte 	$2a   ; *** Command * ***
>cf25	01					.byte 	1     ; *** Load Float -595.4632896 ***
>cf26	89 a6 dd 94				.dword 	$94dda689
>cf2a	8a 80					.byte 	$8a,$80
>cf2c	3d					.byte 	$3d   ; *** Command = ***
>cf2d	01					.byte 	1     ; *** Load Float -314.19 ***
>cf2e	eb 51 18 9d				.dword 	$9d1851eb
>cf32	89 80					.byte 	$89,$80
>cf34	01					.byte 	1     ; *** Load Float -164.69 ***
>cf35	d7 a3 b0 a4				.dword 	$a4b0a3d7
>cf39	88 80					.byte 	$88,$80
>cf3b	7e					.byte 	$7e   ; *** Command ~ ***
>cf3c	01					.byte 	1     ; *** Load Float -1 ***
>cf3d	00 00 00 80				.dword 	$80000000
>cf41	81 80					.byte 	$81,$80
>cf43	3d					.byte 	$3d   ; *** Command = ***
>cf44	01					.byte 	1     ; *** Load Float -1.0934583842754363e-09 ***
>cf45	8b a5 48 96				.dword 	$9648a58b
>cf49	63 80					.byte 	$63,$80
>cf4b	01					.byte 	1     ; *** Load Float 6.957712 ***
>cf4c	a2 93 a5 de				.dword 	$dea593a2
>cf50	83 00					.byte 	$83,$0
>cf52	2a					.byte 	$2a   ; *** Command * ***
>cf53	01					.byte 	1     ; *** Load Float -7.607968521773815e-09 ***
>cf54	0c 33 b4 82				.dword 	$82b4330c
>cf58	66 80					.byte 	$66,$80
>cf5a	3d					.byte 	$3d   ; *** Command = ***
>cf5b	01					.byte 	1     ; *** Load Float -19.0 ***
>cf5c	00 00 00 98				.dword 	$98000000
>cf60	85 80					.byte 	$85,$80
>cf62	01					.byte 	1     ; *** Load Float -2.72770193987526e-13 ***
>cf63	eb 53 8e 99				.dword 	$998e53eb
>cf67	57 80					.byte 	$57,$80
>cf69	2d					.byte 	$2d   ; *** Command - ***
>cf6a	01					.byte 	1     ; *** Load Float -18.999999999999726 ***
>cf6b	ff ff ff 97				.dword 	$97ffffff
>cf6f	85 80					.byte 	$85,$80
>cf71	3d					.byte 	$3d   ; *** Command = ***
>cf72	01					.byte 	1     ; *** Load Float -87.51 ***
>cf73	b8 1e 05 af				.dword 	$af051eb8
>cf77	87 80					.byte 	$87,$80
>cf79	01					.byte 	1     ; *** Load Float 867.73 ***
>cf7a	51 b8 ee d8				.dword 	$d8eeb851
>cf7e	8a 00					.byte 	$8a,$0
>cf80	2d					.byte 	$2d   ; *** Command - ***
>cf81	01					.byte 	1     ; *** Load Float -955.24 ***
>cf82	28 5c cf ee				.dword 	$eecf5c28
>cf86	8a 80					.byte 	$8a,$80
>cf88	3d					.byte 	$3d   ; *** Command = ***
>cf89	01					.byte 	1     ; *** Load Float 2.434727 ***
>cf8a	31 91 d2 9b				.dword 	$9bd29131
>cf8e	82 00					.byte 	$82,$0
>cf90	01					.byte 	1     ; *** Load Float 0.0 ***
>cf91	00 00 00 00				.dword 	$0
>cf95	80 40					.byte 	$80,$40
>cf97	2a					.byte 	$2a   ; *** Command * ***
>cf98	01					.byte 	1     ; *** Load Float 0.0 ***
>cf99	00 00 00 00				.dword 	$0
>cf9d	80 40					.byte 	$80,$40
>cf9f	3d					.byte 	$3d   ; *** Command = ***
>cfa0	01					.byte 	1     ; *** Load Float 8.295351 ***
>cfa1	f8 c1 b9 84				.dword 	$84b9c1f8
>cfa5	84 00					.byte 	$84,$0
>cfa7	01					.byte 	1     ; *** Load Float -853.42 ***
>cfa8	47 e1 5a d5				.dword 	$d55ae147
>cfac	8a 80					.byte 	$8a,$80
>cfae	2f					.byte 	$2f   ; *** Command / ***
>cfaf	01					.byte 	1     ; *** Load Float -0.009720127252700899 ***
>cfb0	2a 2b 41 9f				.dword 	$9f412b2a
>cfb4	7a 80					.byte 	$7a,$80
>cfb6	3d					.byte 	$3d   ; *** Command = ***
>cfb7	01					.byte 	1     ; *** Load Float 48.56 ***
>cfb8	a3 70 3d c2				.dword 	$c23d70a3
>cfbc	86 00					.byte 	$86,$0
>cfbe	01					.byte 	1     ; *** Load Float 19.0 ***
>cfbf	00 00 00 98				.dword 	$98000000
>cfc3	85 00					.byte 	$85,$0
>cfc5	2f					.byte 	$2f   ; *** Command / ***
>cfc6	01					.byte 	1     ; *** Load Float 2.555789473684211 ***
>cfc7	03 0e 92 a3				.dword 	$a3920e03
>cfcb	82 00					.byte 	$82,$0
>cfcd	3d					.byte 	$3d   ; *** Command = ***
>cfce	01					.byte 	1     ; *** Load Float 4.139731 ***
>cfcf	25 ad 78 84				.dword 	$8478ad25
>cfd3	83 00					.byte 	$83,$0
>cfd5	01					.byte 	1     ; *** Load Float 0.0 ***
>cfd6	00 00 00 00				.dword 	$0
>cfda	80 40					.byte 	$80,$40
>cfdc	2b					.byte 	$2b   ; *** Command + ***
>cfdd	01					.byte 	1     ; *** Load Float 4.139731 ***
>cfde	25 ad 78 84				.dword 	$8478ad25
>cfe2	83 00					.byte 	$83,$0
>cfe4	3d					.byte 	$3d   ; *** Command = ***
>cfe5	01					.byte 	1     ; *** Load Float 13.0 ***
>cfe6	00 00 00 d0				.dword 	$d0000000
>cfea	84 00					.byte 	$84,$0
>cfec	01					.byte 	1     ; *** Load Float 604.55 ***
>cfed	33 33 23 97				.dword 	$97233333
>cff1	8a 00					.byte 	$8a,$0
>cff3	2f					.byte 	$2f   ; *** Command / ***
>cff4	01					.byte 	1     ; *** Load Float 0.021503597717310398 ***
>cff5	1e 50 28 b0				.dword 	$b028501e
>cff9	7b 00					.byte 	$7b,$0
>cffb	3d					.byte 	$3d   ; *** Command = ***
>cffc	01					.byte 	1     ; *** Load Float 814.6 ***
>cffd	66 66 a6 cb				.dword 	$cba66666
>d001	8a 00					.byte 	$8a,$0
>d003	01					.byte 	1     ; *** Load Float -1.9703691123140744e-14 ***
>d004	51 9e 79 b1				.dword 	$b1799e51
>d008	53 80					.byte 	$53,$80
>d00a	2f					.byte 	$2f   ; *** Command / ***
>d00b	01					.byte 	1     ; *** Load Float -4.134250759967018e+16 ***
>d00c	a7 ca e0 92				.dword 	$92e0caa7
>d010	b8 80					.byte 	$b8,$80
>d012	3d					.byte 	$3d   ; *** Command = ***
>d013	01					.byte 	1     ; *** Load Float 0.197632 ***
>d014	02 0b 60 ca				.dword 	$ca600b02
>d018	7e 00					.byte 	$7e,$0
>d01a	01					.byte 	1     ; *** Load Float 161.41 ***
>d01b	c2 f5 68 a1				.dword 	$a168f5c2
>d01f	88 00					.byte 	$88,$0
>d021	2b					.byte 	$2b   ; *** Command + ***
>d022	01					.byte 	1     ; *** Load Float 161.607632 ***
>d023	c5 8d 9b a1				.dword 	$a19b8dc5
>d027	88 00					.byte 	$88,$0
>d029	3d					.byte 	$3d   ; *** Command = ***
>d02a	01					.byte 	1     ; *** Load Float 753.86 ***
>d02b	3d 0a 77 bc				.dword 	$bc770a3d
>d02f	8a 00					.byte 	$8a,$0
>d031	01					.byte 	1     ; *** Load Float 10544.08704 ***
>d032	21 59 c0 a4				.dword 	$a4c05921
>d036	8e 00					.byte 	$8e,$0
>d038	2b					.byte 	$2b   ; *** Command + ***
>d039	01					.byte 	1     ; *** Load Float 11297.947040000001 ***
>d03a	c4 c9 87 b0				.dword 	$b087c9c4
>d03e	8e 00					.byte 	$8e,$0
>d040	3d					.byte 	$3d   ; *** Command = ***
>d041	01					.byte 	1     ; *** Load Float 100.68 ***
>d042	f5 28 5c c9				.dword 	$c95c28f5
>d046	87 00					.byte 	$87,$0
>d048	01					.byte 	1     ; *** Load Float 9.0 ***
>d049	00 00 00 90				.dword 	$90000000
>d04d	84 00					.byte 	$84,$0
>d04f	7e					.byte 	$7e   ; *** Command ~ ***
>d050	01					.byte 	1     ; *** Load Float 1 ***
>d051	00 00 00 80				.dword 	$80000000
>d055	81 00					.byte 	$81,$0
>d057	3d					.byte 	$3d   ; *** Command = ***
>d058	01					.byte 	1     ; *** Load Float -86.3 ***
>d059	99 99 99 ac				.dword 	$ac999999
>d05d	87 80					.byte 	$87,$80
>d05f	01					.byte 	1     ; *** Load Float -2.0308817738623475e-14 ***
>d060	06 f2 ec b6				.dword 	$b6ecf206
>d064	53 80					.byte 	$53,$80
>d066	2b					.byte 	$2b   ; *** Command + ***
>d067	01					.byte 	1     ; *** Load Float -86.30000000000001 ***
>d068	99 99 99 ac				.dword 	$ac999999
>d06c	87 80					.byte 	$87,$80
>d06e	3d					.byte 	$3d   ; *** Command = ***
>d06f	01					.byte 	1     ; *** Load Float -15.0 ***
>d070	00 00 00 f0				.dword 	$f0000000
>d074	84 80					.byte 	$84,$80
>d076	01					.byte 	1     ; *** Load Float 133.89 ***
>d077	0a d7 e3 85				.dword 	$85e3d70a
>d07b	88 00					.byte 	$88,$0
>d07d	2f					.byte 	$2f   ; *** Command / ***
>d07e	01					.byte 	1     ; *** Load Float -0.11203226529240422 ***
>d07f	1c 2c 71 e5				.dword 	$e5712c1c
>d083	7d 80					.byte 	$7d,$80
>d085	3d					.byte 	$3d   ; *** Command = ***
>d086	01					.byte 	1     ; *** Load Float 124923687.20691201 ***
>d087	e6 e4 45 ee				.dword 	$ee45e4e6
>d08b	9b 00					.byte 	$9b,$0
>d08d	01					.byte 	1     ; *** Load Float -0.705659 ***
>d08e	77 11 a6 b4				.dword 	$b4a61177
>d092	80 80					.byte 	$80,$80
>d094	2f					.byte 	$2f   ; *** Command / ***
>d095	01					.byte 	1     ; *** Load Float -177031239.17772183 ***
>d096	72 84 d4 a8				.dword 	$a8d48472
>d09a	9c 80					.byte 	$9c,$80
>d09c	3d					.byte 	$3d   ; *** Command = ***
>d09d	01					.byte 	1     ; *** Load Float -6.0 ***
>d09e	00 00 00 c0				.dword 	$c0000000
>d0a2	83 80					.byte 	$83,$80
>d0a4	01					.byte 	1     ; *** Load Float -686.04 ***
>d0a5	5c 8f 82 ab				.dword 	$ab828f5c
>d0a9	8a 80					.byte 	$8a,$80
>d0ab	2a					.byte 	$2a   ; *** Command * ***
>d0ac	01					.byte 	1     ; *** Load Float 4116.24 ***
>d0ad	85 eb a1 80				.dword 	$80a1eb85
>d0b1	8d 00					.byte 	$8d,$0
>d0b3	3d					.byte 	$3d   ; *** Command = ***
>d0b4	01					.byte 	1     ; *** Load Float 27056.930816 ***
>d0b5	93 dc 61 d3				.dword 	$d361dc93
>d0b9	8f 00					.byte 	$8f,$0
>d0bb	01					.byte 	1     ; *** Load Float 27056.930816 ***
>d0bc	93 dc 61 d3				.dword 	$d361dc93
>d0c0	8f 00					.byte 	$8f,$0
>d0c2	7e					.byte 	$7e   ; *** Command ~ ***
>d0c3	01					.byte 	1     ; *** Load Float 0 ***
>d0c4	00 00 00 00				.dword 	$0
>d0c8	80 40					.byte 	$80,$40
>d0ca	3d					.byte 	$3d   ; *** Command = ***
>d0cb	01					.byte 	1     ; *** Load Float 0.429926 ***
>d0cc	bb 42 1f dc				.dword 	$dc1f42bb
>d0d0	7f 00					.byte 	$7f,$0
>d0d2	01					.byte 	1     ; *** Load Float -4.131493369641248e-15 ***
>d0d3	e8 4c da 94				.dword 	$94da4ce8
>d0d7	51 80					.byte 	$51,$80
>d0d9	2d					.byte 	$2d   ; *** Command - ***
>d0da	01					.byte 	1     ; *** Load Float 0.4299260000000041 ***
>d0db	bb 42 1f dc				.dword 	$dc1f42bb
>d0df	7f 00					.byte 	$7f,$0
>d0e1	3d					.byte 	$3d   ; *** Command = ***
>d0e2	01					.byte 	1     ; *** Load Float -355.76 ***
>d0e3	ae 47 e1 b1				.dword 	$b1e147ae
>d0e7	89 80					.byte 	$89,$80
>d0e9	01					.byte 	1     ; *** Load Float 2.837501 ***
>d0ea	cb 9d 99 b5				.dword 	$b5999dcb
>d0ee	82 00					.byte 	$82,$0
>d0f0	2a					.byte 	$2a   ; *** Command * ***
>d0f1	01					.byte 	1     ; *** Load Float -1009.46935576 ***
>d0f2	ec 09 5e fc				.dword 	$fc5e09ec
>d0f6	8a 80					.byte 	$8a,$80
>d0f8	3d					.byte 	$3d   ; *** Command = ***
>d0f9	01					.byte 	1     ; *** Load Float 4.027101 ***
>d0fa	ea 02 de 80				.dword 	$80de02ea
>d0fe	83 00					.byte 	$83,$0
>d100	01					.byte 	1     ; *** Load Float 151568.515072 ***
>d101	f6 20 04 94				.dword 	$940420f6
>d105	92 00					.byte 	$92,$0
>d107	2f					.byte 	$2f   ; *** Command / ***
>d108	01					.byte 	1     ; *** Load Float 2.6569508832932717e-05 ***
>d109	f3 95 e1 de				.dword 	$dee195f3
>d10d	71 00					.byte 	$71,$0
>d10f	3d					.byte 	$3d   ; *** Command = ***
>d110	01					.byte 	1     ; *** Load Float 1.056303 ***
>d111	cb ef 34 87				.dword 	$8734efcb
>d115	81 00					.byte 	$81,$0
>d117	01					.byte 	1     ; *** Load Float -65874352960.17613 ***
>d118	b4 ad 66 f5				.dword 	$f566adb4
>d11c	a4 80					.byte 	$a4,$80
>d11e	2a					.byte 	$2a   ; *** Command * ***
>d11f	01					.byte 	1     ; *** Load Float -69583276654.89293 ***
>d120	53 e4 9b 81				.dword 	$819be453
>d124	a5 80					.byte 	$a5,$80
>d126	3d					.byte 	$3d   ; *** Command = ***
>d127	01					.byte 	1     ; *** Load Float 2.662248 ***
>d128	6f 45 62 aa				.dword 	$aa62456f
>d12c	82 00					.byte 	$82,$0
>d12e	01					.byte 	1     ; *** Load Float -789.26 ***
>d12f	d7 a3 50 c5				.dword 	$c550a3d7
>d133	8a 80					.byte 	$8a,$80
>d135	2f					.byte 	$2f   ; *** Command / ***
>d136	01					.byte 	1     ; *** Load Float -0.003373093784050883 ***
>d137	7d 1f 0f dd				.dword 	$dd0f1f7d
>d13b	78 80					.byte 	$78,$80
>d13d	3d					.byte 	$3d   ; *** Command = ***
>d13e	01					.byte 	1     ; *** Load Float -1.7122838471550495e-12 ***
>d13f	f4 86 fb f0				.dword 	$f0fb86f4
>d143	59 80					.byte 	$59,$80
>d145	01					.byte 	1     ; *** Load Float 873.17 ***
>d146	47 e1 4a da				.dword 	$da4ae147
>d14a	8a 00					.byte 	$8a,$0
>d14c	2b					.byte 	$2b   ; *** Command + ***
>d14d	01					.byte 	1     ; *** Load Float 873.1699999999983 ***
>d14e	47 e1 4a da				.dword 	$da4ae147
>d152	8a 00					.byte 	$8a,$0
>d154	3d					.byte 	$3d   ; *** Command = ***
>d155	01					.byte 	1     ; *** Load Float 1.2458798437364749e-15 ***
>d156	6e da 8c b3				.dword 	$b38cda6e
>d15a	4f 00					.byte 	$4f,$0
>d15c	01					.byte 	1     ; *** Load Float 579.4 ***
>d15d	99 99 d9 90				.dword 	$90d99999
>d161	8a 00					.byte 	$8a,$0
>d163	2d					.byte 	$2d   ; *** Command - ***
>d164	01					.byte 	1     ; *** Load Float -579.4 ***
>d165	99 99 d9 90				.dword 	$90d99999
>d169	8a 80					.byte 	$8a,$80
>d16b	3d					.byte 	$3d   ; *** Command = ***
>d16c	01					.byte 	1     ; *** Load Float 0.0 ***
>d16d	00 00 00 00				.dword 	$0
>d171	80 40					.byte 	$80,$40
>d173	01					.byte 	1     ; *** Load Float 6.130704 ***
>d174	27 ba 2e c4				.dword 	$c42eba27
>d178	83 00					.byte 	$83,$0
>d17a	2b					.byte 	$2b   ; *** Command + ***
>d17b	01					.byte 	1     ; *** Load Float 6.130704 ***
>d17c	27 ba 2e c4				.dword 	$c42eba27
>d180	83 00					.byte 	$83,$0
>d182	3d					.byte 	$3d   ; *** Command = ***
>d183	01					.byte 	1     ; *** Load Float 1.5141322364797816e-12 ***
>d184	ee 5c 18 d5				.dword 	$d5185cee
>d188	59 00					.byte 	$59,$0
>d18a	01					.byte 	1     ; *** Load Float -6.377562880516052e-09 ***
>d18b	e7 a2 21 db				.dword 	$db21a2e7
>d18f	65 80					.byte 	$65,$80
>d191	2a					.byte 	$2a   ; *** Command * ***
>d192	01					.byte 	1     ; *** Load Float -9.656473547566209e-21 ***
>d193	3e d7 67 b6				.dword 	$b667d73e
>d197	3e 80					.byte 	$3e,$80
>d199	3d					.byte 	$3d   ; *** Command = ***
>d19a	01					.byte 	1     ; *** Load Float -4.0 ***
>d19b	00 00 00 80				.dword 	$80000000
>d19f	83 80					.byte 	$83,$80
>d1a1	01					.byte 	1     ; *** Load Float -5.948295438429341e-13 ***
>d1a2	5c fc 6d a7				.dword 	$a76dfc5c
>d1a6	58 80					.byte 	$58,$80
>d1a8	2b					.byte 	$2b   ; *** Command + ***
>d1a9	01					.byte 	1     ; *** Load Float -4.000000000000595 ***
>d1aa	00 00 00 80				.dword 	$80000000
>d1ae	83 80					.byte 	$83,$80
>d1b0	3d					.byte 	$3d   ; *** Command = ***
>d1b1	01					.byte 	1     ; *** Load Float 295.11 ***
>d1b2	7a 14 8e 93				.dword 	$938e147a
>d1b6	89 00					.byte 	$89,$0
>d1b8	01					.byte 	1     ; *** Load Float -258.64 ***
>d1b9	85 eb 51 81				.dword 	$8151eb85
>d1bd	89 80					.byte 	$89,$80
>d1bf	2d					.byte 	$2d   ; *** Command - ***
>d1c0	01					.byte 	1     ; *** Load Float 553.75 ***
>d1c1	00 00 70 8a				.dword 	$8a700000
>d1c5	8a 00					.byte 	$8a,$0
>d1c7	3d					.byte 	$3d   ; *** Command = ***
>d1c8	01					.byte 	1     ; *** Load Float -10.0 ***
>d1c9	00 00 00 a0				.dword 	$a0000000
>d1cd	84 80					.byte 	$84,$80
>d1cf	01					.byte 	1     ; *** Load Float -895.41 ***
>d1d0	70 3d da df				.dword 	$dfda3d70
>d1d4	8a 80					.byte 	$8a,$80
>d1d6	2d					.byte 	$2d   ; *** Command - ***
>d1d7	01					.byte 	1     ; *** Load Float 885.41 ***
>d1d8	70 3d 5a dd				.dword 	$dd5a3d70
>d1dc	8a 00					.byte 	$8a,$0
>d1de	3d					.byte 	$3d   ; *** Command = ***
>d1df	01					.byte 	1     ; *** Load Float 30039502095770.453 ***
>d1e0	d0 ee 90 da				.dword 	$da90eed0
>d1e4	ad 00					.byte 	$ad,$0
>d1e6	01					.byte 	1     ; *** Load Float 16.0 ***
>d1e7	00 00 00 80				.dword 	$80000000
>d1eb	85 00					.byte 	$85,$0
>d1ed	2a					.byte 	$2a   ; *** Command * ***
>d1ee	01					.byte 	1     ; *** Load Float 480632033532327.25 ***
>d1ef	d0 ee 90 da				.dword 	$da90eed0
>d1f3	b1 00					.byte 	$b1,$0
>d1f5	3d					.byte 	$3d   ; *** Command = ***
>d1f6	01					.byte 	1     ; *** Load Float -481.55 ***
>d1f7	66 66 c6 f0				.dword 	$f0c66666
>d1fb	89 80					.byte 	$89,$80
>d1fd	01					.byte 	1     ; *** Load Float 26266851751.23149 ***
>d1fe	34 0b b4 c3				.dword 	$c3b40b34
>d202	a3 00					.byte 	$a3,$0
>d204	2a					.byte 	$2a   ; *** Command * ***
>d205	01					.byte 	1     ; *** Load Float -12648802460805.525 ***
>d206	0a 76 10 b8				.dword 	$b810760a
>d20a	ac 80					.byte 	$ac,$80
>d20c	3d					.byte 	$3d   ; *** Command = ***
>d20d	01					.byte 	1     ; *** Load Float -663.61 ***
>d20e	3d 0a e7 a5				.dword 	$a5e70a3d
>d212	8a 80					.byte 	$8a,$80
>d214	01					.byte 	1     ; *** Load Float 1.8353965133428574e-09 ***
>d215	1b 46 41 fc				.dword 	$fc41461b
>d219	63 00					.byte 	$63,$0
>d21b	7e					.byte 	$7e   ; *** Command ~ ***
>d21c	01					.byte 	1     ; *** Load Float -1 ***
>d21d	00 00 00 80				.dword 	$80000000
>d221	81 80					.byte 	$81,$80
>d223	3d					.byte 	$3d   ; *** Command = ***
>d224	01					.byte 	1     ; *** Load Float 3.7650488593499176e-13 ***
>d225	8b 12 f4 d3				.dword 	$d3f4128b
>d229	57 00					.byte 	$57,$0
>d22b	01					.byte 	1     ; *** Load Float 892.8870400000001 ***
>d22c	43 c5 38 df				.dword 	$df38c543
>d230	8a 00					.byte 	$8a,$0
>d232	2d					.byte 	$2d   ; *** Command - ***
>d233	01					.byte 	1     ; *** Load Float -892.8870399999997 ***
>d234	43 c5 38 df				.dword 	$df38c543
>d238	8a 80					.byte 	$8a,$80
>d23a	3d					.byte 	$3d   ; *** Command = ***
>d23b	01					.byte 	1     ; *** Load Float 0.0 ***
>d23c	00 00 00 00				.dword 	$0
>d240	80 40					.byte 	$80,$40
>d242	01					.byte 	1     ; *** Load Float 4809023341.723648 ***
>d243	b6 ef 51 8f				.dword 	$8f51efb6
>d247	a1 00					.byte 	$a1,$0
>d249	2f					.byte 	$2f   ; *** Command / ***
>d24a	01					.byte 	1     ; *** Load Float 0.0 ***
>d24b	00 00 00 00				.dword 	$0
>d24f	80 40					.byte 	$80,$40
>d251	3d					.byte 	$3d   ; *** Command = ***
>d252	01					.byte 	1     ; *** Load Float 6.935810670256615e-10 ***
>d253	bd 6d a6 be				.dword 	$bea66dbd
>d257	62 00					.byte 	$62,$0
>d259	01					.byte 	1     ; *** Load Float 4.0 ***
>d25a	00 00 00 80				.dword 	$80000000
>d25e	83 00					.byte 	$83,$0
>d260	2f					.byte 	$2f   ; *** Command / ***
>d261	01					.byte 	1     ; *** Load Float 1.7339526675641537e-10 ***
>d262	bd 6d a6 be				.dword 	$bea66dbd
>d266	60 00					.byte 	$60,$0
>d268	3d					.byte 	$3d   ; *** Command = ***
>d269	01					.byte 	1     ; *** Load Float 10.0 ***
>d26a	00 00 00 a0				.dword 	$a0000000
>d26e	84 00					.byte 	$84,$0
>d270	01					.byte 	1     ; *** Load Float 12.0 ***
>d271	00 00 00 c0				.dword 	$c0000000
>d275	84 00					.byte 	$84,$0
>d277	2d					.byte 	$2d   ; *** Command - ***
>d278	01					.byte 	1     ; *** Load Float -2.0 ***
>d279	00 00 00 80				.dword 	$80000000
>d27d	82 80					.byte 	$82,$80
>d27f	3d					.byte 	$3d   ; *** Command = ***
>d280	01					.byte 	1     ; *** Load Float 9.451550653238882e-16 ***
>d281	34 11 36 88				.dword 	$88361134
>d285	4f 00					.byte 	$4f,$0
>d287	01					.byte 	1     ; *** Load Float 27.62 ***
>d288	8f c2 f5 dc				.dword 	$dcf5c28f
>d28c	85 00					.byte 	$85,$0
>d28e	2b					.byte 	$2b   ; *** Command + ***
>d28f	01					.byte 	1     ; *** Load Float 27.62 ***
>d290	8f c2 f5 dc				.dword 	$dcf5c28f
>d294	85 00					.byte 	$85,$0
>d296	3d					.byte 	$3d   ; *** Command = ***
>d297	01					.byte 	1     ; *** Load Float 5.049706 ***
>d298	09 31 97 a1				.dword 	$a1973109
>d29c	83 00					.byte 	$83,$0
>d29e	01					.byte 	1     ; *** Load Float 2.529155 ***
>d29f	ee ac dd a1				.dword 	$a1ddacee
>d2a3	82 00					.byte 	$82,$0
>d2a5	2f					.byte 	$2f   ; *** Command / ***
>d2a6	01					.byte 	1     ; *** Load Float 1.9965980732695308 ***
>d2a7	91 86 90 ff				.dword 	$ff908691
>d2ab	81 00					.byte 	$81,$0
>d2ad	3d					.byte 	$3d   ; *** Command = ***
>d2ae	01					.byte 	1     ; *** Load Float 776.63 ***
>d2af	eb 51 28 c2				.dword 	$c22851eb
>d2b3	8a 00					.byte 	$8a,$0
>d2b5	01					.byte 	1     ; *** Load Float -1386787627834.8022 ***
>d2b6	f1 7d 71 a1				.dword 	$a1717df1
>d2ba	a9 80					.byte 	$a9,$80
>d2bc	2f					.byte 	$2f   ; *** Command / ***
>d2bd	01					.byte 	1     ; *** Load Float -5.600208600162924e-10 ***
>d2be	f2 f6 ef 99				.dword 	$99eff6f2
>d2c2	62 80					.byte 	$62,$80
>d2c4	3d					.byte 	$3d   ; *** Command = ***
>d2c5	01					.byte 	1     ; *** Load Float 15.0 ***
>d2c6	00 00 00 f0				.dword 	$f0000000
>d2ca	84 00					.byte 	$84,$0
>d2cc	01					.byte 	1     ; *** Load Float 164.48 ***
>d2cd	47 e1 7a a4				.dword 	$a47ae147
>d2d1	88 00					.byte 	$88,$0
>d2d3	7e					.byte 	$7e   ; *** Command ~ ***
>d2d4	01					.byte 	1     ; *** Load Float -1 ***
>d2d5	00 00 00 80				.dword 	$80000000
>d2d9	81 80					.byte 	$81,$80
>d2db	3d					.byte 	$3d   ; *** Command = ***
>d2dc	01					.byte 	1     ; *** Load Float 347.2 ***
>d2dd	99 99 99 ad				.dword 	$ad999999
>d2e1	89 00					.byte 	$89,$0
>d2e3	01					.byte 	1     ; *** Load Float -1703.743488 ***
>d2e4	a7 ca f7 d4				.dword 	$d4f7caa7
>d2e8	8b 80					.byte 	$8b,$80
>d2ea	7e					.byte 	$7e   ; *** Command ~ ***
>d2eb	01					.byte 	1     ; *** Load Float 1 ***
>d2ec	00 00 00 80				.dword 	$80000000
>d2f0	81 00					.byte 	$81,$0
>d2f2	3d					.byte 	$3d   ; *** Command = ***
>d2f3	01					.byte 	1     ; *** Load Float -938.47 ***
>d2f4	7a 14 9e ea				.dword 	$ea9e147a
>d2f8	8a 80					.byte 	$8a,$80
>d2fa	01					.byte 	1     ; *** Load Float 8.37004 ***
>d2fb	10 af eb 85				.dword 	$85ebaf10
>d2ff	84 00					.byte 	$84,$0
>d301	2f					.byte 	$2f   ; *** Command / ***
>d302	01					.byte 	1     ; *** Load Float -112.12252271195838 ***
>d303	4c bb 3e e0				.dword 	$e03ebb4c
>d307	87 80					.byte 	$87,$80
>d309	3d					.byte 	$3d   ; *** Command = ***
>d30a	01					.byte 	1     ; *** Load Float -992.81 ***
>d30b	0a d7 33 f8				.dword 	$f833d70a
>d30f	8a 80					.byte 	$8a,$80
>d311	01					.byte 	1     ; *** Load Float -0.969636 ***
>d312	9d 10 3a f8				.dword 	$f83a109d
>d316	80 80					.byte 	$80,$80
>d318	7e					.byte 	$7e   ; *** Command ~ ***
>d319	01					.byte 	1     ; *** Load Float -1 ***
>d31a	00 00 00 80				.dword 	$80000000
>d31e	81 80					.byte 	$81,$80
>d320	3d					.byte 	$3d   ; *** Command = ***
>d321	01					.byte 	1     ; *** Load Float 5.654289 ***
>d322	7c ef ef b4				.dword 	$b4efef7c
>d326	83 00					.byte 	$83,$0
>d328	01					.byte 	1     ; *** Load Float -46.61 ***
>d329	d7 a3 70 ba				.dword 	$ba70a3d7
>d32d	86 80					.byte 	$86,$80
>d32f	2b					.byte 	$2b   ; *** Command + ***
>d330	01					.byte 	1     ; *** Load Float -40.955711 ***
>d331	e7 a5 d2 a3				.dword 	$a3d2a5e7
>d335	86 80					.byte 	$86,$80
>d337	3d					.byte 	$3d   ; *** Command = ***
>d338	01					.byte 	1     ; *** Load Float 6.820025 ***
>d339	11 a5 3d da				.dword 	$da3da511
>d33d	83 00					.byte 	$83,$0
>d33f	01					.byte 	1     ; *** Load Float 14.0 ***
>d340	00 00 00 e0				.dword 	$e0000000
>d344	84 00					.byte 	$84,$0
>d346	2f					.byte 	$2f   ; *** Command / ***
>d347	01					.byte 	1     ; *** Load Float 0.4871446428571429 ***
>d348	ca 05 6b f9				.dword 	$f96b05ca
>d34c	7f 00					.byte 	$7f,$0
>d34e	3d					.byte 	$3d   ; *** Command = ***
>d34f	01					.byte 	1     ; *** Load Float -8.0 ***
>d350	00 00 00 80				.dword 	$80000000
>d354	84 80					.byte 	$84,$80
>d356	01					.byte 	1     ; *** Load Float -7.0 ***
>d357	00 00 00 e0				.dword 	$e0000000
>d35b	83 80					.byte 	$83,$80
>d35d	7e					.byte 	$7e   ; *** Command ~ ***
>d35e	01					.byte 	1     ; *** Load Float -1 ***
>d35f	00 00 00 80				.dword 	$80000000
>d363	81 80					.byte 	$81,$80
>d365	3d					.byte 	$3d   ; *** Command = ***
>d366	01					.byte 	1     ; *** Load Float -43245533946848.48 ***
>d367	c1 8a 53 9d				.dword 	$9d538ac1
>d36b	ae 80					.byte 	$ae,$80
>d36d	01					.byte 	1     ; *** Load Float -985.73 ***
>d36e	51 b8 6e f6				.dword 	$f66eb851
>d372	8a 80					.byte 	$8a,$80
>d374	2f					.byte 	$2f   ; *** Command / ***
>d375	01					.byte 	1     ; *** Load Float 43871581413.62084 ***
>d376	4e 33 6f a3				.dword 	$a36f334e
>d37a	a4 00					.byte 	$a4,$0
>d37c	3d					.byte 	$3d   ; *** Command = ***
>d37d	01					.byte 	1     ; *** Load Float 7414.8413439999995 ***
>d37e	12 bb b6 e7				.dword 	$e7b6bb12
>d382	8d 00					.byte 	$8d,$0
>d384	01					.byte 	1     ; *** Load Float 102689249115953.42 ***
>d385	6e 68 ca ba				.dword 	$baca686e
>d389	af 00					.byte 	$af,$0
>d38b	2d					.byte 	$2d   ; *** Command - ***
>d38c	01					.byte 	1     ; *** Load Float -102689249108538.58 ***
>d38d	6e 68 ca ba				.dword 	$baca686e
>d391	af 80					.byte 	$af,$80
>d393	3d					.byte 	$3d   ; *** Command = ***
>d394	01					.byte 	1     ; *** Load Float 639.68 ***
>d395	1e 85 eb 9f				.dword 	$9feb851e
>d399	8a 00					.byte 	$8a,$0
>d39b	01					.byte 	1     ; *** Load Float -11595071669.403648 ***
>d39c	2d b0 c7 ac				.dword 	$acc7b02d
>d3a0	a2 80					.byte 	$a2,$80
>d3a2	2b					.byte 	$2b   ; *** Command + ***
>d3a3	01					.byte 	1     ; *** Load Float -11595071029.723648 ***
>d3a4	8d af c7 ac				.dword 	$acc7af8d
>d3a8	a2 80					.byte 	$a2,$80
>d3aa	3d					.byte 	$3d   ; *** Command = ***
>d3ab	01					.byte 	1     ; *** Load Float -739.94 ***
>d3ac	f5 28 fc b8				.dword 	$b8fc28f5
>d3b0	8a 80					.byte 	$8a,$80
>d3b2	01					.byte 	1     ; *** Load Float 205.66 ***
>d3b3	c2 f5 a8 cd				.dword 	$cda8f5c2
>d3b7	88 00					.byte 	$88,$0
>d3b9	2d					.byte 	$2d   ; *** Command - ***
>d3ba	01					.byte 	1     ; *** Load Float -945.6 ***
>d3bb	66 66 66 ec				.dword 	$ec666666
>d3bf	8a 80					.byte 	$8a,$80
>d3c1	3d					.byte 	$3d   ; *** Command = ***
>d3c2	01					.byte 	1     ; *** Load Float -11.0 ***
>d3c3	00 00 00 b0				.dword 	$b0000000
>d3c7	84 80					.byte 	$84,$80
>d3c9	01					.byte 	1     ; *** Load Float -107.74 ***
>d3ca	47 e1 7a d7				.dword 	$d77ae147
>d3ce	87 80					.byte 	$87,$80
>d3d0	2a					.byte 	$2a   ; *** Command * ***
>d3d1	01					.byte 	1     ; *** Load Float 1185.1399999999999 ***
>d3d2	e1 7a 24 94				.dword 	$94247ae1
>d3d6	8b 00					.byte 	$8b,$0
>d3d8	3d					.byte 	$3d   ; *** Command = ***
>d3d9	01					.byte 	1     ; *** Load Float 506.68 ***
>d3da	3d 0a 57 fd				.dword 	$fd570a3d
>d3de	89 00					.byte 	$89,$0
>d3e0	01					.byte 	1     ; *** Load Float 12.0 ***
>d3e1	00 00 00 c0				.dword 	$c0000000
>d3e5	84 00					.byte 	$84,$0
>d3e7	7e					.byte 	$7e   ; *** Command ~ ***
>d3e8	01					.byte 	1     ; *** Load Float 1 ***
>d3e9	00 00 00 80				.dword 	$80000000
>d3ed	81 00					.byte 	$81,$0
>d3ef	3d					.byte 	$3d   ; *** Command = ***
>d3f0	01					.byte 	1     ; *** Load Float 9.610448 ***
>d3f1	1f 65 c4 99				.dword 	$99c4651f
>d3f5	84 00					.byte 	$84,$0
>d3f7	01					.byte 	1     ; *** Load Float -2.924082309618825e-14 ***
>d3f8	ae 5f b0 83				.dword 	$83b05fae
>d3fc	54 80					.byte 	$54,$80
>d3fe	2d					.byte 	$2d   ; *** Command - ***
>d3ff	01					.byte 	1     ; *** Load Float 9.610448000000028 ***
>d400	1f 65 c4 99				.dword 	$99c4651f
>d404	84 00					.byte 	$84,$0
>d406	3d					.byte 	$3d   ; *** Command = ***
>d407	01					.byte 	1     ; *** Load Float 893.86 ***
>d408	3d 0a 77 df				.dword 	$df770a3d
>d40c	8a 00					.byte 	$8a,$0
>d40e	01					.byte 	1     ; *** Load Float -865.08 ***
>d40f	b8 1e 45 d8				.dword 	$d8451eb8
>d413	8a 80					.byte 	$8a,$80
>d415	2a					.byte 	$2a   ; *** Command * ***
>d416	01					.byte 	1     ; *** Load Float -773260.4088000001 ***
>d417	8a c6 c8 bc				.dword 	$bcc8c68a
>d41b	94 80					.byte 	$94,$80
>d41d	3d					.byte 	$3d   ; *** Command = ***
>d41e	01					.byte 	1     ; *** Load Float 19.0 ***
>d41f	00 00 00 98				.dword 	$98000000
>d423	85 00					.byte 	$85,$0
>d425	01					.byte 	1     ; *** Load Float 5.348084 ***
>d426	0e 81 23 ab				.dword 	$ab23810e
>d42a	83 00					.byte 	$83,$0
>d42c	2d					.byte 	$2d   ; *** Command - ***
>d42d	01					.byte 	1     ; *** Load Float 13.651916 ***
>d42e	78 3f 6e da				.dword 	$da6e3f78
>d432	84 00					.byte 	$84,$0
>d434	3d					.byte 	$3d   ; *** Command = ***
>d435	01					.byte 	1     ; *** Load Float 5.8958984375000004e-05 ***
>d436	38 ba 4a f7				.dword 	$f74aba38
>d43a	72 00					.byte 	$72,$0
>d43c	01					.byte 	1     ; *** Load Float -282.75 ***
>d43d	00 00 60 8d				.dword 	$8d600000
>d441	89 80					.byte 	$89,$80
>d443	7e					.byte 	$7e   ; *** Command ~ ***
>d444	01					.byte 	1     ; *** Load Float 1 ***
>d445	00 00 00 80				.dword 	$80000000
>d449	81 00					.byte 	$81,$0
>d44b	3d					.byte 	$3d   ; *** Command = ***
>d44c	01					.byte 	1     ; *** Load Float 14.0 ***
>d44d	00 00 00 e0				.dword 	$e0000000
>d451	84 00					.byte 	$84,$0
>d453	01					.byte 	1     ; *** Load Float -642.13 ***
>d454	eb 51 88 a0				.dword 	$a08851eb
>d458	8a 80					.byte 	$8a,$80
>d45a	2b					.byte 	$2b   ; *** Command + ***
>d45b	01					.byte 	1     ; *** Load Float -628.13 ***
>d45c	eb 51 08 9d				.dword 	$9d0851eb
>d460	8a 80					.byte 	$8a,$80
>d462	3d					.byte 	$3d   ; *** Command = ***
>d463	01					.byte 	1     ; *** Load Float 10.0 ***
>d464	00 00 00 a0				.dword 	$a0000000
>d468	84 00					.byte 	$84,$0
>d46a	01					.byte 	1     ; *** Load Float -2.5088820621022023e-13 ***
>d46b	0f cd 3c 8d				.dword 	$8d3ccd0f
>d46f	57 80					.byte 	$57,$80
>d471	2b					.byte 	$2b   ; *** Command + ***
>d472	01					.byte 	1     ; *** Load Float 9.99999999999975 ***
>d473	ff ff ff 9f				.dword 	$9fffffff
>d477	84 00					.byte 	$84,$0
>d479	3d					.byte 	$3d   ; *** Command = ***
>d47a	01					.byte 	1     ; *** Load Float 43448438922.14989 ***
>d47b	08 a9 db a1				.dword 	$a1dba908
>d47f	a4 00					.byte 	$a4,$0
>d481	01					.byte 	1     ; *** Load Float -5635567.517696001 ***
>d482	09 df fb ab				.dword 	$abfbdf09
>d486	97 80					.byte 	$97,$80
>d488	2a					.byte 	$2a   ; *** Command * ***
>d489	01					.byte 	1     ; *** Load Float -2.4485661108426653e+17 ***
>d48a	97 f2 79 d9				.dword 	$d979f297
>d48e	ba 80					.byte 	$ba,$80
>d490	3d					.byte 	$3d   ; *** Command = ***
>d491	01					.byte 	1     ; *** Load Float 6.49 ***
>d492	7a 14 ae cf				.dword 	$cfae147a
>d496	83 00					.byte 	$83,$0
>d498	01					.byte 	1     ; *** Load Float -0.601972 ***
>d499	45 d6 1a 9a				.dword 	$9a1ad645
>d49d	80 80					.byte 	$80,$80
>d49f	7e					.byte 	$7e   ; *** Command ~ ***
>d4a0	01					.byte 	1     ; *** Load Float 1 ***
>d4a1	00 00 00 80				.dword 	$80000000
>d4a5	81 00					.byte 	$81,$0
>d4a7	3d					.byte 	$3d   ; *** Command = ***
>d4a8	01					.byte 	1     ; *** Load Float -12.0 ***
>d4a9	00 00 00 c0				.dword 	$c0000000
>d4ad	84 80					.byte 	$84,$80
>d4af	01					.byte 	1     ; *** Load Float 1.351516 ***
>d4b0	ee 79 fe ac				.dword 	$acfe79ee
>d4b4	81 00					.byte 	$81,$0
>d4b6	2b					.byte 	$2b   ; *** Command + ***
>d4b7	01					.byte 	1     ; *** Load Float -10.648484 ***
>d4b8	c2 30 60 aa				.dword 	$aa6030c2
>d4bc	84 80					.byte 	$84,$80
>d4be	3d					.byte 	$3d   ; *** Command = ***
>d4bf	01					.byte 	1     ; *** Load Float -0.00019302758789062498 ***
>d4c0	d5 72 67 ca				.dword 	$ca6772d5
>d4c4	74 80					.byte 	$74,$80
>d4c6	01					.byte 	1     ; *** Load Float 4.277442 ***
>d4c7	0b ce e0 88				.dword 	$88e0ce0b
>d4cb	83 00					.byte 	$83,$0
>d4cd	2f					.byte 	$2f   ; *** Command / ***
>d4ce	01					.byte 	1     ; *** Load Float -4.512687440078089e-05 ***
>d4cf	c8 9c 46 bd				.dword 	$bd469cc8
>d4d3	72 80					.byte 	$72,$80
>d4d5	3d					.byte 	$3d   ; *** Command = ***
>d4d6	01					.byte 	1     ; *** Load Float 476.41 ***
>d4d7	e1 7a 34 ee				.dword 	$ee347ae1
>d4db	89 00					.byte 	$89,$0
>d4dd	01					.byte 	1     ; *** Load Float -241.57 ***
>d4de	85 eb 91 f1				.dword 	$f191eb85
>d4e2	88 80					.byte 	$88,$80
>d4e4	2b					.byte 	$2b   ; *** Command + ***
>d4e5	01					.byte 	1     ; *** Load Float 234.84000000000003 ***
>d4e6	3d 0a d7 ea				.dword 	$ead70a3d
>d4ea	88 00					.byte 	$88,$0
>d4ec	3d					.byte 	$3d   ; *** Command = ***
>d4ed	01					.byte 	1     ; *** Load Float 3.644679 ***
>d4ee	b5 6b 42 e9				.dword 	$e9426bb5
>d4f2	82 00					.byte 	$82,$0
>d4f4	01					.byte 	1     ; *** Load Float 1.541633 ***
>d4f5	ea 3a 54 c5				.dword 	$c5543aea
>d4f9	81 00					.byte 	$81,$0
>d4fb	2a					.byte 	$2a   ; *** Command * ***
>d4fc	01					.byte 	1     ; *** Load Float 5.618757420807 ***
>d4fd	5c dc cc b3				.dword 	$b3ccdc5c
>d501	83 00					.byte 	$83,$0
>d503	3d					.byte 	$3d   ; *** Command = ***
>d504	01					.byte 	1     ; *** Load Float 17.0 ***
>d505	00 00 00 88				.dword 	$88000000
>d509	85 00					.byte 	$85,$0
>d50b	01					.byte 	1     ; *** Load Float -677671.600128 ***
>d50c	9a 79 72 a5				.dword 	$a572799a
>d510	94 80					.byte 	$94,$80
>d512	2a					.byte 	$2a   ; *** Command * ***
>d513	01					.byte 	1     ; *** Load Float -11520417.202176 ***
>d514	33 a1 c9 af				.dword 	$afc9a133
>d518	98 80					.byte 	$98,$80
>d51a	3d					.byte 	$3d   ; *** Command = ***
>d51b	01					.byte 	1     ; *** Load Float 12.81 ***
>d51c	8f c2 f5 cc				.dword 	$ccf5c28f
>d520	84 00					.byte 	$84,$0
>d522	01					.byte 	1     ; *** Load Float 431.86 ***
>d523	7a 14 ee d7				.dword 	$d7ee147a
>d527	89 00					.byte 	$89,$0
>d529	2b					.byte 	$2b   ; *** Command + ***
>d52a	01					.byte 	1     ; *** Load Float 444.67 ***
>d52b	8f c2 55 de				.dword 	$de55c28f
>d52f	89 00					.byte 	$89,$0
>d531	3d					.byte 	$3d   ; *** Command = ***
>d532	01					.byte 	1     ; *** Load Float 3909.464064 ***
>d533	ce 6c 57 f4				.dword 	$f4576cce
>d537	8c 00					.byte 	$8c,$0
>d539	01					.byte 	1     ; *** Load Float 6.600373 ***
>d53a	70 41 36 d3				.dword 	$d3364170
>d53e	83 00					.byte 	$83,$0
>d540	2f					.byte 	$2f   ; *** Command / ***
>d541	01					.byte 	1     ; *** Load Float 592.3095655351599 ***
>d542	eb cf 13 94				.dword 	$9413cfeb
>d546	8a 00					.byte 	$8a,$0
>d548	3d					.byte 	$3d   ; *** Command = ***
>d549	01					.byte 	1     ; *** Load Float 1.755755 ***
>d54a	70 94 bc e0				.dword 	$e0bc9470
>d54e	81 00					.byte 	$81,$0
>d550	01					.byte 	1     ; *** Load Float -2.0 ***
>d551	00 00 00 80				.dword 	$80000000
>d555	82 80					.byte 	$82,$80
>d557	2b					.byte 	$2b   ; *** Command + ***
>d558	01					.byte 	1     ; *** Load Float -0.24424500000000005 ***
>d559	7c 5c 1b fa				.dword 	$fa1b5c7c
>d55d	7e 80					.byte 	$7e,$80
>d55f	3d					.byte 	$3d   ; *** Command = ***
>d560	01					.byte 	1     ; *** Load Float -476.65 ***
>d561	33 33 53 ee				.dword 	$ee533333
>d565	89 80					.byte 	$89,$80
>d567	01					.byte 	1     ; *** Load Float 90.4 ***
>d568	cc cc cc b4				.dword 	$b4cccccc
>d56c	87 00					.byte 	$87,$0
>d56e	2b					.byte 	$2b   ; *** Command + ***
>d56f	01					.byte 	1     ; *** Load Float -386.25 ***
>d570	00 00 20 c1				.dword 	$c1200000
>d574	89 80					.byte 	$89,$80
>d576	3d					.byte 	$3d   ; *** Command = ***
>d577	01					.byte 	1     ; *** Load Float 1921415896.891392 ***
>d578	b1 f5 0c e5				.dword 	$e50cf5b1
>d57c	9f 00					.byte 	$9f,$0
>d57e	01					.byte 	1     ; *** Load Float 9.04363 ***
>d57f	5e b5 b2 90				.dword 	$90b2b55e
>d583	84 00					.byte 	$84,$0
>d585	2f					.byte 	$2f   ; *** Command / ***
>d586	01					.byte 	1     ; *** Load Float 212460692.98405528 ***
>d587	4f 49 9e ca				.dword 	$ca9e494f
>d58b	9c 00					.byte 	$9c,$0
>d58d	3d					.byte 	$3d   ; *** Command = ***
>d58e	01					.byte 	1     ; *** Load Float 8.0 ***
>d58f	00 00 00 80				.dword 	$80000000
>d593	84 00					.byte 	$84,$0
>d595	01					.byte 	1     ; *** Load Float 0.0 ***
>d596	00 00 00 00				.dword 	$0
>d59a	80 40					.byte 	$80,$40
>d59c	2a					.byte 	$2a   ; *** Command * ***
>d59d	01					.byte 	1     ; *** Load Float 0.0 ***
>d59e	00 00 00 00				.dword 	$0
>d5a2	80 40					.byte 	$80,$40
>d5a4	3d					.byte 	$3d   ; *** Command = ***
>d5a5	01					.byte 	1     ; *** Load Float 4.185931601341508e-16 ***
>d5a6	79 72 4d f1				.dword 	$f14d7279
>d5aa	4d 00					.byte 	$4d,$0
>d5ac	01					.byte 	1     ; *** Load Float -8.5660400390625e-06 ***
>d5ad	a0 dc b6 8f				.dword 	$8fb6dca0
>d5b1	70 80					.byte 	$70,$80
>d5b3	7e					.byte 	$7e   ; *** Command ~ ***
>d5b4	01					.byte 	1     ; *** Load Float 1 ***
>d5b5	00 00 00 80				.dword 	$80000000
>d5b9	81 00					.byte 	$81,$0
>d5bb	3d					.byte 	$3d   ; *** Command = ***
>d5bc	01					.byte 	1     ; *** Load Float 5.0 ***
>d5bd	00 00 00 a0				.dword 	$a0000000
>d5c1	83 00					.byte 	$83,$0
>d5c3	01					.byte 	1     ; *** Load Float -5.0 ***
>d5c4	00 00 00 a0				.dword 	$a0000000
>d5c8	83 80					.byte 	$83,$80
>d5ca	7e					.byte 	$7e   ; *** Command ~ ***
>d5cb	01					.byte 	1     ; *** Load Float 1 ***
>d5cc	00 00 00 80				.dword 	$80000000
>d5d0	81 00					.byte 	$81,$0
>d5d2	3d					.byte 	$3d   ; *** Command = ***
>d5d3	01					.byte 	1     ; *** Load Float 9.0 ***
>d5d4	00 00 00 90				.dword 	$90000000
>d5d8	84 00					.byte 	$84,$0
>d5da	01					.byte 	1     ; *** Load Float 9.419086 ***
>d5db	85 93 b4 96				.dword 	$96b49385
>d5df	84 00					.byte 	$84,$0
>d5e1	7e					.byte 	$7e   ; *** Command ~ ***
>d5e2	01					.byte 	1     ; *** Load Float -1 ***
>d5e3	00 00 00 80				.dword 	$80000000
>d5e7	81 80					.byte 	$81,$80
>d5e9	3d					.byte 	$3d   ; *** Command = ***
>d5ea	01					.byte 	1     ; *** Load Float 9.374186 ***
>d5eb	75 aa fc 95				.dword 	$95fcaa75
>d5ef	84 00					.byte 	$84,$0
>d5f1	01					.byte 	1     ; *** Load Float 407.9 ***
>d5f2	33 33 f3 cb				.dword 	$cbf33333
>d5f6	89 00					.byte 	$89,$0
>d5f8	2a					.byte 	$2a   ; *** Command * ***
>d5f9	01					.byte 	1     ; *** Load Float 3823.7304694 ***
>d5fa	00 b0 fb ee				.dword 	$eefbb000
>d5fe	8c 00					.byte 	$8c,$0
>d600	3d					.byte 	$3d   ; *** Command = ***
>d601	01					.byte 	1     ; *** Load Float 402.04 ***
>d602	b8 1e 05 c9				.dword 	$c9051eb8
>d606	89 00					.byte 	$89,$0
>d608	01					.byte 	1     ; *** Load Float -18.0 ***
>d609	00 00 00 90				.dword 	$90000000
>d60d	85 80					.byte 	$85,$80
>d60f	2b					.byte 	$2b   ; *** Command + ***
>d610	01					.byte 	1     ; *** Load Float 384.04 ***
>d611	b8 1e 05 c0				.dword 	$c0051eb8
>d615	89 00					.byte 	$89,$0
>d617	3d					.byte 	$3d   ; *** Command = ***
>d618	01					.byte 	1     ; *** Load Float -786.94 ***
>d619	f5 28 bc c4				.dword 	$c4bc28f5
>d61d	8a 80					.byte 	$8a,$80
>d61f	01					.byte 	1     ; *** Load Float 4.0 ***
>d620	00 00 00 80				.dword 	$80000000
>d624	83 00					.byte 	$83,$0
>d626	2f					.byte 	$2f   ; *** Command / ***
>d627	01					.byte 	1     ; *** Load Float -196.735 ***
>d628	f5 28 bc c4				.dword 	$c4bc28f5
>d62c	88 80					.byte 	$88,$80
>d62e	3d					.byte 	$3d   ; *** Command = ***
>d62f	01					.byte 	1     ; *** Load Float -42345447340071.98 ***
>d630	62 45 0d 9a				.dword 	$9a0d4562
>d634	ae 80					.byte 	$ae,$80
>d636	01					.byte 	1     ; *** Load Float 0.686724 ***
>d637	e1 24 cd af				.dword 	$afcd24e1
>d63b	80 00					.byte 	$80,$0
>d63d	2a					.byte 	$2a   ; *** Command * ***
>d63e	01					.byte 	1     ; *** Load Float -29079634979163.59 ***
>d63f	81 0a 95 d3				.dword 	$d3950a81
>d643	ad 80					.byte 	$ad,$80
>d645	3d					.byte 	$3d   ; *** Command = ***
>d646	01					.byte 	1     ; *** Load Float -494.23 ***
>d647	a3 70 1d f7				.dword 	$f71d70a3
>d64b	89 80					.byte 	$89,$80
>d64d	01					.byte 	1     ; *** Load Float 0.218673 ***
>d64e	9e d0 eb df				.dword 	$dfebd09e
>d652	7e 00					.byte 	$7e,$0
>d654	7e					.byte 	$7e   ; *** Command ~ ***
>d655	01					.byte 	1     ; *** Load Float -1 ***
>d656	00 00 00 80				.dword 	$80000000
>d65a	81 80					.byte 	$81,$80
>d65c	3d					.byte 	$3d   ; *** Command = ***
>d65d	01					.byte 	1     ; *** Load Float 4.097887 ***
>d65e	ea e3 21 83				.dword 	$8321e3ea
>d662	83 00					.byte 	$83,$0
>d664	01					.byte 	1     ; *** Load Float -4.0 ***
>d665	00 00 00 80				.dword 	$80000000
>d669	83 80					.byte 	$83,$80
>d66b	2b					.byte 	$2b   ; *** Command + ***
>d66c	01					.byte 	1     ; *** Load Float 0.09788700000000006 ***
>d66d	bd fa 78 c8				.dword 	$c878fabd
>d671	7d 00					.byte 	$7d,$0
>d673	3d					.byte 	$3d   ; *** Command = ***
>d674	01					.byte 	1     ; *** Load Float 9.781565 ***
>d675	4d 4a 81 9c				.dword 	$9c814a4d
>d679	84 00					.byte 	$84,$0
>d67b	01					.byte 	1     ; *** Load Float 981862405860340.2 ***
>d67c	fa e9 3f df				.dword 	$df3fe9fa
>d680	b2 00					.byte 	$b2,$0
>d682	2b					.byte 	$2b   ; *** Command + ***
>d683	01					.byte 	1     ; *** Load Float 981862405860350.0 ***
>d684	fa e9 3f df				.dword 	$df3fe9fa
>d688	b2 00					.byte 	$b2,$0
>d68a	3d					.byte 	$3d   ; *** Command = ***
>d68b	01					.byte 	1     ; *** Load Float 19.0 ***
>d68c	00 00 00 98				.dword 	$98000000
>d690	85 00					.byte 	$85,$0
>d692	01					.byte 	1     ; *** Load Float -715.7 ***
>d693	cc cc ec b2				.dword 	$b2eccccc
>d697	8a 80					.byte 	$8a,$80
>d699	7e					.byte 	$7e   ; *** Command ~ ***
>d69a	01					.byte 	1     ; *** Load Float 1 ***
>d69b	00 00 00 80				.dword 	$80000000
>d69f	81 00					.byte 	$81,$0
>d6a1	3d					.byte 	$3d   ; *** Command = ***
>d6a2	01					.byte 	1     ; *** Load Float -55533446100.94285 ***
>d6a3	3d d2 e0 ce				.dword 	$cee0d23d
>d6a7	a4 80					.byte 	$a4,$80
>d6a9	01					.byte 	1     ; *** Load Float 0.632866 ***
>d6aa	94 81 03 a2				.dword 	$a2038194
>d6ae	80 00					.byte 	$80,$0
>d6b0	7e					.byte 	$7e   ; *** Command ~ ***
>d6b1	01					.byte 	1     ; *** Load Float -1 ***
>d6b2	00 00 00 80				.dword 	$80000000
>d6b6	81 80					.byte 	$81,$80
>d6b8	3d					.byte 	$3d   ; *** Command = ***
>d6b9	01					.byte 	1     ; *** Load Float 7.658473 ***
>d6ba	f8 35 12 f5				.dword 	$f51235f8
>d6be	83 00					.byte 	$83,$0
>d6c0	01					.byte 	1     ; *** Load Float 3.679317 ***
>d6c1	02 ee 79 eb				.dword 	$eb79ee02
>d6c5	82 00					.byte 	$82,$0
>d6c7	2f					.byte 	$2f   ; *** Command / ***
>d6c8	01					.byte 	1     ; *** Load Float 2.081493114075248 ***
>d6c9	e4 2e 37 85				.dword 	$85372ee4
>d6cd	82 00					.byte 	$82,$0
>d6cf	3d					.byte 	$3d   ; *** Command = ***
>d6d0	01					.byte 	1     ; *** Load Float 6.233011 ***
>d6d1	7c d3 74 c7				.dword 	$c774d37c
>d6d5	83 00					.byte 	$83,$0
>d6d7	01					.byte 	1     ; *** Load Float 0.0001165596923828125 ***
>d6d8	23 82 71 f4				.dword 	$f4718223
>d6dc	73 00					.byte 	$73,$0
>d6de	2a					.byte 	$2a   ; *** Command * ***
>d6df	01					.byte 	1     ; *** Load Float 0.0007265178447786865 ***
>d6e0	88 c9 73 be				.dword 	$be73c988
>d6e4	76 00					.byte 	$76,$0
>d6e6	3d					.byte 	$3d   ; *** Command = ***
>d6e7	01					.byte 	1     ; *** Load Float 728.25 ***
>d6e8	00 00 10 b6				.dword 	$b6100000
>d6ec	8a 00					.byte 	$8a,$0
>d6ee	01					.byte 	1     ; *** Load Float 7.0 ***
>d6ef	00 00 00 e0				.dword 	$e0000000
>d6f3	83 00					.byte 	$83,$0
>d6f5	2d					.byte 	$2d   ; *** Command - ***
>d6f6	01					.byte 	1     ; *** Load Float 721.25 ***
>d6f7	00 00 50 b4				.dword 	$b4500000
>d6fb	8a 00					.byte 	$8a,$0
>d6fd	3d					.byte 	$3d   ; *** Command = ***
>d6fe	01					.byte 	1     ; *** Load Float 1108269.334528 ***
>d6ff	ad 6a 49 87				.dword 	$87496aad
>d703	95 00					.byte 	$95,$0
>d705	01					.byte 	1     ; *** Load Float -445.75 ***
>d706	00 00 e0 de				.dword 	$dee00000
>d70a	89 80					.byte 	$89,$80
>d70c	7e					.byte 	$7e   ; *** Command ~ ***
>d70d	01					.byte 	1     ; *** Load Float 1 ***
>d70e	00 00 00 80				.dword 	$80000000
>d712	81 00					.byte 	$81,$0
>d714	3d					.byte 	$3d   ; *** Command = ***
>d715	01					.byte 	1     ; *** Load Float -25293028046.405632 ***
>d716	59 9f 72 bc				.dword 	$bc729f59
>d71a	a3 80					.byte 	$a3,$80
>d71c	01					.byte 	1     ; *** Load Float 8.0 ***
>d71d	00 00 00 80				.dword 	$80000000
>d721	84 00					.byte 	$84,$0
>d723	2b					.byte 	$2b   ; *** Command + ***
>d724	01					.byte 	1     ; *** Load Float -25293028038.405632 ***
>d725	58 9f 72 bc				.dword 	$bc729f58
>d729	a3 80					.byte 	$a3,$80
>d72b	3d					.byte 	$3d   ; *** Command = ***
>d72c	01					.byte 	1     ; *** Load Float 199.5 ***
>d72d	00 00 80 c7				.dword 	$c7800000
>d731	88 00					.byte 	$88,$0
>d733	01					.byte 	1     ; *** Load Float -977.77 ***
>d734	ae 47 71 f4				.dword 	$f47147ae
>d738	8a 80					.byte 	$8a,$80
>d73a	2a					.byte 	$2a   ; *** Command * ***
>d73b	01					.byte 	1     ; *** Load Float -195065.115 ***
>d73c	5c 47 7e be				.dword 	$be7e475c
>d740	92 80					.byte 	$92,$80
>d742	3d					.byte 	$3d   ; *** Command = ***
>d743	01					.byte 	1     ; *** Load Float -2.1510118131118362e-14 ***
>d744	9c f4 be c1				.dword 	$c1bef49c
>d748	53 80					.byte 	$53,$80
>d74a	01					.byte 	1     ; *** Load Float 4.0 ***
>d74b	00 00 00 80				.dword 	$80000000
>d74f	83 00					.byte 	$83,$0
>d751	7e					.byte 	$7e   ; *** Command ~ ***
>d752	01					.byte 	1     ; *** Load Float -1 ***
>d753	00 00 00 80				.dword 	$80000000
>d757	81 80					.byte 	$81,$80
>d759	3d					.byte 	$3d   ; *** Command = ***
>d75a	01					.byte 	1     ; *** Load Float 875.64 ***
>d75b	c2 f5 e8 da				.dword 	$dae8f5c2
>d75f	8a 00					.byte 	$8a,$0
>d761	01					.byte 	1     ; *** Load Float -0.442225 ***
>d762	b0 50 6b e2				.dword 	$e26b50b0
>d766	7f 80					.byte 	$7f,$80
>d768	2d					.byte 	$2d   ; *** Command - ***
>d769	01					.byte 	1     ; *** Load Float 876.082225 ***
>d76a	2c 43 05 db				.dword 	$db05432c
>d76e	8a 00					.byte 	$8a,$0
>d770	3d					.byte 	$3d   ; *** Command = ***
>d771	01					.byte 	1     ; *** Load Float 323.38 ***
>d772	d7 a3 b0 a1				.dword 	$a1b0a3d7
>d776	89 00					.byte 	$89,$0
>d778	01					.byte 	1     ; *** Load Float -2813543.317504 ***
>d779	45 9d b9 ab				.dword 	$abb99d45
>d77d	96 80					.byte 	$96,$80
>d77f	2f					.byte 	$2f   ; *** Command / ***
>d780	01					.byte 	1     ; *** Load Float -0.00011493691886246932 ***
>d781	d8 49 0a f1				.dword 	$f10a49d8
>d785	73 80					.byte 	$73,$80
>d787	3d					.byte 	$3d   ; *** Command = ***
>d788	01					.byte 	1     ; *** Load Float 870.64 ***
>d789	c2 f5 a8 d9				.dword 	$d9a8f5c2
>d78d	8a 00					.byte 	$8a,$0
>d78f	01					.byte 	1     ; *** Load Float 3706728.742912 ***
>d790	f8 a2 3d e2				.dword 	$e23da2f8
>d794	96 00					.byte 	$96,$0
>d796	2a					.byte 	$2a   ; *** Command * ***
>d797	01					.byte 	1     ; *** Load Float 3227226312.728904 ***
>d798	c8 90 5b c0				.dword 	$c05b90c8
>d79c	a0 00					.byte 	$a0,$0
>d79e	3d					.byte 	$3d   ; *** Command = ***
>d79f	01					.byte 	1     ; *** Load Float -1.8161081243306398e-12 ***
>d7a0	e3 30 98 ff				.dword 	$ff9830e3
>d7a4	59 80					.byte 	$59,$80
>d7a6	01					.byte 	1     ; *** Load Float -499149.96326399996 ***
>d7a7	d3 be b9 f3				.dword 	$f3b9bed3
>d7ab	93 80					.byte 	$93,$80
>d7ad	2a					.byte 	$2a   ; *** Command * ***
>d7ae	01					.byte 	1     ; *** Load Float 9.065103035430908e-07 ***
>d7af	e9 e9 56 f3				.dword 	$f356e9e9
>d7b3	6c 00					.byte 	$6c,$0
>d7b5	3d					.byte 	$3d   ; *** Command = ***
>d7b6	01					.byte 	1     ; *** Load Float -534.11 ***
>d7b7	3d 0a 87 85				.dword 	$85870a3d
>d7bb	8a 80					.byte 	$8a,$80
>d7bd	01					.byte 	1     ; *** Load Float 0.404448 ***
>d7be	e9 ce 13 cf				.dword 	$cf13cee9
>d7c2	7f 00					.byte 	$7f,$0
>d7c4	2d					.byte 	$2d   ; *** Command - ***
>d7c5	01					.byte 	1     ; *** Load Float -534.514448 ***
>d7c6	b7 ec a0 85				.dword 	$85a0ecb7
>d7ca	8a 80					.byte 	$8a,$80
>d7cc	3d					.byte 	$3d   ; *** Command = ***
>d7cd	01					.byte 	1     ; *** Load Float -12.0 ***
>d7ce	00 00 00 c0				.dword 	$c0000000
>d7d2	84 80					.byte 	$84,$80
>d7d4	01					.byte 	1     ; *** Load Float 0.0 ***
>d7d5	00 00 00 00				.dword 	$0
>d7d9	80 40					.byte 	$80,$40
>d7db	2a					.byte 	$2a   ; *** Command * ***
>d7dc	01					.byte 	1     ; *** Load Float -0.0 ***
>d7dd	00 00 00 00				.dword 	$0
>d7e1	80 40					.byte 	$80,$40
>d7e3	3d					.byte 	$3d   ; *** Command = ***
>d7e4	01					.byte 	1     ; *** Load Float 433.78 ***
>d7e5	0a d7 e3 d8				.dword 	$d8e3d70a
>d7e9	89 00					.byte 	$89,$0
>d7eb	01					.byte 	1     ; *** Load Float -540.1 ***
>d7ec	66 66 06 87				.dword 	$87066666
>d7f0	8a 80					.byte 	$8a,$80
>d7f2	2a					.byte 	$2a   ; *** Command * ***
>d7f3	01					.byte 	1     ; *** Load Float -234284.578 ***
>d7f4	fd 24 cb e4				.dword 	$e4cb24fd
>d7f8	92 80					.byte 	$92,$80
>d7fa	3d					.byte 	$3d   ; *** Command = ***
>d7fb	01					.byte 	1     ; *** Load Float 1.078844 ***
>d7fc	68 8f 17 8a				.dword 	$8a178f68
>d800	81 00					.byte 	$81,$0
>d802	01					.byte 	1     ; *** Load Float -2.0 ***
>d803	00 00 00 80				.dword 	$80000000
>d807	82 80					.byte 	$82,$80
>d809	7e					.byte 	$7e   ; *** Command ~ ***
>d80a	01					.byte 	1     ; *** Load Float 1 ***
>d80b	00 00 00 80				.dword 	$80000000
>d80f	81 00					.byte 	$81,$0
>d811	3d					.byte 	$3d   ; *** Command = ***
>d812	01					.byte 	1     ; *** Load Float 880.8 ***
>d813	33 33 33 dc				.dword 	$dc333333
>d817	8a 00					.byte 	$8a,$0
>d819	01					.byte 	1     ; *** Load Float -2.906324425566709e-14 ***
>d81a	a8 a3 e3 82				.dword 	$82e3a3a8
>d81e	54 80					.byte 	$54,$80
>d820	2d					.byte 	$2d   ; *** Command - ***
>d821	01					.byte 	1     ; *** Load Float 880.8 ***
>d822	33 33 33 dc				.dword 	$dc333333
>d826	8a 00					.byte 	$8a,$0
>d828	3d					.byte 	$3d   ; *** Command = ***
>d829	01					.byte 	1     ; *** Load Float 550.39 ***
>d82a	c2 f5 98 89				.dword 	$8998f5c2
>d82e	8a 00					.byte 	$8a,$0
>d830	01					.byte 	1     ; *** Load Float -11.0 ***
>d831	00 00 00 b0				.dword 	$b0000000
>d835	84 80					.byte 	$84,$80
>d837	2b					.byte 	$2b   ; *** Command + ***
>d838	01					.byte 	1     ; *** Load Float 539.39 ***
>d839	c2 f5 d8 86				.dword 	$86d8f5c2
>d83d	8a 00					.byte 	$8a,$0
>d83f	3d					.byte 	$3d   ; *** Command = ***
>d840	01					.byte 	1     ; *** Load Float -7.0 ***
>d841	00 00 00 e0				.dword 	$e0000000
>d845	83 80					.byte 	$83,$80
>d847	01					.byte 	1     ; *** Load Float -4.283504486083985e-07 ***
>d848	91 09 f8 e5				.dword 	$e5f80991
>d84c	6b 80					.byte 	$6b,$80
>d84e	2a					.byte 	$2a   ; *** Command * ***
>d84f	01					.byte 	1     ; *** Load Float 2.9984531402587893e-06 ***
>d850	5f 08 39 c9				.dword 	$c939085f
>d854	6e 00					.byte 	$6e,$0
>d856	3d					.byte 	$3d   ; *** Command = ***
>d857	01					.byte 	1     ; *** Load Float 8.588673 ***
>d858	61 34 6b 89				.dword 	$896b3461
>d85c	84 00					.byte 	$84,$0
>d85e	01					.byte 	1     ; *** Load Float 322.2 ***
>d85f	99 99 19 a1				.dword 	$a1199999
>d863	89 00					.byte 	$89,$0
>d865	2a					.byte 	$2a   ; *** Command * ***
>d866	01					.byte 	1     ; *** Load Float 2767.2704406 ***
>d867	b9 53 f4 ac				.dword 	$acf453b9
>d86b	8c 00					.byte 	$8c,$0
>d86d	3d					.byte 	$3d   ; *** Command = ***
>d86e	01					.byte 	1     ; *** Load Float 389.71 ***
>d86f	47 e1 da c2				.dword 	$c2dae147
>d873	89 00					.byte 	$89,$0
>d875	01					.byte 	1     ; *** Load Float 2.666335 ***
>d876	8e 3b a5 aa				.dword 	$aaa53b8e
>d87a	82 00					.byte 	$82,$0
>d87c	2a					.byte 	$2a   ; *** Command * ***
>d87d	01					.byte 	1     ; *** Load Float 1039.09741285 ***
>d87e	01 1e e3 81				.dword 	$81e31e01
>d882	8b 00					.byte 	$8b,$0
>d884	3d					.byte 	$3d   ; *** Command = ***
>d885	01					.byte 	1     ; *** Load Float -79480.09472 ***
>d886	1f 0c 3c 9b				.dword 	$9b3c0c1f
>d88a	91 80					.byte 	$91,$80
>d88c	01					.byte 	1     ; *** Load Float 6.0 ***
>d88d	00 00 00 c0				.dword 	$c0000000
>d891	83 00					.byte 	$83,$0
>d893	2d					.byte 	$2d   ; *** Command - ***
>d894	01					.byte 	1     ; *** Load Float -79486.09472 ***
>d895	1f 0c 3f 9b				.dword 	$9b3f0c1f
>d899	91 80					.byte 	$91,$80
>d89b	3d					.byte 	$3d   ; *** Command = ***
>d89c	01					.byte 	1     ; *** Load Float -707.91 ***
>d89d	70 3d fa b0				.dword 	$b0fa3d70
>d8a1	8a 80					.byte 	$8a,$80
>d8a3	01					.byte 	1     ; *** Load Float 4.857906 ***
>d8a4	48 f7 73 9b				.dword 	$9b73f748
>d8a8	83 00					.byte 	$83,$0
>d8aa	2b					.byte 	$2b   ; *** Command + ***
>d8ab	01					.byte 	1     ; *** Load Float -703.052094 ***
>d8ac	82 55 c3 af				.dword 	$afc35582
>d8b0	8a 80					.byte 	$8a,$80
>d8b2	3d					.byte 	$3d   ; *** Command = ***
>d8b3	01					.byte 	1     ; *** Load Float -528.02 ***
>d8b4	ae 47 01 84				.dword 	$840147ae
>d8b8	8a 80					.byte 	$8a,$80
>d8ba	01					.byte 	1     ; *** Load Float -3861725354.9178877 ***
>d8bb	aa 40 2d e6				.dword 	$e62d40aa
>d8bf	a0 80					.byte 	$a0,$80
>d8c1	7e					.byte 	$7e   ; *** Command ~ ***
>d8c2	01					.byte 	1     ; *** Load Float 1 ***
>d8c3	00 00 00 80				.dword 	$80000000
>d8c7	81 00					.byte 	$81,$0
>d8c9	3d					.byte 	$3d   ; *** Command = ***
>d8ca	01					.byte 	1     ; *** Load Float -384.72 ***
>d8cb	f5 28 5c c0				.dword 	$c05c28f5
>d8cf	89 80					.byte 	$89,$80
>d8d1	01					.byte 	1     ; *** Load Float 19.0 ***
>d8d2	00 00 00 98				.dword 	$98000000
>d8d6	85 00					.byte 	$85,$0
>d8d8	7e					.byte 	$7e   ; *** Command ~ ***
>d8d9	01					.byte 	1     ; *** Load Float -1 ***
>d8da	00 00 00 80				.dword 	$80000000
>d8de	81 80					.byte 	$81,$80
>d8e0	3d					.byte 	$3d   ; *** Command = ***
>d8e1	01					.byte 	1     ; *** Load Float -1.0370314121246338e-09 ***
>d8e2	8f 4c 87 8e				.dword 	$8e874c8f
>d8e6	63 80					.byte 	$63,$80
>d8e8	01					.byte 	1     ; *** Load Float -376.49 ***
>d8e9	51 b8 3e bc				.dword 	$bc3eb851
>d8ed	89 80					.byte 	$89,$80
>d8ef	2b					.byte 	$2b   ; *** Command + ***
>d8f0	01					.byte 	1     ; *** Load Float -376.49000000103706 ***
>d8f1	51 b8 3e bc				.dword 	$bc3eb851
>d8f5	89 80					.byte 	$89,$80
>d8f7	3d					.byte 	$3d   ; *** Command = ***
>d8f8	01					.byte 	1     ; *** Load Float 17.0 ***
>d8f9	00 00 00 88				.dword 	$88000000
>d8fd	85 00					.byte 	$85,$0
>d8ff	01					.byte 	1     ; *** Load Float 17.0 ***
>d900	00 00 00 88				.dword 	$88000000
>d904	85 00					.byte 	$85,$0
>d906	7e					.byte 	$7e   ; *** Command ~ ***
>d907	01					.byte 	1     ; *** Load Float 0 ***
>d908	00 00 00 00				.dword 	$0
>d90c	80 40					.byte 	$80,$40
>d90e	3d					.byte 	$3d   ; *** Command = ***
>d90f	01					.byte 	1     ; *** Load Float 0.0 ***
>d910	00 00 00 00				.dword 	$0
>d914	80 40					.byte 	$80,$40
>d916	01					.byte 	1     ; *** Load Float 8.489565 ***
>d917	1c 42 d5 87				.dword 	$87d5421c
>d91b	84 00					.byte 	$84,$0
>d91d	2a					.byte 	$2a   ; *** Command * ***
>d91e	01					.byte 	1     ; *** Load Float 0.0 ***
>d91f	00 00 00 00				.dword 	$0
>d923	80 40					.byte 	$80,$40
>d925	3d					.byte 	$3d   ; *** Command = ***
>d926	01					.byte 	1     ; *** Load Float -695.8 ***
>d927	33 33 f3 ad				.dword 	$adf33333
>d92b	8a 80					.byte 	$8a,$80
>d92d	01					.byte 	1     ; *** Load Float -16.0 ***
>d92e	00 00 00 80				.dword 	$80000000
>d932	85 80					.byte 	$85,$80
>d934	2d					.byte 	$2d   ; *** Command - ***
>d935	01					.byte 	1     ; *** Load Float -679.8 ***
>d936	33 33 f3 a9				.dword 	$a9f33333
>d93a	8a 80					.byte 	$8a,$80
>d93c	3d					.byte 	$3d   ; *** Command = ***
>d93d	01					.byte 	1     ; *** Load Float 10.0 ***
>d93e	00 00 00 a0				.dword 	$a0000000
>d942	84 00					.byte 	$84,$0
>d944	01					.byte 	1     ; *** Load Float 4.0 ***
>d945	00 00 00 80				.dword 	$80000000
>d949	83 00					.byte 	$83,$0
>d94b	7e					.byte 	$7e   ; *** Command ~ ***
>d94c	01					.byte 	1     ; *** Load Float 1 ***
>d94d	00 00 00 80				.dword 	$80000000
>d951	81 00					.byte 	$81,$0
>d953	3d					.byte 	$3d   ; *** Command = ***
>d954	01					.byte 	1     ; *** Load Float 97.84 ***
>d955	7a 14 ae c3				.dword 	$c3ae147a
>d959	87 00					.byte 	$87,$0
>d95b	01					.byte 	1     ; *** Load Float -8.0 ***
>d95c	00 00 00 80				.dword 	$80000000
>d960	84 80					.byte 	$84,$80
>d962	2b					.byte 	$2b   ; *** Command + ***
>d963	01					.byte 	1     ; *** Load Float 89.84 ***
>d964	7a 14 ae b3				.dword 	$b3ae147a
>d968	87 00					.byte 	$87,$0
>d96a	3d					.byte 	$3d   ; *** Command = ***
>d96b	01					.byte 	1     ; *** Load Float 0.0 ***
>d96c	00 00 00 00				.dword 	$0
>d970	80 40					.byte 	$80,$40
>d972	01					.byte 	1     ; *** Load Float -477.0 ***
>d973	00 00 80 ee				.dword 	$ee800000
>d977	89 80					.byte 	$89,$80
>d979	2a					.byte 	$2a   ; *** Command * ***
>d97a	01					.byte 	1     ; *** Load Float -0.0 ***
>d97b	00 00 00 00				.dword 	$0
>d97f	80 40					.byte 	$80,$40
>d981	3d					.byte 	$3d   ; *** Command = ***
>d982	01					.byte 	1     ; *** Load Float -0.599509 ***
>d983	fc 6b 79 99				.dword 	$99796bfc
>d987	80 80					.byte 	$80,$80
>d989	01					.byte 	1     ; *** Load Float 8.892264702353713e-16 ***
>d98a	8e aa 26 80				.dword 	$8026aa8e
>d98e	4f 00					.byte 	$4f,$0
>d990	2a					.byte 	$2a   ; *** Command * ***
>d991	01					.byte 	1     ; *** Load Float -5.330992719443372e-16 ***
>d992	89 c8 a7 99				.dword 	$99a7c889
>d996	4e 80					.byte 	$4e,$80
>d998	3d					.byte 	$3d   ; *** Command = ***
>d999	01					.byte 	1     ; *** Load Float -7.0 ***
>d99a	00 00 00 e0				.dword 	$e0000000
>d99e	83 80					.byte 	$83,$80
>d9a0	01					.byte 	1     ; *** Load Float 676.21 ***
>d9a1	a3 70 0d a9				.dword 	$a90d70a3
>d9a5	8a 00					.byte 	$8a,$0
>d9a7	2f					.byte 	$2f   ; *** Command / ***
>d9a8	01					.byte 	1     ; *** Load Float -0.0103518137856583 ***
>d9a9	6a a7 9a a9				.dword 	$a99aa76a
>d9ad	7a 80					.byte 	$7a,$80
>d9af	3d					.byte 	$3d   ; *** Command = ***
>d9b0	01					.byte 	1     ; *** Load Float 891.6 ***
>d9b1	66 66 e6 de				.dword 	$dee66666
>d9b5	8a 00					.byte 	$8a,$0
>d9b7	01					.byte 	1     ; *** Load Float -10.0 ***
>d9b8	00 00 00 a0				.dword 	$a0000000
>d9bc	84 80					.byte 	$84,$80
>d9be	2d					.byte 	$2d   ; *** Command - ***
>d9bf	01					.byte 	1     ; *** Load Float 901.6 ***
>d9c0	66 66 66 e1				.dword 	$e1666666
>d9c4	8a 00					.byte 	$8a,$0
>d9c6	3d					.byte 	$3d   ; *** Command = ***
>d9c7	01					.byte 	1     ; *** Load Float 6.0 ***
>d9c8	00 00 00 c0				.dword 	$c0000000
>d9cc	83 00					.byte 	$83,$0
>d9ce	01					.byte 	1     ; *** Load Float 817.21 ***
>d9cf	a3 70 4d cc				.dword 	$cc4d70a3
>d9d3	8a 00					.byte 	$8a,$0
>d9d5	2a					.byte 	$2a   ; *** Command * ***
>d9d6	01					.byte 	1     ; *** Load Float 4903.26 ***
>d9d7	7a 14 3a 99				.dword 	$993a147a
>d9db	8d 00					.byte 	$8d,$0
>d9dd	3d					.byte 	$3d   ; *** Command = ***
>d9de	01					.byte 	1     ; *** Load Float 9.323809 ***
>d9df	58 52 2e 95				.dword 	$952e5258
>d9e3	84 00					.byte 	$84,$0
>d9e5	01					.byte 	1     ; *** Load Float 21.88 ***
>d9e6	70 3d 0a af				.dword 	$af0a3d70
>d9ea	85 00					.byte 	$85,$0
>d9ec	2a					.byte 	$2a   ; *** Command * ***
>d9ed	01					.byte 	1     ; *** Load Float 204.00494092 ***
>d9ee	ce 43 01 cc				.dword 	$cc0143ce
>d9f2	88 00					.byte 	$88,$0
>d9f4	3d					.byte 	$3d   ; *** Command = ***
>d9f5	01					.byte 	1     ; *** Load Float -8.0 ***
>d9f6	00 00 00 80				.dword 	$80000000
>d9fa	84 80					.byte 	$84,$80
>d9fc	01					.byte 	1     ; *** Load Float 2.53756 ***
>d9fd	0e 62 67 a2				.dword 	$a267620e
>da01	82 00					.byte 	$82,$0
>da03	2b					.byte 	$2b   ; *** Command + ***
>da04	01					.byte 	1     ; *** Load Float -5.46244 ***
>da05	f8 4e cc ae				.dword 	$aecc4ef8
>da09	83 80					.byte 	$83,$80
>da0b	3d					.byte 	$3d   ; *** Command = ***
>da0c	01					.byte 	1     ; *** Load Float -139.83 ***
>da0d	e1 7a d4 8b				.dword 	$8bd47ae1
>da11	88 80					.byte 	$88,$80
>da13	01					.byte 	1     ; *** Load Float -358.13 ***
>da14	d7 a3 10 b3				.dword 	$b310a3d7
>da18	89 80					.byte 	$89,$80
>da1a	2f					.byte 	$2f   ; *** Command / ***
>da1b	01					.byte 	1     ; *** Load Float 0.3904448105436574 ***
>da1c	d8 61 e8 c7				.dword 	$c7e861d8
>da20	7f 00					.byte 	$7f,$0
>da22	3d					.byte 	$3d   ; *** Command = ***
>da23	01					.byte 	1     ; *** Load Float -237.72 ***
>da24	eb 51 b8 ed				.dword 	$edb851eb
>da28	88 80					.byte 	$88,$80
>da2a	01					.byte 	1     ; *** Load Float -280449281895522.38 ***
>da2b	d3 2f 11 ff				.dword 	$ff112fd3
>da2f	b0 80					.byte 	$b0,$80
>da31	7e					.byte 	$7e   ; *** Command ~ ***
>da32	01					.byte 	1     ; *** Load Float 1 ***
>da33	00 00 00 80				.dword 	$80000000
>da37	81 00					.byte 	$81,$0
>da39	3d					.byte 	$3d   ; *** Command = ***
>da3a	01					.byte 	1     ; *** Load Float -8.0 ***
>da3b	00 00 00 80				.dword 	$80000000
>da3f	84 80					.byte 	$84,$80
>da41	01					.byte 	1     ; *** Load Float -790.53 ***
>da42	85 eb a1 c5				.dword 	$c5a1eb85
>da46	8a 80					.byte 	$8a,$80
>da48	2d					.byte 	$2d   ; *** Command - ***
>da49	01					.byte 	1     ; *** Load Float 782.53 ***
>da4a	85 eb a1 c3				.dword 	$c3a1eb85
>da4e	8a 00					.byte 	$8a,$0
>da50	3d					.byte 	$3d   ; *** Command = ***
>da51	01					.byte 	1     ; *** Load Float 3.3586978912353515e-08 ***
>da52	1b 46 41 90				.dword 	$9041461b
>da56	68 00					.byte 	$68,$0
>da58	01					.byte 	1     ; *** Load Float 4.274808 ***
>da59	25 3a cb 88				.dword 	$88cb3a25
>da5d	83 00					.byte 	$83,$0
>da5f	2b					.byte 	$2b   ; *** Command + ***
>da60	01					.byte 	1     ; *** Load Float 4.274808033586979 ***
>da61	37 3a cb 88				.dword 	$88cb3a37
>da65	83 00					.byte 	$83,$0
>da67	3d					.byte 	$3d   ; *** Command = ***
>da68	01					.byte 	1     ; *** Load Float 326.77 ***
>da69	5c 8f 62 a3				.dword 	$a3628f5c
>da6d	89 00					.byte 	$89,$0
>da6f	01					.byte 	1     ; *** Load Float 7.291884 ***
>da70	1d 1d 57 e9				.dword 	$e9571d1d
>da74	83 00					.byte 	$83,$0
>da76	7e					.byte 	$7e   ; *** Command ~ ***
>da77	01					.byte 	1     ; *** Load Float 1 ***
>da78	00 00 00 80				.dword 	$80000000
>da7c	81 00					.byte 	$81,$0
>da7e	3d					.byte 	$3d   ; *** Command = ***
>da7f	01					.byte 	1     ; *** Load Float 8.507193 ***
>da80	68 76 1d 88				.dword 	$881d7668
>da84	84 00					.byte 	$84,$0
>da86	01					.byte 	1     ; *** Load Float 2.430942 ***
>da87	c1 8d 94 9b				.dword 	$9b948dc1
>da8b	82 00					.byte 	$82,$0
>da8d	2a					.byte 	$2a   ; *** Command * ***
>da8e	01					.byte 	1     ; *** Load Float 20.680492765805997 ***
>da8f	30 a6 71 a5				.dword 	$a571a630
>da93	85 00					.byte 	$85,$0
>da95	3d					.byte 	$3d   ; *** Command = ***
>da96	01					.byte 	1     ; *** Load Float -19.0 ***
>da97	00 00 00 98				.dword 	$98000000
>da9b	85 80					.byte 	$85,$80
>da9d	01					.byte 	1     ; *** Load Float 8.25301 ***
>da9e	36 54 0c 84				.dword 	$840c5436
>daa2	84 00					.byte 	$84,$0
>daa4	2a					.byte 	$2a   ; *** Command * ***
>daa5	01					.byte 	1     ; *** Load Float -156.80719 ***
>daa6	00 a4 ce 9c				.dword 	$9ccea400
>daaa	88 80					.byte 	$88,$80
>daac	3d					.byte 	$3d   ; *** Command = ***
>daad	01					.byte 	1     ; *** Load Float -958.05 ***
>daae	33 33 83 ef				.dword 	$ef833333
>dab2	8a 80					.byte 	$8a,$80
>dab4	01					.byte 	1     ; *** Load Float 5.098869 ***
>dab5	52 ef 29 a3				.dword 	$a329ef52
>dab9	83 00					.byte 	$83,$0
>dabb	7e					.byte 	$7e   ; *** Command ~ ***
>dabc	01					.byte 	1     ; *** Load Float -1 ***
>dabd	00 00 00 80				.dword 	$80000000
>dac1	81 80					.byte 	$81,$80
>dac3	3d					.byte 	$3d   ; *** Command = ***
>dac4	01					.byte 	1     ; *** Load Float 4.678017 ***
>dac5	b5 50 b2 95				.dword 	$95b250b5
>dac9	83 00					.byte 	$83,$0
>dacb	01					.byte 	1     ; *** Load Float 865.763328 ***
>dacc	5d da 70 d8				.dword 	$d870da5d
>dad0	8a 00					.byte 	$8a,$0
>dad2	2d					.byte 	$2d   ; *** Command - ***
>dad3	01					.byte 	1     ; *** Load Float -861.085311 ***
>dad4	bc 75 45 d7				.dword 	$d74575bc
>dad8	8a 80					.byte 	$8a,$80
>dada	3d					.byte 	$3d   ; *** Command = ***
>dadb	01					.byte 	1     ; *** Load Float -600.38 ***
>dadc	eb 51 18 96				.dword 	$961851eb
>dae0	8a 80					.byte 	$8a,$80
>dae2	01					.byte 	1     ; *** Load Float 13.06 ***
>dae3	8f c2 f5 d0				.dword 	$d0f5c28f
>dae7	84 00					.byte 	$84,$0
>dae9	2b					.byte 	$2b   ; *** Command + ***
>daea	01					.byte 	1     ; *** Load Float -587.32 ***
>daeb	e1 7a d4 92				.dword 	$92d47ae1
>daef	8a 80					.byte 	$8a,$80
>daf1	3d					.byte 	$3d   ; *** Command = ***
>daf2	01					.byte 	1     ; *** Load Float 762.61 ***
>daf3	3d 0a a7 be				.dword 	$bea70a3d
>daf7	8a 00					.byte 	$8a,$0
>daf9	01					.byte 	1     ; *** Load Float 0.797814 ***
>dafa	ce 89 3d cc				.dword 	$cc3d89ce
>dafe	80 00					.byte 	$80,$0
>db00	2b					.byte 	$2b   ; *** Command + ***
>db01	01					.byte 	1     ; *** Load Float 763.407814 ***
>db02	9f 19 da be				.dword 	$beda199f
>db06	8a 00					.byte 	$8a,$0
>db08	3d					.byte 	$3d   ; *** Command = ***
>db09	01					.byte 	1     ; *** Load Float 0.0 ***
>db0a	00 00 00 00				.dword 	$0
>db0e	80 40					.byte 	$80,$40
>db10	01					.byte 	1     ; *** Load Float 7.346315 ***
>db11	31 03 15 eb				.dword 	$eb150331
>db15	83 00					.byte 	$83,$0
>db17	2d					.byte 	$2d   ; *** Command - ***
>db18	01					.byte 	1     ; *** Load Float -7.346315 ***
>db19	31 03 15 eb				.dword 	$eb150331
>db1d	83 80					.byte 	$83,$80
>db1f	3d					.byte 	$3d   ; *** Command = ***
>db20	01					.byte 	1     ; *** Load Float 6.228733 ***
>db21	de c7 51 c7				.dword 	$c751c7de
>db25	83 00					.byte 	$83,$0
>db27	01					.byte 	1     ; *** Load Float 5.0 ***
>db28	00 00 00 a0				.dword 	$a0000000
>db2c	83 00					.byte 	$83,$0
>db2e	7e					.byte 	$7e   ; *** Command ~ ***
>db2f	01					.byte 	1     ; *** Load Float 1 ***
>db30	00 00 00 80				.dword 	$80000000
>db34	81 00					.byte 	$81,$0
>db36	3d					.byte 	$3d   ; *** Command = ***
>db37	01					.byte 	1     ; *** Load Float -284.89 ***
>db38	85 eb 71 8e				.dword 	$8e71eb85
>db3c	89 80					.byte 	$89,$80
>db3e	01					.byte 	1     ; *** Load Float 7.487306 ***
>db3f	c0 02 98 ef				.dword 	$ef9802c0
>db43	83 00					.byte 	$83,$0
>db45	2d					.byte 	$2d   ; *** Command - ***
>db46	01					.byte 	1     ; *** Load Float -292.377306 ***
>db47	90 4b 30 92				.dword 	$92304b90
>db4b	89 80					.byte 	$89,$80
>db4d	3d					.byte 	$3d   ; *** Command = ***
>db4e	01					.byte 	1     ; *** Load Float -395.94 ***
>db4f	eb 51 f8 c5				.dword 	$c5f851eb
>db53	89 80					.byte 	$89,$80
>db55	01					.byte 	1     ; *** Load Float -395.94 ***
>db56	eb 51 f8 c5				.dword 	$c5f851eb
>db5a	89 80					.byte 	$89,$80
>db5c	2d					.byte 	$2d   ; *** Command - ***
>db5d	01					.byte 	1     ; *** Load Float 0.0 ***
>db5e	00 00 00 00				.dword 	$0
>db62	80 40					.byte 	$80,$40
>db64	3d					.byte 	$3d   ; *** Command = ***
>db65	01					.byte 	1	; *** Load Integer 99999 ***
>db66	9f 86 01 00				.dword 	$1869f
>db6a	00 01					.byte 	0,$01

;******  Return to file: modules/testing/fptest.asm

>db6c	00						.byte 	0

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>db6d	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	00 c0						.word 	StartROM
>fffe	f8 ff						.word DefaultInterrupt

;******  End of listing
