
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -X -b -q -L rom.lst -o rom.bin basic.asm
; Fri Aug 23 08:26:39 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				cpu = "65816"
="em65816"				hardware = "em65816"
=1					hasFloat = 1
=1					hasInteger = 1
=253					maxString = 253

;******  Processing file: modules/float/fpmacros.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/em65816/src_em65816.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/handlers.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/common.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/data/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zCodePtr:	.dword ? 						; code pointer.
>001a					zLTemp1:	.dword ?						; long word (used in multiply)
>001e					zGenPtr:	.word ? 						; general pointer.
>0020					zTempStr:	.word ?							; temporary string allocator. When high zero, not initialised.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					UserVector .fill 4 							; USR(x) calls this.
>0304					LocalVector .fill 4 						; Indirect calls call this.
>0308					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>030c					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>030d					XS_Type 	.byte ? 						; bit 7 sign (float only)
=6					XS_Size = 6
=782					XS2_Mantissa = XS_Mantissa+XS_Size
=786					XS2_Exponent = XS_Exponent+XS_Size
=787					XS2_Type = XS_Type+XS_Size
=788					XS3_Mantissa = XS_Mantissa+XS_Size*2
=792					XS3_Exponent = XS_Exponent+XS_Size*2
=793					XS3_Type = XS_Type+XS_Size*2
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					ExpTemp:	.byte ?							; Working temp for exponents.
>0424					ExpCount:	.byte ? 						; Count of decimal exponents.
>0425					SignCount:	.byte ?							; Integer Divide Sign Counts.
>0426					StringPtr:	.byte ? 						; Top of free memory (for string allocation)
>0427					TempStringWriteIndex: .byte ? 				; Write offset.
>0428					ValSign: 	.byte ? 						; sign flag for val()
>0429					RandomSeed:	.dword ? 						; Random seed.
>042d					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>042f					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0431					Tim_SR:		.byte ? 						; Processor Status
>0432					Tim_A:		.byte ? 						; Processor Registers
>0433					Tim_X:		.byte ?
>0434					Tim_Y:		.byte ?
>0435					Tim_Z:		.byte ?
>0436					Tim_SP:		.byte ?							; Stack Pointer

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

=$8000					HighMemory = $8000
.1000					BasicProgram:

;******  Processing file: modules/hardware/../basic/testcode/testcode.src

>1000	13 0a 00 d9 fe 07 61 62			.byte	$13,$0a,$00,$d9,$fe,$07,$61,$62
>1008	63 64 65 be ff 06 68 69			.byte	$63,$64,$65,$be,$ff,$06,$68,$69
>1010	20 21 00 00				.byte	$20,$21,$00,$00

;******  Return to file: modules/hardware/em65816.asm

.c000					StartROM:
.c000	18		clc				clc
.c001	fb		xce				xce
.c002	c2 30		rep #$30			rep 	#$30
.c004	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c007	1b		tcs				tcs
.c008	e2 30		sep #$30			sep 	#$30 						; clear AXY in 16 bit.
.c00a	c2 30		rep #$30			rep 	#$30
.c00c	a9 00 00	lda #$0000			lda 	#$0000
.c00f	aa		tax				tax
.c010	a8		tay				tay
.c011	e2 30		sep #$30			sep 	#$30
.c013	5c dc 83 01	jmp $0183dc		jmp BASIC_Start
.c017					TIM_BreakHandler:
.c017	5c 89 96 01	jmp $019689			jmp 	TIM_BreakVector

;******  Processing file: modules/hardware/../basic/header/header.src

=$93					firstKeywordMinus = $93
=$8f					firstKeywordPlus = $8f
=$98					firstUnaryFunction = $98
=$b4					lastUnaryFunction = $b4
.018000					VectorTable:
>018000	ea 85					.word BinaryOp_And         & $FFFF ; $80 and
>018002	12 86					.word BinaryOp_Or          & $FFFF ; $81 or
>018004	3a 86					.word BinaryOp_Xor         & $FFFF ; $82 xor
>018006	3a 86					.word BinaryOp_Eor         & $FFFF ; $83 eor
>018008	7d 86					.word Binary_Equal         & $FFFF ; $84 =
>01800a	9c 86					.word Binary_NotEqual      & $FFFF ; $85 <>
>01800c	a5 86					.word Binary_Less          & $FFFF ; $86 <
>01800e	ae 86					.word Binary_LessEqual     & $FFFF ; $87 <=
>018010	c0 86					.word Binary_Greater       & $FFFF ; $88 >
>018012	b7 86					.word Binary_GreaterEqual  & $FFFF ; $89 >=
>018014	55 87					.word BinaryOp_Add         & $FFFF ; $8a +
>018016	75 87					.word BinaryOp_Subtract    & $FFFF ; $8b -
>018018	88 87					.word BinaryOp_Multiply    & $FFFF ; $8c *
>01801a	9b 87					.word BinaryOp_Divide      & $FFFF ; $8d /
>01801c	b2 80					.word NotImplemented       & $FFFF ; $8e ^
>01801e	b2 80					.word NotImplemented       & $FFFF ; $8f if
>018020	b2 80					.word NotImplemented       & $FFFF ; $90 while
>018022	b2 80					.word NotImplemented       & $FFFF ; $91 repeat
>018024	b2 80					.word NotImplemented       & $FFFF ; $92 for
>018026	b2 80					.word NotImplemented       & $FFFF ; $93 then
>018028	b2 80					.word NotImplemented       & $FFFF ; $94 endif
>01802a	b2 80					.word NotImplemented       & $FFFF ; $95 wend
>01802c	b2 80					.word NotImplemented       & $FFFF ; $96 until
>01802e	b2 80					.word NotImplemented       & $FFFF ; $97 next
>018030	b2 80					.word NotImplemented       & $FFFF ; $98 not
>018032	b2 80					.word NotImplemented       & $FFFF ; $99 fn(
>018034	bd 88					.word Unary_Abs            & $FFFF ; $9a abs(
>018036	01 8a					.word Unary_Asc            & $FFFF ; $9b asc(
>018038	01 95					.word Unary_Int            & $FFFF ; $9c int(
>01803a	db 88					.word Unary_Peek           & $FFFF ; $9d peek(
>01803c	78 94					.word Unary_Rnd            & $FFFF ; $9e rnd(
>01803e	4f 89					.word Unary_Usr            & $FFFF ; $9f usr(
>018040	41 8a					.word Unary_Left           & $FFFF ; $a0 left$(
>018042	58 8a					.word Unary_Right          & $FFFF ; $a1 right$(
>018044	26 8a					.word Unary_Mid            & $FFFF ; $a2 mid$(
>018046	81 8b					.word Unary_Spc            & $FFFF ; $a3 spc(
>018048	ce 89					.word Unary_Str            & $FFFF ; $a4 str$(
>01804a	61 89					.word Unary_Val            & $FFFF ; $a5 val(
>01804c	17 8a					.word Unary_Len            & $FFFF ; $a6 len(
>01804e	9f 8a					.word Unary_Hex            & $FFFF ; $a7 hex$(
>018050	b2 80					.word NotImplemented       & $FFFF ; $a8 sin(
>018052	b2 80					.word NotImplemented       & $FFFF ; $a9 cos(
>018054	b2 80					.word NotImplemented       & $FFFF ; $aa tan(
>018056	b2 80					.word NotImplemented       & $FFFF ; $ab atn(
>018058	b2 80					.word NotImplemented       & $FFFF ; $ac exp(
>01805a	b2 80					.word NotImplemented       & $FFFF ; $ad log(
>01805c	b2 80					.word NotImplemented       & $FFFF ; $ae sqr(
>01805e	f9 8a					.word Unary_Dec            & $FFFF ; $af dec(
>018060	df 88					.word Unary_Deek           & $FFFF ; $b0 deek(
>018062	e3 88					.word Unary_Leek           & $FFFF ; $b1 leek(
>018064	17 89					.word Unary_Mod            & $FFFF ; $b2 mod(
>018066	6b 88					.word Unary_Sgn            & $FFFF ; $b3 sgn(
>018068	60 8b					.word Unary_Chr            & $FFFF ; $b4 chr$(
>01806a	b2 80					.word NotImplemented       & $FFFF ; $b5 $(
>01806c	b2 80					.word NotImplemented       & $FFFF ; $b6 $
>01806e	b2 80					.word NotImplemented       & $FFFF ; $b7 #(
>018070	b2 80					.word NotImplemented       & $FFFF ; $b8 #
>018072	b2 80					.word NotImplemented       & $FFFF ; $b9 %(
>018074	b2 80					.word NotImplemented       & $FFFF ; $ba %
>018076	b2 80					.word NotImplemented       & $FFFF ; $bb (
>018078	b2 80					.word NotImplemented       & $FFFF ; $bc )
>01807a	b2 80					.word NotImplemented       & $FFFF ; $bd ,
>01807c	b2 80					.word NotImplemented       & $FFFF ; $be :
>01807e	b2 80					.word NotImplemented       & $FFFF ; $bf ;
>018080	b2 80					.word NotImplemented       & $FFFF ; $c0 def
>018082	19 84					.word CLR_Command          & $FFFF ; $c1 clr
>018084	b2 80					.word NotImplemented       & $FFFF ; $c3 data
>018086	b2 80					.word NotImplemented       & $FFFF ; $c4 read
>018088	b2 80					.word NotImplemented       & $FFFF ; $c5 dim
>01808a	b2 80					.word NotImplemented       & $FFFF ; $c6 to
>01808c	b2 80					.word NotImplemented       & $FFFF ; $c7 step
>01808e	b2 80					.word NotImplemented       & $FFFF ; $c8 gosub
>018090	b2 80					.word NotImplemented       & $FFFF ; $c9 return
>018092	b2 80					.word NotImplemented       & $FFFF ; $ca goto
>018094	b2 80					.word NotImplemented       & $FFFF ; $cb input
>018096	b2 80					.word NotImplemented       & $FFFF ; $cc let
>018098	b2 80					.word NotImplemented       & $FFFF ; $cd list
>01809a	b2 80					.word NotImplemented       & $FFFF ; $ce new
>01809c	b2 80					.word NotImplemented       & $FFFF ; $cf old
>01809e	b2 80					.word NotImplemented       & $FFFF ; $d0 on
>0180a0	b2 80					.word NotImplemented       & $FFFF ; $d1 restore
>0180a2	b2 80					.word NotImplemented       & $FFFF ; $d2 poke
>0180a4	b2 80					.word NotImplemented       & $FFFF ; $d3 print
>0180a6	b2 80					.word NotImplemented       & $FFFF ; $d4 run
>0180a8	b2 80					.word NotImplemented       & $FFFF ; $d5 stop
>0180aa	b2 80					.word NotImplemented       & $FFFF ; $d6 wait
>0180ac	b2 80					.word NotImplemented       & $FFFF ; $d7 doke
>0180ae	b2 80					.word NotImplemented       & $FFFF ; $d8 loke
>0180b0	b2 80					.word NotImplemented       & $FFFF ; $d9 assert
.0180b2					NotImplemented:
.0180b2	80 fe		bra $0180b2		_error: bra _error
.0180b4					BinaryPrecedence:
>0180b4	01					.byte 1    ; $80 and
>0180b5	01					.byte 1    ; $81 or
>0180b6	01					.byte 1    ; $82 xor
>0180b7	01					.byte 1    ; $83 eor
>0180b8	02					.byte 2    ; $84 =
>0180b9	02					.byte 2    ; $85 <>
>0180ba	02					.byte 2    ; $86 <
>0180bb	02					.byte 2    ; $87 <=
>0180bc	02					.byte 2    ; $88 >
>0180bd	02					.byte 2    ; $89 >=
>0180be	03					.byte 3    ; $8a +
>0180bf	03					.byte 3    ; $8b -
>0180c0	04					.byte 4    ; $8c *
>0180c1	04					.byte 4    ; $8d /
>0180c2	05					.byte 5    ; $8e ^
.0180c3					KeywordText:
>0180c3	41 4e c4				.byte $41,$4e,$c4                      ; $80 and
>0180c6	4f d2					.byte $4f,$d2                          ; $81 or
>0180c8	58 4f d2				.byte $58,$4f,$d2                      ; $82 xor
>0180cb	45 4f d2				.byte $45,$4f,$d2                      ; $83 eor
>0180ce	bd					.byte $bd                              ; $84 =
>0180cf	3c be					.byte $3c,$be                          ; $85 <>
>0180d1	bc					.byte $bc                              ; $86 <
>0180d2	3c bd					.byte $3c,$bd                          ; $87 <=
>0180d4	be					.byte $be                              ; $88 >
>0180d5	3e bd					.byte $3e,$bd                          ; $89 >=
>0180d7	ab					.byte $ab                              ; $8a +
>0180d8	ad					.byte $ad                              ; $8b -
>0180d9	aa					.byte $aa                              ; $8c *
>0180da	af					.byte $af                              ; $8d /
>0180db	de					.byte $de                              ; $8e ^
>0180dc	49 c6					.byte $49,$c6                          ; $8f if
>0180de	57 48 49 4c c5				.byte $57,$48,$49,$4c,$c5              ; $90 while
>0180e3	52 45 50 45 41 d4			.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
>0180e9	46 4f d2				.byte $46,$4f,$d2                      ; $92 for
>0180ec	54 48 45 ce				.byte $54,$48,$45,$ce                  ; $93 then
>0180f0	45 4e 44 49 c6				.byte $45,$4e,$44,$49,$c6              ; $94 endif
>0180f5	57 45 4e c4				.byte $57,$45,$4e,$c4                  ; $95 wend
>0180f9	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc              ; $96 until
>0180fe	4e 45 58 d4				.byte $4e,$45,$58,$d4                  ; $97 next
>018102	4e 4f d4				.byte $4e,$4f,$d4                      ; $98 not
>018105	46 4e a8				.byte $46,$4e,$a8                      ; $99 fn(
>018108	41 42 53 a8				.byte $41,$42,$53,$a8                  ; $9a abs(
>01810c	41 53 43 a8				.byte $41,$53,$43,$a8                  ; $9b asc(
>018110	49 4e 54 a8				.byte $49,$4e,$54,$a8                  ; $9c int(
>018114	50 45 45 4b a8				.byte $50,$45,$45,$4b,$a8              ; $9d peek(
>018119	52 4e 44 a8				.byte $52,$4e,$44,$a8                  ; $9e rnd(
>01811d	55 53 52 a8				.byte $55,$53,$52,$a8                  ; $9f usr(
>018121	4c 45 46 54 24 a8			.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
>018127	52 49 47 48 54 24 a8			.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
>01812e	4d 49 44 24 a8				.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
>018133	53 50 43 a8				.byte $53,$50,$43,$a8                  ; $a3 spc(
>018137	53 54 52 24 a8				.byte $53,$54,$52,$24,$a8              ; $a4 str$(
>01813c	56 41 4c a8				.byte $56,$41,$4c,$a8                  ; $a5 val(
>018140	4c 45 4e a8				.byte $4c,$45,$4e,$a8                  ; $a6 len(
>018144	48 45 58 24 a8				.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
>018149	53 49 4e a8				.byte $53,$49,$4e,$a8                  ; $a8 sin(
>01814d	43 4f 53 a8				.byte $43,$4f,$53,$a8                  ; $a9 cos(
>018151	54 41 4e a8				.byte $54,$41,$4e,$a8                  ; $aa tan(
>018155	41 54 4e a8				.byte $41,$54,$4e,$a8                  ; $ab atn(
>018159	45 58 50 a8				.byte $45,$58,$50,$a8                  ; $ac exp(
>01815d	4c 4f 47 a8				.byte $4c,$4f,$47,$a8                  ; $ad log(
>018161	53 51 52 a8				.byte $53,$51,$52,$a8                  ; $ae sqr(
>018165	44 45 43 a8				.byte $44,$45,$43,$a8                  ; $af dec(
>018169	44 45 45 4b a8				.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
>01816e	4c 45 45 4b a8				.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
>018173	4d 4f 44 a8				.byte $4d,$4f,$44,$a8                  ; $b2 mod(
>018177	53 47 4e a8				.byte $53,$47,$4e,$a8                  ; $b3 sgn(
>01817b	43 48 52 24 a8				.byte $43,$48,$52,$24,$a8              ; $b4 chr$(
>018180	24 a8					.byte $24,$a8                          ; $b5 $(
>018182	a4					.byte $a4                              ; $b6 $
>018183	23 a8					.byte $23,$a8                          ; $b7 #(
>018185	a3					.byte $a3                              ; $b8 #
>018186	25 a8					.byte $25,$a8                          ; $b9 %(
>018188	a5					.byte $a5                              ; $ba %
>018189	a8					.byte $a8                              ; $bb (
>01818a	a9					.byte $a9                              ; $bc )
>01818b	ac					.byte $ac                              ; $bd ,
>01818c	ba					.byte $ba                              ; $be :
>01818d	bb					.byte $bb                              ; $bf ;
>01818e	44 45 c6				.byte $44,$45,$c6                      ; $c0 def
>018191	43 4c d2				.byte $43,$4c,$d2                      ; $c1 clr
>018194	44 41 54 c1				.byte $44,$41,$54,$c1                  ; $c3 data
>018198	52 45 41 c4				.byte $52,$45,$41,$c4                  ; $c4 read
>01819c	44 49 cd				.byte $44,$49,$cd                      ; $c5 dim
>01819f	54 cf					.byte $54,$cf                          ; $c6 to
>0181a1	53 54 45 d0				.byte $53,$54,$45,$d0                  ; $c7 step
>0181a5	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2              ; $c8 gosub
>0181aa	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce          ; $c9 return
>0181b0	47 4f 54 cf				.byte $47,$4f,$54,$cf                  ; $ca goto
>0181b4	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4              ; $cb input
>0181b9	4c 45 d4				.byte $4c,$45,$d4                      ; $cc let
>0181bc	4c 49 53 d4				.byte $4c,$49,$53,$d4                  ; $cd list
>0181c0	4e 45 d7				.byte $4e,$45,$d7                      ; $ce new
>0181c3	4f 4c c4				.byte $4f,$4c,$c4                      ; $cf old
>0181c6	4f ce					.byte $4f,$ce                          ; $d0 on
>0181c8	52 45 53 54 4f 52 c5			.byte $52,$45,$53,$54,$4f,$52,$c5      ; $d1 restore
>0181cf	50 4f 4b c5				.byte $50,$4f,$4b,$c5                  ; $d2 poke
>0181d3	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4              ; $d3 print
>0181d8	52 55 ce				.byte $52,$55,$ce                      ; $d4 run
>0181db	53 54 4f d0				.byte $53,$54,$4f,$d0                  ; $d5 stop
>0181df	57 41 49 d4				.byte $57,$41,$49,$d4                  ; $d6 wait
>0181e3	44 4f 4b c5				.byte $44,$4f,$4b,$c5                  ; $d7 doke
>0181e7	4c 4f 4b c5				.byte $4c,$4f,$4b,$c5                  ; $d8 loke
>0181eb	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4          ; $d9 assert
>0181f1	00					.byte $00
=$80					token_and = $80
=$81					token_or = $81
=$82					token_xor = $82
=$83					token_eor = $83
=$84					token_equal = $84
=$85					token_lessgreater = $85
=$86					token_less = $86
=$87					token_lessequal = $87
=$88					token_greater = $88
=$89					token_greaterequal = $89
=$8a					token_plus = $8a
=$8b					token_minus = $8b
=$8c					token_star = $8c
=$8d					token_slash = $8d
=$8e					token_hat = $8e
=$8f					token_if = $8f
=$90					token_while = $90
=$91					token_repeat = $91
=$92					token_for = $92
=$93					token_then = $93
=$94					token_endif = $94
=$95					token_wend = $95
=$96					token_until = $96
=$97					token_next = $97
=$98					token_not = $98
=$99					token_fn = $99
=$9a					token_abs = $9a
=$9b					token_asc = $9b
=$9c					token_int = $9c
=$9d					token_peek = $9d
=$9e					token_rnd = $9e
=$9f					token_usr = $9f
=$a0					token_leftdollarlparen = $a0
=$a1					token_rightdollarlparen = $a1
=$a2					token_middollarlparen = $a2
=$a3					token_spc = $a3
=$a4					token_strdollarlparen = $a4
=$a5					token_val = $a5
=$a6					token_len = $a6
=$a7					token_hexdollarlparen = $a7
=$a8					token_sin = $a8
=$a9					token_cos = $a9
=$aa					token_tan = $aa
=$ab					token_atn = $ab
=$ac					token_exp = $ac
=$ad					token_log = $ad
=$ae					token_sqr = $ae
=$af					token_dec = $af
=$b0					token_deek = $b0
=$b1					token_leek = $b1
=$b2					token_mod = $b2
=$b3					token_sgn = $b3
=$b4					token_chrdollarlparen = $b4
=$b5					token_dollarlparen = $b5
=$b6					token_dollar = $b6
=$b7					token_hashlparen = $b7
=$b8					token_hash = $b8
=$b9					token_percentlparen = $b9
=$ba					token_percent = $ba
=$bb					token_lparen = $bb
=$bc					token_rparen = $bc
=$bd					token_comma = $bd
=$be					token_colon = $be
=$bf					token_semicolon = $bf
=$c0					token_def = $c0
=$c1					token_clr = $c1
=$c3					token_data = $c3
=$c4					token_read = $c4
=$c5					token_dim = $c5
=$c6					token_to = $c6
=$c7					token_step = $c7
=$c8					token_gosub = $c8
=$c9					token_return = $c9
=$ca					token_goto = $ca
=$cb					token_input = $cb
=$cc					token_let = $cc
=$cd					token_list = $cd
=$ce					token_new = $ce
=$cf					token_old = $cf
=$d0					token_on = $d0
=$d1					token_restore = $d1
=$d2					token_poke = $d2
=$d3					token_print = $d3
=$d4					token_run = $d4
=$d5					token_stop = $d5
=$d6					token_wait = $d6
=$d7					token_doke = $d7
=$d8					token_loke = $d8
=$d9					token_assert = $d9

;******  Return to file: modules/hardware/em65816.asm


;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.0181f2					IFT_ClearScreen:
.0181f2	48		pha				pha
.0181f3	da		phx				phx
.0181f4	5a		phy				phy
.0181f5	20 8e 83	jsr $01838e			jsr 	IF_Home 					; home cursor
.0181f8	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.0181fa					_IFT_CS0:
.0181fa	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.0181fc					_IFT_CS1:
.0181fc	a9 20		lda #$20			lda 	#' '						; clear line.
.0181fe	20 ba 83	jsr $0183ba			jsr 	IF_Write
.018201	88		dey				dey
.018202	d0 f8		bne $0181fc			bne 	_IFT_CS1
.018204	20 a1 83	jsr $0183a1			jsr 	IF_NewLine 					; next line down
.018207	ca		dex				dex
.018208	d0 f0		bne $0181fa			bne 	_IFT_CS0
.01820a	7a		ply				ply
.01820b	fa		plx				plx
.01820c	68		pla				pla
.01820d					IFT_HomeCursor:
.01820d	48		pha				pha
.01820e	20 8e 83	jsr $01838e			jsr 	IF_Home
.018211	a9 00		lda #$00			lda 	#0
.018213	8d 00 02	sta $0200			sta 	IFT_XCursor
.018216	8d 01 02	sta $0201			sta 	IFT_YCursor
.018219	68		pla				pla
.01821a	60		rts				rts
.01821b					IFT_UpLine:
.01821b	48		pha				pha
.01821c	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.01821f	3a		dec a				dec 	a 							; line above
.018220	30 03		bmi $018225			bmi 	_IFTULExit 					; too far, abort
.018222	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos					; set to that line.
.018225					_IFTULExit:
.018225	68		pla				pla
.018226	60		rts				rts
.018227					IFT_PrintCharacter:
.018227	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.018229	f0 16		beq $018241			beq 	IFT_NewLine
.01822b	48		pha				pha
.01822c	20 59 82	jsr $018259			jsr 	IFT_UpperCase 				; make upper case
.01822f	20 ba 83	jsr $0183ba			jsr 	IF_Write 					; write out.
.018232	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.018235	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.018238	c9 40		cmp #$40			cmp 	#IF_Width
.01823a	d0 03		bne $01823f			bne 	_IFT_PCNotEOL
.01823c	20 41 82	jsr $018241			jsr 	IFT_NewLine 				; if so do new line.
.01823f					_IFT_PCNotEOL:
.01823f	68		pla				pla
.018240	60		rts				rts
.018241					IFT_NewLine:
.018241	48		pha				pha
.018242	20 a1 83	jsr $0183a1			jsr 	IF_NewLine 					; new line on actual screen.
.018245	a9 00		lda #$00			lda 	#0 							; reset x position
.018247	8d 00 02	sta $0200			sta 	IFT_XCursor
.01824a	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.01824d	ad 01 02	lda $0201			lda 	IFT_YCursor
.018250	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.018252	d0 03		bne $018257			bne 	_IFT_NL_NotEOS
.018254	20 64 82	jsr $018264			jsr 	IFT_Scroll 					; scroll screen up.
.018257					_IFT_NL_NotEOS:
.018257	68		pla				pla
.018258	60		rts				rts
.018259					IFT_UpperCase:
.018259	c9 61		cmp #$61			cmp 	#"a"
.01825b	90 06		bcc $018263			bcc 	_IFT_UCExit
.01825d	c9 7b		cmp #$7b			cmp 	#"z"+1
.01825f	b0 02		bcs $018263			bcs 	_IFT_UCExit
.018261	49 20		eor #$20			eor 	#$20
.018263					_IFT_UCExit:
.018263	60		rts				rts
.018264					IFT_Scroll:
.018264	48		pha				pha 								; save AXY
.018265	da		phx				phx
.018266	5a		phy				phy
.018267	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.018269					_IFT_SLoop:
.018269	20 89 82	jsr $018289			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.01826c	e8		inx				inx
.01826d	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.01826f	d0 f8		bne $018269			bne 	_IFT_SLoop
.018271	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.018273	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.018276	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.018278					_IFT_SBlank:
.018278	a9 20		lda #$20			lda 	#32
.01827a	20 ba 83	jsr $0183ba			jsr 	IF_Write
.01827d	ca		dex				dex
.01827e	d0 f8		bne $018278			bne 	_IFT_SBlank
.018280	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.018282	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.018285	7a		ply				ply
.018286	fa		plx				plx
.018287	68		pla				pla
.018288	60		rts				rts
.018289					_IFT_ScrollLine:
.018289	da		phx				phx
.01828a	da		phx				phx
.01828b	8a		txa				txa 								; copy line into buffer.
.01828c	1a		inc a				inc 	a 							; next line down.
.01828d	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.018290	a2 00		ldx #$00			ldx 	#0
.018292					_IFTScrollCopy1:
.018292	20 b1 83	jsr $0183b1			jsr 	IF_Read
.018295	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.018298	e8		inx				inx
.018299	e0 40		cpx #$40			cpx 	#IF_Width
.01829b	d0 f5		bne $018292			bne 	_IFTScrollCopy1
.01829d	68		pla				pla
.01829e	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.0182a1	a2 00		ldx #$00			ldx 	#0
.0182a3					_IFTScrollCopy2:
.0182a3	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.0182a6	20 ba 83	jsr $0183ba			jsr 	IF_Write
.0182a9	e8		inx				inx
.0182aa	e0 40		cpx #$40			cpx 	#IF_Width
.0182ac	d0 f5		bne $0182a3			bne 	_IFTScrollCopy2
.0182ae	fa		plx				plx
.0182af	60		rts				rts
.0182b0					IFT_SetYPos:
.0182b0	48		pha				pha
.0182b1	da		phx				phx
.0182b2	aa		tax				tax
.0182b3	20 0d 82	jsr $01820d			jsr 	IFT_HomeCursor
.0182b6	e0 00		cpx #$00			cpx 	#0
.0182b8	f0 09		beq $0182c3			beq 	_IFT_MOAExit
.0182ba					_IFT_MOALoop:
.0182ba	20 a1 83	jsr $0183a1			jsr 	IF_NewLine
.0182bd	ee 01 02	inc $0201			inc 	IFT_YCursor
.0182c0	ca		dex				dex
.0182c1	d0 f7		bne $0182ba			bne		_IFT_MOALoop
.0182c3					_IFT_MOAExit:
.0182c3	fa		plx				plx
.0182c4	68		pla				pla
.0182c5	60		rts				rts
.0182c6					IFT_GetKeyCursor:
.0182c6	20 ce 82	jsr $0182ce			jsr 	_IFT_FlipCursor 			; reverse current
.0182c9					_IFT_GKCWait:
.0182c9	20 cb 83	jsr $0183cb			jsr 	IF_GetKey 					; get key
.0182cc	f0 fb		beq $0182c9			beq 	_IFT_GKCWait
.0182ce					_IFT_FlipCursor:
.0182ce	48		pha				pha 								; save
.0182cf	20 b1 83	jsr $0183b1			jsr 	IF_Read 					; read
.0182d2	20 c3 83	jsr $0183c3			jsr 	IF_LeftOne
.0182d5	49 80		eor #$80			eor 	#$80 						; reverse
.0182d7	20 ba 83	jsr $0183ba			jsr 	IF_Write 					; write
.0182da	20 c3 83	jsr $0183c3			jsr 	IF_LeftOne
.0182dd	68		pla				pla
.0182de	60		rts				rts
.0182df					IFT_ReadLine:
.0182df	48		pha				pha
.0182e0					_IFT_RLLoop:
.0182e0	20 c6 82	jsr $0182c6			jsr 	IFT_GetKeyCursor 			; get keystroke
.0182e3	c9 0d		cmp #$0d			cmp 	#13							; return
.0182e5	f0 7d		beq $018364			beq 	_IFT_RLExit
.0182e7	c9 20		cmp #$20			cmp 	#32 						; control character
.0182e9	90 05		bcc $0182f0			bcc 	_IFT_Control
.0182eb	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.0182ee	80 f0		bra $0182e0			bra 	_IFT_RLLoop
.0182f0					_IFT_Control:
.0182f0	c9 01		cmp #$01			cmp 	#"A"-64
.0182f2	f0 26		beq $01831a			beq 	_IFT_Left
.0182f4	c9 04		cmp #$04			cmp 	#"D"-64
.0182f6	f0 2e		beq $018326			beq 	_IFT_Right
.0182f8	c9 17		cmp #$17			cmp 	#"W"-64
.0182fa	f0 36		beq $018332			beq 	_IFT_Up
.0182fc	c9 13		cmp #$13			cmp 	#"S"-64
.0182fe	f0 3e		beq $01833e			beq 	_IFT_Down
.018300	c9 08		cmp #$08			cmp 	#"H"-64
.018302	f0 09		beq $01830d			beq 	_IFT_Backspace
.018304	c9 1a		cmp #$1a			cmp 	#"Z"-64
.018306	d0 d8		bne $0182e0			bne 	_IFT_RLLoop
.018308	20 f2 81	jsr $0181f2			jsr 	IFT_ClearScreen				; clear CTL-Z
.01830b	80 d3		bra $0182e0			bra 	_IFT_RLLoop
.01830d					_IFT_Backspace:
.01830d	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.018310	f0 ce		beq $0182e0			beq 	_IFT_RLLoop
.018312	20 c3 83	jsr $0183c3			jsr 	IF_LeftOne
.018315	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.018317	20 ba 83	jsr $0183ba			jsr 	IF_Write
.01831a					_IFT_Left:
.01831a	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.01831d	10 29		bpl $018348			bpl 	_IFT_Reposition
.01831f	a9 3f		lda #$3f			lda 	#IF_Width-1
.018321					_IFT_SetX:
.018321	8d 00 02	sta $0200			sta 	IFT_XCursor
.018324	80 22		bra $018348			bra 	_IFT_Reposition
.018326					_IFT_Right:
.018326	ee 00 02	inc $0200			inc 	IFT_XCursor
.018329	ad 00 02	lda $0200			lda 	IFT_XCursor
.01832c	49 40		eor #$40			eor 	#IF_Width
.01832e	f0 f1		beq $018321			beq 	_IFT_SetX
.018330	80 16		bra $018348			bra 	_IFT_Reposition
.018332					_IFT_Up:
.018332	ce 01 02	dec $0201			dec 	IFT_YCursor
.018335	10 11		bpl $018348			bpl 	_IFT_Reposition
.018337	a9 1f		lda #$1f			lda 	#IF_Height-1
.018339					_IFT_SetY:
.018339	8d 01 02	sta $0201			sta 	IFT_YCursor
.01833c	80 0a		bra $018348			bra 	_IFT_Reposition
.01833e					_IFT_Down:
.01833e	ee 01 02	inc $0201			inc 	IFT_YCursor
.018341	ad 01 02	lda $0201			lda 	IFT_YCursor
.018344	49 20		eor #$20			eor 	#IF_Height
.018346	f0 f1		beq $018339			beq 	_IFT_SetY
.018348					_IFT_Reposition:
.018348	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.01834b	48		pha				pha
.01834c	ad 01 02	lda $0201			lda 	IFT_YCursor
.01834f	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.018352	68		pla				pla
.018353	aa		tax				tax
.018354	e0 00		cpx #$00			cpx 	#0
.018356	f0 88		beq $0182e0			beq 	_IFT_RLLoop
.018358					_IFT_MoveRight:
.018358	20 b1 83	jsr $0183b1			jsr 	IF_Read
.01835b	ee 00 02	inc $0200			inc 	IFT_XCursor
.01835e	ca		dex				dex
.01835f	d0 f7		bne $018358			bne 	_IFT_MoveRight
.018361	4c e0 82	jmp $0182e0			jmp 	_IFT_RLLoop
.018364					_IFT_RLExit:
.018364	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.018367	20 b0 82	jsr $0182b0			jsr 	IFT_SetYPos
.01836a	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.01836c					_IFT_RLRead:
.01836c	20 b1 83	jsr $0183b1			jsr 	IF_Read
.01836f	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.018372	e8		inx				inx
.018373	e0 40		cpx #$40			cpx 	#IF_Width
.018375	d0 f5		bne $01836c			bne 	_IFT_RLRead
.018377					_IFT_RL_Trim:
.018377	ca		dex				dex 	 							; previous char
.018378	30 07		bmi $018381			bmi 	_IFT_Found 					; gone too far
.01837a	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.01837d	c9 20		cmp #$20			cmp 	#" "
.01837f	f0 f6		beq $018377			beq 	_IFT_RL_Trim
.018381					_IFT_Found:
.018381	e8		inx				inx 								; forward to non-space
.018382	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.018384	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.018387	68		pla				pla
.018388	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.01838a	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.01838c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.01838d					IF_Reset:
.01838d	60		rts				rts
.01838e					IF_Home:
.01838e	48		pha				pha
.01838f	64 08		stz $08				stz 	IF_XPos 					; zero X position
.018391	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.018393	85 04		sta $04				sta 	IF_Pos
.018395	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.018397	85 05		sta $05				sta 	IF_Pos+1
.018399	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.01839b	85 06		sta $06				sta 	IF_Pos+2
.01839d	64 07		stz $07				stz 	IF_Pos+3
.01839f	68		pla				pla
.0183a0	60		rts				rts
.0183a1					IF_NewLine:
.0183a1	48		pha				pha
.0183a2	64 08		stz $08				stz 	IF_XPos						; back to start of line
.0183a4	18		clc				clc 								; down one line
.0183a5	a5 04		lda $04				lda 	IF_Pos
.0183a7	69 40		adc #$40			adc 	#64
.0183a9	85 04		sta $04				sta 	IF_Pos
.0183ab	90 02		bcc $0183af			bcc 	_IF_NoCarry 				; carry through.
.0183ad	e6 05		inc $05				inc 	IF_Pos+1
.0183af					_IF_NoCarry:
.0183af	68		pla				pla
.0183b0	60		rts				rts
.0183b1					IF_Read:
.0183b1	5a		phy				phy 								; save current Y
.0183b2	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.0183b4	b7 04		lda [$04],y			lda 	[IF_Pos],y
.0183b6	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0183b8	7a		ply				ply									; restore Y
.0183b9	60		rts				rts
.0183ba					IF_Write:
.0183ba	5a		phy				phy 								; save current Y
.0183bb	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.0183bd	97 04		sta [$04],y			sta 	[IF_Pos],y
.0183bf	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0183c1	7a		ply				ply									; restore Y
.0183c2	60		rts				rts
.0183c3					IF_LeftOne:
.0183c3	c6 08		dec $08				dec 	IF_XPos
.0183c5	60		rts				rts
.0183c6					IF_CheckBreak:
.0183c6	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.0183ca	60		rts				rts
.0183cb					IF_GetKey:
.0183cb	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.0183cf	f0 08		beq $0183d9			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.0183d1	48		pha				pha 								; key pressed, clear queue.
.0183d2	a9 00		lda #$00			lda 	#0
.0183d4	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.0183d8	68		pla				pla
.0183d9					_IFGK_NoKey:
.0183d9	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.0183db	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/core.asm

.0183dc					BASIC_Start:
.0183dc	20 8d 83	jsr $01838d			jsr 	IF_Reset 					; set up and clear screen.
.0183df	20 f2 81	jsr $0181f2			jsr 	IFT_ClearScreen
.0183e2	a9 5c		lda #$5c			lda 	#$5C 						; JMP Long opcode
.0183e4	8d 04 03	sta $0304			sta 	LocalVector
.0183e7	8d 00 03	sta $0300			sta 	UserVector
.0183ea	a9 5f		lda #$5f			lda 	#USRDefault & $FF 			; reset USR vector
.0183ec	8d 01 03	sta $0301			sta 	UserVector+1
.0183ef	a9 89		lda #$89			lda 	#(USRDefault >> 8) & $FF
.0183f1	8d 02 03	sta $0302			sta 	UserVector+2
.0183f4	a9 01		lda #$01			lda 	#(USRDefault >> 16) & $FF
.0183f6	8d 03 03	sta $0303			sta 	UserVector+3
.0183f9	20 19 84	jsr $018419			jsr 	ResetRunStatus 				; clear everything (CLR command)
.0183fc	a9 00		lda #$00			lda 	#0 							; mark temp string pointer uninitialised.
.0183fe	85 21		sta $21				sta 	zTempStr+1 					; (done before every base level evaluation/or command)
.018400	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018402	85 16		sta $16				sta 	zCodePtr+0
.018404	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018406	85 17		sta $17				sta 	zCodePtr+1
.018408	a9 00		lda #$00			lda 	#0
.01840a	85 18		sta $18				sta 	zCodePtr+2
.01840c	85 19		sta $19				sta 	zCodePtr+3
.01840e	a0 03		ldy #$03			ldy 	#3
.018410	c8		iny				iny
.018411	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018413	20 27 84	jsr $018427			jsr 	EvaluateExpression
>018416	02						.byte 	2
.018417					SyntaxError:
.018417					ERR_Handler:
.018417	80 fe		bra $018417			bra 	ERR_Handler

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/clr.asm

.018419					CLR_Command:
.018419					ResetRunStatus:
.018419	a9 00		lda #$00			lda 	#HighMemory & $FF
.01841b	8d 26 04	sta $0426			sta 	StringPtr
.01841e	a9 80		lda #$80			lda 	#HighMemory >> 8
.018420	8d 27 04	sta $0427			sta 	StringPtr+1
.018423	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/evaluate.asm

.018424					EVESyntax:
.018424	4c 17 84	jmp $018417			jmp 	SyntaxError
.018427					EvaluateExpression:
.018427	a2 00		ldx #$00			ldx 	#0 							; start with stack at 0.
.018429					EvaluateExpressionX:
.018429	a9 00		lda #$00			lda 	#0 							; start at precedence level 0.
.01842b					EvaluateExpressionXA:
.01842b	48		pha				pha 								; save precedence on stack.
.01842c	b1 16		lda ($16),y			lda 	(zCodePtr),y
.01842e	f0 f4		beq $018424			beq 	EVESyntax 					; end of line, syntax error.
.018430	c9 1b		cmp #$1b			cmp 	#26+1 						; is it A-Z ?
.018432	b0 03		bcs $018437			bcs 	_EVNotVariable
.018434	4c 26 85	jmp $018526			jmp 	_EVVariableHandler 			; if so, go to the variable handler.
.018437					_EVNotVariable:
.018437	c9 40		cmp #$40			cmp 	#$40 						; up to $40, syntax error.
.018439	90 e9		bcc $018424			bcc 	EVESyntax
.01843b	c9 80		cmp #$80			cmp 	#$80 						; $40-$7F not integer
.01843d	b0 7f		bcs $0184be			bcs 	_EVNotInteger
.01843f	29 3f		and #$3f			and 	#$3F 						; it's a constant 0-63
.018441	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x 				; put into the mantissa space (32 bit integer)
.018444	a9 00		lda #$00			lda 	#0
.018446	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018449	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01844c	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.01844f	1a		inc a				inc 	a 							; set to type 1 (integer)
.018450	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018453					_EVCheckNextInteger:
.018453	c8		iny				iny
.018454	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018456	49 40		eor #$40			eor 	#$40 						; 40-7F now 00-3F.
.018458	c9 40		cmp #$40			cmp 	#$40 						; if not, we have an atom.
.01845a	b0 0d		bcs $018469			bcs 	_EVCheckDecimal
.01845c	48		pha				pha 								; save it.
.01845d	20 27 85	jsr $018527			jsr 	EVShiftMantissaLeft6 		; shift the mantissa left 6.
.018460	68		pla				pla
.018461	1d 08 03	ora $0308,x			ora 	XS_Mantissa+0,x 			; put in lower 6 bits.
.018464	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018467	80 ea		bra $018453			bra 	_EVCheckNextInteger
.018469					_EVCheckDecimal:
.018469	b1 16		lda ($16),y			lda 	(zCodePtr),y
.01846b	c9 fd		cmp #$fd			cmp 	#$FD 						; decimal ?
.01846d	d0 05		bne $018474			bne 	_EVGotAtom 					; no, get atom.
.01846f					_EVIsDecimal:
.01846f	20 57 85	jsr $018557			jsr 	EVGetDecimal 				; extend to the decimal part.
.018472	80 00		bra $018474			bra 	_EVGotAtom 					; and continue to got atom.
.018474					_EVGotAtom:
.018474	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018476	10 44		bpl $0184bc			bpl 	_EVExitDrop 				; must be a token.
.018478	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus  			; check it's in the binary token range (they're first)
.01847a	b0 40		bcs $0184bc			bcs 	_EVExitDrop
.01847c	68		pla				pla 								; get current precedence
.01847d	85 1e		sta $1e				sta 	zGenPtr 					; save in zGenPtr as temp.
.01847f	da		phx				phx 								; save X
.018480	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018482	aa		tax				tax 								; put in X
.018483	bf 34 80 01	lda $018034,x			lda 	BinaryPrecedence-$80,x 		; read the binary precedence.
.018487	85 1f		sta $1f				sta 	zGenPtr+1 					; save it.
.018489	fa		plx				plx 								; restore X
.01848a	c5 1e		cmp $1e				cmp 	zGenPtr 					; compared against the current precedence
.01848c	90 2f		bcc $0184bd			bcc 	_EVExit 					; exit if too low.
.01848e	f0 2d		beq $0184bd			beq 	_EVExit 					; exit if equals
.018490	a5 1e		lda $1e				lda 	zGenPtr 					; push precedence
.018492	48		pha				pha
.018493	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018495	48		pha				pha
.018496	c8		iny				iny
.018497	da		phx				phx 								; save current position
.018498	e8		inx				inx
.018499	e8		inx				inx
.01849a	e8		inx				inx
.01849b	e8		inx				inx
.01849c	e8		inx				inx
.01849d	e8		inx				inx
.01849e	a5 1f		lda $1f				lda 	zGenPtr+1 					; get the precedence of the operator in A.
.0184a0	20 2b 84	jsr $01842b			jsr 	EvaluateExpressionXA 		; do the RHS.
.0184a3	fa		plx				plx 								; restore X
.0184a4	68		pla				pla 								; get the binary operator in A.
.0184a5					_EVCallA:
.0184a5	da		phx				phx 								; save X again
.0184a6	0a		asl a				asl 	a 							; double, lose the MSB.
.0184a7	aa		tax				tax									; put in X
.0184a8	bf 00 80 01	lda $018000,x			lda 	VectorTable,x 				; copy address into zGenPtr
.0184ac	8d 05 03	sta $0305			sta 	LocalVector+1
.0184af	bf 01 80 01	lda $018001,x			lda 	VectorTable+1,x
.0184b3	8d 06 03	sta $0306			sta 	LocalVector+2
.0184b6	fa		plx				plx 								; restore X
.0184b7	20 23 85	jsr $018523			jsr 	_EVCallLocalVector
.0184ba	80 b8		bra $018474			bra 	_EVGotAtom 					; and loop back.
.0184bc					_EVExitDrop:
.0184bc	68		pla				pla
.0184bd					_EVExit:
.0184bd	60		rts				rts
.0184be					_EVNotInteger:
.0184be	c8		iny				iny
.0184bf	c9 8b		cmp #$8b			cmp 	#token_minus 				; is it unary minus ?
.0184c1	d0 19		bne $0184dc			bne 	_EVNotMinus
.0184c3	20 a8 85	jsr $0185a8			jsr 	EvaluateGetAtomX 			; get a numeric value into X.
.0184c6	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; get type
.0184c9	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.0184cb	f0 05		beq $0184d2			beq 	_EVMinusFloat
.0184cd	20 24 8d	jsr $018d24			jsr 	IntegerNegateAlways 		; negation
.0184d0	80 a2		bra $018474			bra 	_EVGotAtom 					; and go back.
.0184d2					_EVMinusFloat:
.0184d2	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; invert the sign bit.
.0184d5	49 80		eor #$80			eor 	#$80
.0184d7	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0184da	80 98		bra $018474			bra 	_EVGotAtom
.0184dc					_EVNotMinus:
.0184dc	c9 bb		cmp #$bb			cmp 	#token_lparen 				; is it left parenthesis
.0184de	d0 0c		bne $0184ec			bne 	_EVNotParenthesis
.0184e0	20 29 84	jsr $018429			jsr 	EvaluateExpressionX 		; full evaluate at level x.
.0184e3	b1 16		lda ($16),y			lda 	(zCodePtr),y
.0184e5	c8		iny				iny
.0184e6	c9 bc		cmp #$bc			cmp 	#token_rparen 				; okay if right bracket.
.0184e8	f0 8a		beq $018474			beq 	_EVGotAtom
.0184ea	80 fe		bra $0184ea		_error: bra _error
.0184ec					_EVNotParenthesis:
.0184ec	c9 98		cmp #$98			cmp 	#token_not 					; is it not ?
.0184ee	d0 0c		bne $0184fc			bne 	_EVNotNot
.0184f0	20 a8 85	jsr $0185a8			jsr 	EvaluateGetAtomX 			; get expression in parenthesis.
.0184f3	20 1e 92	jsr $01921e			jsr 	FPUToInteger 				; make it an integer - if possible.
.0184f6	20 85 85	jsr $018585			jsr 	NotInteger 					; do the not calculation
.0184f9	4c 74 84	jmp $018474			jmp 	_EVGotAtom
.0184fc					_EVNotNot:
.0184fc	c9 fe		cmp #$fe			cmp 	#$FE
.0184fe	d0 15		bne $018515			bne 	_EVNotString
.018500	20 24 8c	jsr $018c24			jsr 	CreateTempStringCopy 		; copy of string in code in temporary memory.
.018503	a5 20		lda $20				lda 	zTempStr 					; copy address of string into mantissa
.018505	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018508	a5 21		lda $21				lda 	zTempStr+1
.01850a	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.01850d	a9 02		lda #$02			lda 	#2 							; set to type 2 (e.g. string)
.01850f	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018512	4c 74 84	jmp $018474			jmp 	_EVGotAtom
.018515					_EVNotString:
.018515	c9 98		cmp #$98			cmp 	#firstUnaryFunction
.018517	90 04		bcc $01851d			bcc 	_EVBadElement
.018519	c9 b5		cmp #$b5			cmp 	#lastUnaryFunction+1
.01851b	90 03		bcc $018520			bcc 	_EVUnaryFunction
.01851d					_EVBadElement:
.01851d	4c 17 84	jmp $018417			jmp 	SyntaxError
.018520					_EVUnaryFunction:
.018520	4c a5 84	jmp $0184a5			jmp 	_EVCallA
.018523					_EVCallLocalVector:
.018523	6c 05 03	jmp ($0305)			jmp 	(LocalVector+1)
.018526					_EVVariableHandler:
.018526	ea		nop				nop
.018527					EVShiftMantissaLeft6:
.018527	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 				; copy up, using exponent as a temp
.01852a	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x
.01852d	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018530	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018533	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018536	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018539	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.01853c	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.01853f	a9 00		lda #$00			lda 	#0
.018541	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018544	20 47 85	jsr $018547			jsr 	_EVSMLShift 					; call it here to do it twice
.018547					_EVSMLShift:
.018547	5e 0c 03	lsr $030c,x			lsr 	XS_Exponent,x
.01854a	7e 0b 03	ror $030b,x			ror 	XS_Mantissa+3,x
.01854d	7e 0a 03	ror $030a,x			ror 	XS_Mantissa+2,x
.018550	7e 09 03	ror $0309,x			ror 	XS_Mantissa+1,x
.018553	7e 08 03	ror $0308,x			ror 	XS_Mantissa+0,x
.018556	60		rts				rts
.018557					EVGetDecimal:
.018557	a9 2e		lda #$2e			lda 	#'.'							; put DP in NUM_Buffer
.018559	8d 00 04	sta $0400			sta 	Num_Buffer
.01855c	da		phx				phx
.01855d	c8		iny				iny
.01855e	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018560	c8		iny				iny
.018561	3a		dec a				dec 	a								; convert to a string length.
.018562	3a		dec a				dec 	a
.018563	a2 01		ldx #$01			ldx 	#1 								; offset in X.
.018565					_EVGDCopy:
.018565	48		pha				pha 									; save count
.018566	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018568	9d 00 04	sta $0400,x			sta 	Num_Buffer,x
.01856b	e8		inx				inx 									; forward ....
.01856c	c8		iny				iny
.01856d	68		pla				pla 									; get count
.01856e	3a		dec a				dec 	a 								; until zero
.01856f	d0 f4		bne $018565			bne 	_EVGDCopy
.018571	9d 00 04	sta $0400,x			sta 	Num_Buffer,x 					; make string ASCIIZ.
.018574	fa		plx				plx 									; restore X
.018575	a9 00		lda #$00			lda 	#Num_Buffer & $FF 				; set zGenPtr
.018577	85 1e		sta $1e				sta 	zGenPtr
.018579	a9 04		lda #$04			lda 	#Num_Buffer >> 8
.01857b	85 1f		sta $1f				sta 	zGenPtr+1
.01857d	5a		phy				phy 									; save Y
.01857e	a0 00		ldy #$00			ldy 	#0 								; start position
.018580	20 f7 93	jsr $0193f7			jsr 	FPFromString 					; convert current
.018583	7a		ply				ply 									; restore Y
.018584	60		rts				rts
.018585					NotInteger:
.018585	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018588	49 ff		eor #$ff			eor 	#$FF
.01858a	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.01858d	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018590	49 ff		eor #$ff			eor 	#$FF
.018592	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018595	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018598	49 ff		eor #$ff			eor 	#$FF
.01859a	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01859d	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.0185a0	49 ff		eor #$ff			eor 	#$FF
.0185a2	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0185a5	60		rts				rts
.0185a6					EvaluateGetAtom:
.0185a6	a2 00		ldx #$00			ldx 	#0 								; start at the bottom :)
.0185a8					EvaluateGetAtomX:
.0185a8	a9 08		lda #$08			lda 	#8 								; very high precedence so no binary operations.
.0185aa	20 2b 84	jsr $01842b			jsr 	EvaluateExpressionXA
.0185ad	bd 0d 03	lda $030d,x			lda 	XS_Type,x 						; check type is 0 (float) 1 (integer)
.0185b0	29 0f		and #$0f			and 	#15
.0185b2	c9 02		cmp #$02			cmp 	#2
.0185b4	b0 01		bcs $0185b7			bcs 	EvaluateType
.0185b6	60		rts				rts
.0185b7					EvaluateType:
.0185b7	80 fe		bra $0185b7		_error: bra _error
.0185b9					EvaluateNumber:
.0185b9	a2 00		ldx #$00			ldx 	#0
.0185bb					EvaluateNumberX:
.0185bb	20 29 84	jsr $018429			jsr 	EvaluateExpressionX
.0185be	bd 0d 03	lda $030d,x			lda 	XS_Type,x 						; check type is 0/1
.0185c1	29 0f		and #$0f			and 	#15
.0185c3	c9 02		cmp #$02			cmp 	#2
.0185c5	b0 f0		bcs $0185b7			bcs 	EvaluateType
.0185c7	60		rts				rts
.0185c8					EvaluateInteger:
.0185c8	a2 00		ldx #$00			ldx 	#0
.0185ca					EvaluateIntegerX:
.0185ca	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX
.0185cd	20 1e 92	jsr $01921e			jsr 	FPUToInteger
.0185d0	60		rts				rts
.0185d1					EvaluateString:
.0185d1	a2 00		ldx #$00			ldx 	#0
.0185d3					EvaluateStringX:
.0185d3	20 29 84	jsr $018429			jsr 	EvaluateExpressionX
.0185d6	bd 0d 03	lda $030d,x			lda 	XS_Type,x 						; check type is 2
.0185d9	29 0f		and #$0f			and 	#15
.0185db	c9 02		cmp #$02			cmp 	#2
.0185dd	d0 d8		bne $0185b7			bne 	EvaluateType
.0185df	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x 					; copy to zGenPtr
.0185e2	85 1e		sta $1e				sta 	zGenPtr
.0185e4	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.0185e7	85 1f		sta $1f				sta 	zGenPtr+1
.0185e9	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/logical.asm

.0185ea					BinaryOp_And:
.0185ea	20 62 86	jsr $018662			jsr 	BinaryMakeBothInteger
.0185ed	bd 08 03	lda $0308,x			lda		XS_Mantissa+0,x
.0185f0	3d 0e 03	and $030e,x			and 	XS2_Mantissa+0,x
.0185f3	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.0185f6	bd 09 03	lda $0309,x			lda		XS_Mantissa+1,x
.0185f9	3d 0f 03	and $030f,x			and 	XS2_Mantissa+1,x
.0185fc	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0185ff	bd 0a 03	lda $030a,x			lda		XS_Mantissa+2,x
.018602	3d 10 03	and $0310,x			and 	XS2_Mantissa+2,x
.018605	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018608	bd 0b 03	lda $030b,x			lda		XS_Mantissa+3,x
.01860b	3d 11 03	and $0311,x			and 	XS2_Mantissa+3,x
.01860e	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018611	60		rts				rts
.018612					BinaryOp_Or:
.018612	20 62 86	jsr $018662			jsr 	BinaryMakeBothInteger
.018615	bd 08 03	lda $0308,x			lda		XS_Mantissa+0,x
.018618	1d 0e 03	ora $030e,x			ora 	XS2_Mantissa+0,x
.01861b	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.01861e	bd 09 03	lda $0309,x			lda		XS_Mantissa+1,x
.018621	1d 0f 03	ora $030f,x			ora 	XS2_Mantissa+1,x
.018624	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018627	bd 0a 03	lda $030a,x			lda		XS_Mantissa+2,x
.01862a	1d 10 03	ora $0310,x			ora 	XS2_Mantissa+2,x
.01862d	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018630	bd 0b 03	lda $030b,x			lda		XS_Mantissa+3,x
.018633	1d 11 03	ora $0311,x			ora 	XS2_Mantissa+3,x
.018636	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018639	60		rts				rts
.01863a					BinaryOp_Eor:
.01863a					BinaryOp_Xor:
.01863a	20 62 86	jsr $018662			jsr 	BinaryMakeBothInteger
.01863d	bd 08 03	lda $0308,x			lda		XS_Mantissa+0,x
.018640	5d 0e 03	eor $030e,x			eor 	XS2_Mantissa+0,x
.018643	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018646	bd 09 03	lda $0309,x			lda		XS_Mantissa+1,x
.018649	5d 0f 03	eor $030f,x			eor 	XS2_Mantissa+1,x
.01864c	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.01864f	bd 0a 03	lda $030a,x			lda		XS_Mantissa+2,x
.018652	5d 10 03	eor $0310,x			eor 	XS2_Mantissa+2,x
.018655	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018658	bd 0b 03	lda $030b,x			lda		XS_Mantissa+3,x
.01865b	5d 11 03	eor $0311,x			eor 	XS2_Mantissa+3,x
.01865e	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018661	60		rts				rts
.018662					BinaryMakeBothInteger:
.018662	da		phx				phx 								; save X
.018663	e8		inx				inx
.018664	e8		inx				inx
.018665	e8		inx				inx
.018666	e8		inx				inx
.018667	e8		inx				inx
.018668	e8		inx				inx
.018669	20 6d 86	jsr $01866d			jsr 	BinaryMakeInteger 			; convert to integer.
.01866c	fa		plx				plx 								; restore X and fall through.
.01866d					BinaryMakeInteger:
.01866d	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; get type byte.
.018670	29 0f		and #$0f			and 	#15 						; check type zero
.018672	f0 04		beq $018678			beq 	_BMIConvert 				; if float convert to integer.
.018674	4a		lsr a				lsr 	a 							; if bit 0 clear it's not an integer
.018675	90 04		bcc $01867b			bcc 	_BMIError
.018677	60		rts				rts
.018678					_BMIConvert:
.018678	4c 1e 92	jmp $01921e			jmp 	FPUToInteger 				; convert to integer
.01867b					_BMIError:
.01867b	80 fe		bra $01867b		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/compare.asm

.01867d					Binary_Equal:
.01867d	20 c9 86	jsr $0186c9			jsr 	CompareValues
.018680	09 00		ora #$00			ora 	#0
.018682	f0 04		beq $018688			beq 	CCTrue
.018684	a9 00		lda #$00	CCFalse:lda 	#0							; set false
.018686	80 02		bra $01868a			bra 	CCWrite
.018688	a9 ff		lda #$ff	CCTrue:	lda 	#$FF 						; set true
.01868a	9d 08 03	sta $0308,x	CCWrite:sta 	XS_Mantissa+0,x 			; write into integer slot
.01868d	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018690	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018693	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018696	a9 01		lda #$01			lda 	#1
.018698	9d 0d 03	sta $030d,x			sta 	XS_Type,x 					; set type to integer whatever.
.01869b	60		rts				rts
.01869c					Binary_NotEqual:
.01869c	20 c9 86	jsr $0186c9			jsr 	CompareValues
.01869f	09 00		ora #$00			ora 	#0
.0186a1	d0 e1		bne $018684			bne 	CCFalse
.0186a3	80 e3		bra $018688			bra 	CCTrue
.0186a5					Binary_Less:
.0186a5	20 c9 86	jsr $0186c9			jsr 	CompareValues
.0186a8	09 00		ora #$00			ora 	#0
.0186aa	30 dc		bmi $018688			bmi 	CCTrue
.0186ac	80 d6		bra $018684			bra 	CCFalse
.0186ae					Binary_LessEqual:
.0186ae	20 c9 86	jsr $0186c9			jsr 	CompareValues
.0186b1	c9 01		cmp #$01			cmp 	#1
.0186b3	d0 d3		bne $018688			bne 	CCTrue
.0186b5	80 cd		bra $018684			bra 	CCFalse
.0186b7					Binary_GreaterEqual:
.0186b7	20 c9 86	jsr $0186c9			jsr 	CompareValues
.0186ba	09 00		ora #$00			ora 	#0
.0186bc	10 ca		bpl $018688			bpl 	CCTrue
.0186be	80 c4		bra $018684			bra 	CCFalse
.0186c0					Binary_Greater:
.0186c0	20 c9 86	jsr $0186c9			jsr 	CompareValues
.0186c3	c9 01		cmp #$01			cmp 	#1
.0186c5	d0 c1		bne $018688			bne 	CCTrue
.0186c7	80 bb		bra $018684			bra 	CCFalse
.0186c9					CompareValues:
.0186c9	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and the types together
.0186cc	3d 13 03	and $0313,x			and 	XS2_Type,x
.0186cf	c9 02		cmp #$02			cmp 	#2
.0186d1	f0 13		beq $0186e6			beq 	_CVString
.0186d3	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0186d6	3d 13 03	and $0313,x			and 	XS2_Type,x
.0186d9	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0186da	90 03		bcc $0186df			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0186dc	4c 2c 87	jmp $01872c			jmp 	CompareInteger32 							; so execute code at \1
.0186df					_BCFloat:
.0186df	20 fa 87	jsr $0187fa			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0186e2	4c 2d 91	jmp $01912d			jmp 	FPCompare 							; and execute code at \2
.0186e5	60		rts				rts
.0186e6					_CVString:
.0186e6	da		phx				phx 								; save XY
.0186e7	5a		phy				phy
.0186e8	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.0186eb	85 1a		sta $1a				sta		zLTemp1+0
.0186ed	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.0186f0	85 1b		sta $1b				sta 	zLTemp1+1
.0186f2	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x
.0186f5	85 1c		sta $1c				sta 	zLTemp1+2
.0186f7	bd 0f 03	lda $030f,x			lda 	XS2_Mantissa+1,x
.0186fa	85 1d		sta $1d				sta 	zLTemp1+3
.0186fc	a0 00		ldy #$00			ldy 	#0 							; find the shorter string length, we compare this.
.0186fe	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.018700	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.018702	90 02		bcc $018706			bcc 	_CVCommon
.018704	b1 1c		lda ($1c),y			lda 	(zLTemp1+2),y
.018706					_CVCommon:
.018706	aa		tax				tax 								; put shorter string length in zero.
.018707	f0 0c		beq $018715			beq 	_CVMatch 					; if the shorter is zero, then the 'common parts' match
.018709					_CVCompare:
.018709	c8		iny				iny 								; next character
.01870a	b1 1a		lda ($1a),y			lda 	(zLTemp1),y 				; compare characters
.01870c	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.01870e	90 13		bcc $018723			bcc 	_CVReturnLess 				; <
.018710	d0 15		bne $018727			bne 	_CVReturnGreater 			; >
.018712	ca		dex				dex 								; until common length matched.
.018713	d0 f4		bne $018709			bne 	_CVCompare
.018715					_CVMatch:
.018715	a0 00		ldy #$00			ldy 	#0
.018717	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.018719	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.01871b	90 06		bcc $018723			bcc 	_CVReturnLess 				; <
.01871d	d0 08		bne $018727			bne 	_CVReturnGreater 			; >
.01871f	a9 00		lda #$00			lda 	#0
.018721	80 06		bra $018729			bra 	_CVExit 					; same common, same length, same string
.018723					_CVReturnLess:
.018723	a9 ff		lda #$ff			lda 	#$FF
.018725	80 02		bra $018729			bra 	_CVExit
.018727					_CVReturnGreater:
.018727	a9 01		lda #$01			lda 	#$01
.018729					_CVExit:
.018729	7a		ply				ply
.01872a	fa		plx				plx
.01872b	60		rts				rts
.01872c					CompareInteger32:
.01872c	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; invert both sign flags, makes compare signed
.01872f	49 80		eor #$80			eor 	#$80
.018731	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018734	bd 11 03	lda $0311,x			lda 	XS2_Mantissa+3,x
.018737	49 80		eor #$80			eor 	#$80
.018739	9d 11 03	sta $0311,x			sta 	XS2_Mantissa+3,x
.01873c	20 d4 87	jsr $0187d4			jsr 	SubInteger32 				; subtraction
.01873f	90 11		bcc $018752			bcc 	_CI32Less 					; cc return -1
.018741	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; check if zero
.018744	1d 09 03	ora $0309,x			ora 	XS_Mantissa+1,x
.018747	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.01874a	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.01874d	f0 02		beq $018751			beq 	_CI32Exit
.01874f	a9 01		lda #$01			lda 	#1							; otherwise it's positive
.018751					_CI32Exit:
.018751	60		rts				rts
.018752					_CI32Less:
.018752	a9 ff		lda #$ff			lda 	#$FF
.018754	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/arithmetic.asm

.018755					BinaryOp_Add:
.018755	bd 0d 03	lda $030d,x			lda 	XS_Type,x  					; and types together
.018758	3d 13 03	and $0313,x			and 	XS2_Type,x
.01875b	29 02		and #$02			and 	#2 							; if bit 1 set they are both strings
.01875d	d0 13		bne $018772			bne 	_BOAString
.01875f	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and 2 type bytes together.
.018762	3d 13 03	and $0313,x			and 	XS2_Type,x
.018765	4a		lsr a				lsr 	a 							; shift bit 0 into C
.018766	90 03		bcc $01876b			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.018768	4c ae 87	jmp $0187ae			jmp 	AddInteger32 							; so execute code at \1
.01876b					_BCFloat:
.01876b	20 fa 87	jsr $0187fa			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.01876e	4c b3 8e	jmp $018eb3			jmp 	FPAdd 							; and execute code at \2
.018771	60		rts				rts
.018772					_BOAString:
.018772	4c 14 88	jmp $018814			jmp 	ConcatenateString 			; concatenate two strings.
.018775					BinaryOp_Subtract:
.018775	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and 2 type bytes together.
.018778	3d 13 03	and $0313,x			and 	XS2_Type,x
.01877b	4a		lsr a				lsr 	a 							; shift bit 0 into C
.01877c	90 03		bcc $018781			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.01877e	4c d4 87	jmp $0187d4			jmp 	SubInteger32 							; so execute code at \1
.018781					_BCFloat:
.018781	20 fa 87	jsr $0187fa			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.018784	4c a9 8e	jmp $018ea9			jmp 	FPSubtract 							; and execute code at \2
.018787	60		rts				rts
.018788					BinaryOp_Multiply:
.018788	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and 2 type bytes together.
.01878b	3d 13 03	and $0313,x			and 	XS2_Type,x
.01878e	4a		lsr a				lsr 	a 							; shift bit 0 into C
.01878f	90 03		bcc $018794			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.018791	4c 49 8c	jmp $018c49			jmp 	MulInteger32 							; so execute code at \1
.018794					_BCFloat:
.018794	20 fa 87	jsr $0187fa			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.018797	4c 0d 90	jmp $01900d			jmp 	FPMultiply 							; and execute code at \2
.01879a	60		rts				rts
.01879b					BinaryOp_Divide:
.01879b	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; and 2 type bytes together.
.01879e	3d 13 03	and $0313,x			and 	XS2_Type,x
.0187a1	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0187a2	90 03		bcc $0187a7			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0187a4	4c a0 8c	jmp $018ca0			jmp 	DivInteger32 							; so execute code at \1
.0187a7					_BCFloat:
.0187a7	20 fa 87	jsr $0187fa			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0187aa	4c 85 8f	jmp $018f85			jmp 	FPDivide 							; and execute code at \2
.0187ad	60		rts				rts
.0187ae					AddInteger32:
.0187ae	18		clc				clc
.0187af	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.0187b2	7d 0e 03	adc $030e,x			adc 	XS2_Mantissa+0,x
.0187b5	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.0187b8	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.0187bb	7d 0f 03	adc $030f,x			adc 	XS2_Mantissa+1,x
.0187be	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0187c1	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.0187c4	7d 10 03	adc $0310,x			adc 	XS2_Mantissa+2,x
.0187c7	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0187ca	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.0187cd	7d 11 03	adc $0311,x			adc 	XS2_Mantissa+3,x
.0187d0	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0187d3	60		rts				rts
.0187d4					SubInteger32:
.0187d4	38		sec				sec
.0187d5	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.0187d8	fd 0e 03	sbc $030e,x			sbc 	XS2_Mantissa+0,x
.0187db	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.0187de	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.0187e1	fd 0f 03	sbc $030f,x			sbc 	XS2_Mantissa+1,x
.0187e4	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0187e7	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.0187ea	fd 10 03	sbc $0310,x			sbc 	XS2_Mantissa+2,x
.0187ed	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0187f0	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.0187f3	fd 11 03	sbc $0311,x			sbc 	XS2_Mantissa+3,x
.0187f6	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0187f9	60		rts				rts
.0187fa					BinaryMakeBothFloat:
.0187fa	da		phx				phx 								; save X
.0187fb	e8		inx				inx
.0187fc	e8		inx				inx
.0187fd	e8		inx				inx
.0187fe	e8		inx				inx
.0187ff	e8		inx				inx
.018800	e8		inx				inx
.018801	20 05 88	jsr $018805			jsr 	BinaryMakeFloat 			; convert to float.
.018804	fa		plx				plx 								; restore X and fall through.
.018805					BinaryMakeFloat:
.018805	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; get type byte.
.018808	4a		lsr a				lsr 	a 							; if bit 0 set, it's integer so convert
.018809	b0 04		bcs $01880f			bcs 	_BMFConvert
.01880b	4a		lsr a				lsr 	a 							; if bit 1 set, it's a string so error (type)
.01880c	b0 04		bcs $018812			bcs 	_BMFError
.01880e	60		rts				rts
.01880f					_BMFConvert:
.01880f	4c bf 91	jmp $0191bf			jmp 	FPUToFloat 					; convert to float
.018812					_BMFError:
.018812	80 fe		bra $018812		_error: bra _error
.018814					ConcatenateString:
.018814	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.018817	85 1a		sta $1a				sta		zLTemp1+0
.018819	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.01881c	85 1b		sta $1b				sta 	zLTemp1+1
.01881e	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x
.018821	85 1c		sta $1c				sta 	zLTemp1+2
.018823	bd 0f 03	lda $030f,x			lda 	XS2_Mantissa+1,x
.018826	85 1d		sta $1d				sta 	zLTemp1+3
.018828	5a		phy				phy
.018829	a0 00		ldy #$00			ldy 	#0 							; work out total length.
.01882b	b1 1a		lda ($1a),y			lda 	(zlTemp1),y
.01882d	71 1c		adc ($1c),y			adc 	(zlTemp1+2),y
.01882f	7a		ply				ply
.018830	b0 37		bcs $018869			bcs 	_CSError					; check in range.
.018832	c9 fe		cmp #$fe			cmp 	#maxString+1
.018834	b0 33		bcs $018869			bcs 	_CSError
.018836	20 e9 8b	jsr $018be9			jsr 	AllocateTempString 			; store the result
.018839	20 54 88	jsr $018854			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.01883c	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x 			; point zLTemp1 to second string
.01883f	85 1a		sta $1a				sta 	zLTemp1
.018841	bd 0f 03	lda $030f,x			lda 	XS2_Mantissa+1,x
.018844	85 1b		sta $1b				sta 	zLTemp1+1
.018846	20 54 88	jsr $018854			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.018849	a5 20		lda $20				lda 	zTempStr 					; point current to new string
.01884b	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.01884e	a5 21		lda $21				lda 	zTempStr+1
.018850	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018853	60		rts				rts
.018854					_CSCopyString:
.018854	da		phx				phx
.018855	5a		phy				phy
.018856	a0 00		ldy #$00			ldy 	#0 							; get length
.018858	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.01885a	f0 0a		beq $018866			beq 	_CSCSExit 					; if zero, exit
.01885c	aa		tax				tax 								; put in X
.01885d					_CSCSLoop:
.01885d	c8		iny				iny 								; get next char
.01885e	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.018860	20 14 8c	jsr $018c14			jsr		WriteTempString 			; copy out
.018863	ca		dex				dex 								; do whole string
.018864	d0 f7		bne $01885d			bne 	_CSCSLoop
.018866					_CSCSExit:
.018866	7a		ply				ply
.018867	fa		plx				plx
.018868	60		rts				rts
.018869					_CSError:
.018869	80 fe		bra $018869		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/sgn.asm

.01886b					Unary_Sgn:
.01886b	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; get value
.01886e	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; check right bracket.
.018871	20 95 88	jsr $018895			jsr 	GetSignCurrent 				; get sign.
.018874	09 00		ora #$00			ora 	#0
.018876	10 09		bpl $018881			bpl		UnarySetAInteger			; if 0,1 return that.
.018878	80 00		bra $01887a			bra 	UnarySetAMinus1 			; -1 return $FFFFF...
.01887a					UnarySetAMinus1:
.01887a	a9 ff		lda #$ff			lda 	#$FF
.01887c	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.01887f	80 05		bra $018886			bra 	UnarySetAFill
.018881					UnarySetAInteger:
.018881	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.018884	a9 00		lda #$00			lda 	#0
.018886					UnarySetAFill:
.018886	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018889	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01888c	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.01888f	a9 01		lda #$01			lda 	#1
.018891	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018894	60		rts				rts
.018895					GetSignCurrent:
.018895	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; identify type.
.018898	4a		lsr a				lsr 	a 							; if LSB set it is integer.
.018899	90 19		bcc $0188b4			bcc 	_GSCFloat
.01889b	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.01889e	30 11		bmi $0188b1			bmi 	_GSCMinus1
.0188a0	1d 08 03	ora $0308,x			ora 	XS_Mantissa+0,x
.0188a3	1d 09 03	ora $0309,x			ora 	XS_Mantissa+1,x
.0188a6	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.0188a9	d0 03		bne $0188ae			bne 	_GSCPlus1
.0188ab					_GSCZero:
.0188ab	a9 00		lda #$00			lda 	#0
.0188ad	60		rts				rts
.0188ae					_GSCPlus1:
.0188ae	a9 01		lda #$01			lda 	#$01
.0188b0	60		rts				rts
.0188b1					_GSCMinus1:
.0188b1	a9 ff		lda #$ff			lda 	#$FF
.0188b3	60		rts				rts
.0188b4					_GSCFloat:
.0188b4	3c 0d 03	bit $030d,x			bit 	XS_Type,x
.0188b7	70 f2		bvs $0188ab			bvs 	_GSCZero
.0188b9	30 f6		bmi $0188b1			bmi 	_GSCMinus1
.0188bb	80 f1		bra $0188ae			bra 	_GSCPlus1

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/abs.asm

.0188bd					Unary_Abs:
.0188bd	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; get value
.0188c0	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; check right bracket.
.0188c3	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; get type
.0188c6	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.0188c8	f0 08		beq $0188d2			beq 	_UAMinusFloat
.0188ca	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; check MSB
.0188cd	10 0b		bpl $0188da			bpl 	_UAExit
.0188cf	4c 24 8d	jmp $018d24			jmp 	IntegerNegateAlways 		; negation
.0188d2					_UAMinusFloat:
.0188d2	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; clear the sign bit.
.0188d5	29 7f		and #$7f			and		#$7F
.0188d7	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0188da					_UAExit:
.0188da	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/peek.asm

.0188db					Unary_Peek:
.0188db	a9 01		lda #$01			lda 	#1
.0188dd	80 06		bra $0188e5			bra 	UPMain
.0188df					Unary_Deek:
.0188df	a9 02		lda #$02			lda 	#2
.0188e1	80 02		bra $0188e5			bra 	UPMain
.0188e3					Unary_Leek:
.0188e3	a9 04		lda #$04			lda 	#4
.0188e5					UPMain:
.0188e5	48		pha				pha 								; set bytes to copy.
.0188e6	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX 			; numeric parameter
.0188e9	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.0188ec	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; copy the mantissa into ZLTemp1 (address)
.0188ef	85 1a		sta $1a				sta 	zLTemp1
.0188f1	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.0188f4	85 1b		sta $1b				sta 	zLTemp1+1
.0188f6	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.0188f9	85 1c		sta $1c				sta 	zLTemp1+2
.0188fb	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.0188fe	85 1d		sta $1d				sta 	zLTemp1+3
.018900	a9 00		lda #$00			lda 	#0 							; clear target area
.018902	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018905	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018908	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01890b	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.01890e	68		pla				pla 								; restore bytes to copy
.01890f	da		phx				phx 								; save XY
.018910	5a		phy				phy
.018911	20 bf 8b	jsr $018bbf			jsr 	MemRead 					; read the bytes in
.018914	7a		ply				ply 								; restore and exit
.018915	fa		plx				plx
.018916	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/mod.asm

.018917					Unary_Mod:
.018917	20 43 89	jsr $018943			jsr 	_UMParameter 				; first parameter
.01891a	20 e1 8b	jsr $018be1			jsr 	CheckNextComma
.01891d	da		phx				phx 								; second parameter
.01891e	e8		inx				inx
.01891f	e8		inx				inx
.018920	e8		inx				inx
.018921	e8		inx				inx
.018922	e8		inx				inx
.018923	e8		inx				inx
.018924	20 43 89	jsr $018943			jsr 	_UMParameter
.018927	fa		plx				plx
.018928	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen
.01892b	20 a0 8c	jsr $018ca0			jsr 	DivInteger32 				; divide
.01892e	a5 1a		lda $1a				lda 	zLTemp1+0 					; modulus is in zLTemp, copy it.
.018930	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018933	a5 1b		lda $1b				lda 	zLTemp1+1
.018935	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018938	a5 1c		lda $1c				lda 	zLTemp1+2
.01893a	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01893d	a5 1d		lda $1d				lda 	zLTemp1+3
.01893f	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018942	60		rts				rts
.018943					_UMParameter:
.018943	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX 			; get value
.018946	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; absolute value
.018949	10 03		bpl $01894e			bpl 	_UMNotSigned
.01894b	20 24 8d	jsr $018d24			jsr 	IntegerNegateAlways
.01894e					_UMNotSigned:
.01894e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/usr.asm

.01894f					Unary_Usr:
.01894f	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; numeric parameter
.018952	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018955	da		phx				phx 								; save XY
.018956	5a		phy				phy
.018957	ea		nop				nop
.018958	22 00 03 00	jsl $000300			jsl 	UserVector
.01895c	7a		ply				ply 								; and exit
.01895d	fa		plx				plx
.01895e	60		rts				rts
.01895f					USRDefault:
.01895f	80 fe		bra $01895f		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/val.asm

.018961					Unary_Val:
.018961	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 			; get string
.018964	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; check right bracket.
.018967	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; put string address +1 into zGenPtr
.01896a	85 1e		sta $1e				sta 	zGenPtr
.01896c	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.01896f	85 1f		sta $1f				sta 	zGenPtr+1
.018971	5a		phy				phy
.018972	a0 00		ldy #$00			ldy 	#0 							; get count of characters.
.018974	b1 1e		lda ($1e),y			lda 	(zGenPtr),y  				; if zero, it's bad obviously :)
.018976	f0 54		beq $0189cc			beq 	_UVBadNumber
.018978	48		pha				pha 								; save length.
.018979	1a		inc a				inc 	a 							; one for the length, one for the terminator
.01897a	1a		inc a				inc 	a
.01897b	20 e9 8b	jsr $018be9			jsr 	AllocateTempString
.01897e	c8		iny				iny 								; move to the next.
.01897f	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get character
.018981	49 2d		eor #$2d			eor 	#"-"						; zero if minus sign
.018983	8d 28 04	sta $0428			sta 	ValSign
.018986	d0 01		bne $018989			bne 	_UVNotMinus
.018988	c8		iny				iny 								; skip over it.
.018989					_UVNotMinus:
.018989	68		pla				pla 								; this is the count.
.01898a	48		pha		_UVCopy:pha									; copy into new temp string which is ASCIIZ
.01898b	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.01898d	c8		iny				iny
.01898e	20 14 8c	jsr $018c14			jsr 	WriteTempString
.018991	68		pla				pla
.018992	3a		dec a				dec 	a
.018993	d0 f5		bne $01898a			bne 	_UVCopy
.018995	20 14 8c	jsr $018c14			jsr 	WriteTempString 			; make it ASCIIZ
.018998	18		clc				clc
.018999	a5 20		lda $20				lda 	zTempStr 					; tempstring +1 => genptr
.01899b	69 01		adc #$01			adc 	#1
.01899d	85 1e		sta $1e				sta 	zGenPtr
.01899f	a5 21		lda $21				lda 	zTempStr+1
.0189a1	69 00		adc #$00			adc 	#0
.0189a3	85 1f		sta $1f				sta 	zGenPtr+1
.0189a5	18		clc				clc
.0189a6	20 fe 8d	jsr $018dfe			jsr 	IntFromString 				; first bit.
.0189a9	b0 21		bcs $0189cc			bcs 	_UVBadNumber
.0189ab	20 f7 93	jsr $0193f7			jsr 	FPFromString				; try for a float part.
.0189ae	ad 28 04	lda $0428			lda 	ValSign 					; was it negative
.0189b1	d0 13		bne $0189c6			bne 	_UVNotNegative
.0189b3	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; check if integer
.0189b6	4a		lsr a				lsr 	a
.0189b7	b0 0a		bcs $0189c3			bcs 	_UVInteger
.0189b9	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; set sign bit
.0189bc	09 80		ora #$80			ora 	#$80
.0189be	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0189c1	80 03		bra $0189c6			bra 	_UVNotNegative
.0189c3					_UVInteger:
.0189c3	20 24 8d	jsr $018d24			jsr 	IntegerNegateAlways 		; sign it.
.0189c6					_UVNotNegative:
.0189c6	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; used everything
.0189c8	d0 02		bne $0189cc			bne 	_UVBadNumber
.0189ca	7a		ply				ply
.0189cb	60		rts				rts
.0189cc					_UVBadNumber:
.0189cc	80 fe		bra $0189cc		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/str.asm

.0189ce					Unary_Str:
.0189ce	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; numeric parameter
.0189d1	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.0189d4	a9 00		lda #$00			lda 	#0 							; reset buffer index
.0189d6	8d 20 04	sta $0420			sta 	NumBufX
.0189d9	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; get type
.0189dc	4a		lsr a				lsr 	a
.0189dd	b0 05		bcs $0189e4			bcs 	_USInt 						; if msb set do as integer
.0189df	20 30 93	jsr $019330			jsr 	FPToString 					; call fp to str otherwise
.0189e2	80 03		bra $0189e7			bra 	_USDuplicate
.0189e4	20 49 8d	jsr $018d49	_USInt:	jsr 	IntToString
.0189e7					_USDuplicate:
.0189e7	ad 20 04	lda $0420			lda 	NumBufX 					; chars in buffer
.0189ea	1a		inc a				inc 	a 							; one more for length
.0189eb	20 e9 8b	jsr $018be9			jsr 	AllocateTempString 			; allocate space for it.
.0189ee	5a		phy				phy 								; save Y
.0189ef	a0 00		ldy #$00			ldy 	#0 							; start copying
.0189f1	b9 00 04	lda $0400,y	_USCopy:lda 	Num_Buffer,y 				; get and write
.0189f4	20 14 8c	jsr $018c14			jsr 	WriteTempString
.0189f7	c8		iny				iny
.0189f8	cc 20 04	cpy $0420			cpy 	NumBufX 					; done the lot
.0189fb	d0 f4		bne $0189f1			bne 	_USCopy
.0189fd	7a		ply				ply 								; restore Y
.0189fe	4c af 8b	jmp $018baf			jmp 	UnaryReturnTempStr 			; return new temporary string.

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/asc.asm

.018a01					Unary_Asc:
.018a01	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 			; string parameter
.018a04	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018a07	5a		phy				phy 								; get the string length
.018a08	a0 00		ldy #$00			ldy 	#0
.018a0a	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018a0c	f0 07		beq $018a15			beq 	_UAIllegal 					; must be at least one character
.018a0e	c8		iny				iny
.018a0f	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; read it.
.018a11	7a		ply				ply
.018a12	4c 81 88	jmp $018881			jmp 	UnarySetAInteger
.018a15					_UAIllegal:
.018a15	80 fe		bra $018a15		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/len.asm

.018a17					Unary_Len:
.018a17	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 			; string parameter
.018a1a	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018a1d	5a		phy				phy 								; get the string length
.018a1e	a0 00		ldy #$00			ldy 	#0
.018a20	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018a22	7a		ply				ply
.018a23	4c 81 88	jmp $018881			jmp 	UnarySetAInteger

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/slice.asm

.018a26					Unary_Mid:
.018a26	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 				; get string.
.018a29	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 				; push address on stack
.018a2c	48		pha				pha
.018a2d	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018a30	48		pha				pha
.018a31	20 e1 8b	jsr $018be1			jsr 	CheckNextComma 					; skip comma
.018a34	20 8b 8a	jsr $018a8b			jsr 	SLIByteParameter 				; get a byte parameter (start)
.018a37	48		pha				pha 									; and push it.
.018a38	20 e1 8b	jsr $018be1			jsr 	CheckNextComma 					; skip comma
.018a3b	20 8b 8a	jsr $018a8b			jsr 	SLIByteParameter 				; get a byte parameter (#chars)
.018a3e	48		pha				pha 									; and push it.
.018a3f	80 46		bra $018a87			bra 	SLIProcess
.018a41					Unary_Left:
.018a41	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 				; get string.
.018a44	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 				; push address on stack
.018a47	48		pha				pha
.018a48	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018a4b	48		pha				pha
.018a4c	a9 01		lda #$01			lda 	#1 								; push start position (1)
.018a4e	48		pha				pha
.018a4f	20 e1 8b	jsr $018be1			jsr 	CheckNextComma 					; skip comma
.018a52	20 8b 8a	jsr $018a8b			jsr 	SLIByteParameter 				; get a byte parameter (# chars)
.018a55	48		pha				pha 									; and push it.
.018a56	80 2f		bra $018a87			bra 	SLIProcess
.018a58					Unary_Right:
.018a58	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 				; get string.
.018a5b	ea		nop				nop
.018a5c	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 				; push address on stack
.018a5f	48		pha				pha
.018a60	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018a63	48		pha				pha
.018a64	da		phx				phx 									; get the string length and push on stack.
.018a65	a2 00		ldx #$00			ldx 	#0
.018a67	a1 1e		lda ($1e,x)			lda		(zGenPtr,x)
.018a69	fa		plx				plx
.018a6a	48		pha				pha
.018a6b	20 e1 8b	jsr $018be1			jsr 	CheckNextComma 					; skip comma
.018a6e	20 8b 8a	jsr $018a8b			jsr 	SLIByteParameter 				; get a byte parameter.
.018a71	8d 25 04	sta $0425			sta 	SignCount 						; save in temporary.
.018a74	68		pla				pla 									; restore string length.
.018a75	1a		inc a				inc 	a 								; we add one. length 5, right 2, we start at 4.
.018a76	38		sec				sec
.018a77	ed 25 04	sbc $0425			sbc 	SignCount 						; subtract characters needed, gives start position.
.018a7a	f0 02		beq $018a7e			beq 	_URStart 						; if <= 0 start from 1.
.018a7c	10 02		bpl $018a80			bpl 	_UROkay
.018a7e					_URStart:
.018a7e	a9 01		lda #$01			lda 	#1
.018a80					_UROkay:
.018a80	48		pha				pha 									; push start
.018a81	ad 25 04	lda $0425			lda 	SignCount 						; push count of characters
.018a84	48		pha				pha
.018a85	80 00		bra $018a87			bra 	SLIProcess
.018a87					SLIProcess:
.018a87	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 				; closing right bracket.
.018a8a	ea		nop				nop
.018a8b					SLIByteParameter:
.018a8b	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX 				; get integer
.018a8e	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x 				; check high bytes zero
.018a91	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.018a94	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.018a97	d0 04		bne $018a9d			bne 	_SLIBPError
.018a99	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018a9c	60		rts				rts
.018a9d					_SLIBPError:
.018a9d	80 fe		bra $018a9d		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/hex.asm

.018a9f					Unary_Hex:
.018a9f	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX 			; numeric parameter
.018aa2	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018aa5	a9 09		lda #$09			lda 	#9 							; allocate 9 bytes (8 chars + length)
.018aa7	20 e9 8b	jsr $018be9			jsr 	AllocateTempString			; allocate string space
.018aaa	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; do each byte in turn.
.018aad	20 d4 8a	jsr $018ad4			jsr 	_UHConvert
.018ab0	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018ab3	20 d4 8a	jsr $018ad4			jsr 	_UHConvert
.018ab6	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018ab9	20 d4 8a	jsr $018ad4			jsr 	_UHConvert
.018abc	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018abf	20 d4 8a	jsr $018ad4			jsr 	_UHConvert
.018ac2	5a		phy				phy 								; get length of new string
.018ac3	a0 00		ldy #$00			ldy 	#0
.018ac5	b1 20		lda ($20),y			lda 	(zTempStr),y
.018ac7	7a		ply				ply
.018ac8	c9 00		cmp #$00			cmp 	#0
.018aca	d0 05		bne $018ad1			bne 	_UHExit 					; if it was non zero okay
.018acc	a9 30		lda #$30			lda 	#"0" 						; empty, output one zero.
.018ace	20 14 8c	jsr $018c14			jsr 	WriteTempString
.018ad1					_UHExit:
.018ad1	4c af 8b	jmp $018baf			jmp 	UnaryReturnTempStr 			; return new temporary string.
.018ad4					_UHConvert:
.018ad4	48		pha				pha
.018ad5	4a		lsr a				lsr 	a 							; do MSB
.018ad6	4a		lsr a				lsr 	a
.018ad7	4a		lsr a				lsr 	a
.018ad8	4a		lsr a				lsr 	a
.018ad9	20 dd 8a	jsr $018add			jsr 	_UHNibble
.018adc	68		pla				pla 								; do LSB
.018add					_UHNibble:
.018add	29 0f		and #$0f			and 	#15 						; get nibble
.018adf	d0 0c		bne $018aed			bne 	_UHNonZero
.018ae1	5a		phy				phy									; get the length
.018ae2	a0 00		ldy #$00			ldy 	#0
.018ae4	b1 20		lda ($20),y			lda 	(zTempStr),y
.018ae6	7a		ply				ply
.018ae7	c9 00		cmp #$00			cmp 	#0 							; suppress leading zeros.
.018ae9	f0 0d		beq $018af8			beq 	_UHExit2
.018aeb	a9 00		lda #$00			lda 	#0
.018aed					_UHNonZero:
.018aed	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.018aef	90 02		bcc $018af3			bcc 	_UHDigit
.018af1	69 06		adc #$06			adc 	#7-1
.018af3					_UHDigit:
.018af3	69 30		adc #$30			adc 	#48
.018af5	20 14 8c	jsr $018c14			jsr 	WriteTempString				; output.
.018af8					_UHExit2:
.018af8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/dec.asm

.018af9					Unary_Dec:
.018af9	20 d3 85	jsr $0185d3			jsr 	EvaluateStringX 			; string parameter
.018afc	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018aff	5a		phy				phy
.018b00	a0 00		ldy #$00			ldy 	#0 							; get length of hex string.
.018b02	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018b04	f0 4c		beq $018b52			beq 	_UDFail 					; must fail if zero.
.018b06	8d 25 04	sta $0425			sta 	SignCount 					; use SignCount as a counter
.018b09	a9 00		lda #$00			lda 	#0 							; set result to zero integer.
.018b0b	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018b0e	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018b11	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018b14	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018b17	a9 01		lda #$01			lda 	#1
.018b19	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018b1c					_UDConvertLoop:
.018b1c	5a		phy				phy 								; shift mantissa left 4
.018b1d	a0 04		ldy #$04			ldy 	#4
.018b1f					_UDShift:
.018b1f	1e 08 03	asl $0308,x			asl 	XS_Mantissa+0,x
.018b22	3e 09 03	rol $0309,x			rol 	XS_Mantissa+1,x
.018b25	3e 0a 03	rol $030a,x			rol 	XS_Mantissa+2,x
.018b28	3e 0b 03	rol $030b,x			rol 	XS_Mantissa+3,x
.018b2b	88		dey				dey
.018b2c	d0 f1		bne $018b1f			bne 	_UDShift
.018b2e	7a		ply				ply
.018b2f	c8		iny				iny 								; next character
.018b30	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; fetch it.
.018b32	20 54 8b	jsr $018b54			jsr 	ConvertUpper 				; convert to U/C
.018b35	c9 30		cmp #$30			cmp 	#"0"
.018b37	90 19		bcc $018b52			bcc 	_UDFail
.018b39	c9 3a		cmp #$3a			cmp 	#"9"+1
.018b3b	90 06		bcc $018b43			bcc 	_UDOkay
.018b3d	e9 37		sbc #$37			sbc 	#7+"0" 						; alpha fudge
.018b3f	c9 10		cmp #$10			cmp 	#16
.018b41	b0 0f		bcs $018b52			bcs 	_UDFail
.018b43					_UDOkay:
.018b43	29 0f		and #$0f			and 	#15 						; nibble only
.018b45	1d 08 03	ora $0308,x			ora 	XS_Mantissa+0,x
.018b48	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018b4b	ce 25 04	dec $0425			dec 	SignCount 					; do it for each character
.018b4e	d0 cc		bne $018b1c			bne 	_UDConvertLoop
.018b50	7a		ply				ply
.018b51	60		rts				rts
.018b52					_UDFail:
.018b52	80 fe		bra $018b52		_error: bra _error
.018b54					ConvertUpper:
.018b54	c9 61		cmp #$61			cmp 	#"a"
.018b56	90 07		bcc $018b5f			bcc 	_CUExit
.018b58	c9 7b		cmp #$7b			cmp 	#"z"+1
.018b5a	b0 03		bcs $018b5f			bcs 	_CUExit
.018b5c	38		sec				sec
.018b5d	e9 20		sbc #$20			sbc 	#32
.018b5f	60		rts		_CUExit:rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/chr.asm

.018b60					Unary_Chr:
.018b60	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX			; numeric parameter
.018b63	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018b66	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.018b69	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.018b6c	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.018b6f	d0 0e		bne $018b7f			bne 	_UCChar
.018b71	a9 01		lda #$01			lda 	#1 							; one character string
.018b73	20 e9 8b	jsr $018be9			jsr 	AllocateTempString
.018b76	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; get char# and write it.
.018b79	20 14 8c	jsr $018c14			jsr 	WriteTempString
.018b7c	4c af 8b	jmp $018baf			jmp 	UnaryReturnTempStr
.018b7f					_UCChar:
.018b7f	80 fe		bra $018b7f		_error: bra _error

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/spc.asm

.018b81					Unary_Spc:
.018b81	20 ca 85	jsr $0185ca			jsr 	EvaluateIntegerX 			; numeric parameter
.018b84	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; right bracket.
.018b87	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.018b8a	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.018b8d	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.018b90	d0 1b		bne $018bad			bne 	_USSize
.018b92	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018b95	c9 fe		cmp #$fe			cmp 	#maxString+1
.018b97	b0 14		bcs $018bad			bcs 	_USSize
.018b99	48		pha				pha 								; save length
.018b9a	1a		inc a				inc 	a 							; allocate one more.
.018b9b	20 e9 8b	jsr $018be9			jsr 	AllocateTempString
.018b9e	68		pla				pla 								; get length
.018b9f	f0 0e		beq $018baf			beq 	UnaryReturnTempStr 			; return the current temp string
.018ba1					_USLoop:
.018ba1	48		pha				pha
.018ba2	a9 20		lda #$20			lda 	#" "
.018ba4	20 14 8c	jsr $018c14			jsr 	WriteTempString
.018ba7	68		pla				pla
.018ba8	3a		dec a				dec 	a
.018ba9	d0 f6		bne $018ba1			bne 	_USLoop
.018bab	80 02		bra $018baf			bra 	UnaryReturnTempStr
.018bad					_USSize:
.018bad	80 fe		bra $018bad		_error: bra _error
.018baf					UnaryReturnTempStr:
.018baf	a5 20		lda $20				lda 	zTempStr 					; copy temp string addr -> mantissa
.018bb1	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018bb4	a5 21		lda $21				lda 	zTempStr+1
.018bb6	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018bb9	a9 02		lda #$02			lda 	#2 							; set type to string
.018bbb	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018bbe	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/memory/65816.asm

.018bbf					MemRead:
.018bbf	8d 25 04	sta $0425			sta 	SignCount 					; save count
.018bc2	a0 00		ldy #$00			ldy 	#0 							; start from here
.018bc4	b7 1a		lda [$1a],y	_MLoop1:lda 	[zlTemp1],y 				; read the long address
.018bc6	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x 				; copy into mantissa
.018bc9	c8		iny				iny 								; next to copy
.018bca	e8		inx				inx
.018bcb	cc 25 04	cpy $0425			cpy 	SignCount 					; do required # of bytes.
.018bce	d0 f4		bne $018bc4			bne 	_MLoop1
.018bd0	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.asm

.018bd1					CheckNextToken:
.018bd1	d1 16		cmp ($16),y			cmp 	(zCodePtr),y
.018bd3	d0 02		bne $018bd7			bne 	CTFail 						; no, then fail
.018bd5	c8		iny				iny
.018bd6	60		rts				rts
.018bd7					CTFail:
.018bd7	80 fe		bra $018bd7		_error: bra _error
.018bd9					CheckNextRParen:
.018bd9	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018bdb	c9 bc		cmp #$bc			cmp 	#token_rparen
.018bdd	d0 f8		bne $018bd7			bne 	CTFail
.018bdf	c8		iny				iny
.018be0	60		rts				rts
.018be1					CheckNextComma:
.018be1	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018be3	c9 bd		cmp #$bd			cmp 	#token_comma
.018be5	d0 f0		bne $018bd7			bne 	CTFail
.018be7	c8		iny				iny
.018be8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/tempalloc.asm

.018be9					AllocateTempString:
.018be9	48		pha				pha 								; save required count.
.018bea	a5 21		lda $21				lda 	zTempStr+1 					; check if initialised yet ?
.018bec	d0 0b		bne $018bf9			bne 	_ATSInitialised
.018bee	ad 26 04	lda $0426			lda 	StringPtr 					; set temporary string ptr 1 page below available
.018bf1	85 20		sta $20				sta 	zTempStr					; space, this is for strings to be concreted.
.018bf3	ad 27 04	lda $0427			lda 	StringPtr+1
.018bf6	3a		dec a				dec 	a
.018bf7	85 21		sta $21				sta 	zTempStr+1
.018bf9					_ATSInitialised:
.018bf9	68		pla				pla 								; get required count back.
.018bfa	49 ff		eor #$ff			eor 	#$FF 						; negate 2's complement.
.018bfc	1a		inc a				inc 	a
.018bfd	18		clc				clc
.018bfe	65 20		adc $20				adc 	zTempStr 					; "add" to the temp string pointer
.018c00	85 20		sta $20				sta 	zTempStr
.018c02	a9 ff		lda #$ff			lda 	#$FF
.018c04	65 21		adc $21				adc 	zTempStr+1
.018c06	85 21		sta $21				sta 	zTempStr+1
.018c08	a9 00		lda #$00			lda 	#0 							; clear temp string.
.018c0a	5a		phy				phy
.018c0b	a8		tay				tay
.018c0c	91 20		sta ($20),y			sta 	(zTempStr),y
.018c0e	7a		ply				ply
.018c0f	1a		inc a				inc 	a 							; reset the write index.
.018c10	8d 27 04	sta $0427			sta 	TempStringWriteIndex
.018c13	60		rts				rts
.018c14					WriteTempString:
.018c14	5a		phy				phy 								; save Y
.018c15	ac 27 04	ldy $0427			ldy 	TempStringWriteIndex	 	; write position.
.018c18	91 20		sta ($20),y			sta 	(zTempStr),y 				; write character out.
.018c1a	ee 27 04	inc $0427			inc 	TempStringWriteIndex 		; increment the write position.
.018c1d	98		tya				tya 								; unchanged Y is now length
.018c1e	a0 00		ldy #$00			ldy 	#0
.018c20	91 20		sta ($20),y			sta 	(zTempStr),y
.018c22	7a		ply				ply 								; restore Y and exit
.018c23	60		rts				rts
.018c24					CreateTempStringCopy:
.018c24	da		phx				phx 								; save X
.018c25	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018c27	3a		dec a				dec 	a 							; we need one more than actual length for temp str
.018c28	20 e9 8b	jsr $018be9			jsr 	AllocateTempString 			; allocate memory for temporary string.
.018c2b	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018c2d	c8		iny				iny
.018c2e	3a		dec a				dec 	a 							; make the actual length in charactes
.018c2f	3a		dec a				dec 	a
.018c30	a2 00		ldx #$00			ldx 	#0 							; set that as the length of the string.
.018c32	81 20		sta ($20,x)			sta 	(zTempStr,x)
.018c34	85 1a		sta $1a				sta 	zLTemp1 					; that's used as a count.
.018c36	09 00		ora #$00			ora 	#0 							; if zero already, exit
.018c38	f0 0d		beq $018c47			beq 	_CTSCExit
.018c3a					_CTSCLoop:
.018c3a	b1 16		lda ($16),y			lda 	(zCodePtr),y
.018c3c	c8		iny				iny
.018c3d	5a		phy				phy 								; save in Y
.018c3e	e8		inx				inx 								; bump index
.018c3f	9b		txy				txy 								; index into Y
.018c40	91 20		sta ($20),y			sta 	(zTempStr),y 				; save at index
.018c42	7a		ply				ply 								; restore Y
.018c43	c6 1a		dec $1a				dec 	zLTemp1 					; do for each character
.018c45	d0 f3		bne $018c3a			bne 	_CTSCLoop
.018c47					_CTSCExit:
.018c47	fa		plx				plx 								; restore X
.018c48	60		rts				rts 								; exit

;******  Return to file: _include.asm


;******  Processing file: modules/integer/multiply.asm

.018c49					MulInteger32:
.018c49	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x					; copy +0 to +8
.018c4c	9d 14 03	sta $0314,x			sta 	XS3_Mantissa,x
.018c4f	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018c52	9d 15 03	sta $0315,x			sta 	XS3_Mantissa+1,x
.018c55	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018c58	9d 16 03	sta $0316,x			sta 	XS3_Mantissa+2,x
.018c5b	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.018c5e	9d 17 03	sta $0317,x			sta 	XS3_Mantissa+3,x
.018c61	a9 00		lda #$00			lda 	#0
.018c63	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x 				; zero +0
.018c66	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018c69	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018c6c	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018c6f					_BFMMultiply:
.018c6f	bd 14 03	lda $0314,x			lda 	XS3_Mantissa,x 					; get LSBit of 8-11
.018c72	29 01		and #$01			and 	#1
.018c74	f0 03		beq $018c79			beq 	_BFMNoAdd
.018c76	20 ae 87	jsr $0187ae			jsr 	AddInteger32
.018c79					_BFMNoAdd:
.018c79	1e 0e 03	asl $030e,x			asl 	XS2_Mantissa+0,x 				; shift +4 left
.018c7c	3e 0f 03	rol $030f,x			rol 	XS2_Mantissa+1,x
.018c7f	3e 10 03	rol $0310,x			rol 	XS2_Mantissa+2,x
.018c82	3e 11 03	rol $0311,x			rol 	XS2_Mantissa+3,x
.018c85	5e 17 03	lsr $0317,x			lsr 	XS3_Mantissa+3,x 				; shift +8 right
.018c88	7e 16 03	ror $0316,x			ror 	XS3_Mantissa+2,x
.018c8b	7e 15 03	ror $0315,x			ror 	XS3_Mantissa+1,x
.018c8e	7e 14 03	ror $0314,x			ror 	XS3_Mantissa,x
.018c91	bd 14 03	lda $0314,x			lda 	XS3_Mantissa,x 					; continue if +8 is nonzero
.018c94	1d 15 03	ora $0315,x			ora 	XS3_Mantissa+1,x
.018c97	1d 16 03	ora $0316,x			ora 	XS3_Mantissa+2,x
.018c9a	1d 17 03	ora $0317,x			ora 	XS3_Mantissa+3,x
.018c9d	d0 d0		bne $018c6f			bne 	_BFMMultiply
.018c9f	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/divide.asm

.018ca0					DivInteger32:
.018ca0	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x 			; check for /0
.018ca3	1d 0f 03	ora $030f,x			ora 	XS2_Mantissa+1,x
.018ca6	1d 10 03	ora $0310,x			ora 	XS2_Mantissa+2,x
.018ca9	1d 11 03	ora $0311,x			ora 	XS2_Mantissa+3,x
.018cac	d0 02		bne $018cb0			bne 	_BFDOkay
.018cae	80 fe		bra $018cae		_error: bra _error
.018cb0					_BFDOkay:
.018cb0	a9 00		lda #$00			lda 	#0 							; zLTemp1 is 'A' (and holds the remainder)
.018cb2	85 1a		sta $1a				sta 	zLTemp1 					; Q/Dividend/Left in +0
.018cb4	85 1b		sta $1b				sta 	zLTemp1+1 					; M/Divisor/Right in +4
.018cb6	85 1c		sta $1c				sta 	zLTemp1+2
.018cb8	85 1d		sta $1d				sta 	zLTemp1+3
.018cba	8d 25 04	sta $0425			sta 	SignCount 					; Count of signs.
.018cbd	20 1e 8d	jsr $018d1e			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.018cc0	da		phx				phx
.018cc1	e8		inx				inx
.018cc2	e8		inx				inx
.018cc3	e8		inx				inx
.018cc4	e8		inx				inx
.018cc5	e8		inx				inx
.018cc6	e8		inx				inx
.018cc7	20 1e 8d	jsr $018d1e			jsr 	CheckIntegerNegate
.018cca	fa		plx				plx
.018ccb	5a		phy				phy 								; Y is the counter
.018ccc	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.018cce					_BFDLoop:
.018cce	1e 08 03	asl $0308,x			asl 	XS_Mantissa+0,x 			; shift AQ left.
.018cd1	3e 09 03	rol $0309,x			rol 	XS_Mantissa+1,x
.018cd4	3e 0a 03	rol $030a,x			rol 	XS_Mantissa+2,x
.018cd7	3e 0b 03	rol $030b,x			rol 	XS_Mantissa+3,x
.018cda	26 1a		rol $1a				rol 	zLTemp1
.018cdc	26 1b		rol $1b				rol 	zLTemp1+1
.018cde	26 1c		rol $1c				rol 	zLTemp1+2
.018ce0	26 1d		rol $1d				rol 	zLTemp1+3
.018ce2	38		sec				sec
.018ce3	a5 1a		lda $1a				lda 	zLTemp1+0 					; Calculate A-M on stack.
.018ce5	fd 0e 03	sbc $030e,x			sbc 	XS2_Mantissa+0,x
.018ce8	48		pha				pha
.018ce9	a5 1b		lda $1b				lda 	zLTemp1+1
.018ceb	fd 0f 03	sbc $030f,x			sbc 	XS2_Mantissa+1,x
.018cee	48		pha				pha
.018cef	a5 1c		lda $1c				lda 	zLTemp1+2
.018cf1	fd 10 03	sbc $0310,x			sbc 	XS2_Mantissa+2,x
.018cf4	48		pha				pha
.018cf5	a5 1d		lda $1d				lda 	zLTemp1+3
.018cf7	fd 11 03	sbc $0311,x			sbc 	XS2_Mantissa+3,x
.018cfa	90 15		bcc $018d11			bcc 	_BFDNoAdd
.018cfc	85 1d		sta $1d				sta 	zLTemp1+3 					; update A
.018cfe	68		pla				pla
.018cff	85 1c		sta $1c				sta 	zLTemp1+2
.018d01	68		pla				pla
.018d02	85 1b		sta $1b				sta 	zLTemp1+1
.018d04	68		pla				pla
.018d05	85 1a		sta $1a				sta 	zLTemp1+0
.018d07	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; set Q bit 1.
.018d0a	09 01		ora #$01			ora 	#1
.018d0c	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018d0f	80 03		bra $018d14			bra 	_BFDNext
.018d11					_BFDNoAdd:
.018d11	68		pla				pla 								; Throw away the intermediate calculations
.018d12	68		pla				pla
.018d13	68		pla				pla
.018d14					_BFDNext:
.018d14	88		dey				dey
.018d15	d0 b7		bne $018cce			bne 	_BFDLoop
.018d17	7a		ply				ply 								; restore Y and exit
.018d18	4e 25 04	lsr $0425			lsr 	SignCount 					; if sign count odd,
.018d1b	b0 07		bcs $018d24			bcs		IntegerNegateAlways 			; negate the result
.018d1d	60		rts				rts
.018d1e					CheckIntegerNegate:
.018d1e	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.018d21	30 01		bmi $018d24			bmi 	IntegerNegateAlways
.018d23	60		rts				rts
.018d24					IntegerNegateAlways:
.018d24	ee 25 04	inc $0425			inc 	SignCount
.018d27	38		sec				sec
.018d28	a9 00		lda #$00			lda 	#0
.018d2a	fd 08 03	sbc $0308,x			sbc 	XS_Mantissa+0,x
.018d2d	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018d30	a9 00		lda #$00			lda 	#0
.018d32	fd 09 03	sbc $0309,x			sbc 	XS_Mantissa+1,x
.018d35	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018d38	a9 00		lda #$00			lda 	#0
.018d3a	fd 0a 03	sbc $030a,x			sbc 	XS_Mantissa+2,x
.018d3d	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018d40	a9 00		lda #$00			lda 	#0
.018d42	fd 0b 03	sbc $030b,x			sbc 	XS_Mantissa+3,x
.018d45	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018d48	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/inttostr.asm

.018d49					INTToString:
.018d49	48		pha				pha
.018d4a	5a		phy				phy
.018d4b	bd 0b 03	lda $030b,x			lda 		XS_Mantissa+3,x 		; check -ve
.018d4e	10 08		bpl $018d58			bpl 		_ITSNotMinus
.018d50	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.018d52	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.018d55	20 24 8d	jsr $018d24			jsr 		IntegerNegateAlways 	; negate the number.
.018d58					_ITSNotMinus:
.018d58	a9 00		lda #$00			lda 		#0
.018d5a	8d 21 04	sta $0421			sta 		NumSuppress 			; clear the suppression flag.
.018d5d	9b		txy				txy 								; use Y for the mantissa index.
.018d5e	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.018d60					_ITSNextSubtractor:
.018d60	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.018d62	8d 22 04	sta $0422			sta 		NumConvCount
.018d65					_ITSSubtract:
.018d65	38		sec				sec
.018d66	b9 08 03	lda $0308,y			lda 		XS_Mantissa,y 			; subtract number and push on stack
.018d69	ff c7 8d 01	sbc $018dc7,x			sbc 		_ITSSubtractors+0,x
.018d6d	48		pha				pha
.018d6e	b9 09 03	lda $0309,y			lda 		XS_Mantissa+1,y
.018d71	ff c8 8d 01	sbc $018dc8,x			sbc 		_ITSSubtractors+1,x
.018d75	48		pha				pha
.018d76	b9 0a 03	lda $030a,y			lda 		XS_Mantissa+2,y
.018d79	ff c9 8d 01	sbc $018dc9,x			sbc 		_ITSSubtractors+2,x
.018d7d	48		pha				pha
.018d7e	b9 0b 03	lda $030b,y			lda 		XS_Mantissa+3,y
.018d81	ff ca 8d 01	sbc $018dca,x			sbc 		_ITSSubtractors+3,x
.018d85	90 14		bcc $018d9b			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.018d87	99 0b 03	sta $030b,y			sta 		XS_Mantissa+3,y 		; save subtract off stack
.018d8a	68		pla				pla
.018d8b	99 0a 03	sta $030a,y			sta 		XS_Mantissa+2,y
.018d8e	68		pla				pla
.018d8f	99 09 03	sta $0309,y			sta 		XS_Mantissa+1,y
.018d92	68		pla				pla
.018d93	99 08 03	sta $0308,y			sta 		XS_Mantissa+0,y
.018d96	ee 22 04	inc $0422			inc 		NumConvCount 			; bump count.
.018d99	80 ca		bra $018d65			bra 		_ITSSubtract 			; go round again.
.018d9b					_ITSCantSubtract:
.018d9b	68		pla				pla 								; throw away interim answers
.018d9c	68		pla				pla
.018d9d	68		pla				pla
.018d9e	ad 22 04	lda $0422			lda 		NumConvCount 			; if not zero then no suppression check
.018da1	c9 30		cmp #$30			cmp 		#"0"
.018da3	d0 05		bne $018daa			bne 		_ITSOutputDigit
.018da5	ad 21 04	lda $0421			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.018da8	10 09		bpl $018db3			bpl 		_ITSGoNextSubtractor
.018daa					_ITSOutputDigit:
.018daa	ce 21 04	dec $0421			dec 		NumSuppress 			; suppression check will be non-zero.
.018dad	ad 22 04	lda $0422			lda 		NumConvCount 			; count of subtractions
.018db0	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter 		; output it.
.018db3					_ITSGoNextSubtractor:
.018db3	e8		inx				inx 								; next dword
.018db4	e8		inx				inx
.018db5	e8		inx				inx
.018db6	e8		inx				inx
.018db7	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.018db9	d0 a5		bne $018d60			bne 		_ITSNextSubtractor 		; do all the subtractors.
.018dbb	bb		tyx				tyx 								; X is back as the mantissa index
.018dbc	bd 08 03	lda $0308,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.018dbf	09 30		ora #$30			ora 		#"0"
.018dc1	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.018dc4	7a		ply				ply 								; and exit
.018dc5	68		pla				pla
.018dc6	60		rts				rts
.018dc7					_ITSSubtractors:
>018dc7	00 ca 9a 3b					.dword 		1000000000
>018dcb	00 e1 f5 05					.dword 		100000000
>018dcf	80 96 98 00					.dword 		10000000
>018dd3	40 42 0f 00					.dword 		1000000
>018dd7	a0 86 01 00					.dword 		100000
>018ddb	10 27 00 00					.dword 		10000
>018ddf	e8 03 00 00					.dword 		1000
>018de3	64 00 00 00					.dword 		100
>018de7	0a 00 00 00					.dword 		10
.018deb					_ITSSubtractorsEnd:
.018deb					ITSOutputCharacter:
.018deb	48		pha				pha
.018dec	da		phx				phx
.018ded	ae 20 04	ldx $0420			ldx 	NumBufX 					; save digit
.018df0	9d 00 04	sta $0400,x			sta 	Num_Buffer,x
.018df3	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.018df5	9d 01 04	sta $0401,x			sta 	Num_Buffer+1,x
.018df8	ee 20 04	inc $0420			inc 	NumBufX						; bump pointer.
.018dfb	fa		plx				plx
.018dfc	68		pla				pla
.018dfd	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/intfromstr.asm

.018dfe					IntFromString:
.018dfe	a0 00		ldy #$00			ldy 	#0
.018e00	8c 23 04	sty $0423			sty 	ExpTemp 					; this is the converted digit count.
.018e03					IntFromStringY:
.018e03	48		pha				pha
.018e04	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.018e06	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.018e09	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018e0c	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018e0f	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018e12	a9 01		lda #$01			lda 	#1
.018e14	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018e17					_IFSLoop:
.018e17	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get next
.018e19	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.018e1b	90 60		bcc $018e7d			bcc 	_IFSExit
.018e1d	c9 3a		cmp #$3a			cmp 	#"9"+1
.018e1f	b0 5c		bcs $018e7d			bcs 	_IFSExit
.018e21	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.018e24	c9 0c		cmp #$0c			cmp 	#12
.018e26	b0 5f		bcs $018e87			bcs 	_IFSOverflow
.018e28	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.018e2b	48		pha				pha
.018e2c	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018e2f	48		pha				pha
.018e30	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018e33	48		pha				pha
.018e34	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018e37	48		pha				pha
.018e38	20 9c 8e	jsr $018e9c			jsr 	IFSX1ShiftLeft 				; double
.018e3b	20 9c 8e	jsr $018e9c			jsr 	IFSX1ShiftLeft 				; x 4
.018e3e	18		clc				clc 								; add saved value x 5
.018e3f	68		pla				pla
.018e40	7d 08 03	adc $0308,x			adc 	XS_Mantissa+0,x
.018e43	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018e46	68		pla				pla
.018e47	7d 09 03	adc $0309,x			adc 	XS_Mantissa+1,x
.018e4a	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018e4d	68		pla				pla
.018e4e	7d 0a 03	adc $030a,x			adc 	XS_Mantissa+2,x
.018e51	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018e54	68		pla				pla
.018e55	7d 0b 03	adc $030b,x			adc 	XS_Mantissa+3,x
.018e58	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018e5b	20 9c 8e	jsr $018e9c			jsr 	IFSX1ShiftLeft 				; x 10
.018e5e	ee 23 04	inc $0423			inc 	ExpTemp 					; bump count of digits processed.
.018e61	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; add digit
.018e63	29 0f		and #$0f			and 	#15
.018e65	c8		iny				iny
.018e66	7d 08 03	adc $0308,x			adc 	XS_Mantissa+0,x
.018e69	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018e6c	90 a9		bcc $018e17			bcc 	_IFSLoop
.018e6e	fe 09 03	inc $0309,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.018e71	d0 a4		bne $018e17			bne 	_IFSLoop
.018e73	fe 0a 03	inc $030a,x			inc 	XS_Mantissa+2,x
.018e76	d0 9f		bne $018e17			bne 	_IFSLoop
.018e78	fe 0b 03	inc $030b,x			inc 	XS_Mantissa+3,x
.018e7b	80 9a		bra $018e17			bra 	_IFSLoop
.018e7d					_IFSExit:
.018e7d	98		tya				tya 								; get offset
.018e7e					_IFSOkay:
.018e7e	38		sec				sec
.018e7f	ad 23 04	lda $0423			lda 	ExpTemp
.018e82	f0 01		beq $018e85			beq 	_IFSSkipFail
.018e84	18		clc				clc
.018e85					_IFSSkipFail:
.018e85	68		pla				pla 								; and exit.
.018e86	60		rts				rts
.018e87					_IFSOverflow:
.018e87	20 17 84	jsr $018417			jsr 	ERR_Handler
>018e8a	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>018e92	20 6f 76 65 72 66 6c 6f 77 00
.018e9c					IFSX1ShiftLeft:
.018e9c	1e 08 03	asl $0308,x			asl 	XS_Mantissa+0,x
.018e9f	3e 09 03	rol $0309,x			rol 	XS_Mantissa+1,x
.018ea2	3e 0a 03	rol $030a,x			rol 	XS_Mantissa+2,x
.018ea5	3e 0b 03	rol $030b,x			rol 	XS_Mantissa+3,x
.018ea8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.018ea9					FPSubtract:
.018ea9	48		pha				pha
.018eaa	bd 13 03	lda $0313,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.018ead	49 80		eor #$80			eor 	#$80
.018eaf	9d 13 03	sta $0313,x			sta 	XS2_Type,x
.018eb2	68		pla				pla 								; --- and fall through ---
.018eb3					FPAdd:
.018eb3	48		pha				pha
.018eb4	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.018eb7	d0 05		bne $018ebe			bne 	_FPA_NegativeLHS
.018eb9	20 db 8e	jsr $018edb			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.018ebc	68		pla				pla
.018ebd	60		rts				rts
.018ebe					_FPA_NegativeLHS:
.018ebe	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.018ec1	49 80		eor #$80			eor 	#$80
.018ec3	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018ec6	bd 13 03	lda $0313,x			lda 	XS2_Type,x 					; flip the sign of B and add
.018ec9	49 80		eor #$80			eor 	#$80
.018ecb	9d 13 03	sta $0313,x			sta 	XS2_Type,x
.018ece	20 db 8e	jsr $018edb			jsr 	FPAdd_Worker 				; do the add calculation.
.018ed1	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; flip sign of X1 back
.018ed4	49 80		eor #$80			eor 	#$80
.018ed6	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018ed9	68		pla				pla
.018eda	60		rts				rts
.018edb					FPAdd_Worker:
.018edb	3c 13 03	bit $0313,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.018ede	70 08		bvs $018ee8			bvs 	_FPAWExit 					; no change.
.018ee0	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.018ee3	50 07		bvc $018eec			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.018ee5	20 6e 91	jsr $01916e			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.018ee8					_FPAWExit:
.018ee8	20 f6 91	jsr $0191f6			jsr 	FPUNormalise 				; normalise the result.
.018eeb	60		rts				rts
.018eec					_FPAWMakeSame:
.018eec	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.018eef	38		sec				sec
.018ef0	fd 12 03	sbc $0312,x			sbc	 	XS2_Exponent,x 				; using subtraction
.018ef3	f0 1b		beq $018f10			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.018ef5	da		phx				phx 								; save X
.018ef6	90 06		bcc $018efe			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.018ef8	e8		inx				inx
.018ef9	e8		inx				inx
.018efa	e8		inx				inx
.018efb	e8		inx				inx
.018efc	e8		inx				inx
.018efd	e8		inx				inx
.018efe					_FPAWShiftA:
.018efe	fe 0c 03	inc $030c,x			inc 	XS_Exponent,x 				; so shift exponent up.
.018f01	5e 0b 03	lsr $030b,x			lsr 	3+XS_Mantissa,x
.018f04	7e 0a 03	ror $030a,x			ror 	2+XS_Mantissa,x
.018f07	7e 09 03	ror $0309,x			ror 	1+XS_Mantissa,x
.018f0a	7e 08 03	ror $0308,x			ror 	0+XS_Mantissa,x
.018f0d	fa		plx				plx 								; restore original X
.018f0e	80 dc		bra $018eec			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.018f10					_FPAW_DoArithmetic:
.018f10	3c 13 03	bit $0313,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.018f13	30 39		bmi $018f4e			bmi 	_FPAW_BNegative
.018f15	18		clc				clc
.018f16	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018f19	7d 0e 03	adc $030e,x			adc 	XS2_Mantissa+0,x
.018f1c	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018f1f	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018f22	7d 0f 03	adc $030f,x			adc 	XS2_Mantissa+1,x
.018f25	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018f28	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018f2b	7d 10 03	adc $0310,x			adc 	XS2_Mantissa+2,x
.018f2e	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018f31	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.018f34	7d 11 03	adc $0311,x			adc 	XS2_Mantissa+3,x
.018f37	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018f3a	90 ac		bcc $018ee8			bcc 	_FPAWExit 					; no carry.
.018f3c	fe 0c 03	inc $030c,x			inc 	XS_Exponent,x 				; so shift exponent up.
.018f3f	38		sec				sec
.018f40	7e 0b 03	ror $030b,x			ror 	3+XS_Mantissa,x
.018f43	7e 0a 03	ror $030a,x			ror 	2+XS_Mantissa,x
.018f46	7e 09 03	ror $0309,x			ror 	1+XS_Mantissa,x
.018f49	7e 08 03	ror $0308,x			ror 	0+XS_Mantissa,x
.018f4c	80 9a		bra $018ee8			bra 	_FPAWExit
.018f4e					_FPAW_BNegative:
.018f4e	38		sec				sec
.018f4f	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x
.018f52	fd 0e 03	sbc $030e,x			sbc 	XS2_Mantissa+0,x
.018f55	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018f58	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018f5b	fd 0f 03	sbc $030f,x			sbc 	XS2_Mantissa+1,x
.018f5e	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018f61	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018f64	fd 10 03	sbc $0310,x			sbc 	XS2_Mantissa+2,x
.018f67	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018f6a	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.018f6d	fd 11 03	sbc $0311,x			sbc 	XS2_Mantissa+3,x
.018f70	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.018f73	b0 0b		bcs $018f80			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.018f75	20 9b 91	jsr $01919b			jsr 	FPUNegateInteger			; negate the mantissa
.018f78	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; flip result sign
.018f7b	49 80		eor #$80			eor 	#$80
.018f7d	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.018f80					_FPAWGoExit:
.018f80	4c e8 8e	jmp $018ee8			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.018f83					FPD_IsDivZero:
.018f83	80 fe		bra $018f83		_error: bra _error
.018f85					FPDivide:
.018f85	48		pha				pha
.018f86	5a		phy				phy
.018f87	3c 13 03	bit $0313,x			bit 	XS2_Type,x 					; check if division by zero
.018f8a	70 f7		bvs $018f83			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.018f8c	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.018f8f	f0 03		beq $018f94			beq 	_FPDCalculateExp
.018f91					_FPD_Exit:
.018f91	7a		ply				ply
.018f92	68		pla				pla
.018f93	60		rts				rts
.018f94					_FPDCalculateExp:
.018f94	bd 12 03	lda $0312,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.018f97	49 ff		eor #$ff			eor 	#$FF
.018f99	1a		inc a				inc 	a
.018f9a	9d 12 03	sta $0312,x			sta 	XS2_Exponent,x
.018f9d	20 91 90	jsr $019091			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.018fa0	18		clc				clc 	 							; add 1 to the resulting exponent
.018fa1	69 01		adc #$01			adc 	#1
.018fa3	b0 65		bcs $01900a			bcs 	_FPD_Overflow 				; which can overflow.
.018fa5	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x
.018fa8	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.018faa	85 1a		sta $1a				sta 	zLTemp1+0
.018fac	85 1b		sta $1b				sta 	zLTemp1+1
.018fae	85 1c		sta $1c				sta 	zLTemp1+2
.018fb0	85 1d		sta $1d				sta 	zLTemp1+3
.018fb2	a0 20		ldy #$20			ldy 	#32 						; times round.
.018fb4					_FPD_Loop:
.018fb4	38		sec				sec 								; calculate X1-X2 stacking result because we might
.018fb5	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x 				; not save it.
.018fb8	fd 0e 03	sbc $030e,x			sbc 	XS2_Mantissa,x
.018fbb	48		pha				pha
.018fbc	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.018fbf	fd 0f 03	sbc $030f,x			sbc 	XS2_Mantissa+1,x
.018fc2	48		pha				pha
.018fc3	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.018fc6	fd 10 03	sbc $0310,x			sbc 	XS2_Mantissa+2,x
.018fc9	48		pha				pha
.018fca	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.018fcd	fd 11 03	sbc $0311,x			sbc 	XS2_Mantissa+3,x
.018fd0	90 17		bcc $018fe9			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.018fd2	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x 			; save results out to A
.018fd5	68		pla				pla
.018fd6	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.018fd9	68		pla				pla
.018fda	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.018fdd	68		pla				pla
.018fde	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.018fe1	a5 1d		lda $1d				lda 	zLTemp1+3 					; set high bit of result
.018fe3	09 80		ora #$80			ora 	#$80
.018fe5	85 1d		sta $1d				sta 	zLTemp1+3
.018fe7	80 03		bra $018fec			bra 	_FPD_Rotates
.018fe9					_FPD_NoSubtract:
.018fe9	68		pla				pla 								; throw away unwanted results
.018fea	68		pla				pla
.018feb	68		pla				pla
.018fec					_FPD_Rotates:
.018fec	5e 11 03	lsr $0311,x			lsr 	3+XS2_Mantissa,x
.018fef	7e 10 03	ror $0310,x			ror 	2+XS2_Mantissa,x
.018ff2	7e 0f 03	ror $030f,x			ror 	1+XS2_Mantissa,x
.018ff5	7e 0e 03	ror $030e,x			ror 	0+XS2_Mantissa,x
.018ff8	06 1a		asl $1a				asl 	zLTemp1 					; rotate result round left
.018ffa	26 1b		rol $1b				rol 	zLTemp1+1
.018ffc	26 1c		rol $1c				rol 	zLTemp1+2
.018ffe	26 1d		rol $1d				rol 	zLTemp1+3
.019000	90 02		bcc $019004			bcc 	_FPD_NoCarry
.019002	e6 1a		inc $1a				inc 	zLTemp1 					; if rotated out, set LSB.
.019004					_FPD_NoCarry:
.019004	88		dey				dey 								; do 32 times
.019005	d0 ad		bne $018fb4			bne 	_FPD_Loop
.019007	4c 6e 90	jmp $01906e			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.01900a					_FPD_Overflow:
.01900a	4c 6b 92	jmp $01926b			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.01900d					FPMultiply:
.01900d	48		pha				pha
.01900e	5a		phy				phy
.01900f	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.019012	70 08		bvs $01901c			bvs 	_FPM_Exit
.019014	3c 13 03	bit $0313,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.019017	50 06		bvc $01901f			bvc 	_FPM_CalcExponent
.019019	20 6e 91	jsr $01916e			jsr 	FPUCopyX2ToX1
.01901c					_FPM_Exit:
.01901c	7a		ply				ply
.01901d	68		pla				pla
.01901e	60		rts				rts
.01901f					_FPM_CalcExponent:
.01901f	18		clc				clc
.019020	20 91 90	jsr $019091			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.019023	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x 				; save the result.
.019026	a9 00		lda #$00			lda 	#0
.019028	85 1a		sta $1a				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.01902a	85 1b		sta $1b				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.01902c	85 1c		sta $1c				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.01902e	85 1d		sta $1d				sta 	zLTemp1+3
.019030	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.019032					_FPM_Loop:
.019032	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x				; check LSB of long product
.019035	29 01		and #$01			and 	#1
.019037	18		clc				clc 								; clear carry for the long rotate.
.019038	f0 1d		beq $019057			beq 	_FPM_NoAddition
.01903a	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.01903b	a5 1a		lda $1a				lda 	zLTemp1+0
.01903d	7d 0e 03	adc $030e,x			adc 	XS2_Mantissa+0,x
.019040	85 1a		sta $1a				sta 	zLTemp1+0
.019042	a5 1b		lda $1b				lda 	zLTemp1+1
.019044	7d 0f 03	adc $030f,x			adc 	XS2_Mantissa+1,x
.019047	85 1b		sta $1b				sta 	zLTemp1+1
.019049	a5 1c		lda $1c				lda 	zLTemp1+2
.01904b	7d 10 03	adc $0310,x			adc 	XS2_Mantissa+2,x
.01904e	85 1c		sta $1c				sta 	zLTemp1+2
.019050	a5 1d		lda $1d				lda 	zLTemp1+3
.019052	7d 11 03	adc $0311,x			adc 	XS2_Mantissa+3,x
.019055	85 1d		sta $1d				sta 	zLTemp1+3
.019057					_FPM_NoAddition:
.019057	66 1d		ror $1d				ror 	3+zLTemp1
.019059	66 1c		ror $1c				ror 	2+zLTemp1
.01905b	66 1b		ror $1b				ror 	1+zLTemp1
.01905d	66 1a		ror $1a				ror 	0+zLTemp1
.01905f	7e 0b 03	ror $030b,x			ror 	3+XS_Mantissa,x
.019062	7e 0a 03	ror $030a,x			ror 	2+XS_Mantissa,x
.019065	7e 09 03	ror $0309,x			ror 	1+XS_Mantissa,x
.019068	7e 08 03	ror $0308,x			ror 	0+XS_Mantissa,x
.01906b	88		dey				dey
.01906c	d0 c4		bne $019032			bne 	_FPM_Loop 					; do this 32 times.
.01906e					FPM_CopySignNormalize:
.01906e	a5 1a		lda $1a				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.019070	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.019073	a5 1b		lda $1b				lda 	zLTemp1+1
.019075	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.019078	a5 1c		lda $1c				lda 	zLTemp1+2
.01907a	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.01907d	a5 1d		lda $1d				lda 	zLTemp1+3
.01907f	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.019082	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; sign is xor of signs
.019085	5d 13 03	eor $0313,x			eor 	XS2_Type,x
.019088	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.01908b	20 f6 91	jsr $0191f6			jsr 	FPUNormalise 				; normalise and exit.
.01908e	7a		ply				ply
.01908f	68		pla				pla
.019090	60		rts				rts
.019091					FPCalculateExponent:
.019091	18		clc				clc
.019092	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.019095	7d 12 03	adc $0312,x			adc 	XS2_Exponent,x
.019098	b0 08		bcs $0190a2			bcs 	_FPCECarry 					; carry out ?
.01909a	10 03		bpl $01909f			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.01909c	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.01909e	60		rts				rts
.01909f					_FPCEExpZero:
.01909f	a9 00		lda #$00			lda 	#0
.0190a1	60		rts				rts
.0190a2					_FPCECarry:
.0190a2	30 03		bmi $0190a7			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.0190a4	09 80		ora #$80			ora 	#$80 						; put in right range
.0190a6	60		rts				rts
.0190a7					_FPCEOverflow:
.0190a7	4c 6b 92	jmp $01926b			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.0190aa					FPFractionalPart:
.0190aa	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.0190ad	38		sec				sec 								; this flag tells us to keep the fractional part
.0190ae	30 0f		bmi $0190bf			bmi 	FPGetPart
.0190b0	60		rts				rts
.0190b1					FPIntegerPart:
.0190b1	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.0190b4	18		clc				clc 								; this flag says keep the integer part.
.0190b5	30 08		bmi $0190bf			bmi 	FPGetPart 					; -ve exponents are 0..127
.0190b7	48		pha				pha
.0190b8	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.0190ba	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0190bd	68		pla				pla
.0190be	60		rts				rts
.0190bf					FPGetPart:
.0190bf	48		pha				pha
.0190c0	5a		phy				phy 								; save Y
.0190c1	08		php				php 								; save action
.0190c2	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.0190c5	70 62		bvs $019129			bvs 	_FPGP_Exit 					; then do nothing.
.0190c7	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.0190c9	85 1a		sta $1a				sta 	zLTemp1+0 					; this mask is applied to chop out the
.0190cb	85 1b		sta $1b				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.0190cd	85 1c		sta $1c				sta 	zLTemp1+2
.0190cf	85 1d		sta $1d				sta 	zLTemp1+3
.0190d1	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x				; the number of shifts.
.0190d4	38		sec				sec
.0190d5	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.0190d7	f0 12		beq $0190eb			beq 	_FPGP_NoShift 				; ... if any
.0190d9	c9 20		cmp #$20			cmp 	#32
.0190db	90 02		bcc $0190df			bcc 	_FPGP_NotMax
.0190dd	a9 20		lda #$20			lda 	#32 						; max of 32.
.0190df					_FPGP_NotMax:
.0190df	a8		tay				tay 								; Y is the mask shift count.
.0190e0					_FPGP_ShiftMask:
.0190e0	46 1d		lsr $1d				lsr 	3+zLTemp1
.0190e2	66 1c		ror $1c				ror 	2+zLTemp1
.0190e4	66 1b		ror $1b				ror 	1+zLTemp1
.0190e6	66 1a		ror $1a				ror 	0+zLTemp1
.0190e8	88		dey				dey
.0190e9	d0 f5		bne $0190e0			bne 	_FPGP_ShiftMask
.0190eb					_FPGP_NoShift:
.0190eb	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.0190ed	8e 23 04	stx $0423			stx 	ExpTemp						; save X
.0190f0					_FPGP_MaskLoop:
.0190f0	b9 1a 00	lda $001a,y			lda 	zlTemp1,y 					; get mask byte
.0190f3	28		plp				plp 								; if CC we keep the top part, so we
.0190f4	08		php				php		 							; flip the mask.
.0190f5	b0 02		bcs $0190f9			bcs		_FPGP_NoFlip
.0190f7	49 ff		eor #$ff			eor 	#$FF
.0190f9					_FPGP_NoFlip:
.0190f9	3d 08 03	and $0308,x			and 	XS_Mantissa,x 				; and into the mantissa.
.0190fc	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.0190ff	e8		inx				inx
.019100	c8		iny				iny
.019101	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.019103	d0 eb		bne $0190f0			bne 	_FPGP_MaskLoop
.019105	ae 23 04	ldx $0423			ldx 	ExpTemp						; restore X
.019108	28		plp				plp
.019109	08		php				php 								; get action flag on the stack
.01910a	90 05		bcc $019111			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.01910c	a9 00		lda #$00			lda 	#0
.01910e	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.019111					_FPGP_NotFractional:
.019111	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x 						; check if \1 zero
.019114	1d 09 03	ora $0309,x			ora 	XS_Mantissa+1,x
.019117	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.01911a	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.01911d	f0 05		beq $019124			beq 	_FPGP_Zero 					; if zero, return zero
.01911f	20 f6 91	jsr $0191f6			jsr 	FPUNormalise
.019122	80 05		bra $019129			bra 	_FPGP_Exit 					; and exit
.019124					_FPGP_Zero:
.019124	a9 40		lda #$40			lda 	#$40 						; set zero flag
.019126	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.019129					_FPGP_Exit:
.019129	68		pla				pla 								; throw saved action flag.
.01912a	7a		ply				ply
.01912b	68		pla				pla
.01912c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.01912d					FPCompare:
.01912d	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.019130	48		pha				pha
.019131	bd 12 03	lda $0312,x			lda 	XS2_Exponent,x
.019134	48		pha				pha
.019135	20 a9 8e	jsr $018ea9			jsr 	FPSubtract 					; calculate X1-X2
.019138	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.01913b	70 2c		bvs $019169			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.01913d	68		pla				pla
.01913e	8d 23 04	sta $0423			sta 	ExpTemp						; save first exponent in temporary reg.
.019141	68		pla				pla
.019142	38		sec				sec
.019143	ed 23 04	sbc $0423			sbc 	ExpTemp 					; calculate AX-BX
.019146	70 15		bvs $01915d			bvs 	_FPCNotEqual				; overflow, can't be equal.
.019148	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.019149	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.01914b	b0 10		bcs $01915d			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.01914d	38		sec				sec
.01914e	ad 23 04	lda $0423			lda 	ExpTemp 					; get one of the exponents back.
.019151	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.019153	b0 02		bcs $019157			bcs 	_FPCNotRange 				; keep in range.
.019155	a9 01		lda #$01			lda 	#1
.019157					_FPCNotRange:
.019157	38		sec				sec
.019158	fd 0c 03	sbc $030c,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.01915b	b0 0e		bcs $01916b			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.01915d					_FPCNotEqual:
.01915d	bd 0d 03	lda $030d,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.019160	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.019162	f0 02		beq $019166			beq 	_FPCNE2
.019164	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.019166	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.019167	80 04		bra $01916d			bra 	_FPCExit
.019169					_FPCPullZero:
.019169	68		pla				pla 								; throw saved exponents
.01916a	68		pla				pla
.01916b					_FPCZero:
.01916b	a9 00		lda #$00			lda 	#0 							; and return zero
.01916d					_FPCExit:
.01916d	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.01916e					FPUCopyX2ToX1:
.01916e	48		pha				pha
.01916f	da		phx				phx
.019170	5a		phy				phy
.019171	a0 08		ldy #$08			ldy 	#8
.019173	bd 0e 03	lda $030e,x	_FPUC21:lda 	XS2_Mantissa,x
.019176	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.019179	e8		inx				inx
.01917a	88		dey				dey
.01917b	10 f6		bpl $019173			bpl 	_FPUC21
.01917d	7a		ply				ply
.01917e	fa		plx				plx
.01917f	68		pla				pla
.019180	60		rts				rts
.019181					FPUSetInteger:
.019181	48		pha				pha
.019182	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.019185	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.019187	10 02		bpl $01918b			bpl 	_FPUSIExtend
.019189	a9 ff		lda #$ff			lda 	#$FF
.01918b					_FPUSIExtend:
.01918b	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.01918e	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.019191	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.019194	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.019196	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.019199	68		pla				pla
.01919a	60		rts				rts
.01919b					FPUNegateInteger:
.01919b	48		pha				pha
.01919c	38		sec				sec
.01919d	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.01919f	fd 08 03	sbc $0308,x			sbc 	XS_Mantissa+0,x
.0191a2	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.0191a5	a9 00		lda #$00			lda 	#0
.0191a7	fd 09 03	sbc $0309,x			sbc 	XS_Mantissa+1,x
.0191aa	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0191ad	a9 00		lda #$00			lda 	#0
.0191af	fd 0a 03	sbc $030a,x			sbc 	XS_Mantissa+2,x
.0191b2	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0191b5	a9 00		lda #$00			lda 	#0
.0191b7	fd 0b 03	sbc $030b,x			sbc 	XS_Mantissa+3,x
.0191ba	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0191bd	68		pla				pla
.0191be	60		rts				rts
.0191bf					FPUToFloat:
.0191bf	48		pha				pha
.0191c0	bd 0d 03	lda $030d,x			lda 	XS_Type,x					; exit if already float.
.0191c3	29 0f		and #$0f			and 	#$0F
.0191c5	f0 2d		beq $0191f4			beq 	_FPUFExit
.0191c7	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.0191c9	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0191cc	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.0191ce	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x 				; x mantissa.
.0191d1	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.0191d4	10 08		bpl $0191de			bpl		_FPUFPositive
.0191d6	20 9b 91	jsr $01919b			jsr 	FPUNegateInteger 			; negate the mantissa
.0191d9	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.0191db	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0191de					_FPUFPositive:
.0191de	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.0191e1	1d 09 03	ora $0309,x			ora 	XS_Mantissa+1,x
.0191e4	1d 0a 03	ora $030a,x			ora 	XS_Mantissa+2,x
.0191e7	1d 0b 03	ora $030b,x			ora 	XS_Mantissa+3,x
.0191ea	d0 05		bne $0191f1			bne 	_FPUFNonZero
.0191ec	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.0191ee	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0191f1					_FPUFNonZero:
.0191f1	20 f6 91	jsr $0191f6			jsr 	FPUNormalise 				; normalise the floating point.
.0191f4					_FPUFExit:
.0191f4	68		pla				pla
.0191f5	60		rts				rts
.0191f6					FPUNormalise:
.0191f6	48		pha				pha
.0191f7	3c 0d 03	bit $030d,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.0191fa	70 20		bvs $01921c			bvs 	_FPUNExit
.0191fc	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.0191ff	f0 16		beq $019217			beq 	_FPUNSetZero
.019201					_FPUNLoop:
.019201	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.019204	30 16		bmi $01921c			bmi 	_FPUNExit 					; if so, we are normalised.
.019206	1e 08 03	asl $0308,x			asl 	0+XS_Mantissa+0,x
.019209	3e 09 03	rol $0309,x			rol 	1+XS_Mantissa+0,x
.01920c	3e 0a 03	rol $030a,x			rol 	2+XS_Mantissa+0,x
.01920f	3e 0b 03	rol $030b,x			rol 	3+XS_Mantissa+0,x
.019212	de 0c 03	dec $030c,x			dec 	XS_Exponent,x 				; decrement exponent
.019215	d0 ea		bne $019201			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.019217					_FPUNSetZero:
.019217	a9 40		lda #$40			lda 	#$40
.019219	9d 0d 03	sta $030d,x			sta 	XS_Type,x 					; the result is now zero.
.01921c					_FPUNExit:
.01921c	68		pla				pla
.01921d	60		rts				rts
.01921e					FPUToInteger:
.01921e	48		pha				pha
.01921f	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; if already integer, exit
.019222	29 01		and #$01			and 	#1
.019224	d0 3e		bne $019264			bne 	_FPUTOI_Exit
.019226	3c 0d 03	bit $030d,x			bit 	XS_Type,x					; if zero, return zero.
.019229	70 2b		bvs $019256			bvs 	_FPUTOI_Zero
.01922b	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.01922e	10 26		bpl $019256			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.019230	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.019232	b0 37		bcs $01926b			bcs 	FP_Overflow
.019234					_FPUToIToInteger:
.019234	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.019237	c9 a0		cmp #$a0			cmp 	#128+32
.019239	f0 11		beq $01924c			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.01923b	fe 0c 03	inc $030c,x			inc 	XS_Exponent,X 				; increment Exponent
.01923e	5e 0b 03	lsr $030b,x			lsr 	3+XS_Mantissa,x
.019241	7e 0a 03	ror $030a,x			ror 	2+XS_Mantissa,x
.019244	7e 09 03	ror $0309,x			ror 	1+XS_Mantissa,x
.019247	7e 08 03	ror $0308,x			ror 	0+XS_Mantissa,x
.01924a	80 e8		bra $019234			bra 	_FPUToIToInteger 			; keep going.
.01924c					_FPUToICheckSign:
.01924c	bd 0d 03	lda $030d,x			lda 	XS_Type,x 					; check sign
.01924f	10 13		bpl $019264			bpl 	_FPUToI_Exit 				; exit if unsigned.
.019251	20 9b 91	jsr $01919b			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.019254	80 0e		bra $019264			bra 	_FPUTOI_Exit
.019256					_FPUTOI_Zero:
.019256	a9 00		lda #$00			lda 	#0 							; return zero integer.
.019258	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.01925b	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.01925e	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.019261	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.019264					_FPUToI_Exit:
.019264	a9 01		lda #$01			lda 	#1 							; set type to integer
.019266	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.019269	68		pla				pla
.01926a	60		rts				rts
.01926b					FP_Overflow:
.01926b	80 fe		bra $01926b		_error: bra _error
.01926d					FPUTimes10:
.01926d	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.019270	85 1a		sta $1a				sta 	ZLTemp1+0
.019272	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.019275	85 1b		sta $1b				sta 	ZLTemp1+1
.019277	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.01927a	85 1c		sta $1c				sta 	ZLTemp1+2
.01927c	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.01927f	85 1d		sta $1d				sta 	ZLTemp1+3
.019281	20 c5 92	jsr $0192c5			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.019284	20 c5 92	jsr $0192c5			jsr 	_FPUT_LSR_ZLTemp1
.019287	18		clc				clc
.019288	bd 08 03	lda $0308,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.01928b	65 1a		adc $1a				adc 	ZLTemp1+0
.01928d	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.019290	bd 09 03	lda $0309,x			lda 	XS_Mantissa+1,x
.019293	65 1b		adc $1b				adc 	ZLTemp1+1
.019295	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.019298	bd 0a 03	lda $030a,x			lda 	XS_Mantissa+2,x
.01929b	65 1c		adc $1c				adc 	ZLTemp1+2
.01929d	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0192a0	bd 0b 03	lda $030b,x			lda 	XS_Mantissa+3,x
.0192a3	65 1d		adc $1d				adc 	ZLTemp1+3
.0192a5	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0192a8	90 0f		bcc $0192b9			bcc 	_FPUTimes10
.0192aa	7e 0b 03	ror $030b,x			ror 	3+XS_Mantissa,x
.0192ad	7e 0a 03	ror $030a,x			ror 	2+XS_Mantissa,x
.0192b0	7e 09 03	ror $0309,x			ror 	1+XS_Mantissa,x
.0192b3	7e 08 03	ror $0308,x			ror 	0+XS_Mantissa,x
.0192b6	fe 0c 03	inc $030c,x			inc 	XS_Exponent,x				; fix exponent
.0192b9					_FPUTimes10:
.0192b9	bd 0c 03	lda $030c,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.0192bc	18		clc				clc
.0192bd	69 03		adc #$03			adc 	#3
.0192bf	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x
.0192c2	b0 a7		bcs $01926b			bcs 	FP_Overflow 				; error
.0192c4	60		rts				rts
.0192c5					_FPUT_LSR_ZLTemp1:
.0192c5	46 1d		lsr $1d				lsr 	ZLTemp1+3
.0192c7	66 1c		ror $1c				ror 	ZLTemp1+2
.0192c9	66 1b		ror $1b				ror 	ZLTemp1+1
.0192cb	66 1a		ror $1a				ror 	ZLTemp1+0
.0192cd	60		rts				rts
.0192ce					FPUScale10A:
.0192ce	5a		phy				phy
.0192cf	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.0192d1	f0 3d		beq $019310			beq 	_FPUScaleExit
.0192d3	da		phx				phx 								; save X
.0192d4	e8		inx				inx
.0192d5	e8		inx				inx
.0192d6	e8		inx				inx
.0192d7	e8		inx				inx
.0192d8	e8		inx				inx
.0192d9	e8		inx				inx
.0192da	a8		tay				tay 								; save power scalar in Y.
.0192db	a9 00		lda #$00			lda 	#0
.0192dd	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.0192e0	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0192e3	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0192e6	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0192e9	a9 80		lda #$80			lda 	#$80
.0192eb	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0192ee	a9 81		lda #$81			lda 	#$81
.0192f0	9d 0c 03	sta $030c,x			sta 	XS_Exponent,x
.0192f3	5a		phy				phy 								; save 10^n on stack.
.0192f4	c0 00		cpy #$00			cpy 	#0
.0192f6	10 05		bpl $0192fd			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.0192f8	98		tya				tya
.0192f9	49 ff		eor #$ff			eor 	#$FF
.0192fb	1a		inc a				inc 	a
.0192fc	a8		tay				tay
.0192fd					_FPUSAbs:
.0192fd	20 6d 92	jsr $01926d			jsr 	FPUTimes10
.019300	88		dey				dey
.019301	d0 fa		bne $0192fd			bne 	_FPUSAbs 					; tos is now 10^|AC|
.019303	68		pla				pla 								; restore count in A
.019304	fa		plx				plx 								; restore X pointing to number to scale.
.019305	0a		asl a				asl 	a
.019306	b0 05		bcs $01930d			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.019308	20 0d 90	jsr $01900d			jsr 	FPMultiply 					; if clear multiply.
.01930b	80 03		bra $019310			bra		_FPUScaleExit
.01930d					_FPUSDivide:
.01930d	20 85 8f	jsr $018f85			jsr 	FPDivide
.019310					_FPUScaleExit:
.019310	7a		ply				ply
.019311	60		rts				rts
.019312					FPUCopyToNext:
.019312	a0 06		ldy #$06			ldy 		#6
.019314	da		phx				phx
.019315					_FPUCopy1:
.019315	bd 08 03	lda $0308,x			lda 	XS_Mantissa,x
.019318	9d 0e 03	sta $030e,x			sta 	XS2_Mantissa,x
.01931b	e8		inx				inx
.01931c	88		dey				dey
.01931d	d0 f6		bne $019315			bne 	_FPUCopy1
.01931f	fa		plx				plx
.019320	60		rts				rts
.019321					FPUCopyFromNext:
.019321	a0 06		ldy #$06			ldy 		#6
.019323	da		phx				phx
.019324					_FPUCopy1:
.019324	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa,x
.019327	9d 08 03	sta $0308,x			sta 	XS_Mantissa,x
.01932a	e8		inx				inx
.01932b	88		dey				dey
.01932c	d0 f6		bne $019324			bne 	_FPUCopy1
.01932e	fa		plx				plx
.01932f	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fptostr.asm

.019330					FPToString:
.019330	48		pha				pha
.019331	5a		phy				phy
.019332	3c 0d 03	bit $030d,x			bit 		XS_Type,x 				; check zero flag
.019335	50 0a		bvc $019341			bvc 		_FPTSIsFloat 			; if zero,
.019337					_FPTSZero:
.019337	a9 30		lda #$30			lda 		#"0"
.019339	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.01933c					_FPTSExit:
.01933c	7a		ply				ply
.01933d	68		pla				pla
.01933e	60		rts				rts
.01933f	80 fb		bra $01933c			bra 		_FPTSExit
.019341					_FPTSIsFloat:
.019341	bd 0d 03	lda $030d,x			lda 		XS_Type,x 				; is it signed ?
.019344	10 0a		bpl $019350			bpl 		_FPTSNotSigned
.019346	a9 00		lda #$00			lda 		#0 						; clear sign flag
.019348	9d 0d 03	sta $030d,x			sta 		XS_Type,x
.01934b	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.01934d	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.019350					_FPTSNotSigned:
.019350	bd 0c 03	lda $030c,x			lda 		XS_Exponent,x
.019353	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.019355	b0 09		bcs $019360			bcs 		_FPTSExponent
.019357	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.019359	90 05		bcc $019360			bcc 		_FPTSExponent 			;
.01935b					_FPTSStandard:
.01935b	20 a4 93	jsr $0193a4			jsr 		FPTOutputBody 			; output the body.
.01935e	80 dc		bra $01933c			bra 		_FPTSExit
.019360					_FPTSExponent:
.019360	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.019362	8d 24 04	sta $0424			sta 		ExpCount
.019365					_FPTSExponentLoop:
.019365	bd 0c 03	lda $030c,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.019368	10 0e		bpl $019378			bpl 		_FPTSTimes
.01936a	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.01936c	90 14		bcc $019382			bcc 		_FPTSScaledToExp
.01936e	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.019370	20 ce 92	jsr $0192ce			jsr 		FPUScale10A
.019373	ee 24 04	inc $0424			inc 		ExpCount
.019376	80 ed		bra $019365			bra 		_FPTSExponentLoop
.019378					_FPTSTimes:
.019378	a9 01		lda #$01			lda 		#1
.01937a	20 ce 92	jsr $0192ce			jsr 		FPUScale10A
.01937d	ce 24 04	dec $0424			dec 		ExpCount
.019380	80 e3		bra $019365			bra 		_FPTSExponentLoop
.019382					_FPTSScaledToExp:
.019382	20 a4 93	jsr $0193a4			jsr 		FPTOutputBody 			; output the body.
.019385	a9 65		lda #$65			lda 		#"e"					; output E
.019387	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.01938a	ad 24 04	lda $0424			lda 		ExpCount 				; get the exponent
.01938d	9d 08 03	sta $0308,x			sta 		XS_Mantissa,x
.019390	29 80		and #$80			and 		#$80 					; sign extend it
.019392	f0 02		beq $019396			beq 		_FPTSSExt
.019394	a9 ff		lda #$ff			lda 		#$FF
.019396					_FPTSSExt:
.019396	9d 09 03	sta $0309,x			sta 		XS_Mantissa+1,x
.019399	9d 0a 03	sta $030a,x			sta 		XS_Mantissa+2,x
.01939c	9d 0b 03	sta $030b,x			sta 		XS_Mantissa+3,x
.01939f	20 49 8d	jsr $018d49			jsr 		INTToString 			; output the exponent.
.0193a2	80 98		bra $01933c			bra			_FPTSExit 				; and exit.
.0193a4					FPTOutputBody:
.0193a4	20 12 93	jsr $019312			jsr 		FPUCopyToNext 			; copy to next slot.
.0193a7	20 1e 92	jsr $01921e			jsr 		FPUToInteger 			; convert to an integer
.0193aa	20 49 8d	jsr $018d49			jsr 		INTToString 			; output the main integer part.
.0193ad	20 21 93	jsr $019321			jsr 		FPUCopyFromNext 		; get the fractional part back.
.0193b0	20 aa 90	jsr $0190aa			jsr 		FPFractionalPart 		; get the decimal part.
.0193b3	3c 0d 03	bit $030d,x			bit 		XS_Type,x 				; any fractional part.
.0193b6	70 3e		bvs $0193f6			bvs 		_FPTOExit 				; if not, exit now.
.0193b8	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.0193ba	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.0193bd					_FPOutLoop:
.0193bd	3c 0d 03	bit $030d,x			bit 		XS_Type,x 				; finally reached zero.
.0193c0	70 1e		bvs $0193e0			bvs 		_FPStripZeros 			; strip trailing zeros
.0193c2	20 6d 92	jsr $01926d			jsr 		FPUTimes10 				; multiply by 10
.0193c5	20 12 93	jsr $019312			jsr 		FPUCopyToNext			; copy to next slot.
.0193c8	20 1e 92	jsr $01921e			jsr 		FPUToInteger 			; convert to integer
.0193cb	bd 08 03	lda $0308,x			lda 		XS_Mantissa+0,x 		; print digit.
.0193ce	09 30		ora #$30			ora 		#"0"
.0193d0	20 eb 8d	jsr $018deb			jsr 		ITSOutputCharacter
.0193d3	20 21 93	jsr $019321			jsr 		FPUCopyFromNext 		; get it back
.0193d6	20 aa 90	jsr $0190aa			jsr 		FPFractionalPart 		; get fractional part
.0193d9	ad 20 04	lda $0420			lda 		NumBufX 				; done 11 characters yet ?
.0193dc	c9 0b		cmp #$0b			cmp 	 	#11
.0193de	90 dd		bcc $0193bd			bcc 		_FPOutLoop 				; if so, keep going till zero.
.0193e0					_FPStripZeros:
.0193e0	ac 20 04	ldy $0420			ldy 		NumBufX 				; strip trailing zeros.
.0193e3					_FPStripLoop:
.0193e3	88		dey				dey 								; back one, if at start then no strip
.0193e4	f0 10		beq $0193f6			beq 		_FPToExit
.0193e6	b9 00 04	lda $0400,y			lda 		Num_Buffer,y 			; keep going if "0"
.0193e9	c9 30		cmp #$30			cmp 		#"0"
.0193eb	f0 f6		beq $0193e3			beq 		_FPStripLoop
.0193ed	c8		iny				iny
.0193ee	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.0193f0	99 00 04	sta $0400,y			sta 		Num_Buffer,y
.0193f3	8c 20 04	sty $0420			sty 		NumBufX 				; update position.
.0193f6					_FPTOExit:
.0193f6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fpfromstr.asm

.0193f7					FPFromString:
.0193f7	48		pha				pha 								; push A
.0193f8	b1 1e		lda ($1e),y			lda		(zGenPtr),y					; is it followed by a DP ?
.0193fa	c9 2e		cmp #$2e			cmp 	#"."
.0193fc	f0 03		beq $019401			beq	 	_FPFIsDecimal
.0193fe	4c 64 94	jmp $019464			jmp 	_FPFNotDecimal
.019401					_FPFIsDecimal:
.019401	c8		iny				iny 								; consume the decimal.
.019402	20 bf 91	jsr $0191bf			jsr 	FPUToFloat 					; convert the integer to float.
.019405	da		phx				phx 								; save X.
.019406	5a		phy				phy 								; save decimal start position
.019407	e8		inx				inx
.019408	e8		inx				inx
.019409	e8		inx				inx
.01940a	e8		inx				inx
.01940b	e8		inx				inx
.01940c	e8		inx				inx
.01940d	20 03 8e	jsr $018e03			jsr 	INTFromStringY 				; get the part after the DP.
.019410	20 bf 91	jsr $0191bf			jsr 	FPUToFloat 					; convert that to a float.
.019413	68		pla				pla 								; calculate - chars consumed.
.019414	8c 23 04	sty $0423			sty 	ExpTemp
.019417	38		sec				sec
.019418	ed 23 04	sbc $0423			sbc 	ExpTemp 					; this is the shift amount
.01941b	20 ce 92	jsr $0192ce			jsr 	FPUScale10A 				; scale it by 10^AC
.01941e	fa		plx				plx 								; restore original X
.01941f	20 b3 8e	jsr $018eb3			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.019422	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; exponent ?
.019424	c9 45		cmp #$45			cmp 	#"E"
.019426	f0 04		beq $01942c			beq 	_FPFExponent
.019428	c9 65		cmp #$65			cmp 	#"e"
.01942a	d0 38		bne $019464			bne 	_FPFNotDecimal 				; no, then exit normally.
.01942c					_FPFExponent:
.01942c	c8		iny				iny 								; skip over E symbol.
.01942d	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; look at next
.01942f	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.019431	d0 01		bne $019434			bne 	_FPFGotSign
.019433	c8		iny				iny 								; if it was - skip over it.
.019434					_FPFGotSign:
.019434	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.019435	da		phx				phx
.019436	e8		inx				inx
.019437	e8		inx				inx
.019438	e8		inx				inx
.019439	e8		inx				inx
.01943a	e8		inx				inx
.01943b	e8		inx				inx
.01943c	20 03 8e	jsr $018e03			jsr 	INTFromStringY 				; get the exponent
.01943f	fa		plx				plx 								; restore X.
.019440	bd 0f 03	lda $030f,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.019443	1d 11 03	ora $0311,x			ora 	XS2_Mantissa+3,x
.019446	1d 10 03	ora $0310,x			ora 	XS2_Mantissa+2,x
.019449	d0 1b		bne $019466			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.01944b	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.01944e	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.019450	b0 14		bcs $019466			bcs 	_FPFXOverflow
.019452	68		pla				pla 								; get direction
.019453	d0 09		bne $01945e			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.019455	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.019458	49 ff		eor #$ff			eor 	#$FF
.01945a	1a		inc a				inc 	a
.01945b	9d 0e 03	sta $030e,x			sta 	XS2_Mantissa+0,x
.01945e					_FPFXScale:
.01945e	bd 0e 03	lda $030e,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.019461	20 ce 92	jsr $0192ce			jsr 	FPUScale10A 				; scale by the exponent.
.019464					_FPFNotDecimal:
.019464	68		pla				pla
.019465	60		rts				rts
.019466					_FPFXOverflow:
.019466	20 17 84	jsr $018417			jsr 	ERR_Handler
>019469	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>019471	20 52 61 6e 67 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/rnd.asm

.019478					Unary_Rnd:
.019478	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; get value
.01947b	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; check right bracket.
.01947e	20 95 88	jsr $018895			jsr 	GetSignCurrent 				; get sign -1,0,1.
.019481	09 00		ora #$00			ora 	#0 							; if -ve set seed.
.019483	30 10		bmi $019495			bmi 	_URSetSeed
.019485	f0 2c		beq $0194b3			beq 	_URMakeRandom 				; if zero return same number.
.019487	da		phx				phx
.019488	a2 00		ldx #$00			ldx 	#0
.01948a	20 f0 94	jsr $0194f0			jsr 	Random16
.01948d	a2 02		ldx #$02			ldx 	#2
.01948f	20 f0 94	jsr $0194f0			jsr 	Random16
.019492	fa		plx				plx
.019493	80 1e		bra $0194b3			bra 	_URMakeRandom
.019495					_URSetSeed:
.019495	20 bf 91	jsr $0191bf			jsr 	FPUToFloat 					; make it a float to twiddle it.
.019498	bd 08 03	lda $0308,x			lda		XS_Mantissa+0,x 			; copy mantissa to seed.
.01949b	8d 29 04	sta $0429			sta 	RandomSeed+0
.01949e	bd 09 03	lda $0309,x			lda		XS_Mantissa+1,x
.0194a1	8d 2a 04	sta $042a			sta 	RandomSeed+1
.0194a4	bd 0a 03	lda $030a,x			lda		XS_Mantissa+2,x
.0194a7	8d 2b 04	sta $042b			sta 	RandomSeed+2
.0194aa	bd 0b 03	lda $030b,x			lda		XS_Mantissa+3,x
.0194ad	0a		asl a				asl 	a
.0194ae	49 db		eor #$db			eor 	#$DB
.0194b0	8d 2c 04	sta $042c			sta 	RandomSeed+3
.0194b3					_URMakeRandom:
.0194b3	ad 29 04	lda $0429			lda 	RandomSeed+0 				; check if seed is zero.
.0194b6	0d 2a 04	ora $042a			ora 	RandomSeed+1
.0194b9	0d 2b 04	ora $042b			ora 	RandomSeed+2
.0194bc	0d 2c 04	ora $042c			ora 	RandomSeed+3
.0194bf	d0 0a		bne $0194cb			bne 	_URNotZero
.0194c1	a9 47		lda #$47			lda 	#$47
.0194c3	8d 2a 04	sta $042a			sta 	RandomSeed+1				; if it is, make it non zero.
.0194c6	a9 3d		lda #$3d			lda 	#$3D
.0194c8	8d 2c 04	sta $042c			sta 	RandomSeed+3
.0194cb					_URNotZero:
.0194cb	ad 29 04	lda $0429			lda 	RandomSeed+0 				; copy seed into mantissa.
.0194ce	9d 08 03	sta $0308,x			sta 	XS_Mantissa+0,x
.0194d1	ad 2a 04	lda $042a			lda 	RandomSeed+1
.0194d4	9d 09 03	sta $0309,x			sta 	XS_Mantissa+1,x
.0194d7	ad 2b 04	lda $042b			lda 	RandomSeed+2
.0194da	9d 0a 03	sta $030a,x			sta 	XS_Mantissa+2,x
.0194dd	ad 2c 04	lda $042c			lda 	RandomSeed+3
.0194e0	9d 0b 03	sta $030b,x			sta 	XS_Mantissa+3,x
.0194e3	a9 00		lda #$00			lda 	#$00 						; set type to float.
.0194e5	9d 0d 03	sta $030d,x			sta 	XS_Type,x
.0194e8	a9 80		lda #$80			lda 	#$80
.0194ea	9d 0c 03	sta $030c,x			sta	 	XS_Exponent,x				; exponent to 128 (e.g. 0.x 2^0)
.0194ed	4c f6 91	jmp $0191f6			jmp 	FPUNormalise
.0194f0					Random16:
.0194f0	5e 2a 04	lsr $042a,x			lsr 	RandomSeed+1,x				; shift seed right
.0194f3	7e 29 04	ror $0429,x			ror 	RandomSeed,x
.0194f6	90 08		bcc $019500			bcc 	_R16_NoXor
.0194f8	bd 2a 04	lda $042a,x			lda 	RandomSeed+1,x				; xor MSB with $B4 if bit set.
.0194fb	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.0194fd	9d 2a 04	sta $042a,x			sta 	RandomSeed+1,x
.019500					_R16_NoXor:
.019500	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/int.asm

.019501					Unary_Int:
.019501	20 bb 85	jsr $0185bb			jsr 	EvaluateNumberX 			; get value
.019504	20 d9 8b	jsr $018bd9			jsr 	CheckNextRParen 			; check right bracket.
.019507	4c 1e 92	jmp $01921e			jmp 	FPUToInteger				; Convert to integer.

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.01950a					TIM_Error:
.01950a	20 1b 82	jsr $01821b			jsr 	IFT_UpLine 					; go up one line.
.01950d	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.01950f	80 02		bra $019513			bra 	TIM_ShowPrompt
.019511					TIM_NewCommand:
.019511	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.019513					TIM_ShowPrompt:
.019513	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.019516	20 df 82	jsr $0182df			jsr 	IFT_ReadLine	 			; get character, go to next line
.019519	20 41 82	jsr $018241			jsr 	IFT_NewLine					; go to next line.
.01951c	86 10		stx $10				stx 	zTemp1 						; save line read address
.01951e	84 11		sty $11				sty 	zTemp1+1
.019520	a0 00		ldy #$00			ldy 	#0 							; get first character after the prompt.
.019522	b1 10		lda ($10),y			lda 	(zTemp1),y
.019524	c9 3f		cmp #$3f			cmp 	#"?"
.019526	f0 04		beq $01952c			beq 	TIM_SkipFirst
.019528	c9 2e		cmp #$2e			cmp 	#"."						; if . skip it
.01952a	d0 01		bne $01952d			bne 	TIM_NotDot
.01952c					TIM_SkipFirst:
.01952c	c8		iny				iny
.01952d					TIM_NotDot:
.01952d	b1 10		lda ($10),y			lda 	(zTemp1),y 					; get character
.01952f	c9 52		cmp #$52			cmp 	#"R"						; show registers
.019531	f0 6b		beq $01959e			beq 	TIM_ShowRegisters
.019533	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.019535	f0 12		beq $019549			beq 	TIM_ShowMemory
.019537	c9 47		cmp #$47			cmp 	#"G"						; execute
.019539	f0 49		beq $019584			beq 	TIM_Execute
.01953b	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.01953d	f0 07		beq $019546			beq 	TIM_GoLoadMemory
.01953f	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.019541	d0 c7		bne $01950a			bne 	TIM_Error
.019543	4c c2 96	jmp $0196c2			jmp 	TIM_UpdateRegisters
.019546					TIM_GoLoadMemory:
.019546	4c f2 96	jmp $0196f2			jmp 	TIM_LoadMemory
.019549					TIM_ShowMemory:
.019549	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.01954c	b0 bc		bcs $01950a			bcs 	TIM_Error
.01954e	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.019550	85 12		sta $12				sta 	zTemp2
.019552	a5 15		lda $15				lda 	zTemp3+1
.019554	85 13		sta $13				sta 	zTemp2+1
.019556	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.019559	90 08		bcc $019563			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.01955b	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.01955d	85 14		sta $14				sta 	zTemp3
.01955f	a5 13		lda $13				lda 	zTemp2+1
.019561	85 15		sta $15				sta 	zTemp3+1
.019563					_TIMSM_Start:
.019563	20 16 96	jsr $019616			jsr 	TIM_WriteLine 				; write one line of hex out
.019566	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.019568	18		clc				clc
.019569	69 10		adc #$10			adc 	#16
.01956b	85 12		sta $12				sta 	zTemp2
.01956d	90 02		bcc $019571			bcc 	_TIMSM_NoCarry
.01956f	e6 13		inc $13				inc 	zTemp2+1
.019571					_TIMSM_NoCarry:
.019571	20 c6 83	jsr $0183c6			jsr 	IF_CheckBreak 				; check CTL+C
.019574	d0 0b		bne $019581			bne 	_TIMSM_Ends 				; if pressed break out.
.019576	38		sec				sec 								; check past the end address in zTemp3
.019577	a5 14		lda $14				lda 	zTemp3
.019579	e5 12		sbc $12				sbc 	zTemp2
.01957b	a5 15		lda $15				lda 	zTemp3+1
.01957d	e5 13		sbc $13				sbc 	zTemp2+1
.01957f	10 e2		bpl $019563			bpl 	_TIMSM_Start
.019581					_TIMSM_Ends:
.019581	4c 11 95	jmp $019511			jmp 	TIM_NewCommand
.019584					TIM_Execute:
.019584	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; get the execute address
.019587	b0 81		bcs $01950a			bcs 	TIM_Error 					; not legitimate
.019589	ae 36 04	ldx $0436			ldx 	TIM_SP 						; set up SP
.01958c	9a		txs				txs
.01958d	ad 31 04	lda $0431			lda 	TIM_SR 						; Status for PLP
.019590	48		pha				pha
.019591	ad 32 04	lda $0432			lda 	TIM_A 						; restore AXYZ
.019594	ae 33 04	ldx $0433			ldx 	TIM_X
.019597	ac 34 04	ldy $0434			ldy 	TIM_Y
.01959a	28		plp				plp 								; and PS Byte.
.01959b	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.01959e					TIM_Start:
.01959e					TIM_ShowRegisters:
.01959e	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.0195a1	8d 30 04	sta $0430			sta 	TIM_IRQ+1
.0195a4	ad ff ff	lda $ffff			lda 	$FFFF
.0195a7	8d 2f 04	sta $042f			sta 	TIM_IRQ
.0195aa	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.0195ac					_TIMSR_Text:
.0195ac	bf dd 95 01	lda $0195dd,x			lda 	_TIMSR_Label,x
.0195b0	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.0195b3	e8		inx				inx
.0195b4	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.0195b6	d0 f4		bne $0195ac			bne 	_TIMSR_Text
.0195b8	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.0195ba					_TIMSR_Skip:
.0195ba	e8		inx				inx
.0195bb					_TIMSR_LoopSpace:
.0195bb	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.0195bd	b0 04		bcs $0195c3			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.0195bf	8a		txa				txa
.0195c0	4a		lsr a				lsr 	a
.0195c1	b0 05		bcs $0195c8			bcs 	_TIMSR_NoSpace
.0195c3					_TIMSR_Space:
.0195c3	a9 20		lda #$20			lda 	#" "
.0195c5	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.0195c8					_TIMSR_NoSpace:
.0195c8	bd 2d 04	lda $042d,x			lda 	TIM_PC,x 					; output hex value.
.0195cb	20 fd 95	jsr $0195fd			jsr 	TIM_WriteHex
.0195ce	e8		inx				inx
.0195cf	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.0195d1	f0 e7		beq $0195ba			beq 	_TIMSR_Skip
.0195d3	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.0195d5	d0 e4		bne $0195bb			bne 	_TimSR_LoopSpace
.0195d7	20 41 82	jsr $018241			jsr 	IFT_NewLine 				; new line
.0195da	4c 11 95	jmp $019511			jmp	 	TIM_NewCommand 				; new command.
.0195dd					_TIMSR_Label:
>0195dd	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>0195e5	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>0195f5	52
>0195f6	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.0195fd					_TIMSR_LabelEnd:
.0195fd					TIM_WriteHex:
.0195fd	48		pha				pha 								; save A
.0195fe	4a		lsr a				lsr 	a 							; shift MSB->LSB
.0195ff	4a		lsr a				lsr 	a
.019600	4a		lsr a				lsr 	a
.019601	4a		lsr a				lsr 	a
.019602	20 06 96	jsr $019606			jsr 	_TIMWH_Nibble 				; print MSB
.019605	68		pla				pla 								; restore and print LSB
.019606					_TIMWH_Nibble:
.019606	48		pha				pha
.019607	29 0f		and #$0f			and 	#15 						; mask out
.019609	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.01960b	90 02		bcc $01960f			bcc 	_TIMWHNoLetter
.01960d	69 06		adc #$06			adc 	#6
.01960f					_TIMWHNoLetter:
.01960f	69 30		adc #$30			adc 	#48
.019611	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter 			; print it out.
.019614	68		pla				pla
.019615	60		rts				rts
.019616					TIM_WriteLine:
.019616	a9 2e		lda #$2e			lda 	#"." 						; prompt
.019618	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.01961b	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.01961d	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.019620	a5 13		lda $13				lda 	zTemp2+1 					; write address
.019622	20 fd 95	jsr $0195fd			jsr 	TIM_WriteHex
.019625	a5 12		lda $12				lda 	zTemp2
.019627	20 fd 95	jsr $0195fd			jsr 	TIM_WriteHex
.01962a	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.01962c					_TIMWL_Loop:
.01962c	a9 20		lda #$20			lda 	#" "
.01962e	20 27 82	jsr $018227			jsr 	IFT_PrintCharacter
.019631	b1 12		lda ($12),y			lda 	(zTemp2),y
.019633	20 fd 95	jsr $0195fd			jsr 	TIM_WriteHex
.019636	c8		iny				iny
.019637	c0 10		cpy #$10			cpy 	#16
.019639	d0 f1		bne $01962c			bne 	_TIMWL_Loop
.01963b	4c 41 82	jmp $018241			jmp 	IFT_NewLine 				; new line and exit
.01963e					TIM_GetHex:
.01963e	c8		iny				iny
.01963f	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.019641	c9 20		cmp #$20			cmp 	#32
.019643	f0 f9		beq $01963e			beq 	TIM_GetHex
.019645	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.019647	f0 f5		beq $01963e			beq 	TIM_GetHex
.019649	20 72 96	jsr $019672			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.01964c	b0 23		bcs $019671			bcs 	_TIMGH_Exit					; if first bad then exit now.
.01964e	a9 00		lda #$00			lda 	#0 							; zero result
.019650	85 14		sta $14				sta 	zTemp3
.019652	85 15		sta $15				sta 	zTemp3+1
.019654					_TIM_GHLoop:
.019654	20 72 96	jsr $019672			jsr 	TIM_GetHexCharacter 		; get next character
.019657	b0 17		bcs $019670			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.019659	c8		iny				iny 								; skip over it.
.01965a	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.01965c	26 15		rol $15				rol 	zTemp3+1
.01965e	06 14		asl $14				asl 	zTemp3 						; now x 2
.019660	26 15		rol $15				rol 	zTemp3+1
.019662	06 14		asl $14				asl 	zTemp3						; now x 4
.019664	26 15		rol $15				rol 	zTemp3+1
.019666	06 14		asl $14				asl 	zTemp3 						; now x 8
.019668	26 15		rol $15				rol 	zTemp3+1
.01966a	05 14		ora $14				ora 	zTemp3 						; OR result in
.01966c	85 14		sta $14				sta 	zTemp3
.01966e	80 e4		bra $019654			bra 	_TIM_GHLoop 				; loop round again.
.019670					_TIMGH_Okay:
.019670	18		clc				clc
.019671					_TIMGH_Exit:
.019671	60		rts				rts
.019672					TIM_GetHexCharacter:
.019672	b1 10		lda ($10),y			lda 	(zTemp1),y
.019674	38		sec				sec
.019675	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.019677	90 0e		bcc $019687			bcc 	_TIM_GHCFail
.019679	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.01967b	90 0b		bcc $019688			bcc 	_TIM_GHCExit
.01967d	c9 11		cmp #$11			cmp 	#65-48						; < A
.01967f	90 06		bcc $019687			bcc		_TIM_GHCFail
.019681	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.019683	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.019685	90 01		bcc $019688			bcc		_TIM_GHCExit
.019687					_TIM_GHCFail:
.019687	38		sec				sec
.019688					_TIM_GHCExit:
.019688	60		rts				rts
.019689					TIM_BreakVector:
.019689	da		phx				phx									; save X/A on stack
.01968a	48		pha				pha
.01968b	ba		tsx				tsx 								; X points to S
.01968c	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.01968f	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.019691	d0 03		bne $019696			bne 	_TIMBreak					; if set, it's BRK
.019693	68		pla				pla 								; abandon routine.
.019694	fa		plx				plx
.019695	40		rti				rti
.019696					_TIMBreak:
.019696	68		pla				pla 								; save A X Y and maybe Z
.019697	8d 32 04	sta $0432			sta 	TIM_A
.01969a	fa		plx				plx
.01969b	8e 33 04	stx $0433			stx 	TIM_X
.01969e	8c 34 04	sty $0434			sty 	TIM_Y
.0196a1	68		pla				pla 								; get Status Register
.0196a2	8d 31 04	sta $0431			sta 	TIM_SR
.0196a5	68		pla				pla
.0196a6	8d 2e 04	sta $042e			sta 	TIM_PC+1 					; save calling address
.0196a9	68		pla				pla
.0196aa	8d 2d 04	sta $042d			sta 	TIM_PC 						; high byte
.0196ad	ad 2e 04	lda $042e			lda 	TIM_PC+1 					; dec PC to point right.
.0196b0	d0 03		bne $0196b5			bne 	_TIMDecrement 				; brk bumps it.
.0196b2	ce 2d 04	dec $042d			dec 	TIM_PC
.0196b5					_TIMDecrement:
.0196b5	ce 2e 04	dec $042e			dec 	TIM_PC+1
.0196b8	ba		tsx				tsx 								; and copy SP
.0196b9	8e 36 04	stx $0436			stx 	TIM_SP
.0196bc	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.0196be	9a		txs				txs
.0196bf	4c 9e 95	jmp $01959e			jmp 	TIM_Start 					; and start up TIM monitor.
.0196c2					TIM_UpdateRegisters:
.0196c2	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; PC
.0196c5	b0 28		bcs $0196ef			bcs 	_TIMURFail
.0196c7	a5 14		lda $14				lda 	zTemp3
.0196c9	8d 2e 04	sta $042e			sta 	Tim_PC+1
.0196cc	a5 15		lda $15				lda 	zTemp3+1
.0196ce	8d 2d 04	sta $042d			sta 	Tim_PC
.0196d1	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; ignore IRQ
.0196d4	b0 19		bcs $0196ef			bcs 	_TIMURFail
.0196d6	a2 00		ldx #$00			ldx 	#0
.0196d8					_TIM_URLoop:
.0196d8	e0 04		cpx #$04			cpx 	#Tim_Z-Tim_SR
.0196da	d0 01		bne $0196dd			bne 	_TIM_1
.0196dc	e8		inx				inx
.0196dd					_TIM_1:
.0196dd	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; registers
.0196e0	b0 0d		bcs $0196ef			bcs 	_TIMURFail
.0196e2	a5 14		lda $14				lda 	zTemp3
.0196e4	9d 31 04	sta $0431,x			sta 	Tim_SR,x
.0196e7	e8		inx				inx
.0196e8	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.0196ea	d0 ec		bne $0196d8			bne 	_TIM_URLoop
.0196ec	4c 11 95	jmp $019511			jmp 	TIM_NewCommand
.0196ef					_TIMURFail:
.0196ef	4c 0a 95	jmp $01950a			jmp 	TIM_Error
.0196f2					TIM_LoadMemory:
.0196f2	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; target address => zTemp2
.0196f5	a5 14		lda $14				lda 	zTemp3
.0196f7	85 12		sta $12				sta 	zTemp2
.0196f9	a5 15		lda $15				lda 	zTemp3+1
.0196fb	85 13		sta $13				sta 	zTemp2+1
.0196fd					_TIM_LMLoop:
.0196fd	20 3e 96	jsr $01963e			jsr 	TIM_GetHex 					; next byte ?
.019700	b0 0e		bcs $019710			bcs 	_TIMLMDone 					; no more
.019702	a2 00		ldx #$00			ldx 	#0							; write out.
.019704	a5 14		lda $14				lda 	zTemp3
.019706	81 12		sta ($12,x)			sta 	(zTemp2,x)
.019708	e6 12		inc $12				inc 	zTemp2 						; bump address
.01970a	d0 f1		bne $0196fd			bne 	_TIM_LMLoop
.01970c	e6 13		inc $13				inc 	zTemp2+1
.01970e	80 ed		bra $0196fd			bra 	_TIM_LMLoop
.019710					_TIMLMDone:
.019710	4c 11 95	jmp $019511			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>019713	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	00 c0						.word 	StartROM
>fffe	17 c0					.word TIM_BreakHandler

;******  End of listing
