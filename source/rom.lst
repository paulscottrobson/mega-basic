
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -X -b -q -L rom.lst -o rom.bin basic.asm
; Sat Aug 31 17:50:00 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				cpu = "65816"
="em65816"				hardware = "em65816"
=1					exitonend = 1
=0					autorun = 0
=1					loadtest = 1
=1					hasfloat = 1
=1					hasinteger = 1
=253					maxstring = 253

;******  Processing file: modules/basic/pointer/em65816/src_em65816.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/handlers.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stackmarkers.inc

=5					SourcePosSize   =   5 							; Source position stack space needed.
=1					SMark_Gosub 	= 	1 							; 0 is GOSUB/RETURN.
=2					SMark_Repeat 	= 	2 							; 1 is REPEAT/UNTIL.
=3					SMark_While 	= 	3 							; 2 is WHILE/WEND.
=4					SMark_If 		= 	4 							; 3 is IF/ENDIF
=5					SMark_For 		= 	5 							; 4 is FOR/NEXT

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/common.inc


;******  Return to file: _include.asm


;******  Processing file: modules/hardware/common/macros32.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/data/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zCodePtr:	.dword ? 						; code pointer.
>001a					zLTemp1:	.dword ?						; long word (used in multiply)
>001e					zGenPtr:	.word ? 						; general pointer.
>0020					zTempStr:	.word ?							; temporary string allocator. When high zero, not initialised.
>0022					zVarDataPtr: .word ? 						; position of variable data.
>0024					zVarType: 	.byte ? 						; type of data (token)
>0025					zNullString:.byte ? 						; represents a NULL string.
>0026					zBasicSP:	.word ? 						; stack pointer
>0080					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0084					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0085					XS_Type 	.byte ? 						; bit 7 sign (float only)
=6					XS_Size = 6
=134					XS2_Mantissa = XS_Mantissa+XS_Size
=138					XS2_Exponent = XS_Exponent+XS_Size
=139					XS2_Type = XS_Type+XS_Size
=140					XS3_Mantissa = XS_Mantissa+XS_Size*2
=144					XS3_Exponent = XS_Exponent+XS_Size*2
=145					XS3_Type = XS_Type+XS_Size*2
>0300					StringPtr:	.word ? 						; Top of free memory (for string allocation)
>0302					VarMemPtr: 	.word ?							; Bottom of free memory (for variables)
>0304					endOfProgram: .dword ? 						; End of Program Memory (long)
>0308					vecPrintCharacter .word ?
>030a					vecInputCharacter .word ?
>030c					UserVector .fill 4 							; USR(x) calls this.
>0310					LocalVector .fill 4 						; Indirect calls call this.
>0314					NumBufX 	.byte 	?						; buffer index position
>0315					Num_Buffer	.fill 	32 						; buffer for numeric conversions
=6					HashTableCount = 6 							; there are 6 hash tables, in token order.
=8					HashTableSize = 8 							; each hash table as 8 links.
.0335					HashTableBase:
>0335								.fill	HashTableCount * HashTableSize * 2
.0395					HashTableEnd:
=$315					Var_Buffer 	= Num_Buffer 					; buffer for variable name (same space)
>0395					Var_Type    .byte ? 						; type of variable (as a type token)
>0396					Var_Hash 	.byte ? 						; hash of identifier name.
>0397					Var_Length 	.byte ? 						; length of variable name
>0398					Var_HashAddress .byte ?						; low byte of hash table entry.
>0399					Var_DataSize .byte ?						; size of one element.
>039a					NumSuppress	.byte 	?						; leading zero suppression flag
>039b					NumConvCount .byte 	? 						; count for conversions.
>039c					ExpTemp:	.byte ?							; Working temp for exponents.
>039d					ExpCount:	.byte ? 						; Count of decimal exponents.
>039e					SignCount:	.byte ?							; Integer Divide Sign Counts.
>039f					TempStringWriteIndex: .byte ? 				; Write offset.
>03a0					ValSign: 	.byte ? 						; sign flag for val()
>03a1					SliceStart:	.byte ? 						; string slice parts
>03a2					SliceCount:	.byte ?
>03a3					RandomSeed:	.dword ? 						; Random seed.
>03a7					SignNext:	.byte ? 						; Used for keeping sign of STEP in FOR/NEXT
>03a8					BreakCount:	.byte ? 						; Counter, avoid checking break every command.
=3					ArrayMaxDim = 3 							; number of dimensions.
>03a9					ArrayDef:	.fill (ArrayMaxDim+1)*2 		; dimensions for auto-creation
>03b1					UsrArrayDef:.fill (ArrayMaxDim+1)*2 		; dimensions created in DIM
>03b9					UsrArrayIdx:.byte ? 						; index into UsrArrayDef
>03ba					LastPrinted:.byte ? 						; last printed char ?
>03bb					ListIndent: .byte ? 						; list indent level
>03bc					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>03be					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>03c0					Tim_SR:		.byte ? 						; Processor Status
>03c1					Tim_A:		.byte ? 						; Processor Registers
>03c2					Tim_X:		.byte ?
>03c3					Tim_Y:		.byte ?
>03c4					Tim_Z:		.byte ?
>03c5					Tim_SP:		.word ?							; Stack Pointer (just in cases)
>0400					BasicStack:	.fill 	256 					; and occupy whole pages.
.0500					EndBasicStack:
>0500					IFT_XCursor:.byte ?							; current logical position on screen
>0501					IFT_YCursor:.byte ?
>0502					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0566					IFT_LineBuffer: .fill 100 					; line input buffer.

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

=$7f00					HighMemory = $7F00
=$3000					VariableMemory = $3000
.1000					BasicProgram:

;******  Processing file: modules/hardware/../basic/testcode/testcode.src

>1000	05 0a 00 d0 00 0a 14 00			.byte	$05,$0a,$00,$d0,$00,$0a,$14,$00
>1008	92 09 84 41 c8 42 00 0a			.byte	$92,$09,$84,$41,$c8,$42,$00,$0a
>1010	1e 00 92 0a 84 42 c8 43			.byte	$1e,$00,$92,$0a,$84,$42,$c8,$43
>1018	00 0a 28 00 92 0b 84 41			.byte	$00,$0a,$28,$00,$92,$0b,$84,$41
>1020	c8 44 00 0c 32 00 8f 09			.byte	$c8,$44,$00,$0c,$32,$00,$8f,$09
>1028	8a 0a 8a 0b 84 46 00 0a			.byte	$8a,$0a,$8a,$0b,$84,$46,$00,$0a
>1030	3c 00 d6 09 bf 0a bf 0b			.byte	$3c,$00,$d6,$09,$bf,$0a,$bf,$0b
>1038	00 05 46 00 94 00 06 50			.byte	$00,$05,$46,$00,$94,$00,$06,$50
>1040	00 97 0b 00 06 5a 00 97			.byte	$00,$97,$0b,$00,$06,$5a,$00,$97
>1048	0a 00 06 64 00 97 09 00			.byte	$0a,$00,$06,$64,$00,$97,$09,$00
>1050	05 6e 00 c4 00 00			.byte	$05,$6e,$00,$c4,$00,$00

;******  Return to file: modules/hardware/em65816.asm

.c000					StartROM:
.c000	18		clc				clc
.c001	fb		xce				xce
.c002	c2 30		rep #$30			rep 	#$30
.c004	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c007	1b		tcs				tcs
.c008	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.c00b	e2 30		sep #$30			sep 	#$30
.c00d	c2 30		rep #$30			rep 	#$30						; clear AXY in 16 bit.
.c00f	a9 00		lda #$00			lda 	#$0000
.c011	aa		tax				tax
.c012	a8		tay				tay
.c013	e2 30		sep #$30			sep 	#$30
.c015	5c df 87 01	jmp $0187df		jmp BASIC_Start
.c019					TIM_BreakHandler:
.c019	5c 76 83 01	jmp $018376			jmp 	TIM_BreakVector

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.018000					IFT_ClearScreen:
.018000	48		pha				pha
.018001	da		phx				phx
.018002	5a		phy				phy
.018003	20 a9 81	jsr $0181a9			jsr 	IF_Home 					; home cursor
.018006	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.018008					_IFT_CS0:
.018008	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.01800a					_IFT_CS1:
.01800a	a9 20		lda #$20			lda 	#' '						; clear line.
.01800c	20 d5 81	jsr $0181d5			jsr 	IF_Write
.01800f	88		dey				dey
.018010	d0 f8		bne $01800a			bne 	_IFT_CS1
.018012	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; next line down
.018015	ca		dex				dex
.018016	d0 f0		bne $018008			bne 	_IFT_CS0
.018018	7a		ply				ply
.018019	fa		plx				plx
.01801a	68		pla				pla
.01801b					IFT_HomeCursor:
.01801b	48		pha				pha
.01801c	20 a9 81	jsr $0181a9			jsr 	IF_Home
.01801f	a9 00		lda #$00			lda 	#0
.018021	8d 00 05	sta $0500			sta 	IFT_XCursor
.018024	8d 01 05	sta $0501			sta 	IFT_YCursor
.018027	68		pla				pla
.018028	60		rts				rts
.018029					IFT_UpLine:
.018029	48		pha				pha
.01802a	ad 01 05	lda $0501			lda  	IFT_YCursor 				; get Y
.01802d	3a		dec a				dec 	a 							; line above
.01802e	30 03		bmi $018033			bmi 	_IFTULExit 					; too far, abort
.018030	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos					; set to that line.
.018033					_IFTULExit:
.018033	68		pla				pla
.018034	60		rts				rts
.018035					IFT_PrintCharacter:
.018035	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.018037	f0 23		beq $01805c			beq 	IFT_NewLine
.018039	48		pha				pha
.01803a	20 74 80	jsr $018074			jsr 	IFT_UpperCase 				; make upper case
.01803d	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write out.
.018040	ee 00 05	inc $0500			inc 	IFT_XCursor 				; bump x cursor
.018043	ad 00 05	lda $0500			lda 	IFT_XCursor 				; reached RHS ?
.018046	c9 40		cmp #$40			cmp 	#IF_Width
.018048	d0 03		bne $01804d			bne 	_IFT_PCNotEOL
.01804a	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; if so do new line.
.01804d					_IFT_PCNotEOL:
.01804d	68		pla				pla
.01804e	60		rts				rts
.01804f					IFT_Tab:
.01804f	a9 20		lda #$20			lda 	#" " 						; space
.018051	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018054	ad 00 05	lda $0500			lda 	IFT_XCursor 				; until x % 8 == 0
.018057	29 07		and #$07			and 	#7
.018059	d0 f4		bne $01804f			bne 	IFT_Tab
.01805b	60		rts				rts
.01805c					IFT_NewLine:
.01805c	48		pha				pha
.01805d	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; new line on actual screen.
.018060	a9 00		lda #$00			lda 	#0 							; reset x position
.018062	8d 00 05	sta $0500			sta 	IFT_XCursor
.018065	ee 01 05	inc $0501			inc 	IFT_YCursor 				; move down.
.018068	ad 01 05	lda $0501			lda 	IFT_YCursor
.01806b	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.01806d	d0 03		bne $018072			bne 	_IFT_NL_NotEOS
.01806f	20 7f 80	jsr $01807f			jsr 	IFT_Scroll 					; scroll screen up.
.018072					_IFT_NL_NotEOS:
.018072	68		pla				pla
.018073	60		rts				rts
.018074					IFT_UpperCase:
.018074	c9 61		cmp #$61			cmp 	#"a"
.018076	90 06		bcc $01807e			bcc 	_IFT_UCExit
.018078	c9 7b		cmp #$7b			cmp 	#"z"+1
.01807a	b0 02		bcs $01807e			bcs 	_IFT_UCExit
.01807c	49 20		eor #$20			eor 	#$20
.01807e					_IFT_UCExit:
.01807e	60		rts				rts
.01807f					IFT_Scroll:
.01807f	48		pha				pha 								; save AXY
.018080	da		phx				phx
.018081	5a		phy				phy
.018082	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.018084					_IFT_SLoop:
.018084	20 a4 80	jsr $0180a4			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.018087	e8		inx				inx
.018088	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.01808a	d0 f8		bne $018084			bne 	_IFT_SLoop
.01808c	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01808e	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018091	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.018093					_IFT_SBlank:
.018093	a9 20		lda #$20			lda 	#32
.018095	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018098	ca		dex				dex
.018099	d0 f8		bne $018093			bne 	_IFT_SBlank
.01809b	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01809d	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180a0	7a		ply				ply
.0180a1	fa		plx				plx
.0180a2	68		pla				pla
.0180a3	60		rts				rts
.0180a4					_IFT_ScrollLine:
.0180a4	da		phx				phx
.0180a5	da		phx				phx
.0180a6	8a		txa				txa 								; copy line into buffer.
.0180a7	1a		inc a				inc 	a 							; next line down.
.0180a8	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180ab	a2 00		ldx #$00			ldx 	#0
.0180ad					_IFTScrollCopy1:
.0180ad	20 cc 81	jsr $0181cc			jsr 	IF_Read
.0180b0	9d 02 05	sta $0502,x			sta 	IFT_Buffer,x
.0180b3	e8		inx				inx
.0180b4	e0 40		cpx #$40			cpx 	#IF_Width
.0180b6	d0 f5		bne $0180ad			bne 	_IFTScrollCopy1
.0180b8	68		pla				pla
.0180b9	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180bc	a2 00		ldx #$00			ldx 	#0
.0180be					_IFTScrollCopy2:
.0180be	bd 02 05	lda $0502,x			lda 	IFT_Buffer,x
.0180c1	20 d5 81	jsr $0181d5			jsr 	IF_Write
.0180c4	e8		inx				inx
.0180c5	e0 40		cpx #$40			cpx 	#IF_Width
.0180c7	d0 f5		bne $0180be			bne 	_IFTScrollCopy2
.0180c9	fa		plx				plx
.0180ca	60		rts				rts
.0180cb					IFT_SetYPos:
.0180cb	48		pha				pha
.0180cc	da		phx				phx
.0180cd	aa		tax				tax
.0180ce	20 1b 80	jsr $01801b			jsr 	IFT_HomeCursor
.0180d1	e0 00		cpx #$00			cpx 	#0
.0180d3	f0 09		beq $0180de			beq 	_IFT_MOAExit
.0180d5					_IFT_MOALoop:
.0180d5	20 bc 81	jsr $0181bc			jsr 	IF_NewLine
.0180d8	ee 01 05	inc $0501			inc 	IFT_YCursor
.0180db	ca		dex				dex
.0180dc	d0 f7		bne $0180d5			bne		_IFT_MOALoop
.0180de					_IFT_MOAExit:
.0180de	fa		plx				plx
.0180df	68		pla				pla
.0180e0	60		rts				rts
.0180e1					IFT_GetKeyCursor:
.0180e1	20 e9 80	jsr $0180e9			jsr 	_IFT_FlipCursor 			; reverse current
.0180e4					_IFT_GKCWait:
.0180e4	20 e6 81	jsr $0181e6			jsr 	IF_GetKey 					; get key
.0180e7	f0 fb		beq $0180e4			beq 	_IFT_GKCWait
.0180e9					_IFT_FlipCursor:
.0180e9	48		pha				pha 								; save
.0180ea	20 cc 81	jsr $0181cc			jsr 	IF_Read 					; read
.0180ed	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f0	49 80		eor #$80			eor 	#$80 						; reverse
.0180f2	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write
.0180f5	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f8	68		pla				pla
.0180f9	60		rts				rts
.0180fa					IFT_ReadLine:
.0180fa	48		pha				pha
.0180fb					_IFT_RLLoop:
.0180fb	20 e1 80	jsr $0180e1			jsr 	IFT_GetKeyCursor 			; get keystroke
.0180fe	c9 0d		cmp #$0d			cmp 	#13							; return
.018100	f0 7d		beq $01817f			beq 	_IFT_RLExit
.018102	c9 20		cmp #$20			cmp 	#32 						; control character
.018104	90 05		bcc $01810b			bcc 	_IFT_Control
.018106	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018109	80 f0		bra $0180fb			bra 	_IFT_RLLoop
.01810b					_IFT_Control:
.01810b	c9 01		cmp #$01			cmp 	#"A"-64
.01810d	f0 26		beq $018135			beq 	_IFT_Left
.01810f	c9 04		cmp #$04			cmp 	#"D"-64
.018111	f0 2e		beq $018141			beq 	_IFT_Right
.018113	c9 17		cmp #$17			cmp 	#"W"-64
.018115	f0 36		beq $01814d			beq 	_IFT_Up
.018117	c9 13		cmp #$13			cmp 	#"S"-64
.018119	f0 3e		beq $018159			beq 	_IFT_Down
.01811b	c9 08		cmp #$08			cmp 	#"H"-64
.01811d	f0 09		beq $018128			beq 	_IFT_Backspace
.01811f	c9 1a		cmp #$1a			cmp 	#"Z"-64
.018121	d0 d8		bne $0180fb			bne 	_IFT_RLLoop
.018123	20 00 80	jsr $018000			jsr 	IFT_ClearScreen				; clear CTL-Z
.018126	80 d3		bra $0180fb			bra 	_IFT_RLLoop
.018128					_IFT_Backspace:
.018128	ad 00 05	lda $0500			lda 	IFT_XCursor 				; check not start of line.
.01812b	f0 ce		beq $0180fb			beq 	_IFT_RLLoop
.01812d	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.018130	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.018132	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018135					_IFT_Left:
.018135	ce 00 05	dec $0500			dec 	IFT_XCursor 				; left CTL-W
.018138	10 29		bpl $018163			bpl 	_IFT_Reposition
.01813a	a9 3f		lda #$3f			lda 	#IF_Width-1
.01813c					_IFT_SetX:
.01813c	8d 00 05	sta $0500			sta 	IFT_XCursor
.01813f	80 22		bra $018163			bra 	_IFT_Reposition
.018141					_IFT_Right:
.018141	ee 00 05	inc $0500			inc 	IFT_XCursor
.018144	ad 00 05	lda $0500			lda 	IFT_XCursor
.018147	49 40		eor #$40			eor 	#IF_Width
.018149	f0 f1		beq $01813c			beq 	_IFT_SetX
.01814b	80 16		bra $018163			bra 	_IFT_Reposition
.01814d					_IFT_Up:
.01814d	ce 01 05	dec $0501			dec 	IFT_YCursor
.018150	10 11		bpl $018163			bpl 	_IFT_Reposition
.018152	a9 1f		lda #$1f			lda 	#IF_Height-1
.018154					_IFT_SetY:
.018154	8d 01 05	sta $0501			sta 	IFT_YCursor
.018157	80 0a		bra $018163			bra 	_IFT_Reposition
.018159					_IFT_Down:
.018159	ee 01 05	inc $0501			inc 	IFT_YCursor
.01815c	ad 01 05	lda $0501			lda 	IFT_YCursor
.01815f	49 20		eor #$20			eor 	#IF_Height
.018161	f0 f1		beq $018154			beq 	_IFT_SetY
.018163					_IFT_Reposition:
.018163	ad 00 05	lda $0500			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.018166	48		pha				pha
.018167	ad 01 05	lda $0501			lda 	IFT_YCursor
.01816a	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.01816d	68		pla				pla
.01816e	aa		tax				tax
.01816f	e0 00		cpx #$00			cpx 	#0
.018171	f0 88		beq $0180fb			beq 	_IFT_RLLoop
.018173					_IFT_MoveRight:
.018173	20 cc 81	jsr $0181cc			jsr 	IF_Read
.018176	ee 00 05	inc $0500			inc 	IFT_XCursor
.018179	ca		dex				dex
.01817a	d0 f7		bne $018173			bne 	_IFT_MoveRight
.01817c	4c fb 80	jmp $0180fb			jmp 	_IFT_RLLoop
.01817f					_IFT_RLExit:
.01817f	ad 01 05	lda $0501			lda 	IFT_YCursor 				; go to start of line.
.018182	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018185	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.018187					_IFT_RLRead:
.018187	20 cc 81	jsr $0181cc			jsr 	IF_Read
.01818a	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.01818d	e8		inx				inx
.01818e	e0 40		cpx #$40			cpx 	#IF_Width
.018190	d0 f5		bne $018187			bne 	_IFT_RLRead
.018192					_IFT_RL_Trim:
.018192	ca		dex				dex 	 							; previous char
.018193	30 07		bmi $01819c			bmi 	_IFT_Found 					; gone too far
.018195	bd 66 05	lda $0566,x			lda 	IFT_LineBuffer,x			; go back if space
.018198	c9 20		cmp #$20			cmp 	#" "
.01819a	f0 f6		beq $018192			beq 	_IFT_RL_Trim
.01819c					_IFT_Found:
.01819c	e8		inx				inx 								; forward to non-space
.01819d	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.01819f	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.0181a2	68		pla				pla
.0181a3	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.0181a5	a0 05		ldy #$05			ldy 	#IFT_LineBuffer >> 8
.0181a7	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.0181a8					IF_Reset:
.0181a8	60		rts				rts
.0181a9					IF_Home:
.0181a9	48		pha				pha
.0181aa	64 08		stz $08				stz 	IF_XPos 					; zero X position
.0181ac	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.0181ae	85 04		sta $04				sta 	IF_Pos
.0181b0	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.0181b2	85 05		sta $05				sta 	IF_Pos+1
.0181b4	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.0181b6	85 06		sta $06				sta 	IF_Pos+2
.0181b8	64 07		stz $07				stz 	IF_Pos+3
.0181ba	68		pla				pla
.0181bb	60		rts				rts
.0181bc					IF_NewLine:
.0181bc	48		pha				pha
.0181bd	64 08		stz $08				stz 	IF_XPos						; back to start of line
.0181bf	18		clc				clc 								; down one line
.0181c0	a5 04		lda $04				lda 	IF_Pos
.0181c2	69 40		adc #$40			adc 	#64
.0181c4	85 04		sta $04				sta 	IF_Pos
.0181c6	90 02		bcc $0181ca			bcc 	_IF_NoCarry 				; carry through.
.0181c8	e6 05		inc $05				inc 	IF_Pos+1
.0181ca					_IF_NoCarry:
.0181ca	68		pla				pla
.0181cb	60		rts				rts
.0181cc					IF_Read:
.0181cc	5a		phy				phy 								; save current Y
.0181cd	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.0181cf	b7 04		lda [$04],y			lda 	[IF_Pos],y
.0181d1	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181d3	7a		ply				ply									; restore Y
.0181d4	60		rts				rts
.0181d5					IF_Write:
.0181d5	5a		phy				phy 								; save current Y
.0181d6	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.0181d8	97 04		sta [$04],y			sta 	[IF_Pos],y
.0181da	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181dc	7a		ply				ply									; restore Y
.0181dd	60		rts				rts
.0181de					IF_LeftOne:
.0181de	c6 08		dec $08				dec 	IF_XPos
.0181e0	60		rts				rts
.0181e1					IF_CheckBreak:
.0181e1	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.0181e5	60		rts				rts
.0181e6					IF_GetKey:
.0181e6	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.0181ea	f0 08		beq $0181f4			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.0181ec	48		pha				pha 								; key pressed, clear queue.
.0181ed	a9 00		lda #$00			lda 	#0
.0181ef	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.0181f3	68		pla				pla
.0181f4					_IFGK_NoKey:
.0181f4	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.0181f6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.0181f7					TIM_Error:
.0181f7	20 29 80	jsr $018029			jsr 	IFT_UpLine 					; go up one line.
.0181fa	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.0181fc	80 02		bra $018200			bra 	TIM_ShowPrompt
.0181fe					TIM_NewCommand:
.0181fe	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.018200					TIM_ShowPrompt:
.018200	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.018203	20 fa 80	jsr $0180fa			jsr 	IFT_ReadLine	 			; get character, go to next line
.018206	20 5c 80	jsr $01805c			jsr 	IFT_NewLine					; go to next line.
.018209	86 10		stx $10				stx 	zTemp1 						; save line read address
.01820b	84 11		sty $11				sty 	zTemp1+1
.01820d	a0 00		ldy #$00			ldy 	#0 							; get first character after the prompt.
.01820f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018211	c9 3f		cmp #$3f			cmp 	#"?"
.018213	f0 04		beq $018219			beq 	TIM_SkipFirst
.018215	c9 2e		cmp #$2e			cmp 	#"."						; if . skip it
.018217	d0 01		bne $01821a			bne 	TIM_NotDot
.018219					TIM_SkipFirst:
.018219	c8		iny				iny
.01821a					TIM_NotDot:
.01821a	b1 10		lda ($10),y			lda 	(zTemp1),y 					; get character
.01821c	c9 52		cmp #$52			cmp 	#"R"						; show registers
.01821e	f0 6b		beq $01828b			beq 	TIM_ShowRegisters
.018220	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.018222	f0 12		beq $018236			beq 	TIM_ShowMemory
.018224	c9 47		cmp #$47			cmp 	#"G"						; execute
.018226	f0 49		beq $018271			beq 	TIM_Execute
.018228	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.01822a	f0 07		beq $018233			beq 	TIM_GoLoadMemory
.01822c	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.01822e	d0 c7		bne $0181f7			bne 	TIM_Error
.018230	4c af 83	jmp $0183af			jmp 	TIM_UpdateRegisters
.018233					TIM_GoLoadMemory:
.018233	4c df 83	jmp $0183df			jmp 	TIM_LoadMemory
.018236					TIM_ShowMemory:
.018236	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018239	b0 bc		bcs $0181f7			bcs 	TIM_Error
.01823b	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.01823d	85 12		sta $12				sta 	zTemp2
.01823f	a5 15		lda $15				lda 	zTemp3+1
.018241	85 13		sta $13				sta 	zTemp2+1
.018243	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018246	90 08		bcc $018250			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.018248	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.01824a	85 14		sta $14				sta 	zTemp3
.01824c	a5 13		lda $13				lda 	zTemp2+1
.01824e	85 15		sta $15				sta 	zTemp3+1
.018250					_TIMSM_Start:
.018250	20 03 83	jsr $018303			jsr 	TIM_WriteLine 				; write one line of hex out
.018253	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.018255	18		clc				clc
.018256	69 10		adc #$10			adc 	#16
.018258	85 12		sta $12				sta 	zTemp2
.01825a	90 02		bcc $01825e			bcc 	_TIMSM_NoCarry
.01825c	e6 13		inc $13				inc 	zTemp2+1
.01825e					_TIMSM_NoCarry:
.01825e	20 e1 81	jsr $0181e1			jsr 	IF_CheckBreak 				; check CTL+C
.018261	d0 0b		bne $01826e			bne 	_TIMSM_Ends 				; if pressed break out.
.018263	38		sec				sec 								; check past the end address in zTemp3
.018264	a5 14		lda $14				lda 	zTemp3
.018266	e5 12		sbc $12				sbc 	zTemp2
.018268	a5 15		lda $15				lda 	zTemp3+1
.01826a	e5 13		sbc $13				sbc 	zTemp2+1
.01826c	10 e2		bpl $018250			bpl 	_TIMSM_Start
.01826e					_TIMSM_Ends:
.01826e	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.018271					TIM_Execute:
.018271	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get the execute address
.018274	b0 81		bcs $0181f7			bcs 	TIM_Error 					; not legitimate
.018276	ae c5 03	ldx $03c5			ldx 	TIM_SP 						; set up SP
.018279	9a		txs				txs
.01827a	ad c0 03	lda $03c0			lda 	TIM_SR 						; Status for PLP
.01827d	48		pha				pha
.01827e	ad c1 03	lda $03c1			lda 	TIM_A 						; restore AXYZ
.018281	ae c2 03	ldx $03c2			ldx 	TIM_X
.018284	ac c3 03	ldy $03c3			ldy 	TIM_Y
.018287	28		plp				plp 								; and PS Byte.
.018288	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.01828b					TIM_Start:
.01828b					TIM_ShowRegisters:
.01828b	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.01828e	8d bf 03	sta $03bf			sta 	TIM_IRQ+1
.018291	ad ff ff	lda $ffff			lda 	$FFFF
.018294	8d be 03	sta $03be			sta 	TIM_IRQ
.018297	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.018299					_TIMSR_Text:
.018299	bf ca 82 01	lda $0182ca,x			lda 	_TIMSR_Label,x
.01829d	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182a0	e8		inx				inx
.0182a1	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.0182a3	d0 f4		bne $018299			bne 	_TIMSR_Text
.0182a5	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.0182a7					_TIMSR_Skip:
.0182a7	e8		inx				inx
.0182a8					_TIMSR_LoopSpace:
.0182a8	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.0182aa	b0 04		bcs $0182b0			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.0182ac	8a		txa				txa
.0182ad	4a		lsr a				lsr 	a
.0182ae	b0 05		bcs $0182b5			bcs 	_TIMSR_NoSpace
.0182b0					_TIMSR_Space:
.0182b0	a9 20		lda #$20			lda 	#" "
.0182b2	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182b5					_TIMSR_NoSpace:
.0182b5	bd bc 03	lda $03bc,x			lda 	TIM_PC,x 					; output hex value.
.0182b8	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.0182bb	e8		inx				inx
.0182bc	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.0182be	f0 e7		beq $0182a7			beq 	_TIMSR_Skip
.0182c0	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.0182c2	d0 e4		bne $0182a8			bne 	_TimSR_LoopSpace
.0182c4	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; new line
.0182c7	4c fe 81	jmp $0181fe			jmp	 	TIM_NewCommand 				; new command.
.0182ca					_TIMSR_Label:
>0182ca	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>0182d2	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>0182e2	52
>0182e3	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.0182ea					_TIMSR_LabelEnd:
.0182ea					TIM_WriteHex:
.0182ea	48		pha				pha 								; save A
.0182eb	4a		lsr a				lsr 	a 							; shift MSB->LSB
.0182ec	4a		lsr a				lsr 	a
.0182ed	4a		lsr a				lsr 	a
.0182ee	4a		lsr a				lsr 	a
.0182ef	20 f3 82	jsr $0182f3			jsr 	_TIMWH_Nibble 				; print MSB
.0182f2	68		pla				pla 								; restore and print LSB
.0182f3					_TIMWH_Nibble:
.0182f3	48		pha				pha
.0182f4	29 0f		and #$0f			and 	#15 						; mask out
.0182f6	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.0182f8	90 02		bcc $0182fc			bcc 	_TIMWHNoLetter
.0182fa	69 06		adc #$06			adc 	#6
.0182fc					_TIMWHNoLetter:
.0182fc	69 30		adc #$30			adc 	#48
.0182fe	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter 			; print it out.
.018301	68		pla				pla
.018302	60		rts				rts
.018303					TIM_WriteLine:
.018303	a9 2e		lda #$2e			lda 	#"." 						; prompt
.018305	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018308	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.01830a	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01830d	a5 13		lda $13				lda 	zTemp2+1 					; write address
.01830f	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018312	a5 12		lda $12				lda 	zTemp2
.018314	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018317	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.018319					_TIMWL_Loop:
.018319	a9 20		lda #$20			lda 	#" "
.01831b	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01831e	b1 12		lda ($12),y			lda 	(zTemp2),y
.018320	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018323	c8		iny				iny
.018324	c0 10		cpy #$10			cpy 	#16
.018326	d0 f1		bne $018319			bne 	_TIMWL_Loop
.018328	4c 5c 80	jmp $01805c			jmp 	IFT_NewLine 				; new line and exit
.01832b					TIM_GetHex:
.01832b	c8		iny				iny
.01832c	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.01832e	c9 20		cmp #$20			cmp 	#32
.018330	f0 f9		beq $01832b			beq 	TIM_GetHex
.018332	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.018334	f0 f5		beq $01832b			beq 	TIM_GetHex
.018336	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.018339	b0 23		bcs $01835e			bcs 	_TIMGH_Exit					; if first bad then exit now.
.01833b	a9 00		lda #$00			lda 	#0 							; zero result
.01833d	85 14		sta $14				sta 	zTemp3
.01833f	85 15		sta $15				sta 	zTemp3+1
.018341					_TIM_GHLoop:
.018341	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; get next character
.018344	b0 17		bcs $01835d			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.018346	c8		iny				iny 								; skip over it.
.018347	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.018349	26 15		rol $15				rol 	zTemp3+1
.01834b	06 14		asl $14				asl 	zTemp3 						; now x 2
.01834d	26 15		rol $15				rol 	zTemp3+1
.01834f	06 14		asl $14				asl 	zTemp3						; now x 4
.018351	26 15		rol $15				rol 	zTemp3+1
.018353	06 14		asl $14				asl 	zTemp3 						; now x 8
.018355	26 15		rol $15				rol 	zTemp3+1
.018357	05 14		ora $14				ora 	zTemp3 						; OR result in
.018359	85 14		sta $14				sta 	zTemp3
.01835b	80 e4		bra $018341			bra 	_TIM_GHLoop 				; loop round again.
.01835d					_TIMGH_Okay:
.01835d	18		clc				clc
.01835e					_TIMGH_Exit:
.01835e	60		rts				rts
.01835f					TIM_GetHexCharacter:
.01835f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018361	38		sec				sec
.018362	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.018364	90 0e		bcc $018374			bcc 	_TIM_GHCFail
.018366	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.018368	90 0b		bcc $018375			bcc 	_TIM_GHCExit
.01836a	c9 11		cmp #$11			cmp 	#65-48						; < A
.01836c	90 06		bcc $018374			bcc		_TIM_GHCFail
.01836e	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.018370	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.018372	90 01		bcc $018375			bcc		_TIM_GHCExit
.018374					_TIM_GHCFail:
.018374	38		sec				sec
.018375					_TIM_GHCExit:
.018375	60		rts				rts
.018376					TIM_BreakVector:
.018376	da		phx				phx									; save X/A on stack
.018377	48		pha				pha
.018378	ba		tsx				tsx 								; X points to S
.018379	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.01837c	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.01837e	d0 03		bne $018383			bne 	_TIMBreak					; if set, it's BRK
.018380	68		pla				pla 								; abandon routine.
.018381	fa		plx				plx
.018382	40		rti				rti
.018383					_TIMBreak:
.018383	68		pla				pla 								; save A X Y and maybe Z
.018384	8d c1 03	sta $03c1			sta 	TIM_A
.018387	fa		plx				plx
.018388	8e c2 03	stx $03c2			stx 	TIM_X
.01838b	8c c3 03	sty $03c3			sty 	TIM_Y
.01838e	68		pla				pla 								; get Status Register
.01838f	8d c0 03	sta $03c0			sta 	TIM_SR
.018392	68		pla				pla
.018393	8d bd 03	sta $03bd			sta 	TIM_PC+1 					; save calling address
.018396	68		pla				pla
.018397	8d bc 03	sta $03bc			sta 	TIM_PC 						; high byte
.01839a	ad bd 03	lda $03bd			lda 	TIM_PC+1 					; dec PC to point right.
.01839d	d0 03		bne $0183a2			bne 	_TIMDecrement 				; brk bumps it.
.01839f	ce bc 03	dec $03bc			dec 	TIM_PC
.0183a2					_TIMDecrement:
.0183a2	ce bd 03	dec $03bd			dec 	TIM_PC+1
.0183a5	ba		tsx				tsx 								; and copy SP
.0183a6	8e c5 03	stx $03c5			stx 	TIM_SP
.0183a9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.0183ab	9a		txs				txs
.0183ac	4c 8b 82	jmp $01828b			jmp 	TIM_Start 					; and start up TIM monitor.
.0183af					TIM_UpdateRegisters:
.0183af	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; PC
.0183b2	b0 28		bcs $0183dc			bcs 	_TIMURFail
.0183b4	a5 14		lda $14				lda 	zTemp3
.0183b6	8d bd 03	sta $03bd			sta 	Tim_PC+1
.0183b9	a5 15		lda $15				lda 	zTemp3+1
.0183bb	8d bc 03	sta $03bc			sta 	Tim_PC
.0183be	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; ignore IRQ
.0183c1	b0 19		bcs $0183dc			bcs 	_TIMURFail
.0183c3	a2 00		ldx #$00			ldx 	#0
.0183c5					_TIM_URLoop:
.0183c5	e0 04		cpx #$04			cpx 	#Tim_Z-Tim_SR
.0183c7	d0 01		bne $0183ca			bne 	_TIM_1
.0183c9	e8		inx				inx
.0183ca					_TIM_1:
.0183ca	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; registers
.0183cd	b0 0d		bcs $0183dc			bcs 	_TIMURFail
.0183cf	a5 14		lda $14				lda 	zTemp3
.0183d1	9d c0 03	sta $03c0,x			sta 	Tim_SR,x
.0183d4	e8		inx				inx
.0183d5	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.0183d7	d0 ec		bne $0183c5			bne 	_TIM_URLoop
.0183d9	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.0183dc					_TIMURFail:
.0183dc	4c f7 81	jmp $0181f7			jmp 	TIM_Error
.0183df					TIM_LoadMemory:
.0183df	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; target address => zTemp2
.0183e2	a5 14		lda $14				lda 	zTemp3
.0183e4	85 12		sta $12				sta 	zTemp2
.0183e6	a5 15		lda $15				lda 	zTemp3+1
.0183e8	85 13		sta $13				sta 	zTemp2+1
.0183ea					_TIM_LMLoop:
.0183ea	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; next byte ?
.0183ed	b0 0e		bcs $0183fd			bcs 	_TIMLMDone 					; no more
.0183ef	a2 00		ldx #$00			ldx 	#0							; write out.
.0183f1	a5 14		lda $14				lda 	zTemp3
.0183f3	81 12		sta ($12,x)			sta 	(zTemp2,x)
.0183f5	e6 12		inc $12				inc 	zTemp2 						; bump address
.0183f7	d0 f1		bne $0183ea			bne 	_TIM_LMLoop
.0183f9	e6 13		inc $13				inc 	zTemp2+1
.0183fb	80 ed		bra $0183ea			bra 	_TIM_LMLoop
.0183fd					_TIMLMDone:
.0183fd	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/skip.asm

.018400					StructureSearchSingle:
.018400	a2 00		ldx #$00			ldx 	#0
.018402					StructureSearchDouble:
.018402	85 10		sta $10				sta 	zTemp1 						; save the target on zTemp1,zTemp1+1
.018404	86 11		stx $11				stx 	zTemp1+1
.018406	a9 00		lda #$00			lda 	#0 							; set the structure depth to zero (zTemp2)
.018408	85 12		sta $12				sta 	zTemp2
.01840a	80 18		bra $018424			bra 	_SSWLoop 					; jump in, start scanning from here.
.01840c					_SSWNextLine:
.01840c	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01840e	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018410	18		clc				clc
.018411	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018413	85 16		sta $16				sta 	zCodePtr
.018415	90 02		bcc $018419			bcc 	_SNLNoCarry
.018417	e6 17		inc $17				inc 	zCodePtr+1
.018419					_SNLNoCarry:
.018419	a0 00		ldy #$00			ldy 	#0
.01841b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01841d	c9 00		cmp #$00			cmp 	#0					 		; if zero, fail.
.01841f	f0 54		beq $018475			beq 	_SSWFail
.018421	c8		iny				iny
.018422	c8		iny				iny
.018423					_SSWNextSimple:
.018423	c8		iny				iny
.018424					_SSWLoop:
.018424	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018426	c9 00		cmp #$00			cmp 	#0 							; end of line ?
.018428	f0 e2		beq $01840c			beq 	_SSWNextLine 				; if so, then next line
.01842a	10 f7		bpl $018423			bpl 	_SSWNextSimple 				; needs to be a token, just skip char/number.
.01842c	a6 12		ldx $12				ldx 	zTemp2 						; check structure count
.01842e	d0 08		bne $018438			bne 	_SSWCheckUpDown 			; if it's non zero, then a match doesn't work.
.018430	c5 10		cmp $10				cmp 	zTemp1 						; found the right keyword, either choice.
.018432	f0 2d		beq $018461			beq 	_SSWFound 					; so exit.
.018434	c5 11		cmp $11				cmp 	zTemp1+1
.018436	f0 29		beq $018461			beq 	_SSWFound
.018438					_SSWCheckUpDown:
.018438	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus 			; if < keyword +
.01843a	90 10		bcc $01844c			bcc 	_SSWNext
.01843c	c9 93		cmp #$93			cmp 	#firstKeywordMinus 			; if < keyword - then as keyword +
.01843e	90 08		bcc $018448			bcc 	_SSWPlus
.018440	c9 98		cmp #$98			cmp 	#firstUnaryFunction			; if < first unary down as keyword -
.018442	b0 08		bcs $01844c			bcs 	_SSWNext
.018444	c6 12		dec $12				dec 	zTemp2 						; reduce structure count.
.018446	c6 12		dec $12				dec 	zTemp2
.018448					_SSWPlus:
.018448	e6 12		inc $12				inc 	zTemp2
.01844a	30 16		bmi $018462			bmi 	_SSWUnder					; error if driven -ve
.01844c					_SSWNext:
.01844c	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.01844e	c8		iny				iny 								; skip
.01844f	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018451	90 0c		bcc $01845f			bcc 	_SEDone 					; so just skip over it.
.018453	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018455	90 07		bcc $01845e			bcc 	_SEDouble
.018457	98		tya				tya 								; this is Y + 1
.018458	18		clc				clc
.018459	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.01845b	a8		tay				tay 								; back in Y.
.01845c	88		dey				dey 								; fix up, one for the +1, one for the iny
.01845d	88		dey				dey
.01845e					_SEDouble:
.01845e	c8		iny				iny
.01845f					_SEDone:
.01845f	80 c3		bra $018424			bra 	_SSWLoop
.018461					_SSWFound:
.018461	60		rts				rts
.018462					_SSWUnder:
.018462	20 57 85	jsr $018557			jsr ERR_Handler
>018465	53 74 72 75 63 74 75 72			.text "Structure order",0
>01846d	65 20 6f 72 64 65 72 00
.018475					_SSWFail:
.018475	20 57 85	jsr $018557			jsr ERR_Handler
>018478	43 61 6e 27 74 20 66 69			.text "Can't find structure",0
>018480	6e 64 20 73 74 72 75 63 74 75 72 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stack.asm

.01848d					StackReset:
.01848d	48		pha				pha
.01848e	5a		phy				phy
.01848f	a9 00		lda #$00			lda 	#(BasicStack & $FF) 		; reset pointer
.018491	85 26		sta $26				sta 	zBasicSP
.018493	a9 04		lda #$04			lda 	#(BasicStack >> 8)
.018495	85 27		sta $27				sta 	zBasicSP+1
.018497	a0 00		ldy #$00			ldy 	#0 							; reset stack top to $00 which cannot
.018499	98		tya				tya 								; be a legal token.
.01849a	91 26		sta ($26),y			sta 	(zBasicSP),y
.01849c	7a		ply				ply
.01849d	68		pla				pla
.01849e	60		rts				rts
.01849f					StackPushFrame:
.01849f	48		pha				pha
.0184a0	5a		phy				phy
.0184a1	1a		inc a				inc 	a 							; one extra byte in frame, for the marker.
.0184a2	48		pha				pha 								; save it.
.0184a3	29 0f		and #$0f			and 	#$0F 						; lower 4 bits
.0184a5	18		clc				clc 								; add to Basic Stack
.0184a6	65 26		adc $26				adc 	zBasicSP
.0184a8	85 26		sta $26				sta 	zBasicSP
.0184aa	90 02		bcc $0184ae			bcc 	_SPFNoBump
.0184ac	e6 27		inc $27				inc 	zBasicSP+1
.0184ae					_SPFNoBump:
.0184ae	a0 00		ldy #$00			ldy 	#0
.0184b0	68		pla				pla
.0184b1	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184b3	7a		ply				ply
.0184b4	68		pla				pla
.0184b5	60		rts				rts
.0184b6					StackPopFrame:
.0184b6	48		pha				pha
.0184b7	5a		phy				phy
.0184b8	a0 00		ldy #$00			ldy 	#0 							; compare with top of stack using EOR
.0184ba	51 26		eor ($26),y			eor 	(zBasicSP),y
.0184bc	29 f0		and #$f0			and 	#$F0 						; top 4 bits zero, match
.0184be	d0 12		bne $0184d2			bne 	SPFError 					; mixed structures
.0184c0	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; get size from byte
.0184c2	29 0f		and #$0f			and 	#$0F
.0184c4	49 ff		eor #$ff			eor 	#$FF						; 2's complement
.0184c6	38		sec				sec
.0184c7	65 26		adc $26				adc 	zBasicSP
.0184c9	85 26		sta $26				sta 	zBasicSP
.0184cb	b0 02		bcs $0184cf			bcs 	_SPFNoBump
.0184cd	c6 27		dec $27				dec 	zBasicSP+1
.0184cf					_SPFNoBump:
.0184cf	7a		ply				ply
.0184d0	68		pla				pla
.0184d1	60		rts				rts
.0184d2					SPFError:
.0184d2	20 57 85	jsr $018557			jsr ERR_Handler
>0184d5	4d 69 78 65 64 20 53 74			.text "Mixed Structures",0
>0184dd	72 75 63 74 75 72 65 73 00
.0184e6					StackSavePosition:
.0184e6	98		tya				tya
.0184e7	5a		phy				phy
.0184e8	a0 05		ldy #$05			ldy 	#5
.0184ea	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184ec	a0 01		ldy #$01			ldy 	#1
.0184ee	a5 16		lda $16				lda 	zCodePtr+0 					; 4 bytes, could reduce this for 65816/6502
.0184f0	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f2	c8		iny				iny
.0184f3	a5 17		lda $17				lda 	zCodePtr+1
.0184f5	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f7	c8		iny				iny
.0184f8	a5 18		lda $18				lda 	zCodePtr+2
.0184fa	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184fc	c8		iny				iny
.0184fd	a5 19		lda $19				lda 	zCodePtr+3
.0184ff	91 26		sta ($26),y			sta 	(zBasicSP),y
.018501	7a		ply				ply
.018502	60		rts				rts
.018503					StackRestorePosition:
.018503	5a		phy				phy
.018504	a0 01		ldy #$01			ldy 	#1 							; copy 4 bytes that are the pointer
.018506	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018508	85 16		sta $16				sta 	zCodePtr+0
.01850a	c8		iny				iny
.01850b	b1 26		lda ($26),y			lda 	(zBasicSP),y
.01850d	85 17		sta $17				sta 	zCodePtr+1
.01850f	c8		iny				iny
.018510	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018512	85 18		sta $18				sta 	zCodePtr+2
.018514	c8		iny				iny
.018515	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018517	85 19		sta $19				sta 	zCodePtr+3
.018519	c8		iny				iny
.01851a	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; offset
.01851c	7a		ply				ply 								; restore Y
.01851d	a8		tay				tay
.01851e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/vectors.asm

.01851f					CharPrint:
.01851f	4c 35 80	jmp $018035			jmp 	IFT_PrintCharacter
.018522					CharGet:
.018522	4c e6 81	jmp $0181e6			jmp 	IF_GetKey
.018525					CheckBreak:
.018525	4c e1 81	jmp $0181e1			jmp 	IF_CheckBreak

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/errors.asm

.018528					SyntaxError:
.018528	20 57 85	jsr $018557			jsr 	ERR_Handler
>01852b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>018533	72 72 6f 72 00
.018538					TypeError:
.018538	20 57 85	jsr $018557			jsr 	ERR_Handler
>01853b	57 72 6f 6e 67 20 74 79				.text 	"Wrong type",0
>018543	70 65 00
.018546					BadParamError:
.018546	20 57 85	jsr $018557			jsr 	ERR_Handler
>018549	42 61 64 20 50 61 72 61				.text 	"Bad Parameter",0
>018551	6d 65 74 65 72 00
.018557					ERR_Handler:
.018557	a0 00		ldy #$00			ldy 	#0
.018559	c8		iny				iny
.01855a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01855c	85 80		sta $80				sta 	XS_Mantissa
.01855e	c8		iny				iny
.01855f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018561	85 81		sta $81				sta 	XS_Mantissa+1
.018563	fa		plx				plx 								; address in XY
.018564	7a		ply				ply
.018565	e8		inx				inx 								; bump, because of RTS/JSR address -1
.018566	d0 01		bne $018569			bne 	_EHNoSkip
.018568	c8		iny				iny
.018569					_EHNoSkip:
.018569	20 88 85	jsr $018588			jsr 	PrintROMMessage 			; print message from ROM.
.01856c	a5 80		lda $80				lda 	XS_Mantissa					; line number = 0
.01856e	05 81		ora $81				ora 	XS_Mantissa+1
.018570	f0 0c		beq $01857e			beq 	_EHNoLine
.018572	a2 83		ldx #$83			ldx 	#_EHAt & $FF 				; print " at "
.018574	a0 85		ldy #$85			ldy 	#(_EHAt >> 8) & $FF
.018576	20 88 85	jsr $018588			jsr 	PrintROMMessage
.018579	a2 00		ldx #$00			ldx 	#0 							; Print line number
.01857b	20 9d 85	jsr $01859d			jsr 	Print16BitInteger
.01857e					_EHNoLine:
.01857e	80 fe		bra $01857e			bra 	_EHNoLine
.018580	4c 10 88	jmp $018810			jmp 	WarmStart
>018583	20 61 74 20 00			_EHAt:	.text 	" at ",0
.018588					PrintROMMessage:
.018588	86 1a		stx $1a				stx 	zLTemp1 					; save addres
.01858a	84 1b		sty $1b				sty 	zLTemp1+1
.01858c	4b		phk				phk
.01858d	68		pla				pla
.01858e	85 1c		sta $1c				sta 	ZLTemp1+2
.018590	a0 00		ldy #$00			ldy 	#0
.018592					_PRMLoop:
.018592	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018594	f0 06		beq $01859c			beq		_PRMExit
.018596	c8		iny				iny
.018597	20 1f 85	jsr $01851f			jsr 	CharPrint
.01859a	80 f6		bra $018592			bra 	_PRMLoop
.01859c					_PRMExit:
.01859c	60		rts				rts
.01859d					Print16BitInteger:
.01859d	a9 00		lda #$00			lda 	#0 							; make 32 bit
.01859f	85 82		sta $82				sta 	XS_Mantissa+2
.0185a1	85 83		sta $83				sta 	XS_Mantissa+3
.0185a3					Print32BitInteger:
.0185a3	a9 00		lda #$00			lda 	#0
.0185a5	8d 14 03	sta $0314			sta 	NumBufX 					; reset the conversion pointer
.0185a8	aa		tax				tax 								; convert bottom level.
.0185a9	20 30 9c	jsr $019c30			jsr 	INTToString 				; make string
.0185ac	a2 00		ldx #$00			ldx 	#0 							; print buffer
.0185ae	bd 15 03	lda $0315,x	_P1Loop:lda 	Num_Buffer,x
.0185b1	f0 06		beq $0185b9			beq 	_P1Exit
.0185b3	20 1f 85	jsr $01851f			jsr 	CharPrint
.0185b6	e8		inx				inx
.0185b7	80 f5		bra $0185ae			bra 	_P1Loop
.0185b9	8a		txa		_P1Exit:txa 								; return chars printed.
.0185ba	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/core.asm


;******  Processing file: modules/basic/../basic/header/header.src

=$93					firstKeywordMinus = $93
=$8f					firstKeywordPlus = $8f
=$98					firstUnaryFunction = $98
=$b6					lastUnaryFunction = $b6
.0185bb					VectorTable:
>0185bb	a4 90					.word BinaryOp_And         & $FFFF ; $80 and
>0185bd	c0 90					.word BinaryOp_Or          & $FFFF ; $81 or
>0185bf	dc 90					.word BinaryOp_Xor         & $FFFF ; $82 xor
>0185c1	dc 90					.word BinaryOp_Eor         & $FFFF ; $83 eor
>0185c3	13 91					.word Binary_Equal         & $FFFF ; $84 =
>0185c5	2d 91					.word Binary_NotEqual      & $FFFF ; $85 <>
>0185c7	36 91					.word Binary_Less          & $FFFF ; $86 <
>0185c9	3f 91					.word Binary_LessEqual     & $FFFF ; $87 <=
>0185cb	51 91					.word Binary_Greater       & $FFFF ; $88 >
>0185cd	48 91					.word Binary_GreaterEqual  & $FFFF ; $89 >=
>0185cf	d6 91					.word BinaryOp_Add         & $FFFF ; $8a +
>0185d1	f2 91					.word BinaryOp_Subtract    & $FFFF ; $8b -
>0185d3	03 92					.word BinaryOp_Multiply    & $FFFF ; $8c *
>0185d5	14 92					.word BinaryOp_Divide      & $FFFF ; $8d /
>0185d7	79 86					.word NotImplemented       & $FFFF ; $8e ^
>0185d9	e1 8a					.word Command_IF           & $FFFF ; $8f if
>0185db	a0 8e					.word Command_WHILE        & $FFFF ; $90 while
>0185dd	c8 8e					.word Command_REPEAT       & $FFFF ; $91 repeat
>0185df	72 89					.word Command_FOR          & $FFFF ; $92 for
>0185e1	79 86					.word NotImplemented       & $FFFF ; $93 then
>0185e3	3e 8b					.word Command_ENDIF        & $FFFF ; $94 endif
>0185e5	bd 8e					.word Command_WEND         & $FFFF ; $95 wend
>0185e7	d1 8e					.word Command_UNTIL        & $FFFF ; $96 until
>0185e9	ef 89					.word Command_NEXT         & $FFFF ; $97 next
>0185eb	79 86					.word NotImplemented       & $FFFF ; $98 not
>0185ed	79 86					.word NotImplemented       & $FFFF ; $99 fn(
>0185ef	19 93					.word Unary_Abs            & $FFFF ; $9a abs(
>0185f1	5a 94					.word Unary_Asc            & $FFFF ; $9b asc(
>0185f3	5c a3					.word Unary_Int            & $FFFF ; $9c int(
>0185f5	33 93					.word Unary_Peek           & $FFFF ; $9d peek(
>0185f7	dd a2					.word Unary_Rnd            & $FFFF ; $9e rnd(
>0185f9	9a 93					.word Unary_Usr            & $FFFF ; $9f usr(
>0185fb	99 94					.word Unary_Left           & $FFFF ; $a0 left$(
>0185fd	ae 94					.word Unary_Right          & $FFFF ; $a1 right$(
>0185ff	80 94					.word Unary_Mid            & $FFFF ; $a2 mid$(
>018601	f7 95					.word Unary_Spc            & $FFFF ; $a3 spc(
>018603	28 94					.word Unary_Str            & $FFFF ; $a4 str$(
>018605	bc 93					.word Unary_Val            & $FFFF ; $a5 val(
>018607	71 94					.word Unary_Len            & $FFFF ; $a6 len(
>018609	26 95					.word Unary_Hex            & $FFFF ; $a7 hex$(
>01860b	79 86					.word NotImplemented       & $FFFF ; $a8 sin(
>01860d	79 86					.word NotImplemented       & $FFFF ; $a9 cos(
>01860f	79 86					.word NotImplemented       & $FFFF ; $aa tan(
>018611	79 86					.word NotImplemented       & $FFFF ; $ab atn(
>018613	79 86					.word NotImplemented       & $FFFF ; $ac exp(
>018615	79 86					.word NotImplemented       & $FFFF ; $ad log(
>018617	79 86					.word NotImplemented       & $FFFF ; $ae sqr(
>018619	7c 95					.word Unary_Dec            & $FFFF ; $af dec(
>01861b	37 93					.word Unary_Deek           & $FFFF ; $b0 deek(
>01861d	3b 93					.word Unary_Leek           & $FFFF ; $b1 leek(
>01861f	67 93					.word Unary_Mod            & $FFFF ; $b2 mod(
>018621	d3 92					.word Unary_Sgn            & $FFFF ; $b3 sgn(
>018623	d9 95					.word Unary_Chr            & $FFFF ; $b4 chr$(
>018625	79 86					.word NotImplemented       & $FFFF ; $b5 pos(
>018627	79 86					.word NotImplemented       & $FFFF ; $b6 tab(
>018629	79 86					.word NotImplemented       & $FFFF ; $b7 $
>01862b	79 86					.word NotImplemented       & $FFFF ; $b8 $(
>01862d	79 86					.word NotImplemented       & $FFFF ; $b9 #
>01862f	79 86					.word NotImplemented       & $FFFF ; $ba #(
>018631	79 86					.word NotImplemented       & $FFFF ; $bb %
>018633	79 86					.word NotImplemented       & $FFFF ; $bc %(
>018635	79 86					.word NotImplemented       & $FFFF ; $bd (
>018637	79 86					.word NotImplemented       & $FFFF ; $be )
>018639	79 86					.word NotImplemented       & $FFFF ; $bf ,
>01863b	71 89					.word Command_COLON        & $FFFF ; $c0 :
>01863d	79 86					.word NotImplemented       & $FFFF ; $c1 ;
>01863f	79 86					.word NotImplemented       & $FFFF ; $c2 def
>018641	84 8e					.word Command_CLR          & $FFFF ; $c3 clr
>018643	98 8e					.word Command_STOP         & $FFFF ; $c4 stop
>018645	79 86					.word NotImplemented       & $FFFF ; $c5 data
>018647	79 86					.word NotImplemented       & $FFFF ; $c6 read
>018649	1d 88					.word Command_DIM          & $FFFF ; $c7 dim
>01864b	79 86					.word NotImplemented       & $FFFF ; $c8 to
>01864d	79 86					.word NotImplemented       & $FFFF ; $c9 step
>01864f	00 8e					.word Command_GOSUB        & $FFFF ; $ca gosub
>018651	0e 8e					.word Command_RETURN       & $FFFF ; $cb return
>018653	fa 8d					.word Command_GOTO         & $FFFF ; $cc goto
>018655	dd 8a					.word Command_END          & $FFFF ; $cd end
>018657	79 86					.word NotImplemented       & $FFFF ; $ce input
>018659	a2 8a					.word Command_LET          & $FFFF ; $cf let
>01865b	44 8b					.word Command_LIST         & $FFFF ; $d0 list
>01865d	a3 8d					.word Command_NEW          & $FFFF ; $d1 new
>01865f	bf 8d					.word Command_OLD          & $FFFF ; $d2 old
>018661	79 86					.word NotImplemented       & $FFFF ; $d3 on
>018663	79 86					.word NotImplemented       & $FFFF ; $d4 restore
>018665	72 8d					.word Command_POKE         & $FFFF ; $d5 poke
>018667	eb 8c					.word Command_PRINT        & $FFFF ; $d6 print
>018669	e3 88					.word Command_RUN          & $FFFF ; $d7 run
>01866b	a5 88					.word Command_WAIT         & $FFFF ; $d8 wait
>01866d	c3 8a					.word Command_SYS          & $FFFF ; $d9 sys
>01866f	76 8d					.word Command_DOKE         & $FFFF ; $da doke
>018671	7a 8d					.word Command_LOKE         & $FFFF ; $db loke
>018673	5a 8d					.word Command_ASSERT       & $FFFF ; $dc assert
>018675	79 86					.word NotImplemented       & $FFFF ; $dd get
>018677	38 8b					.word Command_ELSE         & $FFFF ; $de else
.018679					NotImplemented:
.018679	20 57 85	jsr $018557			jsr ERR_Handler
>01867c	4e 6f 74 20 69 6d 70 6c			.text "Not implemented",0
>018684	65 6d 65 6e 74 65 64 00
.01868c					BinaryPrecedence:
>01868c	01					.byte 1    ; $80 and
>01868d	01					.byte 1    ; $81 or
>01868e	01					.byte 1    ; $82 xor
>01868f	01					.byte 1    ; $83 eor
>018690	02					.byte 2    ; $84 =
>018691	02					.byte 2    ; $85 <>
>018692	02					.byte 2    ; $86 <
>018693	02					.byte 2    ; $87 <=
>018694	02					.byte 2    ; $88 >
>018695	02					.byte 2    ; $89 >=
>018696	03					.byte 3    ; $8a +
>018697	03					.byte 3    ; $8b -
>018698	04					.byte 4    ; $8c *
>018699	04					.byte 4    ; $8d /
>01869a	05					.byte 5    ; $8e ^
.01869b					KeywordText:
>01869b	41 4e c4				.byte $41,$4e,$c4                      ; $80 and
>01869e	4f d2					.byte $4f,$d2                          ; $81 or
>0186a0	58 4f d2				.byte $58,$4f,$d2                      ; $82 xor
>0186a3	45 4f d2				.byte $45,$4f,$d2                      ; $83 eor
>0186a6	bd					.byte $bd                              ; $84 =
>0186a7	3c be					.byte $3c,$be                          ; $85 <>
>0186a9	bc					.byte $bc                              ; $86 <
>0186aa	3c bd					.byte $3c,$bd                          ; $87 <=
>0186ac	be					.byte $be                              ; $88 >
>0186ad	3e bd					.byte $3e,$bd                          ; $89 >=
>0186af	ab					.byte $ab                              ; $8a +
>0186b0	ad					.byte $ad                              ; $8b -
>0186b1	aa					.byte $aa                              ; $8c *
>0186b2	af					.byte $af                              ; $8d /
>0186b3	de					.byte $de                              ; $8e ^
>0186b4	49 c6					.byte $49,$c6                          ; $8f if
>0186b6	57 48 49 4c c5				.byte $57,$48,$49,$4c,$c5              ; $90 while
>0186bb	52 45 50 45 41 d4			.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
>0186c1	46 4f d2				.byte $46,$4f,$d2                      ; $92 for
>0186c4	54 48 45 ce				.byte $54,$48,$45,$ce                  ; $93 then
>0186c8	45 4e 44 49 c6				.byte $45,$4e,$44,$49,$c6              ; $94 endif
>0186cd	57 45 4e c4				.byte $57,$45,$4e,$c4                  ; $95 wend
>0186d1	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc              ; $96 until
>0186d6	4e 45 58 d4				.byte $4e,$45,$58,$d4                  ; $97 next
>0186da	4e 4f d4				.byte $4e,$4f,$d4                      ; $98 not
>0186dd	46 4e a8				.byte $46,$4e,$a8                      ; $99 fn(
>0186e0	41 42 53 a8				.byte $41,$42,$53,$a8                  ; $9a abs(
>0186e4	41 53 43 a8				.byte $41,$53,$43,$a8                  ; $9b asc(
>0186e8	49 4e 54 a8				.byte $49,$4e,$54,$a8                  ; $9c int(
>0186ec	50 45 45 4b a8				.byte $50,$45,$45,$4b,$a8              ; $9d peek(
>0186f1	52 4e 44 a8				.byte $52,$4e,$44,$a8                  ; $9e rnd(
>0186f5	55 53 52 a8				.byte $55,$53,$52,$a8                  ; $9f usr(
>0186f9	4c 45 46 54 24 a8			.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
>0186ff	52 49 47 48 54 24 a8			.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
>018706	4d 49 44 24 a8				.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
>01870b	53 50 43 a8				.byte $53,$50,$43,$a8                  ; $a3 spc(
>01870f	53 54 52 24 a8				.byte $53,$54,$52,$24,$a8              ; $a4 str$(
>018714	56 41 4c a8				.byte $56,$41,$4c,$a8                  ; $a5 val(
>018718	4c 45 4e a8				.byte $4c,$45,$4e,$a8                  ; $a6 len(
>01871c	48 45 58 24 a8				.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
>018721	53 49 4e a8				.byte $53,$49,$4e,$a8                  ; $a8 sin(
>018725	43 4f 53 a8				.byte $43,$4f,$53,$a8                  ; $a9 cos(
>018729	54 41 4e a8				.byte $54,$41,$4e,$a8                  ; $aa tan(
>01872d	41 54 4e a8				.byte $41,$54,$4e,$a8                  ; $ab atn(
>018731	45 58 50 a8				.byte $45,$58,$50,$a8                  ; $ac exp(
>018735	4c 4f 47 a8				.byte $4c,$4f,$47,$a8                  ; $ad log(
>018739	53 51 52 a8				.byte $53,$51,$52,$a8                  ; $ae sqr(
>01873d	44 45 43 a8				.byte $44,$45,$43,$a8                  ; $af dec(
>018741	44 45 45 4b a8				.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
>018746	4c 45 45 4b a8				.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
>01874b	4d 4f 44 a8				.byte $4d,$4f,$44,$a8                  ; $b2 mod(
>01874f	53 47 4e a8				.byte $53,$47,$4e,$a8                  ; $b3 sgn(
>018753	43 48 52 24 a8				.byte $43,$48,$52,$24,$a8              ; $b4 chr$(
>018758	50 4f 53 a8				.byte $50,$4f,$53,$a8                  ; $b5 pos(
>01875c	54 41 42 a8				.byte $54,$41,$42,$a8                  ; $b6 tab(
>018760	a4					.byte $a4                              ; $b7 $
>018761	24 a8					.byte $24,$a8                          ; $b8 $(
>018763	a3					.byte $a3                              ; $b9 #
>018764	23 a8					.byte $23,$a8                          ; $ba #(
>018766	a5					.byte $a5                              ; $bb %
>018767	25 a8					.byte $25,$a8                          ; $bc %(
>018769	a8					.byte $a8                              ; $bd (
>01876a	a9					.byte $a9                              ; $be )
>01876b	ac					.byte $ac                              ; $bf ,
>01876c	ba					.byte $ba                              ; $c0 :
>01876d	bb					.byte $bb                              ; $c1 ;
>01876e	44 45 c6				.byte $44,$45,$c6                      ; $c2 def
>018771	43 4c d2				.byte $43,$4c,$d2                      ; $c3 clr
>018774	53 54 4f d0				.byte $53,$54,$4f,$d0                  ; $c4 stop
>018778	44 41 54 c1				.byte $44,$41,$54,$c1                  ; $c5 data
>01877c	52 45 41 c4				.byte $52,$45,$41,$c4                  ; $c6 read
>018780	44 49 cd				.byte $44,$49,$cd                      ; $c7 dim
>018783	54 cf					.byte $54,$cf                          ; $c8 to
>018785	53 54 45 d0				.byte $53,$54,$45,$d0                  ; $c9 step
>018789	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2              ; $ca gosub
>01878e	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce          ; $cb return
>018794	47 4f 54 cf				.byte $47,$4f,$54,$cf                  ; $cc goto
>018798	45 4e c4				.byte $45,$4e,$c4                      ; $cd end
>01879b	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4              ; $ce input
>0187a0	4c 45 d4				.byte $4c,$45,$d4                      ; $cf let
>0187a3	4c 49 53 d4				.byte $4c,$49,$53,$d4                  ; $d0 list
>0187a7	4e 45 d7				.byte $4e,$45,$d7                      ; $d1 new
>0187aa	4f 4c c4				.byte $4f,$4c,$c4                      ; $d2 old
>0187ad	4f ce					.byte $4f,$ce                          ; $d3 on
>0187af	52 45 53 54 4f 52 c5			.byte $52,$45,$53,$54,$4f,$52,$c5      ; $d4 restore
>0187b6	50 4f 4b c5				.byte $50,$4f,$4b,$c5                  ; $d5 poke
>0187ba	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4              ; $d6 print
>0187bf	52 55 ce				.byte $52,$55,$ce                      ; $d7 run
>0187c2	57 41 49 d4				.byte $57,$41,$49,$d4                  ; $d8 wait
>0187c6	53 59 d3				.byte $53,$59,$d3                      ; $d9 sys
>0187c9	44 4f 4b c5				.byte $44,$4f,$4b,$c5                  ; $da doke
>0187cd	4c 4f 4b c5				.byte $4c,$4f,$4b,$c5                  ; $db loke
>0187d1	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4          ; $dc assert
>0187d7	47 45 d4				.byte $47,$45,$d4                      ; $dd get
>0187da	45 4c 53 c5				.byte $45,$4c,$53,$c5                  ; $de else
>0187de	00					.byte $00
=$80					token_and = $80
=$81					token_or = $81
=$82					token_xor = $82
=$83					token_eor = $83
=$84					token_equal = $84
=$85					token_lessgreater = $85
=$86					token_less = $86
=$87					token_lessequal = $87
=$88					token_greater = $88
=$89					token_greaterequal = $89
=$8a					token_plus = $8a
=$8b					token_minus = $8b
=$8c					token_star = $8c
=$8d					token_slash = $8d
=$8e					token_hat = $8e
=$8f					token_if = $8f
=$90					token_while = $90
=$91					token_repeat = $91
=$92					token_for = $92
=$93					token_then = $93
=$94					token_endif = $94
=$95					token_wend = $95
=$96					token_until = $96
=$97					token_next = $97
=$98					token_not = $98
=$99					token_fn = $99
=$9a					token_abs = $9a
=$9b					token_asc = $9b
=$9c					token_int = $9c
=$9d					token_peek = $9d
=$9e					token_rnd = $9e
=$9f					token_usr = $9f
=$a0					token_leftdollarlparen = $a0
=$a1					token_rightdollarlparen = $a1
=$a2					token_middollarlparen = $a2
=$a3					token_spc = $a3
=$a4					token_strdollarlparen = $a4
=$a5					token_val = $a5
=$a6					token_len = $a6
=$a7					token_hexdollarlparen = $a7
=$a8					token_sin = $a8
=$a9					token_cos = $a9
=$aa					token_tan = $aa
=$ab					token_atn = $ab
=$ac					token_exp = $ac
=$ad					token_log = $ad
=$ae					token_sqr = $ae
=$af					token_dec = $af
=$b0					token_deek = $b0
=$b1					token_leek = $b1
=$b2					token_mod = $b2
=$b3					token_sgn = $b3
=$b4					token_chrdollarlparen = $b4
=$b5					token_pos = $b5
=$b6					token_tab = $b6
=$b7					token_dollar = $b7
=$b8					token_dollarlparen = $b8
=$b9					token_hash = $b9
=$ba					token_hashlparen = $ba
=$bb					token_percent = $bb
=$bc					token_percentlparen = $bc
=$bd					token_lparen = $bd
=$be					token_rparen = $be
=$bf					token_comma = $bf
=$c0					token_colon = $c0
=$c1					token_semicolon = $c1
=$c2					token_def = $c2
=$c3					token_clr = $c3
=$c4					token_stop = $c4
=$c5					token_data = $c5
=$c6					token_read = $c6
=$c7					token_dim = $c7
=$c8					token_to = $c8
=$c9					token_step = $c9
=$ca					token_gosub = $ca
=$cb					token_return = $cb
=$cc					token_goto = $cc
=$cd					token_end = $cd
=$ce					token_input = $ce
=$cf					token_let = $cf
=$d0					token_list = $d0
=$d1					token_new = $d1
=$d2					token_old = $d2
=$d3					token_on = $d3
=$d4					token_restore = $d4
=$d5					token_poke = $d5
=$d6					token_print = $d6
=$d7					token_run = $d7
=$d8					token_wait = $d8
=$d9					token_sys = $d9
=$da					token_doke = $da
=$db					token_loke = $db
=$dc					token_assert = $dc
=$dd					token_get = $dd
=$de					token_else = $de

;******  Return to file: modules/basic/core.asm

.0187df					BASIC_Start:
.0187df	20 a8 81	jsr $0181a8			jsr 	IF_Reset 					; set up and clear screen.
.0187e2	20 00 80	jsr $018000			jsr 	IFT_ClearScreen
.0187e5	a9 5c		lda #$5c			lda 	#$5C 						; JMP Long opcode
.0187e7	8d 10 03	sta $0310			sta 	LocalVector
.0187ea	8d 0c 03	sta $030c			sta 	UserVector
.0187ed	a9 aa		lda #$aa			lda 	#USRDefault & $FF 			; reset USR vector
.0187ef	8d 0d 03	sta $030d			sta 	UserVector+1
.0187f2	a9 93		lda #$93			lda 	#(USRDefault >> 8) & $FF
.0187f4	8d 0e 03	sta $030e			sta 	UserVector+2
.0187f7	a9 01		lda #$01			lda 	#(USRDefault >> 16) & $FF
.0187f9	8d 0f 03	sta $030f			sta 	UserVector+3
.0187fc	20 51 96	jsr $019651			jsr 	UpdateProgramEnd 			; update the program end.
.0187ff	20 84 8e	jsr $018e84			jsr 	ResetRunStatus 				; clear everything (CLR command)
.018802	c2 30		rep #$30			rep 	#$30
.018804	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018807	1b		tcs				tcs
.018808	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.01880b	e2 30		sep #$30			sep 	#$30
.01880d	4c e3 88	jmp $0188e3			jmp 	COMMAND_Run
.018810					WarmStart:
.018810	c2 30		rep #$30			rep 	#$30
.018812	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018815	1b		tcs				tcs
.018816	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.018819	e2 30		sep #$30			sep 	#$30
.01881b	80 f3		bra $018810			bra 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/dim.asm

.01881d					Command_DIM:
.01881d	98		tya				tya
.01881e	48		pha				pha 								; push on stack.
.01881f	20 b9 97	jsr $0197b9			jsr 	VariableExtract 			; get the identifier
.018822	ad 95 03	lda $0395			lda 	Var_Type 					; check it is an array
.018825	29 01		and #$01			and 	#1
.018827	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.018829	d0 6c		bne $018897			bne 	_CDIError
.01882b	a9 00		lda #$00			lda 	#0 							; reset the DIM index. The dimensions are
.01882d	8d b9 03	sta $03b9			sta 	UsrArrayIdx 				; built up here and copied in case we autodim
.018830					_CDIGetDimension:
.018830	ad b9 03	lda $03b9			lda 	UsrArrayIdx 				; done too many ?
.018833	c9 06		cmp #$06			cmp 	#ArrayMaxDim*2
.018835	f0 60		beq $018897			beq 	_CDIError
.018837	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; evaluate an index size
.01883a	a5 81		lda $81				lda 	XS_Mantissa+1 				; check in range 0-7FFF
.01883c	29 80		and #$80			and 	#$80
.01883e	05 82		ora $82				ora 	XS_Mantissa+2
.018840	05 83		ora $83				ora 	XS_Mantissa+3
.018842	d0 53		bne $018897			bne 	_CDIError
.018844	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy into the array table.
.018847	18		clc				clc 								; add 1 - max index => size.
.018848	a5 80		lda $80				lda 	XS_Mantissa+0
.01884a	69 01		adc #$01			adc 	#1
.01884c	9d b1 03	sta $03b1,x			sta 	UsrArrayDef+0,x
.01884f	a5 81		lda $81				lda 	XS_Mantissa+1
.018851	69 00		adc #$00			adc 	#0
.018853	9d b2 03	sta $03b2,x			sta 	UsrArrayDef+1,x
.018856	30 3f		bmi $018897			bmi 	_CDIError 					; could be dim a(32767)
.018858	e8		inx				inx 								; bump index.
.018859	e8		inx				inx
.01885a	8e b9 03	stx $03b9			stx 	UsrArrayIdx
.01885d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01885f	c8		iny				iny
.018860	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another dimension
.018862	f0 cc		beq $018830			beq 	_CDIGetDimension
.018864	88		dey				dey
.018865	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; closing ) present ?
.018868	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy USR array to default
.01886b	a9 ff		lda #$ff			lda 	#$FF 						; put end marker in ArrayDef
.01886d	9d aa 03	sta $03aa,x			sta 	ArrayDef+1,x
.018870					_CDICopy:
.018870	bd b1 03	lda $03b1,x			lda 	UsrArrayDef,x
.018873	9d a9 03	sta $03a9,x			sta 	ArrayDef,x
.018876	ca		dex				dex
.018877	10 f7		bpl $018870			bpl 	_CDICopy
.018879	68		pla				pla									; position of array identifier
.01887a	85 10		sta $10				sta 	zTemp1
.01887c	98		tya				tya
.01887d	48		pha				pha
.01887e	a5 10		lda $10				lda 	zTemp1 						; point to identifier
.018880	a8		tay				tay
.018881	20 b9 97	jsr $0197b9			jsr 	VariableExtract 			; get the identifier
.018884	20 52 9a	jsr $019a52			jsr 	VariableLocate 				; check if it exists already.
.018887	b0 0e		bcs $018897			bcs 	_CDIError
.018889	20 45 98	jsr $019845			jsr 	VariableCreate 				; create it using the current ArrayDef
.01888c	68		pla				pla 								; restore code position
.01888d	a8		tay				tay
.01888e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018890	c8		iny				iny
.018891	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another DIM
.018893	f0 88		beq $01881d			beq 	Command_DIM
.018895	88		dey				dey
.018896	60		rts				rts
.018897					_CDIError:
.018897	20 57 85	jsr $018557			jsr ERR_Handler
>01889a	42 61 64 20 44 49 4d 00			.text "Bad DIM",0
.0188a2					_CDISyntax:
.0188a2	4c 28 85	jmp $018528			jmp 	SyntaxError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/wait.asm

.0188a5					Command_WAIT:
.0188a5	20 85 90	jsr $019085			jsr		EvaluateInteger 			; address
.0188a8	a2 06		ldx #$06			ldx 	#XS_Size 					; and mask.
.0188aa	20 b5 96	jsr $0196b5			jsr 	CheckNextComma
.0188ad	20 87 90	jsr $019087			jsr 	EvaluateIntegerX
.0188b0	a9 00		lda #$00			lda 	#0							; set default xor.
.0188b2	85 8c		sta $8c				sta 	XS_Mantissa+XS_Size*2
.0188b4	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188b6	c9 bf		cmp #$bf			cmp 	#token_Comma 				; no use the default
.0188b8	d0 06		bne $0188c0			bne 	_CWAXorDefault
.0188ba	c8		iny				iny
.0188bb	a2 0c		ldx #$0c			ldx 	#XS_Size*2
.0188bd	20 87 90	jsr $019087			jsr 	EvaluateIntegerX
.0188c0					_CWAXorDefault:
.0188c0	a5 80		lda $80				lda 	XS_Mantissa 				; copy 24 bits of mantissa to ZLTemp1
.0188c2	85 1a		sta $1a				sta 	zLTemp1
.0188c4	a5 81		lda $81				lda 	XS_Mantissa+1
.0188c6	85 1b		sta $1b				sta 	zLTemp1+1
.0188c8	a5 82		lda $82				lda 	XS_Mantissa+2
.0188ca	85 1c		sta $1c				sta 	zLTemp1+2
.0188cc					_CWAWaitLoop:
.0188cc	20 25 85	jsr $018525			jsr 	CheckBreak 					; exit on break.
.0188cf	c9 00		cmp #$00			cmp 	#0
.0188d1	d0 0f		bne $0188e2			bne 	_CWAWaitExit
.0188d3	a9 01		lda #$01			lda 	#1							; read 1 byte to mantissa/0
.0188d5	a2 00		ldx #$00			ldx 	#0
.0188d7	5a		phy				phy 								; this is the same routine as PEEK.
.0188d8	20 2f 96	jsr $01962f			jsr 	MemRead
.0188db	7a		ply				ply
.0188dc	25 86		and $86				and 	XS_Mantissa+XS_Size 		; process it
.0188de	45 8c		eor $8c				eor 	XS_Mantissa+XS_Size*2
.0188e0	f0 ea		beq $0188cc			beq 	_CWAWaitLoop
.0188e2					_CWAWaitExit:
.0188e2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/run.asm

.0188e3					Command_RUN:
.0188e3	20 84 8e	jsr $018e84			jsr 	ResetRunStatus 				; clear, reset stacks etc.
.0188e6	a9 00		lda #$00			lda 	#BasicProgram & $FF
.0188e8	85 16		sta $16				sta 	zCodePtr+0
.0188ea	a9 10		lda #$10			lda 	#BasicProgram >> 8
.0188ec	85 17		sta $17				sta 	zCodePtr+1
.0188ee	a9 00		lda #$00			lda 	#0
.0188f0	85 18		sta $18				sta 	zCodePtr+2
.0188f2	85 19		sta $19				sta 	zCodePtr+3
.0188f4	a0 03		ldy #$03			ldy 	#3
.0188f6					RUN_NewLine:
.0188f6	a0 00		ldy #$00			ldy 	#0
.0188f8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188fa	c8		iny				iny
.0188fb	c8		iny				iny
.0188fc	c8		iny				iny
.0188fd	c9 00		cmp #$00			cmp 	#0 							; if the offset is zero then END.
.0188ff	d0 16		bne $018917			bne 	RUN_NextCommand
.018901	4c dd 8a	jmp $018add			jmp 	Command_END 				; go do the command code.
.018904					RUN_Skip:
.018904	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018906	c8		iny				iny 								; skip
.018907	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018909	90 0c		bcc $018917			bcc 	_SEDone 					; so just skip over it.
.01890b	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.01890d	90 07		bcc $018916			bcc 	_SEDouble
.01890f	98		tya				tya 								; this is Y + 1
.018910	18		clc				clc
.018911	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018913	a8		tay				tay 								; back in Y.
.018914	88		dey				dey 								; fix up, one for the +1, one for the iny
.018915	88		dey				dey
.018916					_SEDouble:
.018916	c8		iny				iny
.018917					_SEDone:
.018917					RUN_NextCommand:
.018917	ad a8 03	lda $03a8			lda 	BreakCount 					; break counter
.01891a	69 10		adc #$10			adc 	#16 						; one time in 16
.01891c	8d a8 03	sta $03a8			sta 	BreakCount
.01891f	90 0a		bcc $01892b			bcc 	RUN_NoCheckBreak
.018921	20 25 85	jsr $018525			jsr 	CheckBreak 					; check for break
.018924	c9 00		cmp #$00			cmp 	#0
.018926	f0 03		beq $01892b			beq 	RUN_NoCheckBreak
.018928	4c 98 8e	jmp $018e98			jmp 	Command_STOP 				; stop on BREAK.
.01892b					RUN_NoCheckBreak:
.01892b	a9 00		lda #$00			lda 	#0 							; this resets temporary string allocation.
.01892d	85 21		sta $21				sta 	zTempStr+1 					; (initialised when first called)
.01892f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018931	c9 c0		cmp #$c0			cmp 	#token_Colon 				; skip over colons
.018933	f0 cf		beq $018904			beq 	RUN_Skip
.018935	c9 00		cmp #$00			cmp 	#0 							; if non-zero execute whatever
.018937	d0 0f		bne $018948			bne 	RUN_Execute
.018939					RUN_NextLine:
.018939	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01893b	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.01893d	18		clc				clc
.01893e	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018940	85 16		sta $16				sta 	zCodePtr
.018942	90 02		bcc $018946			bcc 	_SNLNoCarry
.018944	e6 17		inc $17				inc 	zCodePtr+1
.018946					_SNLNoCarry:
.018946	80 ae		bra $0188f6			bra 	RUN_NewLine 				; go do the new line code
.018948					RUN_Execute:
.018948	c9 f8		cmp #$f8			cmp 	#$F8 						; handle shifts, REM etc.
.01894a	b0 1e		bcs $01896a			bcs 	RUN_Extension
.01894c	c8		iny				iny
.01894d	0a		asl a				asl 	a 							; double the character read.
.01894e	90 14		bcc $018964			bcc 	RUN_Default 				; if carry clear was $00-$7F, so try LET.
.018950	aa		tax				tax 								; ready to look up.
.018951	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into LocalVector
.018955	8d 11 03	sta $0311			sta 	LocalVector+1
.018958	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.01895c	8d 12 03	sta $0312			sta 	LocalVector+2
.01895f	20 d2 8f	jsr $018fd2			jsr 	EVCallLocalVector 			; execute the appropriate code.
.018962	80 b3		bra $018917			bra 	RUN_NextCommand 			; do the next command.
.018964					RUN_Default:
.018964	88		dey				dey
.018965	20 a2 8a	jsr $018aa2			jsr 	Command_LET 				; and try LET.
.018968	80 ad		bra $018917			bra 	RUN_NextCommand
.01896a					RUN_Extension:
.01896a	c9 ff		cmp #$ff			cmp 	#$FF 						; if $FF (REM)
.01896c	f0 96		beq $018904			beq 	RUN_Skip 					; skip over it.
.01896e	4c 28 85	jmp $018528			jmp 	SyntaxError
.018971					Command_COLON:
.018971	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/for.asm

.018972					Command_FOR:
.018972	20 a2 8a	jsr $018aa2			jsr 	Command_LET 				; do the A = 99 bit
.018975	a5 24		lda $24				lda 	zVarType 					; obviously has to be integer/real.
.018977	c9 b7		cmp #$b7			cmp 	#token_Dollar
.018979	f0 71		beq $0189ec			beq 	_CFOError
.01897b	48		pha				pha 								; save the variable type.
.01897c	5a		phy				phy 								; save type/variable address.
.01897d	a0 01		ldy #$01			ldy 	#1							; type at + 1
.01897f	91 26		sta ($26),y			sta 	(zBasicSP),y
.018981	c8		iny				iny
.018982	a5 22		lda $22				lda 	zVarDataPtr 				; data low at +2
.018984	91 26		sta ($26),y			sta 	(zBasicSP),y
.018986	c8		iny				iny
.018987	a5 23		lda $23				lda 	zVarDataPtr+1 				; data high at +3
.018989	91 26		sta ($26),y			sta 	(zBasicSP),y
.01898b	7a		ply				ply
.01898c	a9 53		lda #$53			lda 	#(SMark_For << 4) + 3
.01898e	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on the stack with FOR marker.
.018991	a9 c8		lda #$c8			lda 	#token_TO
.018993	20 96 96	jsr $019696			jsr 	CheckNextToken
.018996	a2 00		ldx #$00			ldx 	#0 							; put in Mantissa, bottom
.018998	20 ef 8e	jsr $018eef			jsr 	EvaluateExpression
.01899b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01899d	a2 06		ldx #$06			ldx 	#XS_Size 					; X to second level
.01899f	c9 c9		cmp #$c9			cmp 	#token_STEP
.0189a1	d0 06		bne $0189a9			bne 	_CFOStep1
.0189a3	c8		iny				iny
.0189a4	20 f1 8e	jsr $018ef1			jsr 	EvaluateExpressionX 		; get STEP value.
.0189a7	80 0e		bra $0189b7			bra 	_CFOHaveStep
.0189a9					_CFOStep1:
.0189a9	a9 00		lda #$00			lda 	#0							; set step to integer 1.
.0189ab	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0189ad	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0189af	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0189b1	a9 01		lda #$01			lda 	#1
.0189b3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0189b5	95 85		sta $85,x			sta 	XS_Type,x
.0189b7					_CFOHaveStep:
.0189b7	68		pla				pla 								; restore variable type
.0189b8	a2 00		ldx #$00			ldx 	#0
.0189ba	c9 bb		cmp #$bb			cmp 	#token_Percent 				; do conversion to type
.0189bc	f0 0a		beq $0189c8			beq 	_CFOInteger
.0189be	20 5d a0	jsr $01a05d			jsr 	FPUToFloat
.0189c1	a2 06		ldx #$06			ldx 	#6
.0189c3	20 5d a0	jsr $01a05d			jsr 	FPUToFloat
.0189c6	80 08		bra $0189d0			bra 	_CFOEndConv
.0189c8					_CFOInteger:
.0189c8	20 a9 a0	jsr $01a0a9			jsr 	FPUToInteger
.0189cb	a2 06		ldx #$06			ldx 	#6
.0189cd	20 a9 a0	jsr $01a0a9			jsr 	FPUToInteger
.0189d0					_CFOEndConv:
.0189d0	20 e6 84	jsr $0184e6			jsr 	StackSavePosition 			; save the loop position at 1-5
.0189d3	a9 55		lda #$55			lda 	#(SMark_For << 4)+SourcePosSize
.0189d5	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push the loop address frame.
.0189d8	5a		phy				phy
.0189d9	a0 00		ldy #$00			ldy 	#0
.0189db					_CFOCopy:
.0189db	b9 80 00	lda $0080,y			lda 	XS_Mantissa+0,y
.0189de	c8		iny				iny
.0189df	91 26		sta ($26),y			sta 	(zBasicSP),y
.0189e1	c0 0c		cpy #$0c			cpy 	#XS_Size*2
.0189e3	d0 f6		bne $0189db			bne 	_CFOCopy
.0189e5	7a		ply				ply
.0189e6	a9 5c		lda #$5c			lda 	#(SMark_For << 4)+(XS_Size*2)
.0189e8	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.0189eb	60		rts				rts
.0189ec					_CFOError:
.0189ec	4c 38 85	jmp $018538			jmp 	TypeError 					; wrong type.
.0189ef					Command_NEXT:
.0189ef	a9 00		lda #$00			lda 	#0 							; set variable data pointer+1 to zero
.0189f1	85 23		sta $23				sta 	zVarDataPtr+1 				; this means we don't check
.0189f3	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0189f5	c9 00		cmp #$00			cmp 	#0 							; EOL
.0189f7	f0 07		beq $018a00			beq 	_CNextNoVariable
.0189f9	c9 40		cmp #$40			cmp 	#$40
.0189fb	b0 03		bcs $018a00			bcs 	_CNextNoVariable
.0189fd	20 4e 97	jsr $01974e			jsr 	VariableFind
.018a00					_CNextNoVariable:
.018a00	a5 26		lda $26				lda 	zBasicSP 					; save on stack
.018a02	48		pha				pha
.018a03	a5 27		lda $27				lda 	zBasicSP+1
.018a05	48		pha				pha
.018a06	a9 50		lda #$50			lda 	#(SMark_For << 4) 			; pop loop address frame
.018a08	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a0b	a9 50		lda #$50			lda 	#(SMark_For << 4) 			; pop STEP/TARGET frame.
.018a0d	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a10	a9 50		lda #$50			lda 	#(Smark_For << 4) 			; pop variable address frame.
.018a12	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a15	a5 23		lda $23				lda 	zVarDataPtr+1 				; if zero, then no variable provided
.018a17	f0 11		beq $018a2a			beq 	_CNextGetTarget 			; e.g. just NEXT not NEXT x
.018a19	5a		phy				phy 								; check addresses match.
.018a1a	a0 02		ldy #$02			ldy 	#2
.018a1c	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a1e	c5 22		cmp $22				cmp 	zVarDataPtr
.018a20	d0 69		bne $018a8b			bne 	_CNextWrong
.018a22	c8		iny				iny
.018a23	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a25	c5 23		cmp $23				cmp 	zVarDataPtr+1
.018a27	d0 62		bne $018a8b			bne 	_CNextWrong
.018a29	7a		ply				ply
.018a2a					_CNextGetTarget:
.018a2a	5a		phy				phy
.018a2b	a0 01		ldy #$01			ldy 	#1 							; restore variable type and data.
.018a2d	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a2f	85 24		sta $24				sta 	zVarType
.018a31	c8		iny				iny
.018a32	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a34	85 22		sta $22				sta 	zVarDataPtr
.018a36	c8		iny				iny
.018a37	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a39	85 23		sta $23				sta 	zVarDataPtr+1
.018a3b	a2 0c		ldx #$0c			ldx 	#12
.018a3d	20 96 9a	jsr $019a96			jsr 	VariableGet 				; get that variable value into expr[2]
.018a40	a2 00		ldx #$00			ldx 	#0 							; copy stacked Target/Step into expr[0] and [1]
.018a42	a0 0b		ldy #$0b			ldy 	#11
.018a44					_CNXCopy:
.018a44	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a46	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018a48	e8		inx				inx
.018a49	c8		iny				iny
.018a4a	e0 0c		cpx #$0c			cpx 	#XS_Size*2
.018a4c	d0 f6		bne $018a44			bne 	_CNXCopy
.018a4e	7a		ply				ply
.018a4f	a2 06		ldx #$06			ldx 	#6 							; point at expr[1] s
.018a51	20 f7 92	jsr $0192f7			jsr 	GetSignCurrent
.018a54	8d a7 03	sta $03a7			sta 	SignNext 					; save in temporary.
.018a57	a2 06		ldx #$06			ldx 	#6 							; add them, however
.018a59	20 d6 91	jsr $0191d6			jsr 	BinaryOp_Add
.018a5c	20 e7 9a	jsr $019ae7			jsr 	VariableSet					; and write variable back.
.018a5f	a2 00		ldx #$00			ldx 	#0
.018a61	20 5a 91	jsr $01915a			jsr 	CompareValues
.018a64	09 00		ora #$00			ora 	#0
.018a66	f0 05		beq $018a6d			beq 	_CNXAgain 					; if true, then do it again.
.018a68	cd a7 03	cmp $03a7			cmp 	SignNext 					; if sign different, then loop has finished.
.018a6b	d0 0f		bne $018a7c			bne 	_CNXLoopDone
.018a6d					_CNXAgain:
.018a6d	a9 53		lda #$53			lda 	#(SMark_For << 4) + 3		; re-stack variable address
.018a6f	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018a72	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; get restore position back, e.g. loop round.
.018a75	68		pla				pla
.018a76	85 27		sta $27				sta 	zBasicSP+1
.018a78	68		pla				pla
.018a79	85 26		sta $26				sta 	zBasicSP
.018a7b					_CNXExit:
.018a7b	60		rts				rts
.018a7c					_CNXLoopDone:
.018a7c	68		pla				pla
.018a7d	68		pla				pla
.018a7e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018a80	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma ?
.018a82	d0 f7		bne $018a7b			bne 	_CNXExit
.018a84	c8		iny				iny
.018a85	20 4e 97	jsr $01974e			jsr 	VariableFind 				; identify the variable
.018a88	4c 00 8a	jmp $018a00			jmp 	_CNextNoVariable 			; go back with variable pre-found
.018a8b					_CNextWrong:
.018a8b	20 57 85	jsr $018557			jsr ERR_Handler
>018a8e	57 72 6f 6e 67 20 4e 65			.text "Wrong Next Variable",0
>018a96	78 74 20 56 61 72 69 61 62 6c 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/let.asm

.018aa2					Command_LET:
.018aa2	20 4e 97	jsr $01974e			jsr 	VariableFind 				; get reference to one variable.
.018aa5	a9 84		lda #$84			lda 	#token_Equal  				; get equals
.018aa7	20 96 96	jsr $019696			jsr 	CheckNextToken
.018aaa	a5 22		lda $22				lda 	zVarDataPtr 				; save variable info on stack
.018aac	48		pha				pha
.018aad	a5 23		lda $23				lda 	zVarDataPtr+1
.018aaf	48		pha				pha
.018ab0	a5 24		lda $24				lda 	zVarType
.018ab2	48		pha				pha
.018ab3	20 ef 8e	jsr $018eef			jsr 	EvaluateExpression 			; evaluate the RHS.
.018ab6	68		pla				pla 								; restore target variable information.
.018ab7	85 24		sta $24				sta 	zVarType
.018ab9	68		pla				pla
.018aba	85 23		sta $23				sta 	zVarDataPtr+1
.018abc	68		pla				pla
.018abd	85 22		sta $22				sta 	zVarDataPtr
.018abf	20 e7 9a	jsr $019ae7			jsr 	VariableSet 				; set the value out.
.018ac2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/sys.asm

.018ac3					Command_SYS:
.018ac3	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; address
.018ac6	a5 80		lda $80				lda 	XS_Mantissa+0				; copy to localvector
.018ac8	8d 10 03	sta $0310			sta 	LocalVector+0 				; only three, can only do 24 bit calls
.018acb	a5 81		lda $81				lda 	XS_Mantissa+1 				; and that only on 65816
.018acd	8d 11 03	sta $0311			sta 	LocalVector+1
.018ad0	a5 82		lda $82				lda 	XS_Mantissa+2
.018ad2	8d 12 03	sta $0312			sta 	LocalVector+2
.018ad5	22 da 8a 01	jsl $018ada			jsl 	_CSYLocalCall
.018ad9	60		rts				rts
.018ada					_CSYLocalCall:
.018ada	dc 10 03	jmp [$0310]			jmp 	[LocalVector]

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/end.asm

.018add					Command_END:
>018add	02						.byte 	2
.018ade	4c 10 88	jmp $018810			jmp 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/if.asm

.018ae1					Command_IF:
.018ae1	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; check success.
.018ae4	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018ae6	05 81		ora $81				ora 	XS_Mantissa+1
.018ae8	05 82		ora $82				ora 	XS_Mantissa+2
.018aea	05 83		ora $83				ora 	XS_Mantissa+3
.018aec	aa		tax				tax 								; put into X.
.018aed	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018aef	c9 93		cmp #$93			cmp 	#token_Then 				; then found.
.018af1	d0 2c		bne $018b1f			bne 	_FIFExtended
.018af3	c8		iny				iny
.018af4	e0 00		cpx #$00			cpx 	#0 							; was it successful.
.018af6	f0 0b		beq $018b03			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.018af8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018afa	29 c0		and #$c0			and 	#$C0 						; is it a number
.018afc	c9 40		cmp #$40			cmp 	#$40
.018afe	d0 1e		bne $018b1e			bne 	_FIFContinue 				; if not, do what ever follows.
.018b00	4c fa 8d	jmp $018dfa			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.018b03					_FIFEndOfLine:
.018b03	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b05	c9 00		cmp #$00			cmp 	#0 							; if zero, end of line, so exit
.018b07	f0 15		beq $018b1e			beq 	_FIFContinue
.018b09	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018b0b	c8		iny				iny 								; skip
.018b0c	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018b0e	90 0c		bcc $018b1c			bcc 	_SEDone 					; so just skip over it.
.018b10	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018b12	90 07		bcc $018b1b			bcc 	_SEDouble
.018b14	98		tya				tya 								; this is Y + 1
.018b15	18		clc				clc
.018b16	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018b18	a8		tay				tay 								; back in Y.
.018b19	88		dey				dey 								; fix up, one for the +1, one for the iny
.018b1a	88		dey				dey
.018b1b					_SEDouble:
.018b1b	c8		iny				iny
.018b1c					_SEDone:
.018b1c	80 e5		bra $018b03			bra 	_FIFEndOfLine
.018b1e					_FIFContinue:
.018b1e	60		rts				rts
.018b1f					_FIFExtended:
.018b1f	da		phx				phx 								; save result
.018b20	a9 40		lda #$40			lda 	#(SMark_If << 4) 			; push marker on the stack, nothing else.
.018b22	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018b25	68		pla				pla 								; restore result
.018b26	f0 01		beq $018b29			beq 	_FIXSkip 					; if zero then it has failed.
.018b28	60		rts				rts 								; test passed, so continue executing
.018b29					_FIXSkip:
.018b29	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found either ELSE or ENDIF
.018b2b	a2 de		ldx #$de			ldx 	#token_else 				; at the same level.
.018b2d	20 02 84	jsr $018402			jsr 	StructureSearchDouble
.018b30	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b32	c8		iny				iny
.018b33	c9 94		cmp #$94			cmp 	#token_endif 				; if endif, handle endif code.
.018b35	f0 07		beq $018b3e			beq 	Command_ENDIF
.018b37	60		rts				rts
.018b38					Command_ELSE:
.018b38	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found ENDIF
.018b3a	20 00 84	jsr $018400			jsr 	StructureSearchSingle 		; then do the ENDIF pop.
.018b3d	c8		iny				iny
.018b3e					Command_ENDIF:
.018b3e	a9 40		lda #$40			lda 	#(SMark_If << 4)
.018b40	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018b43	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/list.asm

.018b44					Command_LIST:
.018b44	20 84 8c	jsr $018c84			jsr 	ListGetRange				; get any parameters
.018b47	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018b49	85 16		sta $16				sta 	zCodePtr+0
.018b4b	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018b4d	85 17		sta $17				sta 	zCodePtr+1
.018b4f	a9 00		lda #$00			lda 	#0
.018b51	85 18		sta $18				sta 	zCodePtr+2
.018b53	85 19		sta $19				sta 	zCodePtr+3
.018b55	a0 03		ldy #$03			ldy 	#3
.018b57	a9 00		lda #$00			lda 	#0 							; reset the indent
.018b59	8d bb 03	sta $03bb			sta 	ListIndent
.018b5c					_CILLoop:
.018b5c	a0 00		ldy #$00			ldy 	#0
.018b5e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b60	c9 00		cmp #$00			cmp 	#0 							; if zero, end of program
.018b62	f0 23		beq $018b87			beq 	_CILExit
.018b64	20 25 85	jsr $018525			jsr 	CheckBreak 					; check break
.018b67	c9 00		cmp #$00			cmp 	#0
.018b69	d0 1c		bne $018b87			bne 	_CILExit
.018b6b	20 cb 8c	jsr $018ccb			jsr 	ListCheckRange 				; check current line in range.
.018b6e	b0 08		bcs $018b78			bcs		_CILNext
.018b70	a0 00		ldy #$00			ldy 	#0
.018b72	c8		iny				iny
.018b73	c8		iny				iny
.018b74	c8		iny				iny
.018b75	20 8a 8b	jsr $018b8a			jsr 	ListLine 					; list one line.
.018b78					_CILNext:
.018b78	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018b7a	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018b7c	18		clc				clc
.018b7d	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018b7f	85 16		sta $16				sta 	zCodePtr
.018b81	90 02		bcc $018b85			bcc 	_SNLNoCarry
.018b83	e6 17		inc $17				inc 	zCodePtr+1
.018b85					_SNLNoCarry:
.018b85	80 d5		bra $018b5c			bra 	_CILLoop
.018b87					_CILExit:
.018b87	4c 10 88	jmp $018810			jmp 	WarmStart
.018b8a					ListLine:
.018b8a	a0 00		ldy #$00			ldy 	#0
.018b8c	c8		iny				iny
.018b8d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b8f	85 80		sta $80				sta 	XS_Mantissa
.018b91	c8		iny				iny
.018b92	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b94	85 81		sta $81				sta 	XS_Mantissa+1
.018b96	20 9d 85	jsr $01859d			jsr 	Print16BitInteger 			; print integer.
.018b99	38		sec				sec
.018b9a	ed bb 03	sbc $03bb			sbc 	ListIndent 					; subtract indent e.g. print more.
.018b9d	aa		tax				tax 								; print spaces to column 6
.018b9e					_LISpace:
.018b9e	a9 20		lda #$20			lda 	#" "
.018ba0	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018ba3	e8		inx				inx
.018ba4	e0 06		cpx #$06			cpx 	#6
.018ba6	d0 f6		bne $018b9e			bne 	_LISpace
.018ba8					_LIDecode:
.018ba8	c8		iny				iny
.018ba9	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bab	c9 00		cmp #$00			cmp 	#0 							; zero, exit.
.018bad	f0 0f		beq $018bbe			beq 	_LIExit
.018baf	30 12		bmi $018bc3			bmi 	_LIToken
.018bb1	c9 40		cmp #$40			cmp 	#$40 						; 01-$3F, character.
.018bb3	b0 50		bcs $018c05			bcs 	_LIInteger
.018bb5	49 20		eor #$20			eor 	#$20 						; make 7 bit
.018bb7	69 20		adc #$20			adc 	#$20
.018bb9	20 74 8c	jsr $018c74			jsr 	ListPrintLC 				; print in LC
.018bbc	80 ea		bra $018ba8			bra 	_LIDecode
.018bbe					_LIExit:
.018bbe	a9 0d		lda #$0d			lda 	#13 						; print new line.
.018bc0	4c 74 8c	jmp $018c74			jmp 	ListPrintLC
.018bc3					_LIToken:
.018bc3	c9 fc		cmp #$fc			cmp 	#$FC 						; $FC-$FF ?
.018bc5	90 49		bcc $018c10			bcc		_LICommandToken
.018bc7	48		pha				pha 								; save in case end
.018bc8	a2 22		ldx #$22			ldx 	#'"'						; print if $FE quoted string
.018bca	c9 fe		cmp #$fe			cmp 	#$FE
.018bcc	f0 17		beq $018be5			beq 	_LIPrint
.018bce	a2 2e		ldx #$2e			ldx 	#'.'						; print if $FD decimals
.018bd0	c9 fd		cmp #$fd			cmp 	#$FD
.018bd2	f0 11		beq $018be5			beq 	_LIPrint
.018bd4	a9 52		lda #$52			lda 	#'R'						; must be REM
.018bd6	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018bd9	a9 45		lda #$45			lda 	#'E'
.018bdb	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018bde	a9 4d		lda #$4d			lda 	#'M'
.018be0	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018be3	a2 20		ldx #$20			ldx 	#' '
.018be5					_LIPrint:
.018be5	8a		txa				txa
.018be6	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018be9	c8		iny				iny
.018bea	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bec	aa		tax				tax 								; put in X
.018bed	ca		dex				dex
.018bee					_LILoop:
.018bee	ca		dex				dex 								; exit when count reached zero.
.018bef	f0 08		beq $018bf9			beq 	_LIEnd
.018bf1	c8		iny				iny
.018bf2	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bf4	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018bf7	80 f5		bra $018bee			bra 	_LILoop
.018bf9	68		pla		_LIEnd:	pla 								; get A back
.018bfa	c9 fe		cmp #$fe			cmp 	#$FE 						; if '"' need closing quotes
.018bfc	d0 aa		bne $018ba8			bne 	_LIDecode
.018bfe	a9 22		lda #$22			lda 	#'"'
.018c00	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018c03	80 a3		bra $018ba8			bra 	_LIDecode
.018c05					_LIInteger:
.018c05	a2 00		ldx #$00			ldx 	#0
.018c07	20 f7 8f	jsr $018ff7			jsr 	EvaluateGetInteger 			; get an atom
.018c0a	88		dey				dey
.018c0b	20 a3 85	jsr $0185a3			jsr 	Print32BitInteger 			; print integer.
.018c0e	80 98		bra $018ba8			bra 	_LIDecode
.018c10					_LICommandToken:
.018c10	5a		phy				phy 								; save Y
.018c11	48		pha				pha 								; save token
.018c12	a2 9b		ldx #$9b			ldx  	#KeywordText & $FF 			; address of keyword text table.
.018c14	a9 86		lda #$86			lda 	(#KeywordText >> 8) & $FF
.018c16	86 1a		stx $1a				stx 	zLTemp1
.018c18	85 1b		sta $1b				sta 	zLTemp1+1
.018c1a	a9 01		lda #$01			lda 	(#KeywordText >> 16) & $FF 	; this is for 65816 (it's a table in code
.018c1c	85 1c		sta $1c				sta 	zLTemp1+2 					; space) and won't affect a 6502 at all.
.018c1e	68		pla				pla 								; get token
.018c1f	29 7f		and #$7f			and 	#127 						; chuck bit 7.
.018c21	f0 16		beq $018c39			beq 	_LIFoundToken
.018c23	aa		tax				tax
.018c24					_LITokenLoop:
.018c24	a0 00		ldy #$00			ldy 	#0 							; last character not a token.
.018c26					_LIFindEnd:
.018c26	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c28	c8		iny				iny
.018c29	0a		asl a				asl 	a
.018c2a	90 fa		bcc $018c26			bcc 	_LIFindEnd
.018c2c	98		tya				tya 								; that is step to the next
.018c2d	18		clc				clc 								; we don't bother bumping the 3rd byte
.018c2e	65 1a		adc $1a				adc 	zLTemp1 					; here.
.018c30	85 1a		sta $1a				sta 	zLTemp1
.018c32	90 02		bcc $018c36			bcc 	_LINoBump
.018c34	e6 1b		inc $1b				inc 	zLTemp1+1
.018c36					_LINoBump:
.018c36	ca		dex				dex 								; no go round again.
.018c37	d0 eb		bne $018c24			bne 	_LITokenLoop
.018c39					_LIFoundToken:
.018c39	a0 00		ldy #$00			ldy 	#0
.018c3b					_LIPrintToken:
.018c3b	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c3d	c0 00		cpy #$00			cpy 	#0 							; see if needs prefix space
.018c3f	d0 16		bne $018c57			bne 	_LINoPrefixSpace
.018c41	c9 41		cmp #$41			cmp 	#"A" 						; e.g. alphabetic token.
.018c43	90 12		bcc $018c57			bcc 	_LINoPrefixSpace
.018c45	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c47	b0 0e		bcs $018c57			bcs 	_LINoPrefixSpace
.018c49	ae ba 03	ldx $03ba			ldx 	LastPrinted 				; if last was space not required
.018c4c	e0 20		cpx #$20			cpx 	#" "
.018c4e	f0 07		beq $018c57			beq 	_LINoPrefixSpace
.018c50	48		pha				pha
.018c51	a9 20		lda #$20			lda 	#" "
.018c53	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018c56	68		pla				pla
.018c57					_LINoPrefixSpace:
.018c57	c8		iny				iny
.018c58	48		pha				pha 								; save it
.018c59	29 7f		and #$7f			and 	#$7F
.018c5b	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018c5e	68		pla				pla
.018c5f	10 da		bpl $018c3b			bpl 	_LIPrintToken 				; go back if not end
.018c61	7a		ply				ply 								; restore Y
.018c62	29 7f		and #$7f			and 	#$7F 						; if last char is a letter
.018c64	c9 41		cmp #$41			cmp 	#"A"
.018c66	90 09		bcc $018c71			bcc 	_LINotLetter2
.018c68	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c6a	b0 05		bcs $018c71			bcs 	_LINotLetter2
.018c6c	a9 20		lda #$20			lda 	#" " 						; add spacing
.018c6e	20 74 8c	jsr $018c74			jsr 	ListPrintLC
.018c71					_LINotLetter2:
.018c71	4c a8 8b	jmp $018ba8			jmp 	_LIDecode
.018c74					ListPrintLC:
.018c74	8d ba 03	sta $03ba			sta 	LastPrinted
.018c77	c9 41		cmp #$41			cmp 	#"A"
.018c79	90 06		bcc $018c81			bcc 	_LPLC0
.018c7b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c7d	b0 02		bcs $018c81			bcs 	_LPLC0
.018c7f	69 20		adc #$20			adc 	#$20
.018c81	4c 1f 85	jmp $01851f	_LPLC0:	jmp 	CharPrint
.018c84					ListGetRange:
.018c84	a2 0b		ldx #$0b			ldx 	#XS_Size*2-1 				; clear first 2 slots back to defaults.
.018c86					_LGRClear:
.018c86	a9 00		lda #$00			lda 	#0
.018c88	95 80		sta $80,x			sta 	XS_Mantissa,x
.018c8a	ca		dex				dex
.018c8b	10 f9		bpl $018c86			bpl 	_LGRClear
.018c8d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c8f	c9 00		cmp #$00			cmp 	#0 							; nothing
.018c91	f0 21		beq $018cb4			beq 	_LGRBlank
.018c93	c9 c0		cmp #$c0			cmp 	#token_Colon 				; or colon
.018c95	f0 1d		beq $018cb4			beq 	_LGRBlank
.018c97	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma
.018c99	f0 18		beq $018cb3			beq 	_LGREnd 					; then it's LIST ,x
.018c9b	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; get the first number into bottom
.018c9e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ca0	c9 bf		cmp #$bf			cmp 	#token_Comma
.018ca2	f0 0f		beq $018cb3			beq 	_LGREnd 					; then it is LIST a,b
.018ca4	a5 80		lda $80				lda 	XS_Mantissa+0 				; copy first to second LIST n is n,n
.018ca6	85 86		sta $86				sta 	XS_Mantissa+XS_Size+0
.018ca8	a5 81		lda $81				lda 	XS_Mantissa+1
.018caa	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018cac					_LGRBumpExit:
.018cac	e6 86		inc $86				inc 	XS_Mantissa+XS_Size 		; bump it so we can use cc.
.018cae	d0 02		bne $018cb2			bne 	_LGRBump2
.018cb0	e6 87		inc $87				inc 	XS_Mantissa+XS_Size+1
.018cb2					_LGRBump2:
.018cb2	60		rts				rts
.018cb3					_LGREnd:
.018cb3	c8		iny				iny
.018cb4					_LGRBlank:
.018cb4	a9 ff		lda #$ff			lda 	#$FF 						; default to the end.
.018cb6	85 86		sta $86				sta 	XS_Mantissa+XS_Size
.018cb8	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018cba	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cbc	c9 00		cmp #$00			cmp 	#0
.018cbe	f0 f2		beq $018cb2			beq 	_LGRBump2
.018cc0	0a		asl a				asl 	a 							; if not a number, then exit (to end)
.018cc1	b0 ef		bcs $018cb2			bcs 	_LGRBump2
.018cc3	a2 06		ldx #$06			ldx 	#XS_Size 					; get to range
.018cc5	20 87 90	jsr $019087			jsr 	EvaluateIntegerX
.018cc8	80 e2		bra $018cac			bra 	_LGRBumpExit
.018cca	60		rts				rts
.018ccb					ListCheckRange:
.018ccb	c8		iny				iny
.018ccc	a2 00		ldx #$00			ldx 	#0 							; test low
.018cce	20 db 8c	jsr $018cdb			jsr 	_LCRCompare
.018cd1	90 06		bcc $018cd9			bcc 	_LCRFail
.018cd3	a2 06		ldx #$06			ldx 	#XS_Size 					; test high
.018cd5	20 db 8c	jsr $018cdb			jsr 	_LCRCompare
.018cd8	60		rts				rts
.018cd9					_LCRFail:
.018cd9	38		sec				sec
.018cda	60		rts				rts
.018cdb					_LCRCompare:
.018cdb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cdd	38		sec				sec
.018cde	f5 80		sbc $80,x			sbc	 	XS_Mantissa+0,x
.018ce0	08		php				php
.018ce1	c8		iny				iny
.018ce2	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ce4	28		plp				plp
.018ce5	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.018ce7	08		php				php
.018ce8	88		dey				dey
.018ce9	28		plp				plp
.018cea	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/print.asm

.018ceb					Command_PRINT:
.018ceb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ced	c9 00		cmp #$00			cmp 	#0 							; end
.018cef	f0 65		beq $018d56			beq 	_CPR_NewLine
.018cf1	c9 c0		cmp #$c0			cmp 	#token_Colon
.018cf3	f0 61		beq $018d56			beq 	_CPR_NewLine
.018cf5	c9 c1		cmp #$c1			cmp 	#token_SemiColon
.018cf7	f0 50		beq $018d49			beq 	_CPR_Skip
.018cf9	c9 bf		cmp #$bf			cmp 	#token_Comma
.018cfb	f0 49		beq $018d46			beq 	_CPR_Tab
.018cfd	20 ef 8e	jsr $018eef			jsr 	EvaluateExpression 			; get expression.
.018d00	a5 85		lda $85				lda 	XS_Type 					; get type.
.018d02	29 02		and #$02			and 	#2
.018d04	d0 24		bne $018d2a			bne 	_CPR_String 				; if type = 2 output as string.
.018d06					_CPR_Number:
.018d06	a9 00		lda #$00			lda 	#0 							; reset buffer index
.018d08	8d 14 03	sta $0314			sta 	NumBufX
.018d0b	a5 85		lda $85				lda 	XS_Type 					; get type
.018d0d	4a		lsr a				lsr 	a
.018d0e	b0 05		bcs $018d15			bcs 	_CPRInt 					; if msb set do as integer
.018d10	20 a8 a1	jsr $01a1a8			jsr 	FPToString 					; call fp to str otherwise
.018d13	80 03		bra $018d18			bra 	_CPRNPrint
.018d15	20 30 9c	jsr $019c30	_CPRInt:jsr 	IntToString
.018d18					_CPRNPrint:
.018d18	ad 15 03	lda $0315			lda 	Num_Buffer 					; is first character -
.018d1b	c9 2d		cmp #$2d			cmp 	#"-"
.018d1d	f0 05		beq $018d24			beq 	_CPRNoSpace
.018d1f	a9 20		lda #$20			lda 	#" "						; print the leading space
.018d21	20 1f 85	jsr $01851f			jsr 	CharPrint 					; so beloved of MS Basics.
.018d24					_CPRNoSpace:
.018d24	a2 14		ldx #$14			ldx 	#(Num_Buffer-1) & $FF
.018d26	a9 03		lda #$03			lda 	#(Num_Buffer-1) >> 8
.018d28	80 04		bra $018d2e			bra 	_CPRPrint
.018d2a					_CPR_String:
.018d2a	a6 80		ldx $80				ldx 	XS_Mantissa
.018d2c	a5 81		lda $81				lda 	XS_Mantissa+1
.018d2e					_CPRPrint:
.018d2e	86 1e		stx $1e				stx 	zGenPtr
.018d30	85 1f		sta $1f				sta 	zGenPtr+1
.018d32	5a		phy				phy
.018d33	a0 00		ldy #$00			ldy 	#0							; get length into X
.018d35	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d37	aa		tax				tax
.018d38	f0 09		beq $018d43			beq 	_CPREndPrint 				; nothing to print
.018d3a					_CPRLoop:
.018d3a	c8		iny				iny
.018d3b	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d3d	20 1f 85	jsr $01851f			jsr 	CharPrint
.018d40	ca		dex				dex
.018d41	d0 f7		bne $018d3a			bne 	_CPRLoop
.018d43					_CPREndPrint:
.018d43	7a		ply				ply
.018d44	80 a5		bra $018ceb			bra 	Command_Print
.018d46					_CPR_Tab:
.018d46	20 4f 80	jsr $01804f			jsr 	IFT_Tab
.018d49					_CPR_Skip:
.018d49	c8		iny				iny
.018d4a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d4c	c9 c0		cmp #$c0			cmp 	#token_Colon 				; colon or $00, exit
.018d4e	f0 09		beq $018d59			beq 	_CPR_Exit
.018d50	c9 00		cmp #$00			cmp 	#0
.018d52	d0 97		bne $018ceb			bne 	Command_PRINT 				; if not go round again.
.018d54	80 03		bra $018d59			bra 	_CPR_Exit
.018d56					_CPR_NewLine:
.018d56	20 5c 80	jsr $01805c			jsr 	IFT_NewLine
.018d59					_CPR_Exit:
.018d59	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/assert.asm

.018d5a					Command_ASSERT:
.018d5a	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; calculate thing being asserted
.018d5d	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; check if true (non-zero)
.018d5f	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.018d61	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.018d63	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.018d65	f0 01		beq $018d68			beq 	_ASFail
.018d67	60		rts				rts
.018d68					_ASFail:
.018d68	20 57 85	jsr $018557			jsr ERR_Handler
>018d6b	41 73 73 65 72 74 00			.text "Assert",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/poke.asm

.018d72					Command_POKE:
.018d72	a9 01		lda #$01			lda 	#1
.018d74	80 06		bra $018d7c			bra 	CmdPoke_Main
.018d76					Command_DOKE:
.018d76	a9 02		lda #$02			lda 	#2
.018d78	80 02		bra $018d7c			bra 	CmdPoke_Main
.018d7a					Command_LOKE:
.018d7a	a9 04		lda #$04			lda 	#4
.018d7c					CmdPoke_Main:
.018d7c	48		pha				pha
.018d7d	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; get two parameters.
.018d80	e8		inx				inx
.018d81	e8		inx				inx
.018d82	e8		inx				inx
.018d83	e8		inx				inx
.018d84	e8		inx				inx
.018d85	e8		inx				inx
.018d86	20 b5 96	jsr $0196b5			jsr 	CheckNextComma
.018d89	20 87 90	jsr $019087			jsr 	EvaluateIntegerX
.018d8c	a5 80		lda $80				lda 	XS_Mantissa+0 			; copy the mantissa into ZLTemp1 (address)
.018d8e	85 1a		sta $1a				sta 	zLTemp1
.018d90	a5 81		lda $81				lda 	XS_Mantissa+1
.018d92	85 1b		sta $1b				sta 	zLTemp1+1
.018d94	a5 82		lda $82				lda 	XS_Mantissa+2
.018d96	85 1c		sta $1c				sta 	zLTemp1+2
.018d98	a5 83		lda $83				lda 	XS_Mantissa+3
.018d9a	85 1d		sta $1d				sta 	zLTemp1+3
.018d9c	68		pla				pla 								; get count
.018d9d	5a		phy				phy 								; save Y
.018d9e	20 40 96	jsr $019640			jsr 	MemWrite 					; write it out
.018da1	7a		ply				ply 								; restore Y and done.
.018da2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/newold.asm

.018da3					Command_NEW:
.018da3	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018da5	85 16		sta $16				sta 	zCodePtr+0
.018da7	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018da9	85 17		sta $17				sta 	zCodePtr+1
.018dab	a9 00		lda #$00			lda 	#0
.018dad	85 18		sta $18				sta 	zCodePtr+2
.018daf	85 19		sta $19				sta 	zCodePtr+3
.018db1	a0 03		ldy #$03			ldy 	#3
.018db3	a0 00		ldy #$00			ldy 	#0
.018db5	a9 00		lda #$00			lda 	#0 							; write a 0 there.
.018db7	97 16		sta [$16],y			sta 	[zCodePtr],y
.018db9	20 51 96	jsr $019651			jsr 	UpdateProgramEnd 			; update program end.
.018dbc	4c 10 88	jmp $018810			jmp 	WarmStart
.018dbf					Command_OLD:
.018dbf	ea		nop				nop
.018dc0	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018dc2	85 16		sta $16				sta 	zCodePtr+0
.018dc4	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018dc6	85 17		sta $17				sta 	zCodePtr+1
.018dc8	a9 00		lda #$00			lda 	#0
.018dca	85 18		sta $18				sta 	zCodePtr+2
.018dcc	85 19		sta $19				sta 	zCodePtr+3
.018dce	a0 03		ldy #$03			ldy 	#3
.018dd0					_COL_Find:
.018dd0	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018dd2	c8		iny				iny
.018dd3	c9 00		cmp #$00			cmp 	#0 							; if zero, then the position Y/Z is new offset
.018dd5	f0 18		beq $018def			beq 	_COL_Found
.018dd7	98		tya				tya
.018dd8	c9 00		cmp #$00			cmp 	#0
.018dda	d0 f4		bne $018dd0			bne 	_COL_Find 					; can't find old EOL, give up.
.018ddc	20 57 85	jsr $018557			jsr ERR_Handler
>018ddf	50 72 6f 67 72 61 6d 20			.text "Program Corrupt",0
>018de7	43 6f 72 72 75 70 74 00
.018def					_COL_Found:
.018def	98		tya				tya
.018df0	48		pha				pha
.018df1	a0 00		ldy #$00			ldy 	#0
.018df3	68		pla				pla
.018df4	97 16		sta [$16],y			sta 	[zCodePtr],y
.018df6	20 51 96	jsr $019651			jsr 	UpdateProgramEnd 			; reset variable pointer
.018df9	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/branch.asm

.018dfa					Command_GOTO:
.018dfa	20 17 8e	jsr $018e17			jsr 	GotoGetLineNumber
.018dfd	4c 34 8e	jmp $018e34			jmp 	GotoChangeToLineNumber
.018e00					Command_GOSUB:
.018e00	20 17 8e	jsr $018e17			jsr 	GotoGetLineNumber
.018e03	20 e6 84	jsr $0184e6			jsr 	StackSavePosition
.018e06	a9 15		lda #$15			lda 	#(SMark_Gosub << 4)+SourcePosSize
.018e08	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018e0b	4c 34 8e	jmp $018e34			jmp 	GotoChangeToLineNumber
.018e0e					Command_RETURN:
.018e0e	a9 10		lda #$10			lda 	#(SMark_Gosub << 4)
.018e10	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018e13	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018e16	60		rts				rts
.018e17					GotoGetLineNumber:
.018e17	20 85 90	jsr $019085			jsr 	EvaluateInteger
.018e1a	a5 82		lda $82				lda 	XS_Mantissa+2 				; check range
.018e1c	05 83		ora $83				ora 	XS_Mantissa+3
.018e1e	d0 01		bne $018e21			bne 	_GLINError
.018e20	60		rts				rts
.018e21					_GLINError:
.018e21	20 57 85	jsr $018557			jsr ERR_Handler
>018e24	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018e2c	20 4e 75 6d 62 65 72 00
.018e34					GotoChangeToLineNumber:
.018e34	a5 80		lda $80				lda 	XS_Mantissa+0 				; check line number not zero
.018e36	05 81		ora $81				ora 	XS_Mantissa+1
.018e38	f0 37		beq $018e71			beq 	_GCTLFail
.018e3a	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018e3c	85 16		sta $16				sta 	zCodePtr+0
.018e3e	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018e40	85 17		sta $17				sta 	zCodePtr+1
.018e42	a9 00		lda #$00			lda 	#0
.018e44	85 18		sta $18				sta 	zCodePtr+2
.018e46	85 19		sta $19				sta 	zCodePtr+3
.018e48	a0 03		ldy #$03			ldy 	#3
.018e4a					_GCTLLoop:
.018e4a	a0 00		ldy #$00			ldy 	#0
.018e4c	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e4e	c9 00		cmp #$00			cmp 	#0
.018e50	f0 1f		beq $018e71			beq 	_GCTLFail
.018e52	c8		iny				iny
.018e53	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e55	c5 80		cmp $80				cmp 	XS_Mantissa+0
.018e57	d0 07		bne $018e60			bne 	_GCTLNext
.018e59	c8		iny				iny
.018e5a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e5c	c5 81		cmp $81				cmp 	XS_Mantissa+1
.018e5e	f0 0f		beq $018e6f			beq 	_GCTLExit
.018e60					_GCTLNext:
.018e60	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018e62	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018e64	18		clc				clc
.018e65	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018e67	85 16		sta $16				sta 	zCodePtr
.018e69	90 02		bcc $018e6d			bcc 	_SNLNoCarry
.018e6b	e6 17		inc $17				inc 	zCodePtr+1
.018e6d					_SNLNoCarry:
.018e6d	80 db		bra $018e4a			bra 	_GCTLLoop 					; try next line.
.018e6f					_GCTLExit:
.018e6f	c8		iny				iny
.018e70	60		rts				rts
.018e71					_GCTLFail:
.018e71	20 57 85	jsr $018557			jsr ERR_Handler
>018e74	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018e7c	20 4e 75 6d 62 65 72 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/clr.asm

.018e84					Command_CLR:
.018e84					ResetRunStatus:
.018e84	20 8a 97	jsr $01978a			jsr 	VariableClear
.018e87	20 8d 84	jsr $01848d			jsr 	StackReset
.018e8a	a9 00		lda #$00			lda 	#HighMemory & $FF
.018e8c	8d 00 03	sta $0300			sta 	StringPtr
.018e8f	a9 7f		lda #$7f			lda 	#HighMemory >> 8
.018e91	8d 01 03	sta $0301			sta 	StringPtr+1
.018e94	20 54 99	jsr $019954			jsr 	ArrayResetDefault
.018e97	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/stop.asm

.018e98					Command_STOP:
.018e98	20 57 85	jsr $018557			jsr ERR_Handler
>018e9b	53 74 6f 70 00				.text "Stop",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/while.asm

.018ea0					Command_WHILE:
.018ea0	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack, but don't yet push.
.018ea3	20 85 90	jsr $019085			jsr 	EvaluateInteger 			; calculate the while loop value.
.018ea6	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018ea8	05 81		ora $81				ora 	XS_Mantissa+1
.018eaa	05 82		ora $82				ora 	XS_Mantissa+2
.018eac	05 83		ora $83				ora 	XS_Mantissa+3
.018eae	f0 06		beq $018eb6			beq 	_CWHSkip 					; if it is zero, then skip to WEND.
.018eb0	a9 35		lda #$35			lda 	#(SMark_While << 4)+SourcePosSize
.018eb2	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018eb5	60		rts				rts
.018eb6					_CWHSkip:
.018eb6	a9 95		lda #$95			lda 	#token_Wend 				; look for the WEND token.
.018eb8	20 00 84	jsr $018400			jsr 	StructureSearchSingle
.018ebb	c8		iny				iny
.018ebc	60		rts				rts
.018ebd					Command_WEND:
.018ebd	a9 30		lda #$30			lda 	#(SMark_While << 4)			; remove the frame
.018ebf	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018ec2	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018ec5	80 d9		bra $018ea0			bra 	Command_WHILE 				; and do the while again.
.018ec7	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/repeat.asm

.018ec8					Command_REPEAT:
.018ec8	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack
.018ecb	a9 25		lda #$25			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018ecd	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018ed0	60		rts				rts
.018ed1					Command_UNTIL:
.018ed1	a9 20		lda #$20			lda 	#(SMark_Repeat << 4)		; remove the frame
.018ed3	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018ed6	20 85 90	jsr $019085			jsr 	EvaluateInteger				; work out UNTIL
.018ed9	a5 80		lda $80				lda 	XS_Mantissa+0 				; check if zero.
.018edb	05 81		ora $81				ora 	XS_Mantissa+1
.018edd	05 82		ora $82				ora 	XS_Mantissa+2
.018edf	05 83		ora $83				ora 	XS_Mantissa+3
.018ee1	d0 08		bne $018eeb			bne 	_CUTExit 					; if not, just exit
.018ee3	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; otherwise loop round again.
.018ee6	a9 25		lda #$25			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018ee8	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; fix the stack back.
.018eeb					_CUTExit:
.018eeb	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/evaluate.asm

.018eec					EVESyntax:
.018eec	4c 28 85	jmp $018528			jmp 	SyntaxError
.018eef					EvaluateExpression:
.018eef	a2 00		ldx #$00			ldx 	#0 							; start with stack at 0.
.018ef1					EvaluateExpressionX:
.018ef1	a9 00		lda #$00			lda 	#0 							; start at precedence level 0.
.018ef3					EvaluateExpressionXA:
.018ef3	48		pha				pha 								; save precedence on stack.
.018ef4	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ef6	f0 f4		beq $018eec			beq 	EVESyntax 					; end of line, syntax error.
.018ef8	c9 1b		cmp #$1b			cmp 	#26+1 						; is it A-Z ?
.018efa	b0 03		bcs $018eff			bcs 	_EVNotVariable
.018efc	4c c9 8f	jmp $018fc9			jmp 	_EVVariableHandler 			; if so, go to the variable handler.
.018eff					_EVNotVariable:
.018eff	c9 40		cmp #$40			cmp 	#$40 						; up to $40, syntax error.
.018f01	90 e9		bcc $018eec			bcc 	EVESyntax
.018f03	c9 80		cmp #$80			cmp 	#$80 						; $40-$7F not integer
.018f05	b0 58		bcs $018f5f			bcs 	_EVNotInteger
.018f07	20 f7 8f	jsr $018ff7			jsr 	EvaluateGetInteger
.018f0a					_EVCheckDecimal:
.018f0a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f0c	c9 fd		cmp #$fd			cmp 	#$FD 						; decimal ?
.018f0e	d0 05		bne $018f15			bne 	_EVGotAtom 					; no, get atom.
.018f10					_EVIsDecimal:
.018f10	20 1d 90	jsr $01901d			jsr 	EVGetDecimal 				; extend to the decimal part.
.018f13	80 00		bra $018f15			bra 	_EVGotAtom 					; and continue to got atom.
.018f15					_EVGotAtom:
.018f15	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f17	10 44		bpl $018f5d			bpl 	_EVExitDrop 				; must be a token.
.018f19	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus  			; check it's in the binary token range (they're first)
.018f1b	b0 40		bcs $018f5d			bcs 	_EVExitDrop
.018f1d	68		pla				pla 								; get current precedence
.018f1e	85 1e		sta $1e				sta 	zGenPtr 					; save in zGenPtr as temp.
.018f20	da		phx				phx 								; save X
.018f21	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f23	aa		tax				tax 								; put in X
.018f24	bf 0c 86 01	lda $01860c,x			lda 	BinaryPrecedence-$80,x 		; read the binary precedence.
.018f28	85 1f		sta $1f				sta 	zGenPtr+1 					; save it.
.018f2a	fa		plx				plx 								; restore X
.018f2b	c5 1e		cmp $1e				cmp 	zGenPtr 					; compared against the current precedence
.018f2d	90 2f		bcc $018f5e			bcc 	_EVExit 					; exit if too low.
.018f2f	f0 2d		beq $018f5e			beq 	_EVExit 					; exit if equals
.018f31	a5 1e		lda $1e				lda 	zGenPtr 					; push precedence
.018f33	48		pha				pha
.018f34	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f36	48		pha				pha
.018f37	c8		iny				iny
.018f38	da		phx				phx 								; save current position
.018f39	e8		inx				inx
.018f3a	e8		inx				inx
.018f3b	e8		inx				inx
.018f3c	e8		inx				inx
.018f3d	e8		inx				inx
.018f3e	e8		inx				inx
.018f3f	a5 1f		lda $1f				lda 	zGenPtr+1 					; get the precedence of the operator in A.
.018f41	20 f3 8e	jsr $018ef3			jsr 	EvaluateExpressionXA 		; do the RHS.
.018f44	fa		plx				plx 								; restore X
.018f45	68		pla				pla 								; get the binary operator in A.
.018f46					_EVCallA:
.018f46	da		phx				phx 								; save X again
.018f47	0a		asl a				asl 	a 							; double, lose the MSB.
.018f48	aa		tax				tax									; put in X
.018f49	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into zGenPtr
.018f4d	8d 11 03	sta $0311			sta 	LocalVector+1
.018f50	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.018f54	8d 12 03	sta $0312			sta 	LocalVector+2
.018f57	fa		plx				plx 								; restore X
.018f58	20 d2 8f	jsr $018fd2			jsr 	EVCallLocalVector
.018f5b	80 b8		bra $018f15			bra 	_EVGotAtom 					; and loop back.
.018f5d					_EVExitDrop:
.018f5d	68		pla				pla
.018f5e					_EVExit:
.018f5e	60		rts				rts
.018f5f					_EVNotInteger:
.018f5f	c8		iny				iny
.018f60	c9 8b		cmp #$8b			cmp 	#token_minus 				; is it unary minus ?
.018f62	d0 16		bne $018f7a			bne 	_EVNotMinus
.018f64	20 66 90	jsr $019066			jsr 	EvaluateGetAtomX 			; get a numeric value into X.
.018f67	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.018f69	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.018f6b	f0 05		beq $018f72			beq 	_EVMinusFloat
.018f6d	20 13 9c	jsr $019c13			jsr 	IntegerNegateAlways 		; negation
.018f70	80 a3		bra $018f15			bra 	_EVGotAtom 					; and go back.
.018f72					_EVMinusFloat:
.018f72	b5 85		lda $85,x			lda 	XS_Type,x 					; invert the sign bit.
.018f74	49 80		eor #$80			eor 	#$80
.018f76	95 85		sta $85,x			sta 	XS_Type,x
.018f78	80 9b		bra $018f15			bra 	_EVGotAtom
.018f7a					_EVNotMinus:
.018f7a	c9 bd		cmp #$bd			cmp 	#token_lparen 				; is it left parenthesis
.018f7c	d0 17		bne $018f95			bne 	_EVNotParenthesis
.018f7e	20 f1 8e	jsr $018ef1			jsr 	EvaluateExpressionX 		; full evaluate at level x.
.018f81	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f83	c8		iny				iny
.018f84	c9 be		cmp #$be			cmp 	#token_rparen 				; okay if right bracket.
.018f86	f0 8d		beq $018f15			beq 	_EVGotAtom
.018f88	20 57 85	jsr $018557			jsr ERR_Handler
>018f8b	4d 69 73 73 69 6e 67 20			.text "Missing )",0
>018f93	29 00
.018f95					_EVNotParenthesis:
.018f95	c9 98		cmp #$98			cmp 	#token_not 					; is it not ?
.018f97	d0 0c		bne $018fa5			bne 	_EVNotNot
.018f99	20 66 90	jsr $019066			jsr 	EvaluateGetAtomX 			; get expression in parenthesis.
.018f9c	20 a9 a0	jsr $01a0a9			jsr 	FPUToInteger 				; make it an integer - if possible.
.018f9f	20 4b 90	jsr $01904b			jsr 	NotInteger 					; do the not calculation
.018fa2	4c 15 8f	jmp $018f15			jmp 	_EVGotAtom
.018fa5					_EVNotNot:
.018fa5	c9 fe		cmp #$fe			cmp 	#$FE
.018fa7	d0 12		bne $018fbb			bne 	_EVNotString
.018fa9	20 28 97	jsr $019728			jsr 	CreateTempStringCopy 		; copy of string in code in temporary memory.
.018fac	a5 20		lda $20				lda 	zTempStr 					; copy address of string into mantissa
.018fae	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018fb0	a5 21		lda $21				lda 	zTempStr+1
.018fb2	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.018fb4	a9 02		lda #$02			lda 	#2 							; set to type 2 (e.g. string)
.018fb6	95 85		sta $85,x			sta 	XS_Type,x
.018fb8	4c 15 8f	jmp $018f15			jmp 	_EVGotAtom
.018fbb					_EVNotString:
.018fbb	c9 98		cmp #$98			cmp 	#firstUnaryFunction
.018fbd	90 04		bcc $018fc3			bcc 	_EVBadElement
.018fbf	c9 b7		cmp #$b7			cmp 	#lastUnaryFunction+1
.018fc1	90 03		bcc $018fc6			bcc 	_EVUnaryFunction
.018fc3					_EVBadElement:
.018fc3	4c 28 85	jmp $018528			jmp 	SyntaxError
.018fc6					_EVUnaryFunction:
.018fc6	4c 46 8f	jmp $018f46			jmp 	_EVCallA
.018fc9					_EVVariableHandler:
.018fc9	20 4e 97	jsr $01974e			jsr 	VariableFind 				; locate a variable
.018fcc	20 96 9a	jsr $019a96			jsr 	VariableGet 				; copy into memory.
.018fcf	4c 15 8f	jmp $018f15			jmp 	_EVGotAtom 					; and go round.
.018fd2					EVCallLocalVector:
.018fd2	6c 11 03	jmp ($0311)			jmp 	(LocalVector+1)
.018fd5					EVShiftMantissaLeft6:
.018fd5	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 				; copy up, using exponent as a temp
.018fd7	95 84		sta $84,x			sta 	XS_Exponent,x
.018fd9	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.018fdb	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.018fdd	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.018fdf	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.018fe1	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.018fe3	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.018fe5	a9 00		lda #$00			lda 	#0
.018fe7	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018fe9	20 ec 8f	jsr $018fec			jsr 	_EVSMLShift 					; call it here to do it twice
.018fec					_EVSMLShift:
.018fec	56 84		lsr $84,x			lsr 	XS_Exponent,x
.018fee	76 83		ror $83,x			ror 	XS_Mantissa+3,x
.018ff0	76 82		ror $82,x			ror 	XS_Mantissa+2,x
.018ff2	76 81		ror $81,x			ror 	XS_Mantissa+1,x
.018ff4	76 80		ror $80,x			ror 	XS_Mantissa+0,x
.018ff6	60		rts				rts
.018ff7					EvaluateGetInteger:
.018ff7	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ff9	29 3f		and #$3f			and 	#$3F 						; it's a constant 0-63
.018ffb	95 80		sta $80,x			sta 	XS_Mantissa,x 				; put into the mantissa space (32 bit integer)
.018ffd	a9 00		lda #$00			lda 	#0
.018fff	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019001	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019003	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019005	1a		inc a				inc 	a 							; set to type 1 (integer)
.019006	95 85		sta $85,x			sta 	XS_Type,x
.019008					_EVCheckNextInteger:
.019008	c8		iny				iny
.019009	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01900b	49 40		eor #$40			eor 	#$40 						; 40-7F now 00-3F.
.01900d	c9 40		cmp #$40			cmp 	#$40 						; if not, we have an atom.
.01900f	b0 0b		bcs $01901c			bcs 	_EVEndInteger
.019011	48		pha				pha 								; save it.
.019012	20 d5 8f	jsr $018fd5			jsr 	EVShiftMantissaLeft6 		; shift the mantissa left 6.
.019015	68		pla				pla
.019016	15 80		ora $80,x			ora 	XS_Mantissa+0,x 			; put in lower 6 bits.
.019018	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01901a	80 ec		bra $019008			bra 	_EVCheckNextInteger
.01901c					_EVEndInteger:
.01901c	60		rts				rts
.01901d					EVGetDecimal:
.01901d	a9 2e		lda #$2e			lda 	#'.'							; put DP in NUM_Buffer
.01901f	8d 15 03	sta $0315			sta 	Num_Buffer
.019022	da		phx				phx
.019023	c8		iny				iny
.019024	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019026	c8		iny				iny
.019027	3a		dec a				dec 	a								; convert to a string length.
.019028	3a		dec a				dec 	a
.019029	a2 01		ldx #$01			ldx 	#1 								; offset in X.
.01902b					_EVGDCopy:
.01902b	48		pha				pha 									; save count
.01902c	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01902e	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.019031	e8		inx				inx 									; forward ....
.019032	c8		iny				iny
.019033	68		pla				pla 									; get count
.019034	3a		dec a				dec 	a 								; until zero
.019035	d0 f4		bne $01902b			bne 	_EVGDCopy
.019037	9d 15 03	sta $0315,x			sta 	Num_Buffer,x 					; make string ASCIIZ.
.01903a	fa		plx				plx 									; restore X
.01903b	a9 15		lda #$15			lda 	#Num_Buffer & $FF 				; set zGenPtr
.01903d	85 1e		sta $1e				sta 	zGenPtr
.01903f	a9 03		lda #$03			lda 	#Num_Buffer >> 8
.019041	85 1f		sta $1f				sta 	zGenPtr+1
.019043	5a		phy				phy 									; save Y
.019044	a0 00		ldy #$00			ldy 	#0 								; start position
.019046	20 63 a2	jsr $01a263			jsr 	FPFromString 					; convert current
.019049	7a		ply				ply 									; restore Y
.01904a	60		rts				rts
.01904b					NotInteger:
.01904b	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.01904d	49 ff		eor #$ff			eor 	#$FF
.01904f	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019051	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019053	49 ff		eor #$ff			eor 	#$FF
.019055	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019057	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019059	49 ff		eor #$ff			eor 	#$FF
.01905b	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01905d	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01905f	49 ff		eor #$ff			eor 	#$FF
.019061	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019063	60		rts				rts
.019064					EvaluateGetAtom:
.019064	a2 00		ldx #$00			ldx 	#0 								; start at the bottom :)
.019066					EvaluateGetAtomX:
.019066	a9 08		lda #$08			lda 	#8 								; very high precedence so no binary operations.
.019068	20 f3 8e	jsr $018ef3			jsr 	EvaluateExpressionXA
.01906b	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0 (float) 1 (integer)
.01906d	29 0f		and #$0f			and 	#15
.01906f	c9 02		cmp #$02			cmp 	#2
.019071	b0 01		bcs $019074			bcs 	EvaluateType
.019073	60		rts				rts
.019074					EvaluateType:
.019074	4c 38 85	jmp $018538			jmp 	TypeError
.019077					EvaluateNumber:
.019077	a2 00		ldx #$00			ldx 	#0
.019079					EvaluateNumberX:
.019079	20 f1 8e	jsr $018ef1			jsr 	EvaluateExpressionX
.01907c	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0/1
.01907e	29 0f		and #$0f			and 	#15
.019080	c9 02		cmp #$02			cmp 	#2
.019082	b0 f0		bcs $019074			bcs 	EvaluateType
.019084	60		rts				rts
.019085					EvaluateInteger:
.019085	a2 00		ldx #$00			ldx 	#0
.019087					EvaluateIntegerX:
.019087	20 79 90	jsr $019079			jsr 	EvaluateNumberX
.01908a	20 a9 a0	jsr $01a0a9			jsr 	FPUToInteger
.01908d	60		rts				rts
.01908e					EvaluateString:
.01908e	a2 00		ldx #$00			ldx 	#0
.019090					EvaluateStringX:
.019090	20 f1 8e	jsr $018ef1			jsr 	EvaluateExpressionX
.019093	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 2
.019095	29 0f		and #$0f			and 	#15
.019097	c9 02		cmp #$02			cmp 	#2
.019099	d0 d9		bne $019074			bne 	EvaluateType
.01909b	b5 80		lda $80,x			lda 	XS_Mantissa,x 					; copy to zGenPtr
.01909d	85 1e		sta $1e				sta 	zGenPtr
.01909f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0190a1	85 1f		sta $1f				sta 	zGenPtr+1
.0190a3	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/logical.asm

.0190a4					BinaryOp_And:
.0190a4	20 f8 90	jsr $0190f8			jsr 	BinaryMakeBothInteger
.0190a7	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.0190a9	35 86		and $86,x			and 	XS2_Mantissa+0,x
.0190ab	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190ad	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190af	35 87		and $87,x			and 	XS2_Mantissa+1,x
.0190b1	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190b3	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.0190b5	35 88		and $88,x			and 	XS2_Mantissa+2,x
.0190b7	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190b9	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.0190bb	35 89		and $89,x			and 	XS2_Mantissa+3,x
.0190bd	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190bf	60		rts				rts
.0190c0					BinaryOp_Or:
.0190c0	20 f8 90	jsr $0190f8			jsr 	BinaryMakeBothInteger
.0190c3	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.0190c5	15 86		ora $86,x			ora 	XS2_Mantissa+0,x
.0190c7	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190c9	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190cb	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.0190cd	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190cf	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.0190d1	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.0190d3	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190d5	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.0190d7	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.0190d9	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190db	60		rts				rts
.0190dc					BinaryOp_Eor:
.0190dc					BinaryOp_Xor:
.0190dc	20 f8 90	jsr $0190f8			jsr 	BinaryMakeBothInteger
.0190df	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.0190e1	55 86		eor $86,x			eor 	XS2_Mantissa+0,x
.0190e3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190e5	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190e7	55 87		eor $87,x			eor 	XS2_Mantissa+1,x
.0190e9	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190eb	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.0190ed	55 88		eor $88,x			eor 	XS2_Mantissa+2,x
.0190ef	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190f1	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.0190f3	55 89		eor $89,x			eor 	XS2_Mantissa+3,x
.0190f5	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190f7	60		rts				rts
.0190f8					BinaryMakeBothInteger:
.0190f8	da		phx				phx 								; save X
.0190f9	e8		inx				inx
.0190fa	e8		inx				inx
.0190fb	e8		inx				inx
.0190fc	e8		inx				inx
.0190fd	e8		inx				inx
.0190fe	e8		inx				inx
.0190ff	20 03 91	jsr $019103			jsr 	BinaryMakeInteger 			; convert to integer.
.019102	fa		plx				plx 								; restore X and fall through.
.019103					BinaryMakeInteger:
.019103	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.019105	29 0f		and #$0f			and 	#15 						; check type zero
.019107	f0 04		beq $01910d			beq 	_BMIConvert 				; if float convert to integer.
.019109	4a		lsr a				lsr 	a 							; if bit 0 clear it's not an integer
.01910a	90 04		bcc $019110			bcc 	_BMIError
.01910c	60		rts				rts
.01910d					_BMIConvert:
.01910d	4c a9 a0	jmp $01a0a9			jmp 	FPUToInteger 				; convert to integer
.019110					_BMIError:
.019110	4c 38 85	jmp $018538			jmp 	TypeError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/compare.asm

.019113					Binary_Equal:
.019113	20 5a 91	jsr $01915a			jsr 	CompareValues
.019116	09 00		ora #$00			ora 	#0
.019118	f0 04		beq $01911e			beq 	CCTrue
.01911a	a9 00		lda #$00	CCFalse:lda 	#0							; set false
.01911c	80 02		bra $019120			bra 	CCWrite
.01911e	a9 ff		lda #$ff	CCTrue:	lda 	#$FF 						; set true
.019120	95 80		sta $80,x	CCWrite:sta 	XS_Mantissa+0,x 			; write into integer slot
.019122	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019124	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019126	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019128	a9 01		lda #$01			lda 	#1
.01912a	95 85		sta $85,x			sta 	XS_Type,x 					; set type to integer whatever.
.01912c	60		rts				rts
.01912d					Binary_NotEqual:
.01912d	20 5a 91	jsr $01915a			jsr 	CompareValues
.019130	09 00		ora #$00			ora 	#0
.019132	f0 e6		beq $01911a			beq 	CCFalse
.019134	80 e8		bra $01911e			bra 	CCTrue
.019136					Binary_Less:
.019136	20 5a 91	jsr $01915a			jsr 	CompareValues
.019139	09 00		ora #$00			ora 	#0
.01913b	30 e1		bmi $01911e			bmi 	CCTrue
.01913d	80 db		bra $01911a			bra 	CCFalse
.01913f					Binary_LessEqual:
.01913f	20 5a 91	jsr $01915a			jsr 	CompareValues
.019142	c9 01		cmp #$01			cmp 	#1
.019144	d0 d8		bne $01911e			bne 	CCTrue
.019146	80 d2		bra $01911a			bra 	CCFalse
.019148					Binary_GreaterEqual:
.019148	20 5a 91	jsr $01915a			jsr 	CompareValues
.01914b	09 00		ora #$00			ora 	#0
.01914d	10 cf		bpl $01911e			bpl 	CCTrue
.01914f	80 c9		bra $01911a			bra 	CCFalse
.019151					Binary_Greater:
.019151	20 5a 91	jsr $01915a			jsr 	CompareValues
.019154	c9 01		cmp #$01			cmp 	#1
.019156	f0 c6		beq $01911e			beq 	CCTrue
.019158	80 c0		bra $01911a			bra 	CCFalse
.01915a					CompareValues:
.01915a	b5 85		lda $85,x			lda 	XS_Type,x 					; and the types together
.01915c	35 8b		and $8b,x			and 	XS2_Type,x
.01915e	c9 02		cmp #$02			cmp 	#2
.019160	f0 11		beq $019173			beq 	_CVString
.019162	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019164	35 8b		and $8b,x			and 	XS2_Type,x
.019166	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019167	90 03		bcc $01916c			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019169	4c b5 91	jmp $0191b5			jmp 	CompareInteger32 							; so execute code at \1
.01916c					_BCFloat:
.01916c	20 59 92	jsr $019259			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.01916f	4c a2 9f	jmp $019fa2			jmp 	FPCompare 							; and execute code at \2
.019172	60		rts				rts
.019173					_CVString:
.019173	da		phx				phx 								; save XY
.019174	5a		phy				phy
.019175	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.019177	85 1a		sta $1a				sta		zLTemp1+0
.019179	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01917b	85 1b		sta $1b				sta 	zLTemp1+1
.01917d	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.01917f	85 1c		sta $1c				sta 	zLTemp1+2
.019181	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.019183	85 1d		sta $1d				sta 	zLTemp1+3
.019185	a0 00		ldy #$00			ldy 	#0 							; find the shorter string length, we compare this.
.019187	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.019189	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.01918b	90 02		bcc $01918f			bcc 	_CVCommon
.01918d	b1 1c		lda ($1c),y			lda 	(zLTemp1+2),y
.01918f					_CVCommon:
.01918f	aa		tax				tax 								; put shorter string length in zero.
.019190	f0 0c		beq $01919e			beq 	_CVMatch 					; if the shorter is zero, then the 'common parts' match
.019192					_CVCompare:
.019192	c8		iny				iny 								; next character
.019193	b1 1a		lda ($1a),y			lda 	(zLTemp1),y 				; compare characters
.019195	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.019197	90 13		bcc $0191ac			bcc 	_CVReturnLess 				; <
.019199	d0 15		bne $0191b0			bne 	_CVReturnGreater 			; >
.01919b	ca		dex				dex 								; until common length matched.
.01919c	d0 f4		bne $019192			bne 	_CVCompare
.01919e					_CVMatch:
.01919e	a0 00		ldy #$00			ldy 	#0
.0191a0	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0191a2	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.0191a4	90 06		bcc $0191ac			bcc 	_CVReturnLess 				; <
.0191a6	d0 08		bne $0191b0			bne 	_CVReturnGreater 			; >
.0191a8	a9 00		lda #$00			lda 	#0
.0191aa	80 06		bra $0191b2			bra 	_CVExit 					; same common, same length, same string
.0191ac					_CVReturnLess:
.0191ac	a9 ff		lda #$ff			lda 	#$FF
.0191ae	80 02		bra $0191b2			bra 	_CVExit
.0191b0					_CVReturnGreater:
.0191b0	a9 01		lda #$01			lda 	#$01
.0191b2					_CVExit:
.0191b2	7a		ply				ply
.0191b3	fa		plx				plx
.0191b4	60		rts				rts
.0191b5					CompareInteger32:
.0191b5	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; invert both sign flags, makes compare signed
.0191b7	49 80		eor #$80			eor 	#$80
.0191b9	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0191bb	b5 89		lda $89,x			lda 	XS2_Mantissa+3,x
.0191bd	49 80		eor #$80			eor 	#$80
.0191bf	95 89		sta $89,x			sta 	XS2_Mantissa+3,x
.0191c1	20 3f 92	jsr $01923f			jsr 	SubInteger32 				; subtraction
.0191c4	90 0d		bcc $0191d3			bcc 	_CI32Less 					; cc return -1
.0191c6	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; check if zero
.0191c8	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.0191ca	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0191cc	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0191ce	f0 02		beq $0191d2			beq 	_CI32Exit
.0191d0	a9 01		lda #$01			lda 	#1							; otherwise it's positive
.0191d2					_CI32Exit:
.0191d2	60		rts				rts
.0191d3					_CI32Less:
.0191d3	a9 ff		lda #$ff			lda 	#$FF
.0191d5	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/arithmetic.asm

.0191d6					BinaryOp_Add:
.0191d6	b5 85		lda $85,x			lda 	XS_Type,x  					; and types together
.0191d8	35 8b		and $8b,x			and 	XS2_Type,x
.0191da	29 02		and #$02			and 	#2 							; if bit 1 set they are both strings
.0191dc	d0 11		bne $0191ef			bne 	_BOAString
.0191de	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191e0	35 8b		and $8b,x			and 	XS2_Type,x
.0191e2	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191e3	90 03		bcc $0191e8			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191e5	4c 25 92	jmp $019225			jmp 	AddInteger32 							; so execute code at \1
.0191e8					_BCFloat:
.0191e8	20 59 92	jsr $019259			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191eb	4c 7d 9d	jmp $019d7d			jmp 	FPAdd 							; and execute code at \2
.0191ee	60		rts				rts
.0191ef					_BOAString:
.0191ef	4c 73 92	jmp $019273			jmp 	ConcatenateString 			; concatenate two strings.
.0191f2					BinaryOp_Subtract:
.0191f2	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191f4	35 8b		and $8b,x			and 	XS2_Type,x
.0191f6	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191f7	90 03		bcc $0191fc			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191f9	4c 3f 92	jmp $01923f			jmp 	SubInteger32 							; so execute code at \1
.0191fc					_BCFloat:
.0191fc	20 59 92	jsr $019259			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191ff	4c 75 9d	jmp $019d75			jmp 	FPSubtract 							; and execute code at \2
.019202	60		rts				rts
.019203					BinaryOp_Multiply:
.019203	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019205	35 8b		and $8b,x			and 	XS2_Type,x
.019207	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019208	90 03		bcc $01920d			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.01920a	4c 4e 9b	jmp $019b4e			jmp 	MulInteger32 							; so execute code at \1
.01920d					_BCFloat:
.01920d	20 59 92	jsr $019259			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.019210	4c a4 9e	jmp $019ea4			jmp 	FPMultiply 							; and execute code at \2
.019213	60		rts				rts
.019214					BinaryOp_Divide:
.019214	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019216	35 8b		and $8b,x			and 	XS2_Type,x
.019218	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019219	90 03		bcc $01921e			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.01921b	4c 8c 9b	jmp $019b8c			jmp 	DivInteger32 							; so execute code at \1
.01921e					_BCFloat:
.01921e	20 59 92	jsr $019259			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.019221	4c 31 9e	jmp $019e31			jmp 	FPDivide 							; and execute code at \2
.019224	60		rts				rts
.019225					AddInteger32:
.019225	18		clc				clc
.019226	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019228	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.01922a	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01922c	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01922e	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019230	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019232	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019234	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019236	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019238	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01923a	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.01923c	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01923e	60		rts				rts
.01923f					SubInteger32:
.01923f	38		sec				sec
.019240	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019242	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019244	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019246	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019248	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.01924a	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01924c	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01924e	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019250	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019252	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019254	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019256	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019258	60		rts				rts
.019259					BinaryMakeBothFloat:
.019259	da		phx				phx 								; save X
.01925a	e8		inx				inx
.01925b	e8		inx				inx
.01925c	e8		inx				inx
.01925d	e8		inx				inx
.01925e	e8		inx				inx
.01925f	e8		inx				inx
.019260	20 64 92	jsr $019264			jsr 	BinaryMakeFloat 			; convert to float.
.019263	fa		plx				plx 								; restore X and fall through.
.019264					BinaryMakeFloat:
.019264	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.019266	4a		lsr a				lsr 	a 							; if bit 0 set, it's integer so convert
.019267	b0 04		bcs $01926d			bcs 	_BMFConvert
.019269	4a		lsr a				lsr 	a 							; if bit 1 set, it's a string so error (type)
.01926a	b0 04		bcs $019270			bcs 	_BMFError
.01926c	60		rts				rts
.01926d					_BMFConvert:
.01926d	4c 5d a0	jmp $01a05d			jmp 	FPUToFloat 					; convert to float
.019270					_BMFError:
.019270	4c 38 85	jmp $018538			jmp 	TypeError
.019273					ConcatenateString:
.019273	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.019275	85 1a		sta $1a				sta		zLTemp1+0
.019277	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019279	85 1b		sta $1b				sta 	zLTemp1+1
.01927b	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.01927d	85 1c		sta $1c				sta 	zLTemp1+2
.01927f	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.019281	85 1d		sta $1d				sta 	zLTemp1+3
.019283	5a		phy				phy
.019284	a0 00		ldy #$00			ldy 	#0 							; work out total length.
.019286	b1 1a		lda ($1a),y			lda 	(zlTemp1),y
.019288	71 1c		adc ($1c),y			adc 	(zlTemp1+2),y
.01928a	7a		ply				ply
.01928b	b0 33		bcs $0192c0			bcs 	_CSError					; check in range.
.01928d	c9 fe		cmp #$fe			cmp 	#maxString+1
.01928f	b0 2f		bcs $0192c0			bcs 	_CSError
.019291	20 ed 96	jsr $0196ed			jsr 	AllocateTempString 			; store the result
.019294	20 ab 92	jsr $0192ab			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.019297	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; point zLTemp1 to second string
.019299	85 1a		sta $1a				sta 	zLTemp1
.01929b	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.01929d	85 1b		sta $1b				sta 	zLTemp1+1
.01929f	20 ab 92	jsr $0192ab			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.0192a2	a5 20		lda $20				lda 	zTempStr 					; point current to new string
.0192a4	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0192a6	a5 21		lda $21				lda 	zTempStr+1
.0192a8	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0192aa	60		rts				rts
.0192ab					_CSCopyString:
.0192ab	da		phx				phx
.0192ac	5a		phy				phy
.0192ad	a0 00		ldy #$00			ldy 	#0 							; get length
.0192af	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0192b1	f0 0a		beq $0192bd			beq 	_CSCSExit 					; if zero, exit
.0192b3	aa		tax				tax 								; put in X
.0192b4					_CSCSLoop:
.0192b4	c8		iny				iny 								; get next char
.0192b5	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0192b7	20 18 97	jsr $019718			jsr		WriteTempString 			; copy out
.0192ba	ca		dex				dex 								; do whole string
.0192bb	d0 f7		bne $0192b4			bne 	_CSCSLoop
.0192bd					_CSCSExit:
.0192bd	7a		ply				ply
.0192be	fa		plx				plx
.0192bf	60		rts				rts
.0192c0					_CSError:
.0192c0	20 57 85	jsr $018557			jsr ERR_Handler
>0192c3	53 74 72 69 6e 67 20 74			.text "String too long",0
>0192cb	6f 6f 20 6c 6f 6e 67 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/sgn.asm

.0192d3					Unary_Sgn:
.0192d3	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; get value
.0192d6	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; check right bracket.
.0192d9	20 f7 92	jsr $0192f7			jsr 	GetSignCurrent 				; get sign.
.0192dc	09 00		ora #$00			ora 	#0
.0192de	10 08		bpl $0192e8			bpl		UnarySetAInteger			; if 0,1 return that.
.0192e0	80 00		bra $0192e2			bra 	UnarySetAMinus1 			; -1 return $FFFFF...
.0192e2					UnarySetAMinus1:
.0192e2	a9 ff		lda #$ff			lda 	#$FF
.0192e4	95 80		sta $80,x			sta 	XS_Mantissa,x
.0192e6	80 04		bra $0192ec			bra 	UnarySetAFill
.0192e8					UnarySetAInteger:
.0192e8	95 80		sta $80,x			sta 	XS_Mantissa,x
.0192ea	a9 00		lda #$00			lda 	#0
.0192ec					UnarySetAFill:
.0192ec	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0192ee	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0192f0	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0192f2	a9 01		lda #$01			lda 	#1
.0192f4	95 85		sta $85,x			sta 	XS_Type,x
.0192f6	60		rts				rts
.0192f7					GetSignCurrent:
.0192f7	b5 85		lda $85,x			lda 	XS_Type,x 					; identify type.
.0192f9	4a		lsr a				lsr 	a 							; if LSB set it is integer.
.0192fa	90 15		bcc $019311			bcc 	_GSCFloat
.0192fc	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.0192fe	30 0e		bmi $01930e			bmi 	_GSCMinus1
.019300	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.019302	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019304	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019306	d0 03		bne $01930b			bne 	_GSCPlus1
.019308					_GSCZero:
.019308	a9 00		lda #$00			lda 	#0
.01930a	60		rts				rts
.01930b					_GSCPlus1:
.01930b	a9 01		lda #$01			lda 	#$01
.01930d	60		rts				rts
.01930e					_GSCMinus1:
.01930e	a9 ff		lda #$ff			lda 	#$FF
.019310	60		rts				rts
.019311					_GSCFloat:
.019311	34 85		bit $85,x			bit 	XS_Type,x
.019313	70 f3		bvs $019308			bvs 	_GSCZero
.019315	30 f7		bmi $01930e			bmi 	_GSCMinus1
.019317	80 f2		bra $01930b			bra 	_GSCPlus1

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/abs.asm

.019319					Unary_Abs:
.019319	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; get value
.01931c	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; check right bracket.
.01931f	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.019321	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.019323	f0 07		beq $01932c			beq 	_UAMinusFloat
.019325	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; check MSB
.019327	10 09		bpl $019332			bpl 	_UAExit
.019329	4c 13 9c	jmp $019c13			jmp 	IntegerNegateAlways 		; negation
.01932c					_UAMinusFloat:
.01932c	b5 85		lda $85,x			lda 	XS_Type,x 					; clear the sign bit.
.01932e	29 7f		and #$7f			and		#$7F
.019330	95 85		sta $85,x			sta 	XS_Type,x
.019332					_UAExit:
.019332	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/peek.asm

.019333					Unary_Peek:
.019333	a9 01		lda #$01			lda 	#1
.019335	80 06		bra $01933d			bra 	UPMain
.019337					Unary_Deek:
.019337	a9 02		lda #$02			lda 	#2
.019339	80 02		bra $01933d			bra 	UPMain
.01933b					Unary_Leek:
.01933b	a9 04		lda #$04			lda 	#4
.01933d					UPMain:
.01933d	48		pha				pha 								; set bytes to copy.
.01933e	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 			; numeric parameter
.019341	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.019344	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy the mantissa into ZLTemp1 (address)
.019346	85 1a		sta $1a				sta 	zLTemp1
.019348	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01934a	85 1b		sta $1b				sta 	zLTemp1+1
.01934c	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01934e	85 1c		sta $1c				sta 	zLTemp1+2
.019350	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019352	85 1d		sta $1d				sta 	zLTemp1+3
.019354	a9 00		lda #$00			lda 	#0 							; clear target area
.019356	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019358	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01935a	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01935c	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01935e	68		pla				pla 								; restore bytes to copy
.01935f	da		phx				phx 								; save XY
.019360	5a		phy				phy
.019361	20 2f 96	jsr $01962f			jsr 	MemRead 					; read the bytes in
.019364	7a		ply				ply 								; restore and exit
.019365	fa		plx				plx
.019366	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/mod.asm

.019367					Unary_Mod:
.019367	20 8f 93	jsr $01938f			jsr 	_UMParameter 				; first parameter
.01936a	20 b5 96	jsr $0196b5			jsr 	CheckNextComma
.01936d	da		phx				phx 								; second parameter
.01936e	e8		inx				inx
.01936f	e8		inx				inx
.019370	e8		inx				inx
.019371	e8		inx				inx
.019372	e8		inx				inx
.019373	e8		inx				inx
.019374	20 8f 93	jsr $01938f			jsr 	_UMParameter
.019377	fa		plx				plx
.019378	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen
.01937b	20 8c 9b	jsr $019b8c			jsr 	DivInteger32 				; divide
.01937e	a5 1a		lda $1a				lda 	zLTemp1+0 					; modulus is in zLTemp, copy it.
.019380	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019382	a5 1b		lda $1b				lda 	zLTemp1+1
.019384	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019386	a5 1c		lda $1c				lda 	zLTemp1+2
.019388	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01938a	a5 1d		lda $1d				lda 	zLTemp1+3
.01938c	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01938e	60		rts				rts
.01938f					_UMParameter:
.01938f	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 			; get value
.019392	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; absolute value
.019394	10 03		bpl $019399			bpl 	_UMNotSigned
.019396	20 13 9c	jsr $019c13			jsr 	IntegerNegateAlways
.019399					_UMNotSigned:
.019399	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/usr.asm

.01939a					Unary_Usr:
.01939a	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; numeric parameter
.01939d	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.0193a0	da		phx				phx 								; save XY
.0193a1	5a		phy				phy
.0193a2	ea		nop				nop
.0193a3	22 0c 03 00	jsl $00030c			jsl 	UserVector
.0193a7	7a		ply				ply 								; and exit
.0193a8	fa		plx				plx
.0193a9	60		rts				rts
.0193aa					USRDefault:
.0193aa	20 57 85	jsr $018557			jsr ERR_Handler
>0193ad	4e 6f 20 55 53 52 20 76			.text "No USR vector.",0
>0193b5	65 63 74 6f 72 2e 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/val.asm

.0193bc					Unary_Val:
.0193bc	20 90 90	jsr $019090			jsr 	EvaluateStringX 			; get string
.0193bf	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; check right bracket.
.0193c2	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; put string address +1 into zGenPtr
.0193c4	85 1e		sta $1e				sta 	zGenPtr
.0193c6	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0193c8	85 1f		sta $1f				sta 	zGenPtr+1
.0193ca	5a		phy				phy
.0193cb	a0 00		ldy #$00			ldy 	#0 							; get count of characters.
.0193cd	b1 1e		lda ($1e),y			lda 	(zGenPtr),y  				; if zero, it's bad obviously :)
.0193cf	f0 54		beq $019425			beq 	_UVBadNumber
.0193d1	48		pha				pha 								; save length.
.0193d2	1a		inc a				inc 	a 							; one for the length, one for the terminator
.0193d3	1a		inc a				inc 	a
.0193d4	20 ed 96	jsr $0196ed			jsr 	AllocateTempString
.0193d7	c8		iny				iny 								; move to the next.
.0193d8	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get character
.0193da	49 2d		eor #$2d			eor 	#"-"						; zero if minus sign
.0193dc	8d a0 03	sta $03a0			sta 	ValSign
.0193df	d0 04		bne $0193e5			bne 	_UVNotMinus
.0193e1	c8		iny				iny 								; skip over it.
.0193e2	68		pla				pla 								; decrement character count.
.0193e3	3a		dec a				dec 	a
.0193e4	48		pha				pha
.0193e5					_UVNotMinus:
.0193e5	68		pla				pla 								; this is the count.
.0193e6	48		pha		_UVCopy:pha									; copy into new temp string which is ASCIIZ
.0193e7	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.0193e9	c8		iny				iny
.0193ea	20 18 97	jsr $019718			jsr 	WriteTempString
.0193ed	68		pla				pla
.0193ee	3a		dec a				dec 	a
.0193ef	d0 f5		bne $0193e6			bne 	_UVCopy
.0193f1	20 18 97	jsr $019718			jsr 	WriteTempString 			; make it ASCIIZ
.0193f4	18		clc				clc
.0193f5	a5 20		lda $20				lda 	zTempStr 					; tempstring +1 => genptr
.0193f7	69 01		adc #$01			adc 	#1
.0193f9	85 1e		sta $1e				sta 	zGenPtr
.0193fb	a5 21		lda $21				lda 	zTempStr+1
.0193fd	69 00		adc #$00			adc 	#0
.0193ff	85 1f		sta $1f				sta 	zGenPtr+1
.019401	18		clc				clc
.019402	20 e5 9c	jsr $019ce5			jsr 	IntFromString 				; first bit.
.019405	b0 1e		bcs $019425			bcs 	_UVBadNumber
.019407	20 63 a2	jsr $01a263			jsr 	FPFromString				; try for a float part.
.01940a	ad a0 03	lda $03a0			lda 	ValSign 					; was it negative
.01940d	d0 10		bne $01941f			bne 	_UVNotNegative
.01940f	b5 85		lda $85,x			lda 	XS_Type,x 					; check if integer
.019411	4a		lsr a				lsr 	a
.019412	b0 08		bcs $01941c			bcs 	_UVInteger
.019414	b5 85		lda $85,x			lda 	XS_Type,x 					; set sign bit
.019416	09 80		ora #$80			ora 	#$80
.019418	95 85		sta $85,x			sta 	XS_Type,x
.01941a	80 03		bra $01941f			bra 	_UVNotNegative
.01941c					_UVInteger:
.01941c	20 13 9c	jsr $019c13			jsr 	IntegerNegateAlways 		; sign it.
.01941f					_UVNotNegative:
.01941f	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; used everything
.019421	d0 02		bne $019425			bne 	_UVBadNumber
.019423	7a		ply				ply
.019424	60		rts				rts
.019425					_UVBadNumber:
.019425	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/str.asm

.019428					Unary_Str:
.019428	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; numeric parameter
.01942b	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.01942e	a9 00		lda #$00			lda 	#0 							; reset buffer index
.019430	8d 14 03	sta $0314			sta 	NumBufX
.019433	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.019435	4a		lsr a				lsr 	a
.019436	b0 05		bcs $01943d			bcs 	_USInt 						; if msb set do as integer
.019438	20 a8 a1	jsr $01a1a8			jsr 	FPToString 					; call fp to str otherwise
.01943b	80 03		bra $019440			bra 	_USDuplicate
.01943d	20 30 9c	jsr $019c30	_USInt:	jsr 	IntToString
.019440					_USDuplicate:
.019440	ad 14 03	lda $0314			lda 	NumBufX 					; chars in buffer
.019443	1a		inc a				inc 	a 							; one more for length
.019444	20 ed 96	jsr $0196ed			jsr 	AllocateTempString 			; allocate space for it.
.019447	5a		phy				phy 								; save Y
.019448	a0 00		ldy #$00			ldy 	#0 							; start copying
.01944a	b9 15 03	lda $0315,y	_USCopy:lda 	Num_Buffer,y 				; get and write
.01944d	20 18 97	jsr $019718			jsr 	WriteTempString
.019450	c8		iny				iny
.019451	cc 14 03	cpy $0314			cpy 	NumBufX 					; done the lot
.019454	d0 f4		bne $01944a			bne 	_USCopy
.019456	7a		ply				ply 								; restore Y
.019457	4c 22 96	jmp $019622			jmp 	UnaryReturnTempStr 			; return new temporary string.

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/asc.asm

.01945a					Unary_Asc:
.01945a	20 90 90	jsr $019090			jsr 	EvaluateStringX 			; string parameter
.01945d	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.019460	5a		phy				phy 								; get the string length
.019461	a0 00		ldy #$00			ldy 	#0
.019463	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.019465	f0 07		beq $01946e			beq 	_UAIllegal 					; must be at least one character
.019467	c8		iny				iny
.019468	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; read it.
.01946a	7a		ply				ply
.01946b	4c e8 92	jmp $0192e8			jmp 	UnarySetAInteger
.01946e					_UAIllegal:
.01946e	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/len.asm

.019471					Unary_Len:
.019471	20 90 90	jsr $019090			jsr 	EvaluateStringX 			; string parameter
.019474	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.019477	5a		phy				phy 								; get the string length
.019478	a0 00		ldy #$00			ldy 	#0
.01947a	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.01947c	7a		ply				ply
.01947d	4c e8 92	jmp $0192e8			jmp 	UnarySetAInteger

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/slice.asm

.019480					Unary_Mid:
.019480	20 90 90	jsr $019090			jsr 	EvaluateStringX 				; get string.
.019483	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.019485	48		pha				pha
.019486	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019488	48		pha				pha
.019489	20 b5 96	jsr $0196b5			jsr 	CheckNextComma 					; skip comma
.01948c	20 15 95	jsr $019515			jsr 	SLIByteParameter 				; get a byte parameter (start)
.01948f	48		pha				pha 									; and push it.
.019490	20 b5 96	jsr $0196b5			jsr 	CheckNextComma 					; skip comma
.019493	20 15 95	jsr $019515			jsr 	SLIByteParameter 				; get a byte parameter (#chars)
.019496	48		pha				pha 									; and push it.
.019497	80 41		bra $0194da			bra 	SLIProcess
.019499					Unary_Left:
.019499	20 90 90	jsr $019090			jsr 	EvaluateStringX 				; get string.
.01949c	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.01949e	48		pha				pha
.01949f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0194a1	48		pha				pha
.0194a2	a9 01		lda #$01			lda 	#1 								; push start position (1)
.0194a4	48		pha				pha
.0194a5	20 b5 96	jsr $0196b5			jsr 	CheckNextComma 					; skip comma
.0194a8	20 15 95	jsr $019515			jsr 	SLIByteParameter 				; get a byte parameter (# chars)
.0194ab	48		pha				pha 									; and push it.
.0194ac	80 2c		bra $0194da			bra 	SLIProcess
.0194ae					Unary_Right:
.0194ae	20 90 90	jsr $019090			jsr 	EvaluateStringX 				; get string.
.0194b1	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.0194b3	48		pha				pha
.0194b4	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0194b6	48		pha				pha
.0194b7	da		phx				phx 									; get the string length and push on stack.
.0194b8	a2 00		ldx #$00			ldx 	#0
.0194ba	a1 1e		lda ($1e,x)			lda		(zGenPtr,x)
.0194bc	fa		plx				plx
.0194bd	48		pha				pha
.0194be	20 b5 96	jsr $0196b5			jsr 	CheckNextComma 					; skip comma
.0194c1	20 15 95	jsr $019515			jsr 	SLIByteParameter 				; get a byte parameter.
.0194c4	8d 9e 03	sta $039e			sta 	SignCount 						; save in temporary.
.0194c7	68		pla				pla 									; restore string length.
.0194c8	1a		inc a				inc 	a 								; we add one. length 5, right 2, we start at 4.
.0194c9	38		sec				sec
.0194ca	ed 9e 03	sbc $039e			sbc 	SignCount 						; subtract characters needed, gives start position.
.0194cd	f0 02		beq $0194d1			beq 	_URStart 						; if <= 0 start from 1.
.0194cf	10 02		bpl $0194d3			bpl 	_UROkay
.0194d1					_URStart:
.0194d1	a9 01		lda #$01			lda 	#1
.0194d3					_UROkay:
.0194d3	48		pha				pha 									; push start
.0194d4	ad 9e 03	lda $039e			lda 	SignCount 						; push count of characters
.0194d7	48		pha				pha
.0194d8	80 00		bra $0194da			bra 	SLIProcess
.0194da					SLIProcess:
.0194da	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 				; closing right bracket.
.0194dd	68		pla				pla
.0194de	8d a2 03	sta $03a2			sta 	SliceCount 						; count in signcount
.0194e1	1a		inc a				inc 	a 								; allocate +1 for it.
.0194e2	20 ed 96	jsr $0196ed			jsr 	AllocateTempString
.0194e5	68		pla				pla 									; pop start number off stack.
.0194e6	f0 3b		beq $019523			beq 	SLIError 						; exit if start = 0
.0194e8	8d a1 03	sta $03a1			sta 	SliceStart
.0194eb	68		pla				pla  									; pop string address.
.0194ec	85 1f		sta $1f				sta 	zGenPtr+1
.0194ee	68		pla				pla
.0194ef	85 1e		sta $1e				sta 	zGenPtr
.0194f1	da		phx				phx
.0194f2	5a		phy				phy
.0194f3	a2 00		ldx #$00			ldx 	#0 								; point to string length.
.0194f5	ac a1 03	ldy $03a1			ldy 	SliceStart 						; start of the string (+1 for count)
.0194f8					_SLICopy:
.0194f8	ad a2 03	lda $03a2			lda 	SliceCount 						; done count characters
.0194fb	f0 12		beq $01950f			beq 	_SLIExit
.0194fd	ce a2 03	dec $03a2			dec 	SliceCount
.019500	98		tya				tya 									; index of character
.019501	c1 1e		cmp ($1e,x)			cmp 	(zGenPtr,x)						; compare against length
.019503	f0 02		beq $019507			beq 	_SLIOk 							; if equal, okay.
.019505	b0 08		bcs $01950f			bcs 	_SLIExit 						; if past end, then exit.
.019507	b1 1e		lda ($1e),y	_SLIOk:	lda 	(zGenPtr),y 					; copy one character
.019509	c8		iny				iny
.01950a	20 18 97	jsr $019718			jsr 	WriteTempString
.01950d	80 e9		bra $0194f8			bra 	_SLICopy 						; go round till copied characters
.01950f					_SLIExit:
.01950f	7a		ply				ply 									; restore YX
.019510	fa		plx				plx
.019511	4c 22 96	jmp $019622			jmp 	UnaryReturnTempStr 				; return new temporary string.
.019514	ea		nop				nop
.019515					SLIByteParameter:
.019515	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 				; get integer
.019518	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 				; check high bytes zero
.01951a	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.01951c	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01951e	d0 03		bne $019523			bne 	SLIError
.019520	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019522	60		rts				rts
.019523					SLIError:
.019523	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/hex.asm

.019526					Unary_Hex:
.019526	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 			; numeric parameter
.019529	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.01952c	a9 09		lda #$09			lda 	#9 							; allocate 9 bytes (8 chars + length)
.01952e	20 ed 96	jsr $0196ed			jsr 	AllocateTempString			; allocate string space
.019531	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; do each byte in turn.
.019533	20 57 95	jsr $019557			jsr 	_UHConvert
.019536	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019538	20 57 95	jsr $019557			jsr 	_UHConvert
.01953b	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01953d	20 57 95	jsr $019557			jsr 	_UHConvert
.019540	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019542	20 57 95	jsr $019557			jsr 	_UHConvert
.019545	5a		phy				phy 								; get length of new string
.019546	a0 00		ldy #$00			ldy 	#0
.019548	b1 20		lda ($20),y			lda 	(zTempStr),y
.01954a	7a		ply				ply
.01954b	c9 00		cmp #$00			cmp 	#0
.01954d	d0 05		bne $019554			bne 	_UHExit 					; if it was non zero okay
.01954f	a9 30		lda #$30			lda 	#"0" 						; empty, output one zero.
.019551	20 18 97	jsr $019718			jsr 	WriteTempString
.019554					_UHExit:
.019554	4c 22 96	jmp $019622			jmp 	UnaryReturnTempStr 			; return new temporary string.
.019557					_UHConvert:
.019557	48		pha				pha
.019558	4a		lsr a				lsr 	a 							; do MSB
.019559	4a		lsr a				lsr 	a
.01955a	4a		lsr a				lsr 	a
.01955b	4a		lsr a				lsr 	a
.01955c	20 60 95	jsr $019560			jsr 	_UHNibble
.01955f	68		pla				pla 								; do LSB
.019560					_UHNibble:
.019560	29 0f		and #$0f			and 	#15 						; get nibble
.019562	d0 0c		bne $019570			bne 	_UHNonZero
.019564	5a		phy				phy									; get the length
.019565	a0 00		ldy #$00			ldy 	#0
.019567	b1 20		lda ($20),y			lda 	(zTempStr),y
.019569	7a		ply				ply
.01956a	c9 00		cmp #$00			cmp 	#0 							; suppress leading zeros.
.01956c	f0 0d		beq $01957b			beq 	_UHExit2
.01956e	a9 00		lda #$00			lda 	#0
.019570					_UHNonZero:
.019570	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.019572	90 02		bcc $019576			bcc 	_UHDigit
.019574	69 06		adc #$06			adc 	#7-1
.019576					_UHDigit:
.019576	69 30		adc #$30			adc 	#48
.019578	20 18 97	jsr $019718			jsr 	WriteTempString				; output.
.01957b					_UHExit2:
.01957b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/dec.asm

.01957c					Unary_Dec:
.01957c	20 90 90	jsr $019090			jsr 	EvaluateStringX 			; string parameter
.01957f	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.019582	5a		phy				phy
.019583	a0 00		ldy #$00			ldy 	#0 							; get length of hex string.
.019585	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.019587	f0 41		beq $0195ca			beq 	_UDFail 					; must fail if zero.
.019589	8d 9e 03	sta $039e			sta 	SignCount 					; use SignCount as a counter
.01958c	a9 00		lda #$00			lda 	#0 							; set result to zero integer.
.01958e	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019590	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019592	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019594	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019596	a9 01		lda #$01			lda 	#1
.019598	95 85		sta $85,x			sta 	XS_Type,x
.01959a					_UDConvertLoop:
.01959a	5a		phy				phy 								; shift mantissa left 4
.01959b	a0 04		ldy #$04			ldy 	#4
.01959d					_UDShift:
.01959d	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.01959f	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.0195a1	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.0195a3	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.0195a5	88		dey				dey
.0195a6	d0 f5		bne $01959d			bne 	_UDShift
.0195a8	7a		ply				ply
.0195a9	c8		iny				iny 								; next character
.0195aa	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; fetch it.
.0195ac	20 cd 95	jsr $0195cd			jsr 	ConvertUpper 				; convert to U/C
.0195af	c9 30		cmp #$30			cmp 	#"0"
.0195b1	90 17		bcc $0195ca			bcc 	_UDFail
.0195b3	c9 3a		cmp #$3a			cmp 	#"9"+1
.0195b5	90 06		bcc $0195bd			bcc 	_UDOkay
.0195b7	e9 37		sbc #$37			sbc 	#7+"0" 						; alpha fudge
.0195b9	c9 10		cmp #$10			cmp 	#16
.0195bb	b0 0d		bcs $0195ca			bcs 	_UDFail
.0195bd					_UDOkay:
.0195bd	29 0f		and #$0f			and 	#15 						; nibble only
.0195bf	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.0195c1	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0195c3	ce 9e 03	dec $039e			dec 	SignCount 					; do it for each character
.0195c6	d0 d2		bne $01959a			bne 	_UDConvertLoop
.0195c8	7a		ply				ply
.0195c9	60		rts				rts
.0195ca					_UDFail:
.0195ca	4c 46 85	jmp $018546			jmp 	BadParamError
.0195cd					ConvertUpper:
.0195cd	c9 61		cmp #$61			cmp 	#"a"
.0195cf	90 07		bcc $0195d8			bcc 	_CUExit
.0195d1	c9 7b		cmp #$7b			cmp 	#"z"+1
.0195d3	b0 03		bcs $0195d8			bcs 	_CUExit
.0195d5	38		sec				sec
.0195d6	e9 20		sbc #$20			sbc 	#32
.0195d8	60		rts		_CUExit:rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/chr.asm

.0195d9					Unary_Chr:
.0195d9	20 87 90	jsr $019087			jsr 	EvaluateIntegerX			; numeric parameter
.0195dc	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.0195df	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.0195e1	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0195e3	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0195e5	d0 0d		bne $0195f4			bne 	_UCChar
.0195e7	a9 01		lda #$01			lda 	#1 							; one character string
.0195e9	20 ed 96	jsr $0196ed			jsr 	AllocateTempString
.0195ec	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; get char# and write it.
.0195ee	20 18 97	jsr $019718			jsr 	WriteTempString
.0195f1	4c 22 96	jmp $019622			jmp 	UnaryReturnTempStr
.0195f4					_UCChar:
.0195f4	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/spc.asm

.0195f7					Unary_Spc:
.0195f7	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 			; numeric parameter
.0195fa	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; right bracket.
.0195fd	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.0195ff	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019601	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019603	d0 1a		bne $01961f			bne 	_USSize
.019605	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019607	c9 fe		cmp #$fe			cmp 	#maxString+1
.019609	b0 14		bcs $01961f			bcs 	_USSize
.01960b	48		pha				pha 								; save length
.01960c	1a		inc a				inc 	a 							; allocate one more.
.01960d	20 ed 96	jsr $0196ed			jsr 	AllocateTempString
.019610	68		pla				pla 								; get length
.019611	f0 0f		beq $019622			beq 	UnaryReturnTempStr 			; return the current temp string
.019613					_USLoop:
.019613	48		pha				pha
.019614	a9 20		lda #$20			lda 	#" "
.019616	20 18 97	jsr $019718			jsr 	WriteTempString
.019619	68		pla				pla
.01961a	3a		dec a				dec 	a
.01961b	d0 f6		bne $019613			bne 	_USLoop
.01961d	80 03		bra $019622			bra 	UnaryReturnTempStr
.01961f					_USSize:
.01961f	4c 46 85	jmp $018546			jmp 	BadParamError
.019622					UnaryReturnTempStr:
.019622	a5 20		lda $20				lda 	zTempStr 					; copy temp string addr -> mantissa
.019624	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019626	a5 21		lda $21				lda 	zTempStr+1
.019628	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01962a	a9 02		lda #$02			lda 	#2 							; set type to string
.01962c	95 85		sta $85,x			sta 	XS_Type,x
.01962e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/memory/65816.asm

.01962f					MemRead:
.01962f	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.019632	a0 00		ldy #$00			ldy 	#0 							; start from here
.019634	b7 1a		lda [$1a],y	_MLoop1:lda 	[zlTemp1],y 				; read the long address
.019636	95 80		sta $80,x			sta 	XS_Mantissa,x 				; copy into mantissa
.019638	c8		iny				iny 								; next to copy
.019639	e8		inx				inx
.01963a	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.01963d	d0 f5		bne $019634			bne 	_MLoop1
.01963f	60		rts				rts
.019640					MemWrite:
.019640	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.019643	a0 00		ldy #$00			ldy 	#0 							; start from here
.019645	b5 80		lda $80,x	_MLoop1:lda 	XS_Mantissa,x 				; read mantisssa
.019647	97 1a		sta [$1a],y			sta 	[zlTemp1],y 				; write it out
.019649	c8		iny				iny 								; next to copy
.01964a	e8		inx				inx
.01964b	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.01964e	d0 f5		bne $019645			bne 	_MLoop1
.019650	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/programend.asm

.019651					UpdateProgramEnd:
.019651	a9 00		lda #$00			lda 	#BasicProgram & $FF
.019653	85 16		sta $16				sta 	zCodePtr+0
.019655	a9 10		lda #$10			lda 	#BasicProgram >> 8
.019657	85 17		sta $17				sta 	zCodePtr+1
.019659	a9 00		lda #$00			lda 	#0
.01965b	85 18		sta $18				sta 	zCodePtr+2
.01965d	85 19		sta $19				sta 	zCodePtr+3
.01965f	a0 03		ldy #$03			ldy 	#3
.019661					_UPDLoop:
.019661	a0 00		ldy #$00			ldy 	#0
.019663	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019665	c9 00		cmp #$00			cmp 	#0 							; end if offset is zero.
.019667	f0 0f		beq $019678			beq 	_UPDFoundEnd
.019669	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01966b	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.01966d	18		clc				clc
.01966e	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.019670	85 16		sta $16				sta 	zCodePtr
.019672	90 02		bcc $019676			bcc 	_SNLNoCarry
.019674	e6 17		inc $17				inc 	zCodePtr+1
.019676					_SNLNoCarry:
.019676	80 e9		bra $019661			bra 	_UPDLoop
.019678					_UPDFoundEnd:
.019678	18		clc				clc 								; end of program 2 on.
.019679	a5 16		lda $16				lda 	zCodePtr
.01967b	69 02		adc #$02			adc 	#2
.01967d	8d 04 03	sta $0304			sta 	endOfProgram
.019680	a5 17		lda $17				lda 	zCodePtr+1
.019682	69 00		adc #$00			adc 	#0
.019684	8d 05 03	sta $0305			sta 	endOfProgram+1
.019687	a5 18		lda $18				lda 	zCodePtr+2
.019689	69 00		adc #$00			adc		#0
.01968b	8d 06 03	sta $0306			sta 	endOfProgram+2
.01968e	a5 19		lda $19				lda 	zCodePtr+3
.019690	69 00		adc #$00			adc 	#0
.019692	8d 07 03	sta $0307			sta 	endOfProgram+3
.019695	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.asm

.019696					CheckNextToken:
.019696	d7 16		cmp [$16],y			cmp 	[zCodePtr],y
.019698	d0 02		bne $01969c			bne 	CTFail 						; no, then fail
.01969a	c8		iny				iny
.01969b	60		rts				rts
.01969c					CTFail:
.01969c	20 57 85	jsr $018557			jsr ERR_Handler
>01969f	4d 69 73 73 69 6e 67 20			.text "Missing token",0
>0196a7	74 6f 6b 65 6e 00
.0196ad					CheckNextRParen:
.0196ad	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0196af	c9 be		cmp #$be			cmp 	#token_rparen
.0196b1	d0 e9		bne $01969c			bne 	CTFail
.0196b3	c8		iny				iny
.0196b4	60		rts				rts
.0196b5					CheckNextComma:
.0196b5	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0196b7	c9 bf		cmp #$bf			cmp 	#token_comma
.0196b9	d0 e1		bne $01969c			bne 	CTFail
.0196bb	c8		iny				iny
.0196bc	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/concrete.asm

.0196bd					StringConcrete:
.0196bd	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; save source to zTemp1
.0196bf	85 10		sta $10				sta 	zTemp1
.0196c1	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0196c3	85 11		sta $11				sta 	zTemp1+1
.0196c5	a0 00		ldy #$00			ldy 	#0 							; subtract the length+1 (clc) of the string.
.0196c7	18		clc				clc 								; from the string pointer
.0196c8	ad 00 03	lda $0300			lda 	StringPtr 					; and put in zTemp2 as well
.0196cb	f1 10		sbc ($10),y			sbc 	(zTemp1),y
.0196cd	8d 00 03	sta $0300			sta 	StringPtr
.0196d0	85 12		sta $12				sta 	zTemp2
.0196d2	ad 01 03	lda $0301			lda 	StringPtr+1
.0196d5	e9 00		sbc #$00			sbc 	#0
.0196d7	8d 01 03	sta $0301			sta 	StringPtr+1
.0196da	85 13		sta $13				sta 	zTemp2+1
.0196dc	b1 10		lda ($10),y			lda 	(zTemp1),y 					; length add one for count
.0196de	1a		inc a				inc 	a
.0196df	aa		tax				tax
.0196e0	b1 10		lda ($10),y	_SCCopy:lda 	(zTemp1),y 					; copy whole thing including length
.0196e2	91 12		sta ($12),y			sta 	(zTemp2),y
.0196e4	c8		iny				iny
.0196e5	ca		dex				dex
.0196e6	d0 f8		bne $0196e0			bne 	_SCCopy
.0196e8	a5 13		lda $13				lda 	zTemp2+1 					; return concrete string in AX
.0196ea	a6 12		ldx $12				ldx 	zTemp2
.0196ec	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/tempalloc.asm

.0196ed					AllocateTempString:
.0196ed	48		pha				pha 								; save required count.
.0196ee	a5 21		lda $21				lda 	zTempStr+1 					; check if initialised yet ?
.0196f0	d0 0b		bne $0196fd			bne 	_ATSInitialised
.0196f2	ad 00 03	lda $0300			lda 	StringPtr 					; set temporary string ptr 1 page below available
.0196f5	85 20		sta $20				sta 	zTempStr					; space, this is for strings to be concreted.
.0196f7	ad 01 03	lda $0301			lda 	StringPtr+1
.0196fa	3a		dec a				dec 	a
.0196fb	85 21		sta $21				sta 	zTempStr+1
.0196fd					_ATSInitialised:
.0196fd	68		pla				pla 								; get required count back.
.0196fe	49 ff		eor #$ff			eor 	#$FF 						; negate 2's complement.
.019700	1a		inc a				inc 	a
.019701	18		clc				clc
.019702	65 20		adc $20				adc 	zTempStr 					; "add" to the temp string pointer
.019704	85 20		sta $20				sta 	zTempStr
.019706	a9 ff		lda #$ff			lda 	#$FF
.019708	65 21		adc $21				adc 	zTempStr+1
.01970a	85 21		sta $21				sta 	zTempStr+1
.01970c	a9 00		lda #$00			lda 	#0 							; clear temp string.
.01970e	5a		phy				phy
.01970f	a8		tay				tay
.019710	91 20		sta ($20),y			sta 	(zTempStr),y
.019712	7a		ply				ply
.019713	1a		inc a				inc 	a 							; reset the write index.
.019714	8d 9f 03	sta $039f			sta 	TempStringWriteIndex
.019717	60		rts				rts
.019718					WriteTempString:
.019718	5a		phy				phy 								; save Y
.019719	ac 9f 03	ldy $039f			ldy 	TempStringWriteIndex	 	; write position.
.01971c	91 20		sta ($20),y			sta 	(zTempStr),y 				; write character out.
.01971e	ee 9f 03	inc $039f			inc 	TempStringWriteIndex 		; increment the write position.
.019721	98		tya				tya 								; unchanged Y is now length
.019722	a0 00		ldy #$00			ldy 	#0
.019724	91 20		sta ($20),y			sta 	(zTempStr),y
.019726	7a		ply				ply 								; restore Y and exit
.019727	60		rts				rts
.019728					CreateTempStringCopy:
.019728	da		phx				phx 								; save X
.019729	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01972b	3a		dec a				dec 	a 							; we need one more than actual length for temp str
.01972c	20 ed 96	jsr $0196ed			jsr 	AllocateTempString 			; allocate memory for temporary string.
.01972f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019731	c8		iny				iny
.019732	3a		dec a				dec 	a 							; make the actual length in charactes
.019733	3a		dec a				dec 	a
.019734	a2 00		ldx #$00			ldx 	#0 							; set that as the length of the string.
.019736	81 20		sta ($20,x)			sta 	(zTempStr,x)
.019738	85 1a		sta $1a				sta 	zLTemp1 					; that's used as a count.
.01973a	09 00		ora #$00			ora 	#0 							; if zero already, exit
.01973c	f0 0e		beq $01974c			beq 	_CTSCExit
.01973e					_CTSCLoop:
.01973e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019740	c8		iny				iny
.019741	5a		phy				phy 								; save in Y
.019742	e8		inx				inx 								; bump index
.019743	da		phx				phx 								; index into Y
.019744	7a		ply				ply
.019745	91 20		sta ($20),y			sta 	(zTempStr),y 				; save at index
.019747	7a		ply				ply 								; restore Y
.019748	c6 1a		dec $1a				dec 	zLTemp1 					; do for each character
.01974a	d0 f2		bne $01973e			bne 	_CTSCLoop
.01974c					_CTSCExit:
.01974c	fa		plx				plx 								; restore X
.01974d	60		rts				rts 								; exit

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/variables.asm

.01974e					VariableFind:
.01974e	20 b9 97	jsr $0197b9			jsr 	VariableExtract 		; find out all about it ....
.019751	20 52 9a	jsr $019a52			jsr 	VariableLocate 			; does it already exist ?
.019754	b0 03		bcs $019759			bcs 	_VFExists 				; if so, use that.
.019756	20 45 98	jsr $019845			jsr 	VariableCreate 			; otherwise create it.
.019759					_VFExists:
.019759	a5 24		lda $24				lda 	zVarType 				; is it still an array ?
.01975b	29 01		and #$01			and 	#1
.01975d	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.01975f	d0 28		bne $019789			bne 	_VFSingleElement
.019761					_VFNextIndex:
.019761	a5 22		lda $22				lda 	zVarDataPtr 			; push the data ptr and type on the stack.
.019763	48		pha				pha
.019764	a5 23		lda $23				lda 	zVarDataPtr+1
.019766	48		pha				pha
.019767	a5 24		lda $24				lda 	zVarType
.019769	48		pha				pha
.01976a	20 87 90	jsr $019087			jsr 	EvaluateIntegerX 		; calculate the index.
.01976d	68		pla				pla 							; restore and index.
.01976e	85 24		sta $24				sta 	zVarType
.019770	68		pla				pla
.019771	85 23		sta $23				sta 	zVarDataPtr+1
.019773	68		pla				pla
.019774	85 22		sta $22				sta 	zVarDataPtr
.019776	20 d0 98	jsr $0198d0			jsr 	ArrayIndexFollow 		; do the index.
.019779	a5 24		lda $24				lda 	zVarType 				; is it still an array ??
.01977b	29 01		and #$01			and 	#1
.01977d	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.01977f	d0 05		bne $019786			bne 	_VFArrayDone 			; if so then exit.
.019781	20 b5 96	jsr $0196b5			jsr 	CheckNextComma 			; comma should follow
.019784	80 db		bra $019761			bra 	_VFNextIndex
.019786					_VFArrayDone:
.019786	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 		; check closing right bracket.
.019789					_VFSingleElement:
.019789	60		rts				rts
.01978a					VariableClear:
.01978a	48		pha				pha 							; save registers
.01978b	da		phx				phx
.01978c	a2 00		ldx #$00			ldx 	#0 						; clear out the hash table.
.01978e	8a		txa				txa
.01978f	9d 35 03	sta $0335,x	_VCLoop:sta 	HashTableBase,x
.019792	e8		inx				inx
.019793	e0 60		cpx #$60			cpx 	#HashTableEnd-HashTableBase
.019795	d0 f8		bne $01978f			bne 	_VCLoop
.019797	a9 00		lda #$00			lda 	#VariableMemory & $FF
.019799	8d 02 03	sta $0302			sta 	VarMemPtr
.01979c	a9 30		lda #$30			lda 	#VariableMemory >> 8
.01979e	8d 03 03	sta $0303			sta 	VarMemPtr+1
.0197a1	fa		plx				plx 							; restore registers
.0197a2	68		pla				pla
.0197a3	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/extract.asm

.0197a4					VariableNameError:
.0197a4	20 57 85	jsr $018557			jsr ERR_Handler
>0197a7	42 61 64 20 56 61 72 69			.text "Bad Variable Name",0
>0197af	61 62 6c 65 20 4e 61 6d 65 00
.0197b9					VariableExtract:
.0197b9	da		phx				phx 							; save X.
.0197ba	a9 ba		lda #$ba			lda 	#token_hashlParen  		; set the type to #( e.g. real array.
.0197bc	8d 95 03	sta $0395			sta 	Var_Type
.0197bf	8d 96 03	sta $0396			sta 	Var_Hash 				; we initialise the hash with this. It doesn't matter
.0197c2	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0197c4	c9 00		cmp #$00			cmp 	#0 						; first one must be A-Z
.0197c6	f0 dc		beq $0197a4			beq 	VariableNameError
.0197c8	c9 1b		cmp #$1b			cmp 	#26+1
.0197ca	b0 d8		bcs $0197a4			bcs 	VariableNameError
.0197cc	a2 ff		ldx #$ff			ldx 	#255 					; now copy it into the variable buffer.
.0197ce					_VECopyBuffer:
.0197ce	e8		inx				inx
.0197cf	e0 1f		cpx #$1f			cpx 	#31 					; too long
.0197d1	f0 d1		beq $0197a4			beq 	VariableNameError
.0197d3	9d 15 03	sta $0315,x			sta 	Var_Buffer,x 			; save character
.0197d6	18		clc				clc  							; update the hash value for it.
.0197d7	6d 96 03	adc $0396			adc 	Var_Hash
.0197da	8d 96 03	sta $0396			sta 	Var_Hash
.0197dd	c8		iny				iny
.0197de	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0197e0	c9 00		cmp #$00			cmp 	#0 						; zero or token, end of variable
.0197e2	f0 0e		beq $0197f2			beq 	_VECopyEnd
.0197e4	30 0c		bmi $0197f2			bmi 	_VECopyEnd
.0197e6	c9 1b		cmp #$1b			cmp 	#26+1 					; A-Z continue copying
.0197e8	90 e4		bcc $0197ce			bcc 	_VECopyBuffer
.0197ea	c9 30		cmp #$30			cmp 	#"0" 					; 0-9 copy as well.
.0197ec	90 04		bcc $0197f2			bcc 	_VECopyEnd
.0197ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.0197f0	90 dc		bcc $0197ce			bcc 	_VECopyBuffer
.0197f2					_VECopyEnd:
.0197f2	c8		iny				iny
.0197f3	c9 b7		cmp #$b7			cmp 	#token_Dollar 			; first type token.
.0197f5	90 04		bcc $0197fb			bcc 	_VEDefaultRequired
.0197f7	c9 bd		cmp #$bd			cmp 	#token_PercentLParen+1	; last type token.
.0197f9	90 0b		bcc $019806			bcc 	_VEHaveType
.0197fb					_VEDefaultRequired:
.0197fb	c9 bd		cmp #$bd			cmp 	#token_LParen 			; if it ends in ( then use the real array
.0197fd	f0 04		beq $019803			beq 	_VESetType 				; default set above.
.0197ff	ce 95 03	dec $0395			dec 	Var_Type 				; this changes that default to the variable default
.019802	88		dey				dey
.019803					_VESetType:
.019803	ad 95 03	lda $0395			lda 	Var_Type 				; get type ....
.019806					_VEHaveType:
.019806	8d 95 03	sta $0395			sta 	Var_Type 				; save as type.
.019809	bd 15 03	lda $0315,x			lda 	Var_Buffer,x 			; set bit 7 of name, marks the end.
.01980c	09 80		ora #$80			ora 	#$80
.01980e	9d 15 03	sta $0315,x			sta 	Var_Buffer,x
.019811	e8		inx				inx 							; offset 3 => length 4.
.019812	8e 97 03	stx $0397			stx 	Var_Length 				; save length of variable name.
.019815	ad 95 03	lda $0395			lda 	Var_Type 				; get offset of var type from first type token
.019818	38		sec				sec
.019819	e9 b7		sbc #$b7			sbc 	#token_Dollar
.01981b	0a		asl a				asl 	a 						; multiply by 16. This requires HashTableSize
.01981c	0a		asl a				asl 	a 						; in data.asm to be 8 (8 sets of links,2 bytes each)
.01981d	0a		asl a				asl 	a
.01981e	0a		asl a				asl 	a
.01981f	8d 98 03	sta $0398			sta 	Var_HashAddress
.019822	ad 96 03	lda $0396			lda 	Var_Hash 				; get the hash
.019825	29 07		and #$07			and 	#(HashTableSize-1) 		; force into range 0-tableSize-1
.019827	0a		asl a				asl 	a 						; double it (2 bytes per entry) & clears carry
.019828	6d 98 03	adc $0398			adc 	Var_HashAddress 		; add table offset.
.01982b	69 35		adc #$35			adc 	#HashTableBase & $FF 	; now the low byte of the actual table address
.01982d	8d 98 03	sta $0398			sta 	Var_HashAddress
.019830	a2 05		ldx #$05			ldx 	#5 						; hash is 5 bytes (real)
.019832	ad 95 03	lda $0395			lda 	Var_Type
.019835	c9 b9		cmp #$b9			cmp 	#token_Hash
.019837	f0 07		beq $019840			beq 	_VEHaveSize
.019839	ca		dex				dex
.01983a	c9 bb		cmp #$bb			cmp 	#token_Percent 			; percent is 4 bytes (integer)
.01983c	f0 02		beq $019840			beq 	_VEHaveSize
.01983e	a2 02		ldx #$02			ldx 	#2 						; everything else is two.
.019840					_VEHaveSize:
.019840	8e 99 03	stx $0399			stx 	Var_DataSize
.019843	fa		plx				plx
.019844	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varcreate.asm

.019845					VariableCreate:
.019845	da		phx				phx
.019846	5a		phy				phy
.019847	ad 02 03	lda $0302			lda 	VarMemPtr 					; get address of next free into zTemp1
.01984a	85 10		sta $10				sta 	zTemp1
.01984c	ad 03 03	lda $0303			lda 	VarMemPtr+1
.01984f	85 11		sta $11				sta 	zTemp1+1
.019851	ad 99 03	lda $0399			lda 	Var_DataSize 				; bytes for the data bit
.019854	18		clc				clc
.019855	6d 97 03	adc $0397			adc 	Var_Length 					; add the length of the name
.019858	69 03		adc #$03			adc 	#3 							; 3 for the link and the hash.
.01985a	6d 02 03	adc $0302			adc 	VarMemPtr 					; add to variable memory pointer
.01985d	8d 02 03	sta $0302			sta 	VarMemPtr
.019860	90 03		bcc $019865			bcc 	_VCNoCarry
.019862	ee 03 03	inc $0303			inc 	VarMemPtr+1
.019865					_VCNoCarry:
.019865	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.019868	85 12		sta $12				sta 	zTemp2
.01986a	a9 03		lda #$03			lda 	#HashTableBase >> 8
.01986c	85 13		sta $13				sta 	zTemp2+1
.01986e	a0 00		ldy #$00			ldy 	#0 							; put current hash link in position.
.019870	b1 12		lda ($12),y			lda 	(zTemp2),y
.019872	91 10		sta ($10),y			sta 	(zTemp1),y
.019874	c8		iny				iny
.019875	b1 12		lda ($12),y			lda 	(zTemp2),y
.019877	91 10		sta ($10),y			sta 	(zTemp1),y
.019879	c8		iny				iny
.01987a	ad 96 03	lda $0396			lda 	Var_Hash 					; write the hash out.
.01987d	91 10		sta ($10),y			sta 	(zTemp1),y
.01987f	c8		iny				iny
.019880	a2 00		ldx #$00			ldx 	#0 							; copy the name out.
.019882					_VCCopyName:
.019882	bd 15 03	lda $0315,x			lda 	Var_Buffer,x
.019885	91 10		sta ($10),y			sta 	(zTemp1),y
.019887	e8		inx				inx
.019888	c8		iny				iny
.019889	ec 97 03	cpx $0397			cpx 	Var_Length
.01988c	d0 f4		bne $019882			bne 	_VCCopyName
.01988e	5a		phy				phy 								; save the data offset.
.01988f	ae 99 03	ldx $0399			ldx 	Var_DataSize 				; and write the data out.
.019892	a9 00		lda #$00			lda 	#0 							; which is all zeroes.
.019894					_VCClearData:
.019894	91 10		sta ($10),y			sta 	(zTemp1),y
.019896	c8		iny				iny
.019897	ca		dex				dex
.019898	d0 fa		bne $019894			bne 	_VCClearData
.01989a	68		pla				pla 								; offset to the data
.01989b	18		clc				clc
.01989c	65 10		adc $10				adc 	zTemp1 						; add to start and save as data pointer.
.01989e	85 22		sta $22				sta 	zVarDataPtr
.0198a0	a5 11		lda $11				lda 	zTemp1+1
.0198a2	69 00		adc #$00			adc 	#0
.0198a4	85 23		sta $23				sta 	zVarDataPtr+1
.0198a6	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.0198a9	85 24		sta $24				sta 	zVarType
.0198ab	a5 10		lda $10				lda 	zTemp1 						; fix hash link to point to new record
.0198ad	a0 00		ldy #$00			ldy 	#0
.0198af	91 12		sta ($12),y			sta 	(zTemp2),y
.0198b1	c8		iny				iny
.0198b2	a5 11		lda $11				lda 	zTemp1+1
.0198b4	91 12		sta ($12),y			sta 	(zTemp2),y
.0198b6	ad 95 03	lda $0395			lda 	Var_Type 					; array ? if so create the empty one.
.0198b9	29 01		and #$01			and 	#1
.0198bb	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.0198bd	d0 0e		bne $0198cd			bne 	_VCNotArray
.0198bf	a2 00		ldx #$00			ldx 	#0 							; call recursive array creator
.0198c1	20 67 99	jsr $019967			jsr 	ArrayCreate
.0198c4	5a		phy				phy 								; save YA at zVarDataPtr
.0198c5	a0 00		ldy #$00			ldy 	#0
.0198c7	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.0198c9	c8		iny				iny
.0198ca	68		pla				pla
.0198cb	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.0198cd					_VCNotArray:
.0198cd	7a		ply				ply
.0198ce	fa		plx				plx
.0198cf	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arrayidx.asm

.0198d0					ArrayIndexFollow:
.0198d0	5a		phy				phy
.0198d1	a0 00		ldy #$00			ldy 	#0 							; make zVarDataPtr point to the array.
.0198d3	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; e.g. it points to itself.
.0198d5	48		pha				pha
.0198d6	c8		iny				iny
.0198d7	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198d9	85 23		sta $23				sta 	zVarDataPtr+1
.0198db	68		pla				pla
.0198dc	85 22		sta $22				sta 	zVarDataPtr
.0198de	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; MSB of 16 bit integer and bytes 2&3
.0198e0	29 80		and #$80			and 	#$80 						; must be zero.
.0198e2	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.0198e4	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.0198e6	d0 59		bne $019941			bne 	_AIFError
.0198e8	a0 00		ldy #$00			ldy 	#0 							; calculate size - current - 1
.0198ea	18		clc				clc
.0198eb	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198ed	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.0198ef	c8		iny				iny
.0198f0	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.0198f2	08		php				php 								; clear bit 7 retaining borrow.
.0198f3	29 7f		and #$7f			and 	#$7F
.0198f5	28		plp				plp
.0198f6	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.0198f8	90 47		bcc $019941			bcc 	_AIFError 					; eror if size-current < 0
.0198fa	b5 80		lda $80,x			lda  	XS_Mantissa+0,x 			; copy and double the index
.0198fc	0a		asl a				asl 	a 							; (e.g. index * 2)
.0198fd	85 10		sta $10				sta 	zTemp1
.0198ff	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019901	2a		rol a				rol 	a
.019902	85 11		sta $11				sta 	zTemp1+1
.019904	a0 01		ldy #$01			ldy 	#1 							; is this a data entry.
.019906	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; if so, then type is unchanged, offset set
.019908	30 1d		bmi $019927			bmi 	_AIFCalculate
.01990a	c6 24		dec $24				dec 	zVarType 					; converts from an array to a type.
.01990c	a5 24		lda $24				lda 	zVarType 					; check that type
.01990e	c9 b7		cmp #$b7			cmp 	#token_Dollar 				; if string, use x 2
.019910	f0 15		beq $019927			beq 	_AIFCalculate
.019912	06 10		asl $10				asl 	zTemp1			 			; double the index
.019914	26 11		rol $11				rol 	zTemp1+1					; (e.g. index * 4)
.019916	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if integer, use x 4
.019918	f0 0d		beq $019927			beq 	_AIFCalculate
.01991a	18		clc				clc 								; add the original mantissa in again
.01991b	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; which makes it x5, for float.
.01991d	65 10		adc $10				adc 	zTemp1
.01991f	85 10		sta $10				sta 	zTemp1
.019921	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019923	65 11		adc $11				adc 	zTemp1+1
.019925	85 11		sta $11				sta 	zTemp1+1
.019927					_AIFCalculate:
.019927	18		clc				clc 								; add index x 2,4 or 5 to base
.019928	a5 22		lda $22				lda 	zVarDataPtr
.01992a	65 10		adc $10				adc 	zTemp1
.01992c	85 22		sta $22				sta 	zVarDataPtr
.01992e	a5 23		lda $23				lda 	zVarDataPtr+1
.019930	65 11		adc $11				adc 	zTemp1+1
.019932	85 23		sta $23				sta 	zVarDataPtr+1
.019934	18		clc				clc 								; add 2 more for the length prefix.
.019935	a5 22		lda $22				lda 	zVarDataPtr
.019937	69 02		adc #$02			adc 	#2
.019939	85 22		sta $22				sta 	zVarDataPtr
.01993b	90 02		bcc $01993f			bcc 	_AIFNoBump
.01993d	e6 23		inc $23				inc 	zVarDataPtr+1
.01993f					_AIFNoBump:
.01993f	7a		ply				ply
.019940	60		rts				rts
.019941					_AIFError:
.019941	20 57 85	jsr $018557			jsr ERR_Handler
>019944	42 61 64 20 61 72 72 61			.text "Bad array index",0
>01994c	79 20 69 6e 64 65 78 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arraydef.asm

.019954					ArrayResetDefault:
.019954	a9 0b		lda #$0b			lda 	#11 						; 0..10 one array
.019956	8d a9 03	sta $03a9			sta 	ArrayDef+0
.019959	a9 00		lda #$00			lda 	#0
.01995b	8d aa 03	sta $03aa			sta 	ArrayDef+1
.01995e	a9 ff		lda #$ff			lda 	#$FF
.019960	8d ab 03	sta $03ab			sta 	ArrayDef+2 					; $FFFF implies no second element.
.019963	8d ac 03	sta $03ac			sta 	ArrayDef+3					; (test bit 7 of 2nd byte)
.019966	60		rts				rts
.019967					ArrayCreate:
.019967	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; put size x 2 in zTemp1
.01996a	0a		asl a				asl 	a
.01996b	85 10		sta $10				sta 	zTemp1
.01996d	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.019970	2a		rol a				rol 	a
.019971	85 11		sta $11				sta 	zTemp1+1
.019973	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; if this is the last element it's array of ptrs.
.019976	10 22		bpl $01999a			bpl 	_ACSized 					; if not multiply size x 2 (str) 4 (int) 5 (real)
.019978	ad 95 03	lda $0395			lda 	Var_Type 					; check the type
.01997b	c9 b8		cmp #$b8			cmp 	#token_DollarLParen 		; also if it is an array of strings $(
.01997d	f0 1b		beq $01999a			beq 	_ACSized
.01997f	06 10		asl $10				asl 	zTemp1 						; double again
.019981	26 11		rol $11				rol 	zTemp1+1
.019983	b0 6f		bcs $0199f4			bcs 	ArrayIndexError 			; too large.
.019985	c9 bc		cmp #$bc			cmp 	#token_PercentLParen 		; if %( four bytes/entry is enough.
.019987	f0 11		beq $01999a			beq 	_ACSized
.019989	18		clc				clc 								; add original value x 5 for reals.
.01998a	a5 10		lda $10				lda 	zTemp1
.01998c	7d a9 03	adc $03a9,x			adc 	ArrayDef+0,x
.01998f	85 10		sta $10				sta 	zTemp1
.019991	a5 11		lda $11				lda 	zTemp1+1
.019993	7d aa 03	adc $03aa,x			adc 	ArrayDef+1,x
.019996	85 11		sta $11				sta 	zTemp1+1
.019998	b0 5a		bcs $0199f4			bcs 	ArrayIndexError
.01999a					_ACSized:
.01999a	18		clc				clc
.01999b	a5 10		lda $10				lda 	zTemp1
.01999d	69 02		adc #$02			adc 	#2
.01999f	85 10		sta $10				sta 	zTemp1
.0199a1	90 04		bcc $0199a7			bcc 	_ACNoBump
.0199a3	e6 10		inc $10				inc 	zTemp1
.0199a5	f0 4d		beq $0199f4			beq 	ArrayIndexError
.0199a7					_ACNoBump:
.0199a7	18		clc				clc
.0199a8	ad 02 03	lda $0302			lda 	VarMemPtr 					; add this allocated count to VarMemPtr
.0199ab	85 12		sta $12				sta 	zTemp2						; save start in zTemp2/zTemp3
.0199ad	85 14		sta $14				sta 	zTemp3
.0199af	65 10		adc $10				adc 	zTemp1
.0199b1	8d 02 03	sta $0302			sta 	VarMemPtr
.0199b4	ad 03 03	lda $0303			lda 	VarMemPtr+1
.0199b7	85 13		sta $13				sta 	zTemp2+1
.0199b9	85 15		sta $15				sta 	zTemp3+1
.0199bb	65 11		adc $11				adc 	zTemp1+1
.0199bd	8d 03 03	sta $0303			sta 	VarMemPtr+1
.0199c0	85 11		sta $11				sta 	zTemp1+1
.0199c2	b0 30		bcs $0199f4			bcs 	ArrayIndexError
.0199c4	a0 00		ldy #$00			ldy 	#0							; write $00 out.
.0199c6					_ACClear:
.0199c6	98		tya				tya
.0199c7	91 12		sta ($12),y			sta 	(zTemp2),y
.0199c9	e6 12		inc $12				inc 	zTemp2
.0199cb	d0 02		bne $0199cf			bne 	_ACCBump
.0199cd	e6 13		inc $13				inc 	zTemp2+1
.0199cf					_ACCBump:
.0199cf	a5 12		lda $12				lda 	zTemp2
.0199d1	cd 02 03	cmp $0302			cmp 	VarMemPtr
.0199d4	d0 f0		bne $0199c6			bne 	_ACClear
.0199d6	a5 13		lda $13				lda 	zTemp2+1
.0199d8	cd 03 03	cmp $0303			cmp 	VarMemPtr+1
.0199db	d0 e9		bne $0199c6			bne 	_ACClear
.0199dd	a0 00		ldy #$00			ldy 	#0
.0199df	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; copy the size into the start
.0199e2	91 14		sta ($14),y			sta 	(zTemp3),y
.0199e4	c8		iny				iny
.0199e5	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.0199e8	91 14		sta ($14),y			sta 	(zTemp3),y
.0199ea	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; have we reached the end
.0199ed	10 18		bpl $019a07			bpl 	ACCFillRecursive
.0199ef	a4 15		ldy $15				ldy 	zTemp3+1 					; return address
.0199f1	a5 14		lda $14				lda 	zTemp3
.0199f3	60		rts				rts
.0199f4					ArrayIndexError:
.0199f4	20 57 85	jsr $018557			jsr ERR_Handler
>0199f7	42 61 64 20 61 72 72 61			.text "Bad array index",0
>0199ff	79 20 69 6e 64 65 78 00
.019a07					ACCFillRecursive:
.019a07	a9 ff		lda #$ff			lda 	#$FF 						; we mark the end, this is free space.
.019a09	a0 00		ldy #$00			ldy 	#0 							; this is overwritten by size of next allocated
.019a0b	91 12		sta ($12),y			sta 	(zTemp2),y 					; array, but we might change that.
.019a0d	c8		iny				iny
.019a0e	b1 14		lda ($14),y			lda 	(zTemp3),y 					; set bit 15 of the max index indicating
.019a10	09 80		ora #$80			ora 	#$80 						; an array of pointers
.019a12	91 14		sta ($14),y			sta 	(zTemp3),y
.019a14	a5 14		lda $14				lda 	zTemp3 						; push the start on the stack
.019a16	48		pha				pha
.019a17	a5 15		lda $15				lda 	zTemp3+1
.019a19	48		pha				pha
.019a1a					_ACCFillLoop:
.019a1a	18		clc				clc
.019a1b	a5 14		lda $14				lda 	zTemp3 						; and work forwards.
.019a1d	69 02		adc #$02			adc 	#2
.019a1f	85 14		sta $14				sta 	zTemp3
.019a21	90 02		bcc $019a25			bcc 	_ACCSkip2
.019a23	e6 15		inc $15				inc 	zTemp3+1
.019a25					_ACCSkip2:
.019a25	a0 00		ldy #$00			ldy 	#0 							; reached the end ?
.019a27	b1 14		lda ($14),y			lda 	(zTemp3),y					; (looking for FF marker, everything else 00)
.019a29	c8		iny				iny
.019a2a	11 14		ora ($14),y			ora 	(zTemp3),y
.019a2c	d0 21		bne $019a4f			bne 	_ACCExit
.019a2e	a5 14		lda $14				lda 	zTemp3 						; push zTemp3
.019a30	48		pha				pha
.019a31	a5 15		lda $15				lda 	zTemp3+1
.019a33	48		pha				pha
.019a34	e8		inx				inx
.019a35	e8		inx				inx
.019a36	20 67 99	jsr $019967			jsr 	ArrayCreate 				; create array recursively.
.019a39	ca		dex				dex
.019a3a	ca		dex				dex
.019a3b	85 12		sta $12				sta 	zTemp2 						; save A
.019a3d	68		pla				pla
.019a3e	85 15		sta $15				sta 	zTemp3+1 					; restore zTemp3
.019a40	68		pla				pla
.019a41	85 14		sta $14				sta 	zTemp3
.019a43	98		tya				tya 								; write high bye from Y
.019a44	a0 01		ldy #$01			ldy 	#1
.019a46	91 14		sta ($14),y			sta 	(zTemp3),y
.019a48	88		dey				dey 								; write low byte out.
.019a49	a5 12		lda $12				lda 	zTemp2
.019a4b	91 14		sta ($14),y			sta 	(zTemp3),y
.019a4d	80 cb		bra $019a1a			bra 	_ACCFillLoop 				; and try again.
.019a4f					_ACCExit:
.019a4f	7a		ply				ply 								; restore the original address
.019a50	68		pla				pla
.019a51	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varfind.asm

.019a52					VariableLocate:
.019a52	da		phx				phx
.019a53	5a		phy				phy
.019a54	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.019a57	85 12		sta $12				sta 	zTemp2 						; points to first address.
.019a59	a9 03		lda #$03			lda 	#HashTableBase >> 8
.019a5b	85 13		sta $13				sta 	zTemp2+1
.019a5d	a0 00		ldy #$00	_VLNext:ldy 	#0 							; get next link into AX
.019a5f	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a61	aa		tax				tax
.019a62	c8		iny				iny
.019a63	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a65	85 13		sta $13				sta 	zTemp2+1 					; save in zTemp
.019a67	86 12		stx $12				stx 	zTemp2
.019a69	05 12		ora $12				ora 	zTemp2 						; got zero
.019a6b	18		clc				clc
.019a6c	f0 25		beq $019a93			beq 	_VLExit 					; if so, then fail as end of chain.
.019a6e	c8		iny				iny 								; point to hash (offset + 2)
.019a6f	b1 12		lda ($12),y			lda 	(zTemp2),y
.019a71	cd 96 03	cmp $0396			cmp 	Var_Hash
.019a74	d0 e7		bne $019a5d			bne 	_VLNext 					; try next if different.
.019a76					_VLCompare:
.019a76	c8		iny				iny 								; next character
.019a77	b1 12		lda ($12),y			lda 	(zTemp2),y 					; compare variable field against buffer.
.019a79	d9 12 03	cmp $0312,y			cmp 	Var_Buffer-3,y 				; the -3 is because name starts at 3.
.019a7c	d0 df		bne $019a5d			bne 	_VLNext 					; fail if different, try next.
.019a7e	0a		asl a				asl 	a 							; until end character (bit 7 set) matched
.019a7f	90 f5		bcc $019a76			bcc 	_VLCompare
.019a81	98		tya				tya
.019a82	38		sec				sec 								; add 1 as Y points to last character
.019a83	65 12		adc $12				adc 	zTemp2 						; add to the current address
.019a85	85 22		sta $22				sta 	zVarDataPtr
.019a87	a5 13		lda $13				lda 	zTemp2+1
.019a89	69 00		adc #$00			adc 	#0
.019a8b	85 23		sta $23				sta 	zVarDataPtr+1
.019a8d	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.019a90	85 24		sta $24				sta 	zVarType
.019a92	38		sec				sec 								; return CS
.019a93	7a		ply		_VLExit:ply
.019a94	fa		plx				plx
.019a95	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/vargetset.asm

.019a96					VariableGet:
.019a96	5a		phy				phy
.019a97	a0 00		ldy #$00			ldy 	#0 							; copy first two bytes
.019a99	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019a9b	95 80		sta $80,x			sta 	XS_Mantissa,x
.019a9d	c8		iny				iny
.019a9e	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019aa0	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019aa2	c8		iny				iny
.019aa3	a5 24		lda $24				lda 	zVarType 					; if it is a string, set up for that.
.019aa5	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019aa7	f0 2c		beq $019ad5			beq 	_VGString
.019aa9	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; copy the next two bytes.
.019aab	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019aad	c8		iny				iny
.019aae	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019ab0	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019ab2	c8		iny				iny
.019ab3	a9 01		lda #$01			lda 	#1 							; set type to 1.
.019ab5	95 85		sta $85,x			sta 	XS_Type,x
.019ab7	a5 24		lda $24				lda 	zVarType
.019ab9	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if it is a %, then exit with default integer.
.019abb	f0 28		beq $019ae5			beq 	_VGExit
.019abd	a9 40		lda #$40			lda 	#$40 						; set type byte to zero
.019abf	95 85		sta $85,x			sta 	XS_Type,x 					; which is the code for zero/float.
.019ac1	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; the last value to copy is the exponent.
.019ac3	95 84		sta $84,x			sta 	XS_Exponent,x
.019ac5	f0 1e		beq $019ae5			beq 	_VGExit 					; if exponent is zero ... it's zero.
.019ac7	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; the sign bit is the top mantissa bit.
.019ac9	48		pha				pha
.019aca	29 80		and #$80			and 	#$80
.019acc	95 85		sta $85,x			sta 	XS_Type,x 					; this is the type byte.
.019ace	68		pla				pla
.019acf	09 80		ora #$80			ora 	#$80 						; set the MSB as you would expect.
.019ad1	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; so it's a normalised float.
.019ad3	80 10		bra $019ae5			bra 	_VGExit
.019ad5					_VGString:
.019ad5	a9 02		lda #$02			lda 	#2 							; set type to 2, a string
.019ad7	95 85		sta $85,x			sta 	XS_Type,x
.019ad9	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; is the value there $0000
.019adb	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019add	d0 06		bne $019ae5			bne 	_VGExit 					; if not, exit.
.019adf	85 25		sta $25				sta 	zNullString 				; make zNullString a 00 string.
.019ae1	a9 25		lda #$25			lda 	#zNullString
.019ae3	95 80		sta $80,x			sta 	XS_Mantissa,x 				; make it point to it.
.019ae5					_VGExit:
.019ae5	7a		ply				ply
.019ae6	60		rts				rts
.019ae7					VariableSet:
.019ae7	b5 85		lda $85,x			lda 	XS_Type,x 					; is the result a string
.019ae9	29 02		and #$02			and 	#2 							; if so, it has to be
.019aeb	d0 4b		bne $019b38			bne 	_VSString
.019aed	a5 24		lda $24				lda 	zVarType 					; if type is $ there's an error.
.019aef	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019af1	f0 42		beq $019b35			beq 	_VSBadType
.019af3	c9 bb		cmp #$bb			cmp 	#token_Percent 				; type convert to float/int
.019af5	f0 05		beq $019afc			beq 	_VSMakeInt
.019af7	20 5d a0	jsr $01a05d			jsr 	FPUToFloat
.019afa	80 03		bra $019aff			bra 	_VSCopy
.019afc					_VSMakeInt:
.019afc	20 a9 a0	jsr $01a0a9			jsr 	FPUToInteger
.019aff					_VSCopy:
.019aff	5a		phy				phy
.019b00	a0 00		ldy #$00			ldy 	#0 							; copy mantissa to target.
.019b02	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019b04	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b06	c8		iny				iny
.019b07	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019b09	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b0b	c8		iny				iny
.019b0c	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019b0e	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b10	c8		iny				iny
.019b11	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019b13	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b15	a5 24		lda $24				lda 	zVarType 					; if target is integer, alrady done.
.019b17	c9 bb		cmp #$bb			cmp 	#token_Percent
.019b19	f0 18		beq $019b33			beq 	_VSExit
.019b1b	b5 85		lda $85,x			lda 	XS_Type,x 					; get the sign bit into carry flag.
.019b1d	0a		asl a				asl 	a
.019b1e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; shift the sign into the mantissa high.
.019b20	08		php				php
.019b21	0a		asl a				asl 	a
.019b22	28		plp				plp
.019b23	6a		ror a				ror 	a
.019b24	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b26	c8		iny				iny
.019b27	b5 84		lda $84,x			lda 	XS_Exponent,x 				; copy the exponent in
.019b29	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b2b	34 85		bit $85,x			bit 	XS_Type,x 					; if the result is non zero
.019b2d	50 04		bvc $019b33			bvc 	_VSExit
.019b2f	a9 00		lda #$00			lda 	#00 						; zero exponent indicating 0.
.019b31	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b33					_VSExit:
.019b33	7a		ply				ply
.019b34	60		rts				rts
.019b35					_VSBadType:
.019b35	4c 38 85	jmp $018538			jmp 	TypeError
.019b38					_VSString:
.019b38	a5 24		lda $24				lda 	zVarType 					; type must be $
.019b3a	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019b3c	d0 f7		bne $019b35			bne 	_VSBadType
.019b3e	da		phx				phx
.019b3f	5a		phy				phy
.019b40	20 bd 96	jsr $0196bd			jsr 	StringConcrete 				; concrete the string in the mantissa -> AX
.019b43	a0 01		ldy #$01			ldy 	#1 							; save high byte
.019b45	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b47	88		dey				dey 								; save low byte
.019b48	8a		txa				txa
.019b49	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b4b	7a		ply				ply 								; and exit.
.019b4c	fa		plx				plx
.019b4d	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/multiply.asm

.019b4e					MulInteger32:
.019b4e	b5 80		lda $80,x			lda 	XS_Mantissa+0,x					; copy +0 to +8
.019b50	95 8c		sta $8c,x			sta 	XS3_Mantissa,x
.019b52	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019b54	95 8d		sta $8d,x			sta 	XS3_Mantissa+1,x
.019b56	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019b58	95 8e		sta $8e,x			sta 	XS3_Mantissa+2,x
.019b5a	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019b5c	95 8f		sta $8f,x			sta 	XS3_Mantissa+3,x
.019b5e	a9 00		lda #$00			lda 	#0
.019b60	95 80		sta $80,x			sta 	XS_Mantissa+0,x 				; zero +0
.019b62	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019b64	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019b66	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019b68					_BFMMultiply:
.019b68	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; get LSBit of 8-11
.019b6a	29 01		and #$01			and 	#1
.019b6c	f0 03		beq $019b71			beq 	_BFMNoAdd
.019b6e	20 25 92	jsr $019225			jsr 	AddInteger32
.019b71					_BFMNoAdd:
.019b71	16 86		asl $86,x			asl 	XS2_Mantissa+0,x 				; shift +4 left
.019b73	36 87		rol $87,x			rol 	XS2_Mantissa+1,x
.019b75	36 88		rol $88,x			rol 	XS2_Mantissa+2,x
.019b77	36 89		rol $89,x			rol 	XS2_Mantissa+3,x
.019b79	56 8f		lsr $8f,x			lsr 	XS3_Mantissa+3,x 				; shift +8 right
.019b7b	76 8e		ror $8e,x			ror 	XS3_Mantissa+2,x
.019b7d	76 8d		ror $8d,x			ror 	XS3_Mantissa+1,x
.019b7f	76 8c		ror $8c,x			ror 	XS3_Mantissa,x
.019b81	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; continue if +8 is nonzero
.019b83	15 8d		ora $8d,x			ora 	XS3_Mantissa+1,x
.019b85	15 8e		ora $8e,x			ora 	XS3_Mantissa+2,x
.019b87	15 8f		ora $8f,x			ora 	XS3_Mantissa+3,x
.019b89	d0 dd		bne $019b68			bne 	_BFMMultiply
.019b8b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/divide.asm

.019b8c					DivInteger32:
.019b8c	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; check for /0
.019b8e	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.019b90	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.019b92	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.019b94	d0 14		bne $019baa			bne 	_BFDOkay
.019b96	20 57 85	jsr $018557			jsr ERR_Handler
>019b99	44 69 76 69 73 69 6f 6e			.text "Division by Zero",0
>019ba1	20 62 79 20 5a 65 72 6f 00
.019baa					_BFDOkay:
.019baa	a9 00		lda #$00			lda 	#0 							; zLTemp1 is 'A' (and holds the remainder)
.019bac	85 1a		sta $1a				sta 	zLTemp1 					; Q/Dividend/Left in +0
.019bae	85 1b		sta $1b				sta 	zLTemp1+1 					; M/Divisor/Right in +4
.019bb0	85 1c		sta $1c				sta 	zLTemp1+2
.019bb2	85 1d		sta $1d				sta 	zLTemp1+3
.019bb4	8d 9e 03	sta $039e			sta 	SignCount 					; Count of signs.
.019bb7	20 0e 9c	jsr $019c0e			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.019bba	da		phx				phx
.019bbb	e8		inx				inx
.019bbc	e8		inx				inx
.019bbd	e8		inx				inx
.019bbe	e8		inx				inx
.019bbf	e8		inx				inx
.019bc0	e8		inx				inx
.019bc1	20 0e 9c	jsr $019c0e			jsr 	CheckIntegerNegate
.019bc4	fa		plx				plx
.019bc5	5a		phy				phy 								; Y is the counter
.019bc6	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.019bc8					_BFDLoop:
.019bc8	16 80		asl $80,x			asl 	XS_Mantissa+0,x 			; shift AQ left.
.019bca	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019bcc	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019bce	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019bd0	26 1a		rol $1a				rol 	zLTemp1
.019bd2	26 1b		rol $1b				rol 	zLTemp1+1
.019bd4	26 1c		rol $1c				rol 	zLTemp1+2
.019bd6	26 1d		rol $1d				rol 	zLTemp1+3
.019bd8	38		sec				sec
.019bd9	a5 1a		lda $1a				lda 	zLTemp1+0 					; Calculate A-M on stack.
.019bdb	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019bdd	48		pha				pha
.019bde	a5 1b		lda $1b				lda 	zLTemp1+1
.019be0	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019be2	48		pha				pha
.019be3	a5 1c		lda $1c				lda 	zLTemp1+2
.019be5	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019be7	48		pha				pha
.019be8	a5 1d		lda $1d				lda 	zLTemp1+3
.019bea	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019bec	90 13		bcc $019c01			bcc 	_BFDNoAdd
.019bee	85 1d		sta $1d				sta 	zLTemp1+3 					; update A
.019bf0	68		pla				pla
.019bf1	85 1c		sta $1c				sta 	zLTemp1+2
.019bf3	68		pla				pla
.019bf4	85 1b		sta $1b				sta 	zLTemp1+1
.019bf6	68		pla				pla
.019bf7	85 1a		sta $1a				sta 	zLTemp1+0
.019bf9	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; set Q bit 1.
.019bfb	09 01		ora #$01			ora 	#1
.019bfd	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019bff	80 03		bra $019c04			bra 	_BFDNext
.019c01					_BFDNoAdd:
.019c01	68		pla				pla 								; Throw away the intermediate calculations
.019c02	68		pla				pla
.019c03	68		pla				pla
.019c04					_BFDNext:
.019c04	88		dey				dey
.019c05	d0 c1		bne $019bc8			bne 	_BFDLoop
.019c07	7a		ply				ply 								; restore Y and exit
.019c08	4e 9e 03	lsr $039e			lsr 	SignCount 					; if sign count odd,
.019c0b	b0 06		bcs $019c13			bcs		IntegerNegateAlways 			; negate the result
.019c0d	60		rts				rts
.019c0e					CheckIntegerNegate:
.019c0e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019c10	30 01		bmi $019c13			bmi 	IntegerNegateAlways
.019c12	60		rts				rts
.019c13					IntegerNegateAlways:
.019c13	ee 9e 03	inc $039e			inc 	SignCount
.019c16	38		sec				sec
.019c17	a9 00		lda #$00			lda 	#0
.019c19	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.019c1b	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019c1d	a9 00		lda #$00			lda 	#0
.019c1f	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.019c21	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019c23	a9 00		lda #$00			lda 	#0
.019c25	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.019c27	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019c29	a9 00		lda #$00			lda 	#0
.019c2b	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.019c2d	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019c2f	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/inttostr.asm

.019c30					INTToString:
.019c30	48		pha				pha
.019c31	5a		phy				phy
.019c32	b5 83		lda $83,x			lda 		XS_Mantissa+3,x 		; check -ve
.019c34	10 08		bpl $019c3e			bpl 		_ITSNotMinus
.019c36	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.019c38	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.019c3b	20 13 9c	jsr $019c13			jsr 		IntegerNegateAlways 	; negate the number.
.019c3e					_ITSNotMinus:
.019c3e	a9 00		lda #$00			lda 		#0
.019c40	8d 9a 03	sta $039a			sta 		NumSuppress 			; clear the suppression flag.
.019c43	8a		txa				txa 								; use Y for the mantissa index.
.019c44	a8		tay				tay
.019c45	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.019c47					_ITSNextSubtractor:
.019c47	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.019c49	8d 9b 03	sta $039b			sta 		NumConvCount
.019c4c					_ITSSubtract:
.019c4c	38		sec				sec
.019c4d	b9 80 00	lda $0080,y			lda 		XS_Mantissa,y 			; subtract number and push on stack
.019c50	ff ae 9c 01	sbc $019cae,x			sbc 		_ITSSubtractors+0,x
.019c54	48		pha				pha
.019c55	b9 81 00	lda $0081,y			lda 		XS_Mantissa+1,y
.019c58	ff af 9c 01	sbc $019caf,x			sbc 		_ITSSubtractors+1,x
.019c5c	48		pha				pha
.019c5d	b9 82 00	lda $0082,y			lda 		XS_Mantissa+2,y
.019c60	ff b0 9c 01	sbc $019cb0,x			sbc 		_ITSSubtractors+2,x
.019c64	48		pha				pha
.019c65	b9 83 00	lda $0083,y			lda 		XS_Mantissa+3,y
.019c68	ff b1 9c 01	sbc $019cb1,x			sbc 		_ITSSubtractors+3,x
.019c6c	90 14		bcc $019c82			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.019c6e	99 83 00	sta $0083,y			sta 		XS_Mantissa+3,y 		; save subtract off stack
.019c71	68		pla				pla
.019c72	99 82 00	sta $0082,y			sta 		XS_Mantissa+2,y
.019c75	68		pla				pla
.019c76	99 81 00	sta $0081,y			sta 		XS_Mantissa+1,y
.019c79	68		pla				pla
.019c7a	99 80 00	sta $0080,y			sta 		XS_Mantissa+0,y
.019c7d	ee 9b 03	inc $039b			inc 		NumConvCount 			; bump count.
.019c80	80 ca		bra $019c4c			bra 		_ITSSubtract 			; go round again.
.019c82					_ITSCantSubtract:
.019c82	68		pla				pla 								; throw away interim answers
.019c83	68		pla				pla
.019c84	68		pla				pla
.019c85	ad 9b 03	lda $039b			lda 		NumConvCount 			; if not zero then no suppression check
.019c88	c9 30		cmp #$30			cmp 		#"0"
.019c8a	d0 05		bne $019c91			bne 		_ITSOutputDigit
.019c8c	ad 9a 03	lda $039a			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.019c8f	10 09		bpl $019c9a			bpl	 		_ITSGoNextSubtractor
.019c91					_ITSOutputDigit:
.019c91	ce 9a 03	dec $039a			dec 		NumSuppress 			; suppression check will be non-zero.
.019c94	ad 9b 03	lda $039b			lda 		NumConvCount 			; count of subtractions
.019c97	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter 		; output it.
.019c9a					_ITSGoNextSubtractor:
.019c9a	e8		inx				inx 								; next dword
.019c9b	e8		inx				inx
.019c9c	e8		inx				inx
.019c9d	e8		inx				inx
.019c9e	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.019ca0	d0 a5		bne $019c47			bne 		_ITSNextSubtractor 		; do all the subtractors.
.019ca2	98		tya				tya 								; X is back as the mantissa index
.019ca3	aa		tax				tax
.019ca4	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.019ca6	09 30		ora #$30			ora 		#"0"
.019ca8	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.019cab	7a		ply				ply 								; and exit
.019cac	68		pla				pla
.019cad	60		rts				rts
.019cae					_ITSSubtractors:
>019cae	00 ca 9a 3b					.dword 		1000000000
>019cb2	00 e1 f5 05					.dword 		100000000
>019cb6	80 96 98 00					.dword 		10000000
>019cba	40 42 0f 00					.dword 		1000000
>019cbe	a0 86 01 00					.dword 		100000
>019cc2	10 27 00 00					.dword 		10000
>019cc6	e8 03 00 00					.dword 		1000
>019cca	64 00 00 00					.dword 		100
>019cce	0a 00 00 00					.dword 		10
.019cd2					_ITSSubtractorsEnd:
.019cd2					ITSOutputCharacter:
.019cd2	48		pha				pha
.019cd3	da		phx				phx
.019cd4	ae 14 03	ldx $0314			ldx 	NumBufX 					; save digit
.019cd7	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.019cda	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.019cdc	9d 16 03	sta $0316,x			sta 	Num_Buffer+1,x
.019cdf	ee 14 03	inc $0314			inc 	NumBufX						; bump pointer.
.019ce2	fa		plx				plx
.019ce3	68		pla				pla
.019ce4	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/intfromstr.asm

.019ce5					IntFromString:
.019ce5	a0 00		ldy #$00			ldy 	#0
.019ce7	8c 9c 03	sty $039c			sty 	ExpTemp 					; this is the converted digit count.
.019cea					IntFromStringY:
.019cea	48		pha				pha
.019ceb	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.019ced	95 80		sta $80,x			sta 	XS_Mantissa,x
.019cef	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019cf1	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019cf3	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019cf5	a9 01		lda #$01			lda 	#1
.019cf7	95 85		sta $85,x			sta 	XS_Type,x
.019cf9					_IFSLoop:
.019cf9	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get next
.019cfb	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.019cfd	90 4e		bcc $019d4d			bcc 	_IFSExit
.019cff	c9 3a		cmp #$3a			cmp 	#"9"+1
.019d01	b0 4a		bcs $019d4d			bcs 	_IFSExit
.019d03	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.019d05	c9 0c		cmp #$0c			cmp 	#12
.019d07	b0 4e		bcs $019d57			bcs 	_IFSOverflow
.019d09	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.019d0b	48		pha				pha
.019d0c	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019d0e	48		pha				pha
.019d0f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019d11	48		pha				pha
.019d12	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019d14	48		pha				pha
.019d15	20 6c 9d	jsr $019d6c			jsr 	IFSX1ShiftLeft 				; double
.019d18	20 6c 9d	jsr $019d6c			jsr 	IFSX1ShiftLeft 				; x 4
.019d1b	18		clc				clc 								; add saved value x 5
.019d1c	68		pla				pla
.019d1d	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019d1f	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019d21	68		pla				pla
.019d22	75 81		adc $81,x			adc 	XS_Mantissa+1,x
.019d24	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019d26	68		pla				pla
.019d27	75 82		adc $82,x			adc 	XS_Mantissa+2,x
.019d29	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019d2b	68		pla				pla
.019d2c	75 83		adc $83,x			adc 	XS_Mantissa+3,x
.019d2e	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019d30	20 6c 9d	jsr $019d6c			jsr 	IFSX1ShiftLeft 				; x 10
.019d33	ee 9c 03	inc $039c			inc 	ExpTemp 					; bump count of digits processed.
.019d36	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; add digit
.019d38	29 0f		and #$0f			and 	#15
.019d3a	c8		iny				iny
.019d3b	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019d3d	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019d3f	90 b8		bcc $019cf9			bcc 	_IFSLoop
.019d41	f6 81		inc $81,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.019d43	d0 b4		bne $019cf9			bne 	_IFSLoop
.019d45	f6 82		inc $82,x			inc 	XS_Mantissa+2,x
.019d47	d0 b0		bne $019cf9			bne 	_IFSLoop
.019d49	f6 83		inc $83,x			inc 	XS_Mantissa+3,x
.019d4b	80 ac		bra $019cf9			bra 	_IFSLoop
.019d4d					_IFSExit:
.019d4d	98		tya				tya 								; get offset
.019d4e					_IFSOkay:
.019d4e	38		sec				sec
.019d4f	ad 9c 03	lda $039c			lda 	ExpTemp
.019d52	f0 01		beq $019d55			beq 	_IFSSkipFail
.019d54	18		clc				clc
.019d55					_IFSSkipFail:
.019d55	68		pla				pla 								; and exit.
.019d56	60		rts				rts
.019d57					_IFSOverflow:
.019d57	20 57 85	jsr $018557			jsr 	ERR_Handler
>019d5a	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>019d62	20 6f 76 65 72 66 6c 6f 77 00
.019d6c					IFSX1ShiftLeft:
.019d6c	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.019d6e	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019d70	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019d72	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019d74	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.019d75					FPSubtract:
.019d75	48		pha				pha
.019d76	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.019d78	49 80		eor #$80			eor 	#$80
.019d7a	95 8b		sta $8b,x			sta 	XS2_Type,x
.019d7c	68		pla				pla 								; --- and fall through ---
.019d7d					FPAdd:
.019d7d	48		pha				pha
.019d7e	b5 85		lda $85,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.019d80	d0 05		bne $019d87			bne 	_FPA_NegativeLHS
.019d82	20 9e 9d	jsr $019d9e			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.019d85	68		pla				pla
.019d86	60		rts				rts
.019d87					_FPA_NegativeLHS:
.019d87	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.019d89	49 80		eor #$80			eor 	#$80
.019d8b	95 85		sta $85,x			sta 	XS_Type,x
.019d8d	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.019d8f	49 80		eor #$80			eor 	#$80
.019d91	95 8b		sta $8b,x			sta 	XS2_Type,x
.019d93	20 9e 9d	jsr $019d9e			jsr 	FPAdd_Worker 				; do the add calculation.
.019d96	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 back
.019d98	49 80		eor #$80			eor 	#$80
.019d9a	95 85		sta $85,x			sta 	XS_Type,x
.019d9c	68		pla				pla
.019d9d	60		rts				rts
.019d9e					FPAdd_Worker:
.019d9e	34 8b		bit $8b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.019da0	70 07		bvs $019da9			bvs 	_FPAWExit 					; no change.
.019da2	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.019da4	50 07		bvc $019dad			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.019da6	20 1b a0	jsr $01a01b			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.019da9					_FPAWExit:
.019da9	20 8a a0	jsr $01a08a			jsr 	FPUNormalise 				; normalise the result.
.019dac	60		rts				rts
.019dad					_FPAWMakeSame:
.019dad	b5 84		lda $84,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.019daf	38		sec				sec
.019db0	f5 8a		sbc $8a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.019db2	f0 16		beq $019dca			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.019db4	da		phx				phx 								; save X
.019db5	90 06		bcc $019dbd			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.019db7	e8		inx				inx
.019db8	e8		inx				inx
.019db9	e8		inx				inx
.019dba	e8		inx				inx
.019dbb	e8		inx				inx
.019dbc	e8		inx				inx
.019dbd					_FPAWShiftA:
.019dbd	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019dbf	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.019dc1	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019dc3	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019dc5	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019dc7	fa		plx				plx 								; restore original X
.019dc8	80 e3		bra $019dad			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.019dca					_FPAW_DoArithmetic:
.019dca	34 8b		bit $8b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.019dcc	30 28		bmi $019df6			bmi 	_FPAW_BNegative
.019dce	18		clc				clc
.019dcf	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019dd1	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019dd3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019dd5	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019dd7	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019dd9	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019ddb	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019ddd	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019ddf	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019de1	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019de3	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019de5	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019de7	90 c0		bcc $019da9			bcc 	_FPAWExit 					; no carry.
.019de9	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019deb	38		sec				sec
.019dec	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019dee	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019df0	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019df2	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019df4	80 b3		bra $019da9			bra 	_FPAWExit
.019df6					_FPAW_BNegative:
.019df6	38		sec				sec
.019df7	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019df9	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019dfb	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019dfd	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019dff	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019e01	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019e03	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019e05	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019e07	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019e09	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019e0b	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019e0d	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019e0f	b0 09		bcs $019e1a			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.019e11	20 41 a0	jsr $01a041			jsr 	FPUNegateInteger			; negate the mantissa
.019e14	b5 85		lda $85,x			lda 	XS_Type,x 					; flip result sign
.019e16	49 80		eor #$80			eor 	#$80
.019e18	95 85		sta $85,x			sta 	XS_Type,x
.019e1a					_FPAWGoExit:
.019e1a	4c a9 9d	jmp $019da9			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.019e1d					FPD_IsDivZero:
.019e1d	20 57 85	jsr $018557			jsr ERR_Handler
>019e20	44 69 76 69 73 69 6f 6e			.text "Division by zero",0
>019e28	20 62 79 20 7a 65 72 6f 00
.019e31					FPDivide:
.019e31	48		pha				pha
.019e32	5a		phy				phy
.019e33	34 8b		bit $8b,x			bit 	XS2_Type,x 					; check if division by zero
.019e35	70 e6		bvs $019e1d			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.019e37	34 85		bit $85,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.019e39	f0 03		beq $019e3e			beq 	_FPDCalculateExp
.019e3b					_FPD_Exit:
.019e3b	7a		ply				ply
.019e3c	68		pla				pla
.019e3d	60		rts				rts
.019e3e					_FPDCalculateExp:
.019e3e	b5 8a		lda $8a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.019e40	49 ff		eor #$ff			eor 	#$FF
.019e42	1a		inc a				inc 	a
.019e43	95 8a		sta $8a,x			sta 	XS2_Exponent,x
.019e45	20 15 9f	jsr $019f15			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.019e48	18		clc				clc 	 							; add 1 to the resulting exponent
.019e49	69 01		adc #$01			adc 	#1
.019e4b	b0 54		bcs $019ea1			bcs 	_FPD_Overflow 				; which can overflow.
.019e4d	95 84		sta $84,x			sta 	XS_Exponent,x
.019e4f	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.019e51	85 1a		sta $1a				sta 	zLTemp1+0
.019e53	85 1b		sta $1b				sta 	zLTemp1+1
.019e55	85 1c		sta $1c				sta 	zLTemp1+2
.019e57	85 1d		sta $1d				sta 	zLTemp1+3
.019e59	a0 20		ldy #$20			ldy 	#32 						; times round.
.019e5b					_FPD_Loop:
.019e5b	38		sec				sec 								; calculate X1-X2 stacking result because we might
.019e5c	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; not save it.
.019e5e	f5 86		sbc $86,x			sbc 	XS2_Mantissa,x
.019e60	48		pha				pha
.019e61	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019e63	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019e65	48		pha				pha
.019e66	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019e68	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019e6a	48		pha				pha
.019e6b	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019e6d	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019e6f	90 13		bcc $019e84			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.019e71	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; save results out to A
.019e73	68		pla				pla
.019e74	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019e76	68		pla				pla
.019e77	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019e79	68		pla				pla
.019e7a	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019e7c	a5 1d		lda $1d				lda 	zLTemp1+3 					; set high bit of result
.019e7e	09 80		ora #$80			ora 	#$80
.019e80	85 1d		sta $1d				sta 	zLTemp1+3
.019e82	80 03		bra $019e87			bra 	_FPD_Rotates
.019e84					_FPD_NoSubtract:
.019e84	68		pla				pla 								; throw away unwanted results
.019e85	68		pla				pla
.019e86	68		pla				pla
.019e87					_FPD_Rotates:
.019e87	56 89		lsr $89,x			lsr 	3+XS2_Mantissa,x
.019e89	76 88		ror $88,x			ror 	2+XS2_Mantissa,x
.019e8b	76 87		ror $87,x			ror 	1+XS2_Mantissa,x
.019e8d	76 86		ror $86,x			ror 	0+XS2_Mantissa,x
.019e8f	06 1a		asl $1a				asl 	zLTemp1 					; rotate result round left
.019e91	26 1b		rol $1b				rol 	zLTemp1+1
.019e93	26 1c		rol $1c				rol 	zLTemp1+2
.019e95	26 1d		rol $1d				rol 	zLTemp1+3
.019e97	90 02		bcc $019e9b			bcc 	_FPD_NoCarry
.019e99	e6 1a		inc $1a				inc 	zLTemp1 					; if rotated out, set LSB.
.019e9b					_FPD_NoCarry:
.019e9b	88		dey				dey 								; do 32 times
.019e9c	d0 bd		bne $019e5b			bne 	_FPD_Loop
.019e9e	4c f9 9e	jmp $019ef9			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.019ea1					_FPD_Overflow:
.019ea1	4c e7 a0	jmp $01a0e7			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.019ea4					FPMultiply:
.019ea4	48		pha				pha
.019ea5	5a		phy				phy
.019ea6	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.019ea8	70 07		bvs $019eb1			bvs 	_FPM_Exit
.019eaa	34 8b		bit $8b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.019eac	50 06		bvc $019eb4			bvc 	_FPM_CalcExponent
.019eae	20 1b a0	jsr $01a01b			jsr 	FPUCopyX2ToX1
.019eb1					_FPM_Exit:
.019eb1	7a		ply				ply
.019eb2	68		pla				pla
.019eb3	60		rts				rts
.019eb4					_FPM_CalcExponent:
.019eb4	18		clc				clc
.019eb5	20 15 9f	jsr $019f15			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.019eb8	95 84		sta $84,x			sta 	XS_Exponent,x 				; save the result.
.019eba	a9 00		lda #$00			lda 	#0
.019ebc	85 1a		sta $1a				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.019ebe	85 1b		sta $1b				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.019ec0	85 1c		sta $1c				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.019ec2	85 1d		sta $1d				sta 	zLTemp1+3
.019ec4	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.019ec6					_FPM_Loop:
.019ec6	b5 80		lda $80,x			lda 	XS_Mantissa,x				; check LSB of long product
.019ec8	29 01		and #$01			and 	#1
.019eca	18		clc				clc 								; clear carry for the long rotate.
.019ecb	f0 19		beq $019ee6			beq 	_FPM_NoAddition
.019ecd	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.019ece	a5 1a		lda $1a				lda 	zLTemp1+0
.019ed0	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019ed2	85 1a		sta $1a				sta 	zLTemp1+0
.019ed4	a5 1b		lda $1b				lda 	zLTemp1+1
.019ed6	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019ed8	85 1b		sta $1b				sta 	zLTemp1+1
.019eda	a5 1c		lda $1c				lda 	zLTemp1+2
.019edc	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019ede	85 1c		sta $1c				sta 	zLTemp1+2
.019ee0	a5 1d		lda $1d				lda 	zLTemp1+3
.019ee2	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019ee4	85 1d		sta $1d				sta 	zLTemp1+3
.019ee6					_FPM_NoAddition:
.019ee6	66 1d		ror $1d				ror 	3+zLTemp1
.019ee8	66 1c		ror $1c				ror 	2+zLTemp1
.019eea	66 1b		ror $1b				ror 	1+zLTemp1
.019eec	66 1a		ror $1a				ror 	0+zLTemp1
.019eee	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019ef0	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019ef2	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019ef4	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019ef6	88		dey				dey
.019ef7	d0 cd		bne $019ec6			bne 	_FPM_Loop 					; do this 32 times.
.019ef9					FPM_CopySignNormalize:
.019ef9	a5 1a		lda $1a				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.019efb	95 80		sta $80,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.019efd	a5 1b		lda $1b				lda 	zLTemp1+1
.019eff	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019f01	a5 1c		lda $1c				lda 	zLTemp1+2
.019f03	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019f05	a5 1d		lda $1d				lda 	zLTemp1+3
.019f07	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019f09	b5 85		lda $85,x			lda 	XS_Type,x 					; sign is xor of signs
.019f0b	55 8b		eor $8b,x			eor 	XS2_Type,x
.019f0d	95 85		sta $85,x			sta 	XS_Type,x
.019f0f	20 8a a0	jsr $01a08a			jsr 	FPUNormalise 				; normalise and exit.
.019f12	7a		ply				ply
.019f13	68		pla				pla
.019f14	60		rts				rts
.019f15					FPCalculateExponent:
.019f15	18		clc				clc
.019f16	b5 84		lda $84,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.019f18	75 8a		adc $8a,x			adc 	XS2_Exponent,x
.019f1a	b0 08		bcs $019f24			bcs 	_FPCECarry 					; carry out ?
.019f1c	10 03		bpl $019f21			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.019f1e	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.019f20	60		rts				rts
.019f21					_FPCEExpZero:
.019f21	a9 00		lda #$00			lda 	#0
.019f23	60		rts				rts
.019f24					_FPCECarry:
.019f24	30 03		bmi $019f29			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.019f26	09 80		ora #$80			ora 	#$80 						; put in right range
.019f28	60		rts				rts
.019f29					_FPCEOverflow:
.019f29	4c e7 a0	jmp $01a0e7			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.019f2c					FPFractionalPart:
.019f2c	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.019f2e	38		sec				sec 								; this flag tells us to keep the fractional part
.019f2f	30 0d		bmi $019f3e			bmi 	FPGetPart
.019f31	60		rts				rts
.019f32					FPIntegerPart:
.019f32	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.019f34	18		clc				clc 								; this flag says keep the integer part.
.019f35	30 07		bmi $019f3e			bmi 	FPGetPart 					; -ve exponents are 0..127
.019f37	48		pha				pha
.019f38	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.019f3a	95 85		sta $85,x			sta 	XS_Type,x
.019f3c	68		pla				pla
.019f3d	60		rts				rts
.019f3e					FPGetPart:
.019f3e	48		pha				pha
.019f3f	5a		phy				phy 								; save Y
.019f40	08		php				php 								; save action
.019f41	34 85		bit $85,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.019f43	70 59		bvs $019f9e			bvs 	_FPGP_Exit 					; then do nothing.
.019f45	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.019f47	85 1a		sta $1a				sta 	zLTemp1+0 					; this mask is applied to chop out the
.019f49	85 1b		sta $1b				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.019f4b	85 1c		sta $1c				sta 	zLTemp1+2
.019f4d	85 1d		sta $1d				sta 	zLTemp1+3
.019f4f	b5 84		lda $84,x			lda 	XS_Exponent,x				; the number of shifts.
.019f51	38		sec				sec
.019f52	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.019f54	f0 12		beq $019f68			beq 	_FPGP_NoShift 				; ... if any
.019f56	c9 20		cmp #$20			cmp 	#32
.019f58	90 02		bcc $019f5c			bcc 	_FPGP_NotMax
.019f5a	a9 20		lda #$20			lda 	#32 						; max of 32.
.019f5c					_FPGP_NotMax:
.019f5c	a8		tay				tay 								; Y is the mask shift count.
.019f5d					_FPGP_ShiftMask:
.019f5d	46 1d		lsr $1d				lsr 	3+zLTemp1
.019f5f	66 1c		ror $1c				ror 	2+zLTemp1
.019f61	66 1b		ror $1b				ror 	1+zLTemp1
.019f63	66 1a		ror $1a				ror 	0+zLTemp1
.019f65	88		dey				dey
.019f66	d0 f5		bne $019f5d			bne 	_FPGP_ShiftMask
.019f68					_FPGP_NoShift:
.019f68	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.019f6a	8e 9c 03	stx $039c			stx 	ExpTemp						; save X
.019f6d					_FPGP_MaskLoop:
.019f6d	b9 1a 00	lda $001a,y			lda 	zlTemp1,y 					; get mask byte
.019f70	28		plp				plp 								; if CC we keep the top part, so we
.019f71	08		php				php		 							; flip the mask.
.019f72	b0 02		bcs $019f76			bcs		_FPGP_NoFlip
.019f74	49 ff		eor #$ff			eor 	#$FF
.019f76					_FPGP_NoFlip:
.019f76	35 80		and $80,x			and 	XS_Mantissa,x 				; and into the mantissa.
.019f78	95 80		sta $80,x			sta 	XS_Mantissa,x
.019f7a	e8		inx				inx
.019f7b	c8		iny				iny
.019f7c	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.019f7e	d0 ed		bne $019f6d			bne 	_FPGP_MaskLoop
.019f80	ae 9c 03	ldx $039c			ldx 	ExpTemp						; restore X
.019f83	28		plp				plp
.019f84	08		php				php 								; get action flag on the stack
.019f85	90 04		bcc $019f8b			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.019f87	a9 00		lda #$00			lda 	#0
.019f89	95 85		sta $85,x			sta 	XS_Type,x
.019f8b					_FPGP_NotFractional:
.019f8b	b5 80		lda $80,x			lda 	XS_Mantissa,x 						; check if \1 zero
.019f8d	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019f8f	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019f91	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019f93	f0 05		beq $019f9a			beq 	_FPGP_Zero 					; if zero, return zero
.019f95	20 8a a0	jsr $01a08a			jsr 	FPUNormalise
.019f98	80 04		bra $019f9e			bra 	_FPGP_Exit 					; and exit
.019f9a					_FPGP_Zero:
.019f9a	a9 40		lda #$40			lda 	#$40 						; set zero flag
.019f9c	95 85		sta $85,x			sta 	XS_Type,x
.019f9e					_FPGP_Exit:
.019f9e	68		pla				pla 								; throw saved action flag.
.019f9f	7a		ply				ply
.019fa0	68		pla				pla
.019fa1	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.019fa2					FPCompare:
.019fa2	20 e3 9f	jsr $019fe3			jsr 	FPFastCompare 				; fast compare try first
.019fa5	b0 3b		bcs $019fe2			bcs 	_FPCExit 					; that worked.
.019fa7	b5 84		lda $84,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.019fa9	48		pha				pha
.019faa	b5 8a		lda $8a,x			lda 	XS2_Exponent,x
.019fac	48		pha				pha
.019fad	20 75 9d	jsr $019d75			jsr 	FPSubtract 					; calculate X1-X2
.019fb0	34 85		bit $85,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.019fb2	70 2a		bvs $019fde			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.019fb4	68		pla				pla
.019fb5	8d 9c 03	sta $039c			sta 	ExpTemp						; save first exponent in temporary reg.
.019fb8	68		pla				pla
.019fb9	38		sec				sec
.019fba	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; calculate AX-BX
.019fbd	70 14		bvs $019fd3			bvs 	_FPCNotEqual				; overflow, can't be equal.
.019fbf	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.019fc0	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.019fc2	b0 0f		bcs $019fd3			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.019fc4	38		sec				sec
.019fc5	ad 9c 03	lda $039c			lda 	ExpTemp 					; get one of the exponents back.
.019fc8	e9 12		sbc #$12			sbc 	#18 						; allow for 2^18 error, relatively.
.019fca	b0 02		bcs $019fce			bcs 	_FPCNotRange 				; keep in range.
.019fcc	a9 01		lda #$01			lda 	#1
.019fce					_FPCNotRange:
.019fce	38		sec				sec
.019fcf	f5 84		sbc $84,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.019fd1	b0 0d		bcs $019fe0			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.019fd3					_FPCNotEqual:
.019fd3	b5 85		lda $85,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.019fd5	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.019fd7	f0 02		beq $019fdb			beq 	_FPCNE2
.019fd9	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.019fdb	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.019fdc	80 04		bra $019fe2			bra 	_FPCExit
.019fde					_FPCPullZero:
.019fde	68		pla				pla 								; throw saved exponents
.019fdf	68		pla				pla
.019fe0					_FPCZero:
.019fe0	a9 00		lda #$00			lda 	#0 							; and return zero
.019fe2					_FPCExit:
.019fe2	60		rts				rts
.019fe3					FPFastCompare:
.019fe3	34 85		bit $85,x			bit 	XS_Type,x 					; n1 is zero.
.019fe5	70 23		bvs $01a00a			bvs 	_FPFLeftZero
.019fe7	34 8b		bit $8b,x			bit 	XS2_Type,x 					; n2 is zero
.019fe9	b5 85		lda $85,x			lda 	XS_Type,x 					; if so, return sign bit of 1 (n-0)
.019feb	70 25		bvs $01a012			bvs 	_FPFSignBit
.019fed	55 8b		eor $8b,x			eor 	XS2_Type,x 					; eor 2 type bits. now know both non-zero
.019fef	0a		asl a				asl 	a 							; put in CS if different.
.019ff0	b5 85		lda $85,x			lda 	XS_Type,x 					; if signs different return sign of first
.019ff2	b0 1e		bcs $01a012			bcs 	_FPFSignBit
.019ff4	38		sec				sec 								; same sign and not-zero. compare exponents
.019ff5	b5 84		lda $84,x			lda 	XS_Exponent,x 				; compare exponents. if the same, then fail.
.019ff7	f5 8a		sbc $8a,x			sbc 	XS2_Exponent,x 				; e.g. we have to do it via subtraction.
.019ff9	f0 09		beq $01a004			beq 	_FPNoFastCompare
.019ffb	6a		ror a				ror 	a 							; put carry into bit 7.
.019ffc	34 85		bit $85,x			bit 	XS_Type,X 					; if it is +x then flip it.
.019ffe	30 02		bmi $01a002			bmi		_FPFCNotMinus
.01a000	49 80		eor #$80			eor 	#$80
.01a002					_FPFCNotMinus:
.01a002	80 0e		bra $01a012			bra		_FPFSignBit
.01a004					_FPNoFastCompare:
.01a004	18		clc				clc
.01a005	60		rts				rts
.01a006					_FPFZero:
.01a006	a9 00		lda #$00			lda 	#0
.01a008					_FPFExitSet:
.01a008	38		sec				sec
.01a009	60		rts				rts
.01a00a					_FPFLeftZero:
.01a00a	34 8b		bit $8b,x			bit 	XS2_Type,x 					; if right is zero, return zero.
.01a00c	70 f8		bvs $01a006			bvs 	_FPFZero
.01a00e	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip sign bit
.01a010	49 80		eor #$80			eor 	#$80						; return that as a sign.
.01a012					_FPFSignBit:
.01a012	0a		asl a				asl 	a
.01a013	a9 01		lda #$01			lda 	#1
.01a015	90 f1		bcc $01a008			bcc		_FPFExitSet
.01a017	a9 ff		lda #$ff			lda 	#$FF
.01a019	38		sec				sec
.01a01a	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.01a01b					FPUCopyX2ToX1:
.01a01b	48		pha				pha
.01a01c	da		phx				phx
.01a01d	5a		phy				phy
.01a01e	a0 08		ldy #$08			ldy 	#8
.01a020	b5 86		lda $86,x	_FPUC21:lda 	XS2_Mantissa,x
.01a022	95 80		sta $80,x			sta 	XS_Mantissa,x
.01a024	e8		inx				inx
.01a025	88		dey				dey
.01a026	10 f8		bpl $01a020			bpl 	_FPUC21
.01a028	7a		ply				ply
.01a029	fa		plx				plx
.01a02a	68		pla				pla
.01a02b	60		rts				rts
.01a02c					FPUSetInteger:
.01a02c	48		pha				pha
.01a02d	95 80		sta $80,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.01a02f	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.01a031	10 02		bpl $01a035			bpl 	_FPUSIExtend
.01a033	a9 ff		lda #$ff			lda 	#$FF
.01a035					_FPUSIExtend:
.01a035	95 81		sta $81,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.01a037	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a039	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a03b	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.01a03d	95 85		sta $85,x			sta 	XS_Type,x
.01a03f	68		pla				pla
.01a040	60		rts				rts
.01a041					FPUNegateInteger:
.01a041	48		pha				pha
.01a042	38		sec				sec
.01a043	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.01a045	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.01a047	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a049	a9 00		lda #$00			lda 	#0
.01a04b	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.01a04d	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a04f	a9 00		lda #$00			lda 	#0
.01a051	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.01a053	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a055	a9 00		lda #$00			lda 	#0
.01a057	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.01a059	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a05b	68		pla				pla
.01a05c	60		rts				rts
.01a05d					FPUToFloat:
.01a05d	48		pha				pha
.01a05e	b5 85		lda $85,x			lda 	XS_Type,x					; exit if already float.
.01a060	29 0f		and #$0f			and 	#$0F
.01a062	f0 24		beq $01a088			beq 	_FPUFExit
.01a064	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.01a066	95 85		sta $85,x			sta 	XS_Type,x
.01a068	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.01a06a	95 84		sta $84,x			sta 	XS_Exponent,x 				; x mantissa.
.01a06c	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.01a06e	10 07		bpl $01a077			bpl		_FPUFPositive
.01a070	20 41 a0	jsr $01a041			jsr 	FPUNegateInteger 			; negate the mantissa
.01a073	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.01a075	95 85		sta $85,x			sta 	XS_Type,x
.01a077					_FPUFPositive:
.01a077	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.01a079	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.01a07b	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.01a07d	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01a07f	d0 04		bne $01a085			bne 	_FPUFNonZero
.01a081	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.01a083	95 85		sta $85,x			sta 	XS_Type,x
.01a085					_FPUFNonZero:
.01a085	20 8a a0	jsr $01a08a			jsr 	FPUNormalise 				; normalise the floating point.
.01a088					_FPUFExit:
.01a088	68		pla				pla
.01a089	60		rts				rts
.01a08a					FPUNormalise:
.01a08a	48		pha				pha
.01a08b	34 85		bit $85,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.01a08d	70 18		bvs $01a0a7			bvs 	_FPUNExit
.01a08f	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.01a091	f0 10		beq $01a0a3			beq 	_FPUNSetZero
.01a093					_FPUNLoop:
.01a093	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.01a095	30 10		bmi $01a0a7			bmi 	_FPUNExit 					; if so, we are normalised.
.01a097	16 80		asl $80,x			asl 	0+XS_Mantissa+0,x
.01a099	36 81		rol $81,x			rol 	1+XS_Mantissa+0,x
.01a09b	36 82		rol $82,x			rol 	2+XS_Mantissa+0,x
.01a09d	36 83		rol $83,x			rol 	3+XS_Mantissa+0,x
.01a09f	d6 84		dec $84,x			dec 	XS_Exponent,x 				; decrement exponent
.01a0a1	d0 f0		bne $01a093			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.01a0a3					_FPUNSetZero:
.01a0a3	a9 40		lda #$40			lda 	#$40
.01a0a5	95 85		sta $85,x			sta 	XS_Type,x 					; the result is now zero.
.01a0a7					_FPUNExit:
.01a0a7	68		pla				pla
.01a0a8	60		rts				rts
.01a0a9					FPUToInteger:
.01a0a9	48		pha				pha
.01a0aa	b5 85		lda $85,x			lda 	XS_Type,x 					; if already integer, exit
.01a0ac	29 01		and #$01			and 	#1
.01a0ae	d0 31		bne $01a0e1			bne 	_FPUTOI_Exit
.01a0b0	34 85		bit $85,x			bit 	XS_Type,x					; if zero, return zero.
.01a0b2	70 23		bvs $01a0d7			bvs 	_FPUTOI_Zero
.01a0b4	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.01a0b6	10 1f		bpl $01a0d7			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.01a0b8	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.01a0ba	b0 2b		bcs $01a0e7			bcs 	FP_Overflow
.01a0bc					_FPUToIToInteger:
.01a0bc	b5 84		lda $84,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.01a0be	c9 a0		cmp #$a0			cmp 	#128+32
.01a0c0	f0 0c		beq $01a0ce			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.01a0c2	f6 84		inc $84,x			inc 	XS_Exponent,X 				; increment Exponent
.01a0c4	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.01a0c6	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a0c8	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a0ca	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a0cc	80 ee		bra $01a0bc			bra 	_FPUToIToInteger 			; keep going.
.01a0ce					_FPUToICheckSign:
.01a0ce	b5 85		lda $85,x			lda 	XS_Type,x 					; check sign
.01a0d0	10 0f		bpl $01a0e1			bpl 	_FPUToI_Exit 				; exit if unsigned.
.01a0d2	20 41 a0	jsr $01a041			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.01a0d5	80 0a		bra $01a0e1			bra 	_FPUTOI_Exit
.01a0d7					_FPUTOI_Zero:
.01a0d7	a9 00		lda #$00			lda 	#0 							; return zero integer.
.01a0d9	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a0db	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a0dd	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a0df	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a0e1					_FPUToI_Exit:
.01a0e1	a9 01		lda #$01			lda 	#1 							; set type to integer
.01a0e3	95 85		sta $85,x			sta 	XS_Type,x
.01a0e5	68		pla				pla
.01a0e6	60		rts				rts
.01a0e7					FP_Overflow:
.01a0e7	20 57 85	jsr $018557			jsr ERR_Handler
>01a0ea	46 6c 6f 61 74 69 6e 67			.text "Floating Point overflow",0
>01a0f2	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.01a102					FPUTimes10:
.01a102	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.01a104	85 1a		sta $1a				sta 	ZLTemp1+0
.01a106	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a108	85 1b		sta $1b				sta 	ZLTemp1+1
.01a10a	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a10c	85 1c		sta $1c				sta 	ZLTemp1+2
.01a10e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a110	85 1d		sta $1d				sta 	ZLTemp1+3
.01a112	20 47 a1	jsr $01a147			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.01a115	20 47 a1	jsr $01a147			jsr 	_FPUT_LSR_ZLTemp1
.01a118	18		clc				clc
.01a119	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.01a11b	65 1a		adc $1a				adc 	ZLTemp1+0
.01a11d	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a11f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a121	65 1b		adc $1b				adc 	ZLTemp1+1
.01a123	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a125	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a127	65 1c		adc $1c				adc 	ZLTemp1+2
.01a129	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a12b	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a12d	65 1d		adc $1d				adc 	ZLTemp1+3
.01a12f	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a131	90 0a		bcc $01a13d			bcc 	_FPUTimes10
.01a133	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.01a135	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a137	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a139	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a13b	f6 84		inc $84,x			inc 	XS_Exponent,x				; fix exponent
.01a13d					_FPUTimes10:
.01a13d	b5 84		lda $84,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.01a13f	18		clc				clc
.01a140	69 03		adc #$03			adc 	#3
.01a142	95 84		sta $84,x			sta 	XS_Exponent,x
.01a144	b0 a1		bcs $01a0e7			bcs 	FP_Overflow 				; error
.01a146	60		rts				rts
.01a147					_FPUT_LSR_ZLTemp1:
.01a147	46 1d		lsr $1d				lsr 	ZLTemp1+3
.01a149	66 1c		ror $1c				ror 	ZLTemp1+2
.01a14b	66 1b		ror $1b				ror 	ZLTemp1+1
.01a14d	66 1a		ror $1a				ror 	ZLTemp1+0
.01a14f	60		rts				rts
.01a150					FPUScale10A:
.01a150	5a		phy				phy
.01a151	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.01a153	f0 37		beq $01a18c			beq 	_FPUScaleExit
.01a155	da		phx				phx 								; save X
.01a156	e8		inx				inx
.01a157	e8		inx				inx
.01a158	e8		inx				inx
.01a159	e8		inx				inx
.01a15a	e8		inx				inx
.01a15b	e8		inx				inx
.01a15c	a8		tay				tay 								; save power scalar in Y.
.01a15d	a9 00		lda #$00			lda 	#0
.01a15f	95 80		sta $80,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.01a161	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a163	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a165	95 85		sta $85,x			sta 	XS_Type,x
.01a167	a9 80		lda #$80			lda 	#$80
.01a169	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a16b	a9 81		lda #$81			lda 	#$81
.01a16d	95 84		sta $84,x			sta 	XS_Exponent,x
.01a16f	5a		phy				phy 								; save 10^n on stack.
.01a170	c0 00		cpy #$00			cpy 	#0
.01a172	10 05		bpl $01a179			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.01a174	98		tya				tya
.01a175	49 ff		eor #$ff			eor 	#$FF
.01a177	1a		inc a				inc 	a
.01a178	a8		tay				tay
.01a179					_FPUSAbs:
.01a179	20 02 a1	jsr $01a102			jsr 	FPUTimes10
.01a17c	88		dey				dey
.01a17d	d0 fa		bne $01a179			bne 	_FPUSAbs 					; tos is now 10^|AC|
.01a17f	68		pla				pla 								; restore count in A
.01a180	fa		plx				plx 								; restore X pointing to number to scale.
.01a181	0a		asl a				asl 	a
.01a182	b0 05		bcs $01a189			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.01a184	20 a4 9e	jsr $019ea4			jsr 	FPMultiply 					; if clear multiply.
.01a187	80 03		bra $01a18c			bra		_FPUScaleExit
.01a189					_FPUSDivide:
.01a189	20 31 9e	jsr $019e31			jsr 	FPDivide
.01a18c					_FPUScaleExit:
.01a18c	7a		ply				ply
.01a18d	60		rts				rts
.01a18e					FPUCopyToNext:
.01a18e	a0 06		ldy #$06			ldy 		#6
.01a190	da		phx				phx
.01a191					_FPUCopy1:
.01a191	b5 80		lda $80,x			lda 	XS_Mantissa,x
.01a193	95 86		sta $86,x			sta 	XS2_Mantissa,x
.01a195	e8		inx				inx
.01a196	88		dey				dey
.01a197	d0 f8		bne $01a191			bne 	_FPUCopy1
.01a199	fa		plx				plx
.01a19a	60		rts				rts
.01a19b					FPUCopyFromNext:
.01a19b	a0 06		ldy #$06			ldy 		#6
.01a19d	da		phx				phx
.01a19e					_FPUCopy1:
.01a19e	b5 86		lda $86,x			lda 	XS2_Mantissa,x
.01a1a0	95 80		sta $80,x			sta 	XS_Mantissa,x
.01a1a2	e8		inx				inx
.01a1a3	88		dey				dey
.01a1a4	d0 f8		bne $01a19e			bne 	_FPUCopy1
.01a1a6	fa		plx				plx
.01a1a7	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fptostr.asm

.01a1a8					FPToString:
.01a1a8	48		pha				pha
.01a1a9	5a		phy				phy
.01a1aa	34 85		bit $85,x			bit 		XS_Type,x 				; check zero flag
.01a1ac	50 0a		bvc $01a1b8			bvc 		_FPTSIsFloat 			; if zero,
.01a1ae					_FPTSZero:
.01a1ae	a9 30		lda #$30			lda 		#"0"
.01a1b0	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.01a1b3					_FPTSExit:
.01a1b3	7a		ply				ply
.01a1b4	68		pla				pla
.01a1b5	60		rts				rts
.01a1b6	80 fb		bra $01a1b3			bra 		_FPTSExit
.01a1b8					_FPTSIsFloat:
.01a1b8	b5 85		lda $85,x			lda 		XS_Type,x 				; is it signed ?
.01a1ba	10 09		bpl $01a1c5			bpl 		_FPTSNotSigned
.01a1bc	a9 00		lda #$00			lda 		#0 						; clear sign flag
.01a1be	95 85		sta $85,x			sta 		XS_Type,x
.01a1c0	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.01a1c2	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.01a1c5					_FPTSNotSigned:
.01a1c5	b5 84		lda $84,x			lda 		XS_Exponent,x
.01a1c7	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.01a1c9	b0 09		bcs $01a1d4			bcs 		_FPTSExponent
.01a1cb	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.01a1cd	90 05		bcc $01a1d4			bcc 		_FPTSExponent 			;
.01a1cf					_FPTSStandard:
.01a1cf	20 13 a2	jsr $01a213			jsr 		FPTOutputBody 			; output the body.
.01a1d2	80 df		bra $01a1b3			bra 		_FPTSExit
.01a1d4					_FPTSExponent:
.01a1d4	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.01a1d6	8d 9d 03	sta $039d			sta 		ExpCount
.01a1d9					_FPTSExponentLoop:
.01a1d9	b5 84		lda $84,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.01a1db	10 0e		bpl $01a1eb			bpl 		_FPTSTimes
.01a1dd	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.01a1df	90 14		bcc $01a1f5			bcc 		_FPTSScaledToExp
.01a1e1	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.01a1e3	20 50 a1	jsr $01a150			jsr 		FPUScale10A
.01a1e6	ee 9d 03	inc $039d			inc 		ExpCount
.01a1e9	80 ee		bra $01a1d9			bra 		_FPTSExponentLoop
.01a1eb					_FPTSTimes:
.01a1eb	a9 01		lda #$01			lda 		#1
.01a1ed	20 50 a1	jsr $01a150			jsr 		FPUScale10A
.01a1f0	ce 9d 03	dec $039d			dec 		ExpCount
.01a1f3	80 e4		bra $01a1d9			bra 		_FPTSExponentLoop
.01a1f5					_FPTSScaledToExp:
.01a1f5	20 13 a2	jsr $01a213			jsr 		FPTOutputBody 			; output the body.
.01a1f8	a9 65		lda #$65			lda 		#"e"					; output E
.01a1fa	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.01a1fd	ad 9d 03	lda $039d			lda 		ExpCount 				; get the exponent
.01a200	95 80		sta $80,x			sta 		XS_Mantissa,x
.01a202	29 80		and #$80			and 		#$80 					; sign extend it
.01a204	f0 02		beq $01a208			beq 		_FPTSSExt
.01a206	a9 ff		lda #$ff			lda 		#$FF
.01a208					_FPTSSExt:
.01a208	95 81		sta $81,x			sta 		XS_Mantissa+1,x
.01a20a	95 82		sta $82,x			sta 		XS_Mantissa+2,x
.01a20c	95 83		sta $83,x			sta 		XS_Mantissa+3,x
.01a20e	20 30 9c	jsr $019c30			jsr 		INTToString 			; output the exponent.
.01a211	80 a0		bra $01a1b3			bra			_FPTSExit 				; and exit.
.01a213					FPTOutputBody:
.01a213	20 8e a1	jsr $01a18e			jsr 		FPUCopyToNext 			; copy to next slot.
.01a216	20 a9 a0	jsr $01a0a9			jsr 		FPUToInteger 			; convert to an integer
.01a219	20 30 9c	jsr $019c30			jsr 		INTToString 			; output the main integer part.
.01a21c	20 9b a1	jsr $01a19b			jsr 		FPUCopyFromNext 		; get the fractional part back.
.01a21f	20 2c 9f	jsr $019f2c			jsr 		FPFractionalPart 		; get the decimal part.
.01a222	34 85		bit $85,x			bit 		XS_Type,x 				; any fractional part.
.01a224	70 3c		bvs $01a262			bvs 		_FPTOExit 				; if not, exit now.
.01a226	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.01a228	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.01a22b					_FPOutLoop:
.01a22b	34 85		bit $85,x			bit 		XS_Type,x 				; finally reached zero.
.01a22d	70 1d		bvs $01a24c			bvs 		_FPStripZeros 			; strip trailing zeros
.01a22f	20 02 a1	jsr $01a102			jsr 		FPUTimes10 				; multiply by 10
.01a232	20 8e a1	jsr $01a18e			jsr 		FPUCopyToNext			; copy to next slot.
.01a235	20 a9 a0	jsr $01a0a9			jsr 		FPUToInteger 			; convert to integer
.01a238	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; print digit.
.01a23a	09 30		ora #$30			ora 		#"0"
.01a23c	20 d2 9c	jsr $019cd2			jsr 		ITSOutputCharacter
.01a23f	20 9b a1	jsr $01a19b			jsr 		FPUCopyFromNext 		; get it back
.01a242	20 2c 9f	jsr $019f2c			jsr 		FPFractionalPart 		; get fractional part
.01a245	ad 14 03	lda $0314			lda 		NumBufX 				; done 11 characters yet ?
.01a248	c9 0b		cmp #$0b			cmp 	 	#11
.01a24a	90 df		bcc $01a22b			bcc 		_FPOutLoop 				; if so, keep going till zero.
.01a24c					_FPStripZeros:
.01a24c	ac 14 03	ldy $0314			ldy 		NumBufX 				; strip trailing zeros.
.01a24f					_FPStripLoop:
.01a24f	88		dey				dey 								; back one, if at start then no strip
.01a250	f0 10		beq $01a262			beq 		_FPToExit
.01a252	b9 15 03	lda $0315,y			lda 		Num_Buffer,y 			; keep going if "0"
.01a255	c9 30		cmp #$30			cmp 		#"0"
.01a257	f0 f6		beq $01a24f			beq 		_FPStripLoop
.01a259	c8		iny				iny
.01a25a	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.01a25c	99 15 03	sta $0315,y			sta 		Num_Buffer,y
.01a25f	8c 14 03	sty $0314			sty 		NumBufX 				; update position.
.01a262					_FPTOExit:
.01a262	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fpfromstr.asm

.01a263					FPFromString:
.01a263	48		pha				pha 								; push A
.01a264	b1 1e		lda ($1e),y			lda		(zGenPtr),y					; is it followed by a DP ?
.01a266	c9 2e		cmp #$2e			cmp 	#"."
.01a268	f0 03		beq $01a26d			beq	 	_FPFIsDecimal
.01a26a	4c c9 a2	jmp $01a2c9			jmp 	_FPFNotDecimal
.01a26d					_FPFIsDecimal:
.01a26d	c8		iny				iny 								; consume the decimal.
.01a26e	20 5d a0	jsr $01a05d			jsr 	FPUToFloat 					; convert the integer to float.
.01a271	da		phx				phx 								; save X.
.01a272	5a		phy				phy 								; save decimal start position
.01a273	e8		inx				inx
.01a274	e8		inx				inx
.01a275	e8		inx				inx
.01a276	e8		inx				inx
.01a277	e8		inx				inx
.01a278	e8		inx				inx
.01a279	20 ea 9c	jsr $019cea			jsr 	INTFromStringY 				; get the part after the DP.
.01a27c	20 5d a0	jsr $01a05d			jsr 	FPUToFloat 					; convert that to a float.
.01a27f	68		pla				pla 								; calculate - chars consumed.
.01a280	8c 9c 03	sty $039c			sty 	ExpTemp
.01a283	38		sec				sec
.01a284	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; this is the shift amount
.01a287	20 50 a1	jsr $01a150			jsr 	FPUScale10A 				; scale it by 10^AC
.01a28a	fa		plx				plx 								; restore original X
.01a28b	20 7d 9d	jsr $019d7d			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.01a28e	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; exponent ?
.01a290	c9 45		cmp #$45			cmp 	#"E"
.01a292	f0 04		beq $01a298			beq 	_FPFExponent
.01a294	c9 65		cmp #$65			cmp 	#"e"
.01a296	d0 31		bne $01a2c9			bne 	_FPFNotDecimal 				; no, then exit normally.
.01a298					_FPFExponent:
.01a298	c8		iny				iny 								; skip over E symbol.
.01a299	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; look at next
.01a29b	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.01a29d	d0 01		bne $01a2a0			bne 	_FPFGotSign
.01a29f	c8		iny				iny 								; if it was - skip over it.
.01a2a0					_FPFGotSign:
.01a2a0	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.01a2a1	da		phx				phx
.01a2a2	e8		inx				inx
.01a2a3	e8		inx				inx
.01a2a4	e8		inx				inx
.01a2a5	e8		inx				inx
.01a2a6	e8		inx				inx
.01a2a7	e8		inx				inx
.01a2a8	20 ea 9c	jsr $019cea			jsr 	INTFromStringY 				; get the exponent
.01a2ab	fa		plx				plx 								; restore X.
.01a2ac	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.01a2ae	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.01a2b0	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.01a2b2	d0 17		bne $01a2cb			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.01a2b4	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.01a2b6	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.01a2b8	b0 11		bcs $01a2cb			bcs 	_FPFXOverflow
.01a2ba	68		pla				pla 								; get direction
.01a2bb	d0 07		bne $01a2c4			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.01a2bd	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.01a2bf	49 ff		eor #$ff			eor 	#$FF
.01a2c1	1a		inc a				inc 	a
.01a2c2	95 86		sta $86,x			sta 	XS2_Mantissa+0,x
.01a2c4					_FPFXScale:
.01a2c4	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.01a2c6	20 50 a1	jsr $01a150			jsr 	FPUScale10A 				; scale by the exponent.
.01a2c9					_FPFNotDecimal:
.01a2c9	68		pla				pla
.01a2ca	60		rts				rts
.01a2cb					_FPFXOverflow:
.01a2cb	20 57 85	jsr $018557			jsr 	ERR_Handler
>01a2ce	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>01a2d6	20 52 61 6e 67 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/rnd.asm

.01a2dd					Unary_Rnd:
.01a2dd	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; get value
.01a2e0	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; check right bracket.
.01a2e3	20 f7 92	jsr $0192f7			jsr 	GetSignCurrent 				; get sign -1,0,1.
.01a2e6	09 00		ora #$00			ora 	#0 							; if -ve set seed.
.01a2e8	30 10		bmi $01a2fa			bmi 	_URSetSeed
.01a2ea	f0 28		beq $01a314			beq 	_URMakeRandom 				; if zero return same number.
.01a2ec	da		phx				phx
.01a2ed	a2 00		ldx #$00			ldx 	#0
.01a2ef	20 4b a3	jsr $01a34b			jsr 	Random16
.01a2f2	a2 02		ldx #$02			ldx 	#2
.01a2f4	20 4b a3	jsr $01a34b			jsr 	Random16
.01a2f7	fa		plx				plx
.01a2f8	80 1a		bra $01a314			bra 	_URMakeRandom
.01a2fa					_URSetSeed:
.01a2fa	20 5d a0	jsr $01a05d			jsr 	FPUToFloat 					; make it a float to twiddle it.
.01a2fd	b5 80		lda $80,x			lda		XS_Mantissa+0,x 			; copy mantissa to seed.
.01a2ff	8d a3 03	sta $03a3			sta 	RandomSeed+0
.01a302	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.01a304	8d a4 03	sta $03a4			sta 	RandomSeed+1
.01a307	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01a309	8d a5 03	sta $03a5			sta 	RandomSeed+2
.01a30c	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.01a30e	0a		asl a				asl 	a
.01a30f	49 db		eor #$db			eor 	#$DB
.01a311	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a314					_URMakeRandom:
.01a314	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; check if seed is zero.
.01a317	0d a4 03	ora $03a4			ora 	RandomSeed+1
.01a31a	0d a5 03	ora $03a5			ora 	RandomSeed+2
.01a31d	0d a6 03	ora $03a6			ora 	RandomSeed+3
.01a320	d0 0a		bne $01a32c			bne 	_URNotZero
.01a322	a9 47		lda #$47			lda 	#$47
.01a324	8d a4 03	sta $03a4			sta 	RandomSeed+1				; if it is, make it non zero.
.01a327	a9 3d		lda #$3d			lda 	#$3D
.01a329	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a32c					_URNotZero:
.01a32c	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; copy seed into mantissa.
.01a32f	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a331	ad a4 03	lda $03a4			lda 	RandomSeed+1
.01a334	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a336	ad a5 03	lda $03a5			lda 	RandomSeed+2
.01a339	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a33b	ad a6 03	lda $03a6			lda 	RandomSeed+3
.01a33e	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a340	a9 00		lda #$00			lda 	#$00 						; set type to float.
.01a342	95 85		sta $85,x			sta 	XS_Type,x
.01a344	a9 80		lda #$80			lda 	#$80
.01a346	95 84		sta $84,x			sta	 	XS_Exponent,x				; exponent to 128 (e.g. 0.x 2^0)
.01a348	4c 8a a0	jmp $01a08a			jmp 	FPUNormalise
.01a34b					Random16:
.01a34b	5e a4 03	lsr $03a4,x			lsr 	RandomSeed+1,x				; shift seed right
.01a34e	7e a3 03	ror $03a3,x			ror 	RandomSeed,x
.01a351	90 08		bcc $01a35b			bcc 	_R16_NoXor
.01a353	bd a4 03	lda $03a4,x			lda 	RandomSeed+1,x				; xor MSB with $B4 if bit set.
.01a356	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.01a358	9d a4 03	sta $03a4,x			sta 	RandomSeed+1,x
.01a35b					_R16_NoXor:
.01a35b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/int.asm

.01a35c					Unary_Int:
.01a35c	20 79 90	jsr $019079			jsr 	EvaluateNumberX 			; get value
.01a35f	20 ad 96	jsr $0196ad			jsr 	CheckNextRParen 			; check right bracket.
.01a362	4c a9 a0	jmp $01a0a9			jmp 	FPUToInteger				; Convert to integer.

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>01a365	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	00 c0						.word 	StartROM
>fffe	19 c0					.word TIM_BreakHandler

;******  End of listing
