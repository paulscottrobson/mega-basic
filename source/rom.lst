
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -b -q -L rom.lst -o rom.bin basic.asm
; Mon Aug 19 10:31:40 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="4510"					CPU = "4510"
="mega65"				HARDWARE = "mega65"

;******  Processing file: modules/float/fpmacros.inc


;******  Return to file: _include.asm


;******  Processing file: modules/common/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zLTemp1:	.dword ?						; long word (used in multiply)
>001a					zGenPtr:	.word ? 						; general pointer.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0304					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0305					XS_Type 	.byte ? 						; bit 7 sign (float only)
=774					XS2_Mantissa = XS_Mantissa+6
=778					XS2_Exponent = XS_Exponent+6
=779					XS2_Type = XS_Type+6
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0425					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0427					Tim_SR:		.byte ? 						; Processor Status
>0428					Tim_A:		.byte ? 						; Processor Registers
>0429					Tim_X:		.byte ?
>042a					Tim_Y:		.byte ?
>042b					Tim_Z:		.byte ?
>042c					Tim_SP:		.byte ?							; Stack Pointer
>042d					ExpTemp:	.byte ?							; Working temp for exponents.
>042e					ExpCount:	.byte ? 						; Count of decimal exponents.

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/mega65.asm

.a000					StartROM:
.a000	a2 ff		ldx #$ff			ldx 		#$FF 					; empty stack
.a002	9a		txs				txs
.a003	20 40 a2	jsr $a240			jsr 	IF_Reset 					; reset external interface
.a006	20 0c a0	jsr $a00c			jsr 	IFT_ClearScreen
.a009	4c b7 b1	jmp $b1b7		jmp FPTTest

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.a00c					IFT_ClearScreen:
.a00c	48		pha				pha
.a00d	da		phx				phx
.a00e	5a		phy				phy
.a00f	20 a7 a1	jsr $a1a7			jsr 	IF_Home 					; home cursor
.a012	a2 19		ldx #$19			ldx 	#IF_Height 					; this many lines.
.a014					_IFT_CS0:
.a014	a0 50		ldy #$50			ldy 	#IF_Width 					; this many chars/line
.a016					_IFT_CS1:
.a016	a9 20		lda #$20			lda 	#' '						; clear line.
.a018	20 d6 a1	jsr $a1d6			jsr 	IF_Write
.a01b	88		dey				dey
.a01c	d0 f8		bne $a016			bne 	_IFT_CS1
.a01e	20 b6 a1	jsr $a1b6			jsr 	IF_NewLine 					; next line down
.a021	ca		dex				dex
.a022	d0 f0		bne $a014			bne 	_IFT_CS0
.a024	7a		ply				ply
.a025	fa		plx				plx
.a026	68		pla				pla
.a027					IFT_HomeCursor:
.a027	48		pha				pha
.a028	20 a7 a1	jsr $a1a7			jsr 	IF_Home
.a02b	a9 00		lda #$00			lda 	#0
.a02d	8d 00 02	sta $0200			sta 	IFT_XCursor
.a030	8d 01 02	sta $0201			sta 	IFT_YCursor
.a033	68		pla				pla
.a034	60		rts				rts
.a035					IFT_UpLine:
.a035	48		pha				pha
.a036	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.a039	3a		dec a				dec 	a 							; line above
.a03a	30 03		bmi $a03f			bmi 	_IFTULExit 					; too far, abort
.a03c	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos					; set to that line.
.a03f					_IFTULExit:
.a03f	68		pla				pla
.a040	60		rts				rts
.a041					IFT_PrintCharacter:
.a041	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.a043	f0 16		beq $a05b			beq 	IFT_NewLine
.a045	48		pha				pha
.a046	20 73 a0	jsr $a073			jsr 	IFT_UpperCase 				; make upper case
.a049	20 d6 a1	jsr $a1d6			jsr 	IF_Write 					; write out.
.a04c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.a04f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.a052	c9 50		cmp #$50			cmp 	#IF_Width
.a054	d0 03		bne $a059			bne 	_IFT_PCNotEOL
.a056	20 5b a0	jsr $a05b			jsr 	IFT_NewLine 				; if so do new line.
.a059					_IFT_PCNotEOL:
.a059	68		pla				pla
.a05a	60		rts				rts
.a05b					IFT_NewLine:
.a05b	48		pha				pha
.a05c	20 b6 a1	jsr $a1b6			jsr 	IF_NewLine 					; new line on actual screen.
.a05f	a9 00		lda #$00			lda 	#0 							; reset x position
.a061	8d 00 02	sta $0200			sta 	IFT_XCursor
.a064	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.a067	ad 01 02	lda $0201			lda 	IFT_YCursor
.a06a	c9 19		cmp #$19			cmp 	#IF_Height 					; reached bottom.
.a06c	d0 03		bne $a071			bne 	_IFT_NL_NotEOS
.a06e	20 7e a0	jsr $a07e			jsr 	IFT_Scroll 					; scroll screen up.
.a071					_IFT_NL_NotEOS:
.a071	68		pla				pla
.a072	60		rts				rts
.a073					IFT_UpperCase:
.a073	c9 61		cmp #$61			cmp 	#"a"
.a075	90 06		bcc $a07d			bcc 	_IFT_UCExit
.a077	c9 7b		cmp #$7b			cmp 	#"z"+1
.a079	b0 02		bcs $a07d			bcs 	_IFT_UCExit
.a07b	49 20		eor #$20			eor 	#$20
.a07d					_IFT_UCExit:
.a07d	60		rts				rts
.a07e					IFT_Scroll:
.a07e	48		pha				pha 								; save AXY
.a07f	da		phx				phx
.a080	5a		phy				phy
.a081	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.a083					_IFT_SLoop:
.a083	20 a3 a0	jsr $a0a3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.a086	e8		inx				inx
.a087	e0 18		cpx #$18			cpx 	#IF_Height-1				; do whole screen
.a089	d0 f8		bne $a083			bne 	_IFT_SLoop
.a08b	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a08d	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a090	a2 50		ldx #$50			ldx 	#IF_Width 					; blank line
.a092					_IFT_SBlank:
.a092	a9 20		lda #$20			lda 	#32
.a094	20 d6 a1	jsr $a1d6			jsr 	IF_Write
.a097	ca		dex				dex
.a098	d0 f8		bne $a092			bne 	_IFT_SBlank
.a09a	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a09c	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a09f	7a		ply				ply
.a0a0	fa		plx				plx
.a0a1	68		pla				pla
.a0a2	60		rts				rts
.a0a3					_IFT_ScrollLine:
.a0a3	da		phx				phx
.a0a4	da		phx				phx
.a0a5	8a		txa				txa 								; copy line into buffer.
.a0a6	1a		inc a				inc 	a 							; next line down.
.a0a7	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a0aa	a2 00		ldx #$00			ldx 	#0
.a0ac					_IFTScrollCopy1:
.a0ac	20 c8 a1	jsr $a1c8			jsr 	IF_Read
.a0af	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.a0b2	e8		inx				inx
.a0b3	e0 50		cpx #$50			cpx 	#IF_Width
.a0b5	d0 f5		bne $a0ac			bne 	_IFTScrollCopy1
.a0b7	68		pla				pla
.a0b8	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a0bb	a2 00		ldx #$00			ldx 	#0
.a0bd					_IFTScrollCopy2:
.a0bd	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.a0c0	20 d6 a1	jsr $a1d6			jsr 	IF_Write
.a0c3	e8		inx				inx
.a0c4	e0 50		cpx #$50			cpx 	#IF_Width
.a0c6	d0 f5		bne $a0bd			bne 	_IFTScrollCopy2
.a0c8	fa		plx				plx
.a0c9	60		rts				rts
.a0ca					IFT_SetYPos:
.a0ca	48		pha				pha
.a0cb	da		phx				phx
.a0cc	aa		tax				tax
.a0cd	20 27 a0	jsr $a027			jsr 	IFT_HomeCursor
.a0d0	e0 00		cpx #$00			cpx 	#0
.a0d2	f0 09		beq $a0dd			beq 	_IFT_MOAExit
.a0d4					_IFT_MOALoop:
.a0d4	20 b6 a1	jsr $a1b6			jsr 	IF_NewLine
.a0d7	ee 01 02	inc $0201			inc 	IFT_YCursor
.a0da	ca		dex				dex
.a0db	d0 f7		bne $a0d4			bne		_IFT_MOALoop
.a0dd					_IFT_MOAExit:
.a0dd	fa		plx				plx
.a0de	68		pla				pla
.a0df	60		rts				rts
.a0e0					IFT_GetKeyCursor:
.a0e0	20 e8 a0	jsr $a0e8			jsr 	_IFT_FlipCursor 			; reverse current
.a0e3					_IFT_GKCWait:
.a0e3	20 f9 a1	jsr $a1f9			jsr 	IF_GetKey 					; get key
.a0e6	f0 fb		beq $a0e3			beq 	_IFT_GKCWait
.a0e8					_IFT_FlipCursor:
.a0e8	48		pha				pha 								; save
.a0e9	20 c8 a1	jsr $a1c8			jsr 	IF_Read 					; read
.a0ec	20 e1 a1	jsr $a1e1			jsr 	IF_LeftOne
.a0ef	49 80		eor #$80			eor 	#$80 						; reverse
.a0f1	20 d6 a1	jsr $a1d6			jsr 	IF_Write 					; write
.a0f4	20 e1 a1	jsr $a1e1			jsr 	IF_LeftOne
.a0f7	68		pla				pla
.a0f8	60		rts				rts
.a0f9					IFT_ReadLine:
.a0f9	48		pha				pha
.a0fa					_IFT_RLLoop:
.a0fa	20 e0 a0	jsr $a0e0			jsr 	IFT_GetKeyCursor 			; get keystroke
.a0fd	c9 0d		cmp #$0d			cmp 	#13							; return
.a0ff	f0 7d		beq $a17e			beq 	_IFT_RLExit
.a101	c9 20		cmp #$20			cmp 	#32 						; control character
.a103	90 05		bcc $a10a			bcc 	_IFT_Control
.a105	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.a108	80 f0		bra $a0fa			bra 	_IFT_RLLoop
.a10a					_IFT_Control:
.a10a	c9 01		cmp #$01			cmp 	#"A"-64
.a10c	f0 26		beq $a134			beq 	_IFT_Left
.a10e	c9 04		cmp #$04			cmp 	#"D"-64
.a110	f0 2e		beq $a140			beq 	_IFT_Right
.a112	c9 17		cmp #$17			cmp 	#"W"-64
.a114	f0 36		beq $a14c			beq 	_IFT_Up
.a116	c9 13		cmp #$13			cmp 	#"S"-64
.a118	f0 3e		beq $a158			beq 	_IFT_Down
.a11a	c9 08		cmp #$08			cmp 	#"H"-64
.a11c	f0 09		beq $a127			beq 	_IFT_Backspace
.a11e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.a120	d0 d8		bne $a0fa			bne 	_IFT_RLLoop
.a122	20 0c a0	jsr $a00c			jsr 	IFT_ClearScreen				; clear CTL-Z
.a125	80 d3		bra $a0fa			bra 	_IFT_RLLoop
.a127					_IFT_Backspace:
.a127	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.a12a	f0 ce		beq $a0fa			beq 	_IFT_RLLoop
.a12c	20 e1 a1	jsr $a1e1			jsr 	IF_LeftOne
.a12f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.a131	20 d6 a1	jsr $a1d6			jsr 	IF_Write
.a134					_IFT_Left:
.a134	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.a137	10 29		bpl $a162			bpl 	_IFT_Reposition
.a139	a9 4f		lda #$4f			lda 	#IF_Width-1
.a13b					_IFT_SetX:
.a13b	8d 00 02	sta $0200			sta 	IFT_XCursor
.a13e	80 22		bra $a162			bra 	_IFT_Reposition
.a140					_IFT_Right:
.a140	ee 00 02	inc $0200			inc 	IFT_XCursor
.a143	ad 00 02	lda $0200			lda 	IFT_XCursor
.a146	49 50		eor #$50			eor 	#IF_Width
.a148	f0 f1		beq $a13b			beq 	_IFT_SetX
.a14a	80 16		bra $a162			bra 	_IFT_Reposition
.a14c					_IFT_Up:
.a14c	ce 01 02	dec $0201			dec 	IFT_YCursor
.a14f	10 11		bpl $a162			bpl 	_IFT_Reposition
.a151	a9 18		lda #$18			lda 	#IF_Height-1
.a153					_IFT_SetY:
.a153	8d 01 02	sta $0201			sta 	IFT_YCursor
.a156	80 0a		bra $a162			bra 	_IFT_Reposition
.a158					_IFT_Down:
.a158	ee 01 02	inc $0201			inc 	IFT_YCursor
.a15b	ad 01 02	lda $0201			lda 	IFT_YCursor
.a15e	49 19		eor #$19			eor 	#IF_Height
.a160	f0 f1		beq $a153			beq 	_IFT_SetY
.a162					_IFT_Reposition:
.a162	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.a165	48		pha				pha
.a166	ad 01 02	lda $0201			lda 	IFT_YCursor
.a169	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a16c	68		pla				pla
.a16d	aa		tax				tax
.a16e	e0 00		cpx #$00			cpx 	#0
.a170	f0 88		beq $a0fa			beq 	_IFT_RLLoop
.a172					_IFT_MoveRight:
.a172	20 c8 a1	jsr $a1c8			jsr 	IF_Read
.a175	ee 00 02	inc $0200			inc 	IFT_XCursor
.a178	ca		dex				dex
.a179	d0 f7		bne $a172			bne 	_IFT_MoveRight
.a17b	4c fa a0	jmp $a0fa			jmp 	_IFT_RLLoop
.a17e					_IFT_RLExit:
.a17e	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.a181	20 ca a0	jsr $a0ca			jsr 	IFT_SetYPos
.a184	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.a186					_IFT_RLRead:
.a186	20 c8 a1	jsr $a1c8			jsr 	IF_Read
.a189	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.a18c	e8		inx				inx
.a18d	e0 50		cpx #$50			cpx 	#IF_Width
.a18f	d0 f5		bne $a186			bne 	_IFT_RLRead
.a191					_IFT_RL_Trim:
.a191	ca		dex				dex 	 							; previous char
.a192	30 07		bmi $a19b			bmi 	_IFT_Found 					; gone too far
.a194	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.a197	c9 20		cmp #$20			cmp 	#" "
.a199	f0 f6		beq $a191			beq 	_IFT_RL_Trim
.a19b					_IFT_Found:
.a19b	e8		inx				inx 								; forward to non-space
.a19c	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.a19e	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.a1a1	68		pla				pla
.a1a2	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.a1a4	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.a1a6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_mega65.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line
=6					IF_XPos 	= 6 							; current position, horizontal.
=8					IF_FarPtr 	= 8 							; far pointer (4 bytes)
=$1000					IF_Screen = $1000							; 2k screen RAM here
=$800					IF_CharSet = $800							; 2k character set (0-7F) here
.a1a7					IF_Home:
.a1a7	48		pha				pha 								; reset cursor position
.a1a8	a9 00		lda #$00			lda 	#IF_Screen & $FF
.a1aa	85 04		sta $04				sta 	IF_Pos
.a1ac	a9 10		lda #$10			lda 	#IF_Screen >> 8
.a1ae	85 05		sta $05				sta 	IF_Pos+1
.a1b0	a9 00		lda #$00			lda 	#0
.a1b2	85 06		sta $06				sta 	IF_XPos
.a1b4	68		pla				pla
.a1b5	60		rts				rts
.a1b6					IF_NewLine:
.a1b6	48		pha				pha
.a1b7	a9 00		lda #$00			lda 	#0 							; back to start of line
.a1b9	85 06		sta $06				sta 	IF_XPos
.a1bb	18		clc				clc 								; down one line
.a1bc	a5 04		lda $04				lda 	IF_Pos
.a1be	69 50		adc #$50			adc 	#80
.a1c0	85 04		sta $04				sta 	IF_Pos
.a1c2	90 02		bcc $a1c6			bcc 	_IF_NoCarry 				; carry through.
.a1c4	e6 05		inc $05				inc 	IF_Pos+1
.a1c6					_IF_NoCarry:
.a1c6	68		pla				pla
.a1c7	60		rts				rts
.a1c8					IF_Read:
.a1c8	5a		phy				phy 								; save current Y
.a1c9	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.a1cb	b1 04		lda ($04),y			lda 	(IF_Pos),y
.a1cd	49 20		eor #$20			eor 	#$20
.a1cf	18		clc				clc
.a1d0	69 20		adc #$20			adc 	#$20
.a1d2	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a1d4	7a		ply				ply									; restore Y
.a1d5	60		rts				rts
.a1d6					IF_Write:
.a1d6	5a		phy				phy 								; save current Y
.a1d7	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.a1d9	29 3f		and #$3f			and 	#63 						; PETSCII
.a1db	91 04		sta ($04),y			sta 	(IF_Pos),y
.a1dd	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a1df	7a		ply				ply									; restore Y
.a1e0	60		rts				rts
.a1e1					IF_LeftOne:
.a1e1	c6 06		dec $06				dec 	IF_XPos
.a1e3	60		rts				rts
.a1e4					IF_CheckBreak:
.a1e4	db		phz				phz
.a1e5	20 2d a2	jsr $a22d			jsr 	IF_SetupKeyAddress 			; point to keyboard
.a1e8	e6 08		inc $08				inc 	IF_FarPtr 					; point to modifiers.
.a1ea	ea		nop				nop 								; read modifiers.
.a1eb	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a1ed	fb		plz				plz 								; restore Z
.a1ee	29 05		and #$05			and 	#5							; break is LeftShift+Ctrl
.a1f0	c9 05		cmp #$05			cmp 	#5
.a1f2	f0 02		beq $a1f6			beq 	_IF_CBExit
.a1f4	a9 00		lda #$00			lda 	#0
.a1f6					_IF_CBExit:
.a1f6	c9 00		cmp #$00			cmp 	#0
.a1f8	60		rts				rts
.a1f9					IF_GetKey:
.a1f9	db		phz				phz
.a1fa	20 2d a2	jsr $a22d			jsr 	IF_SetupKeyAddress
.a1fd	ea		nop				nop 								; read keyboard
.a1fe	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a200	c9 14		cmp #$14			cmp 	#20
.a202	d0 02		bne $a206			bne 	_KMNo
.a204	a9 08		lda #$08			lda 	#"H"-64
.a206					_KMNo:
.a206	c9 91		cmp #$91			cmp 	#145
.a208	d0 02		bne $a20c			bne 	_KMNo
.a20a	a9 17		lda #$17			lda 	#"W"-64
.a20c					_KMNo:
.a20c	c9 11		cmp #$11			cmp 	#17
.a20e	d0 02		bne $a212			bne 	_KMNo
.a210	a9 13		lda #$13			lda 	#"S"-64
.a212					_KMNo:
.a212	c9 9d		cmp #$9d			cmp 	#157
.a214	d0 02		bne $a218			bne 	_KMNo
.a216	a9 01		lda #$01			lda 	#"A"-64
.a218					_KMNo:
.a218	c9 1d		cmp #$1d			cmp 	#29
.a21a	d0 02		bne $a21e			bne 	_KMNo
.a21c	a9 04		lda #$04			lda 	#"D"-64
.a21e					_KMNo:
.a21e	c9 00		cmp #$00			cmp 	#0
.a220	f0 07		beq $a229			beq 	_IFGKEmpty
.a222	48		pha				pha
.a223	a9 00		lda #$00			lda 	#0
.a225	ea		nop				nop
.a226	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a228	68		pla				pla
.a229					_IFGKEmpty:
.a229	fb		plz				plz
.a22a	c9 00		cmp #$00			cmp 	#0 							; set Z
.a22c	60		rts				rts
.a22d					IF_SetupKeyAddress:
.a22d	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to read keyboard.
.a22f	85 0b		sta $0b				sta 	IF_FarPtr+3
.a231	a9 fd		lda #$fd			lda 	#$FD
.a233	85 0a		sta $0a				sta 	IF_FarPtr+2
.a235	a9 36		lda #$36			lda 	#$36
.a237	85 09		sta $09				sta 	IF_FarPtr+1
.a239	a9 10		lda #$10			lda 	#$10
.a23b	85 08		sta $08				sta 	IF_FarPtr+0
.a23d	a3 00		ldz #$00			ldz 	#0
.a23f	60		rts				rts
.a240					IF_Reset:
.a240	48		pha				pha 								; save registers
.a241	da		phx				phx
.a242	5a		phy				phy
.a243	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to video system.
.a245	85 0b		sta $0b				sta 	IF_FarPtr+3
.a247	a9 fd		lda #$fd			lda 	#$FD
.a249	85 0a		sta $0a				sta 	IF_FarPtr+2
.a24b	a9 30		lda #$30			lda 	#$30
.a24d	85 09		sta $09				sta 	IF_FarPtr+1
.a24f	a9 00		lda #$00			lda 	#$00
.a251	85 08		sta $08				sta 	IF_FarPtr+0
.a253	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a255	a9 47		lda #$47			lda 	#$47
.a257	ea		nop				nop
.a258	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a25a	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a25c	a9 53		lda #$53			lda 	#$53
.a25e	ea		nop				nop
.a25f	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a261	a3 30		ldz #$30			ldz 	#$30 						; address already set up
.a263	a9 40		lda #$40			lda 	#$40
.a265	ea		nop				nop
.a266	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a268	a3 31		ldz #$31			ldz 	#$31 						; address already set up
.a26a	a9 c0		lda #$c0			lda 	#$80+$40
.a26c	ea		nop				nop
.a26d	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a26f	a3 20		ldz #$20			ldz 	#$20 						; address already set up
.a271	a9 00		lda #$00			lda 	#0
.a273	ea		nop				nop
.a274	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a276	a3 21		ldz #$21			ldz 	#$21 						; address already set up
.a278	a9 00		lda #$00			lda 	#0
.a27a	ea		nop				nop
.a27b	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a27d	a3 54		ldz #$54			ldz 	#$54 						; address already set up
.a27f	a9 40		lda #$40			lda 	#$40
.a281	ea		nop				nop
.a282	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a284	a3 01		ldz #$01			ldz 	#$01 						; address already set up
.a286	a9 ff		lda #$ff			lda 	#$FF
.a288	ea		nop				nop
.a289	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a28b	a3 00		ldz #$00			ldz 	#$00 						; address already set up
.a28d	a9 ff		lda #$ff			lda 	#$FF
.a28f	ea		nop				nop
.a290	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a292	a3 16		ldz #$16			ldz 	#$16 						; address already set up
.a294	a9 cc		lda #$cc			lda 	#$CC
.a296	ea		nop				nop
.a297	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a299	a3 18		ldz #$18			ldz 	#$18 						; address already set up
.a29b	a9 42		lda #$42			lda 	#$42
.a29d	ea		nop				nop
.a29e	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a2a0	a3 11		ldz #$11			ldz 	#$11 						; address already set up
.a2a2	a9 1b		lda #$1b			lda 	#$1B
.a2a4	ea		nop				nop
.a2a5	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a2a7	a9 00		lda #$00			lda 	#$00						; colour RAM at $1F800-1FFFF (2kb)
.a2a9	85 0b		sta $0b				sta 	IF_FarPtr+3
.a2ab	a9 01		lda #$01			lda 	#$01
.a2ad	85 0a		sta $0a				sta 	IF_FarPtr+2
.a2af	a9 f8		lda #$f8			lda 	#$F8
.a2b1	85 09		sta $09				sta 	IF_FarPtr+1
.a2b3	a9 00		lda #$00			lda 	#$00
.a2b5	85 08		sta $08				sta 	IF_FarPtr+0
.a2b7	a3 00		ldz #$00			ldz 	#0
.a2b9					_EXTClearColorRam:
.a2b9	a9 05		lda #$05			lda 	#5							; fill that with this colour.
.a2bb	ea		nop				nop
.a2bc	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a2be	3b		dez				dez
.a2bf	d0 f8		bne $a2b9			bne 	_EXTClearColorRam
.a2c1	e6 09		inc $09				inc 	IF_FarPtr+1
.a2c3	d0 f4		bne $a2b9			bne 	_EXTClearColorRam
.a2c5	a2 00		ldx #$00			ldx 	#0 							; copy PET Font into memory.
.a2c7					_EXTCopyCBMFont:
.a2c7	bd 08 a3	lda $a308,x			lda 	IF_CBMFont,x 				; +$800 uses the lower case c/set
.a2ca	9d 00 08	sta $0800,x			sta 	IF_CharSet,x
.a2cd	49 ff		eor #$ff			eor 	#$FF
.a2cf	9d 00 0c	sta $0c00,x			sta 	IF_CharSet+$400,x
.a2d2	bd 08 a4	lda $a408,x			lda 	IF_CBMFont+$100,x
.a2d5	9d 00 09	sta $0900,x			sta 	IF_CharSet+$100,x
.a2d8	49 ff		eor #$ff			eor 	#$FF
.a2da	9d 00 0d	sta $0d00,x			sta 	IF_CharSet+$500,x
.a2dd	bd 08 a5	lda $a508,x			lda 	IF_CBMFont+$200,x
.a2e0	9d 00 0a	sta $0a00,x			sta 	IF_CharSet+$200,x
.a2e3	49 ff		eor #$ff			eor 	#$FF
.a2e5	9d 00 0e	sta $0e00,x			sta 	IF_CharSet+$600,x
.a2e8	bd 08 a6	lda $a608,x			lda 	IF_CBMFont+$300,x
.a2eb	9d 00 0b	sta $0b00,x			sta 	IF_CharSet+$300,x
.a2ee	49 ff		eor #$ff			eor 	#$FF
.a2f0	9d 00 0f	sta $0f00,x			sta 	IF_CharSet+$700,x
.a2f3	ca		dex				dex
.a2f4	d0 d1		bne $a2c7			bne 	_EXTCopyCBMFont
.a2f6	a9 3b		lda #$3b			lda 	#$3F-4  					; puts ROM back in the map (the -4)
.a2f8	85 01		sta $01				sta 	$01
.a2fa	a9 00		lda #$00			lda 	#$00						; do not map bytes 0000-7FFF
.a2fc	a2 00		ldx #$00			ldx 	#$00						; (so we use the RAM physically at $0000-$7FFF)
.a2fe	a0 00		ldy #$00			ldy 	#$00 						; 8000-FFFF offset by $200. The lower 8 bits are $00
.a300	a3 f2		ldz #$f2			ldz 	#$F2 						; so this is an actual offset of $20000. So the space at
.a302	5c		map				map
.a303	ea		nop				eom
.a304	7a		ply				ply 								; restore and exit.
.a305	fa		plx				plx
.a306	68		pla				pla
.a307	60		rts				rts
.a308					IF_CBMFont:
>a308	1c 22 4a 56 4c 20 1e 00				.binary "pet-font.bin"
>a310	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a320	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a330	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a340	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a350	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a360	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a370	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a380	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a390	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a3a0	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a3b0	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a3c0	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a3d0	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a3e0	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a3f0	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a400	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a410	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a420	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a430	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a440	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a450	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a460	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a470	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a480	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a490	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a4a0	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a4b0	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a4c0	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a4d0	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a4e0	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a4f0	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a500	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a510	08 1c 3e 7f 7f 1c 3e 00 10 10 10 10 10 10 10 10
>a520	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>a530	00 ff 00 00 00 00 00 00 00 00 00 00 00 ff 00 00
>a540	20 20 20 20 20 20 20 20 04 04 04 04 04 04 04 04
>a550	00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>a560	08 08 08 10 e0 00 00 00 80 80 80 80 80 80 80 ff
>a570	80 40 20 10 08 04 02 01 01 02 04 08 10 20 40 80
>a580	ff 80 80 80 80 80 80 80 ff 01 01 01 01 01 01 01
>a590	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 ff 00
>a5a0	36 7f 7f 7f 3e 1c 08 00 40 40 40 40 40 40 40 40
>a5b0	00 00 00 00 03 04 08 08 81 42 24 18 18 24 42 81
>a5c0	00 3c 42 42 42 42 3c 00 08 1c 2a 77 2a 08 08 00
>a5d0	02 02 02 02 02 02 02 02 08 1c 3e 7f 3e 1c 08 00
>a5e0	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a5f0	08 08 08 08 08 08 08 08 00 00 01 3e 54 14 14 00
>a600	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a610	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a620	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a630	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>a640	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>a650	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a660	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>a670	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>a680	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>a690	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>a6a0	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>a6b0	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a6c0	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a6d0	00 00 00 00 00 ff ff ff 01 01 01 01 01 01 01 ff
>a6e0	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a6f0	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a700	f0 f0 f0 f0 0f 0f 0f 0f 1c 22 4a 56 4c 20 1e 00
>a710	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a720	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a730	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a740	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a750	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a760	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a770	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a780	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a790	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a7a0	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a7b0	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a7c0	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a7d0	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a7e0	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a7f0	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a800	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a810	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a820	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a830	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a840	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a850	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a860	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a870	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a880	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a890	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a8a0	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a8b0	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a8c0	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a8d0	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a8e0	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a8f0	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a900	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a910	00 00 38 04 3c 44 3a 00 40 40 5c 62 42 62 5c 00
>a920	00 00 3c 42 40 42 3c 00 02 02 3a 46 42 46 3a 00
>a930	00 00 3c 42 7e 40 3c 00 0c 12 10 7c 10 10 10 00
>a940	00 00 3a 46 46 3a 02 3c 40 40 5c 62 42 42 42 00
>a950	08 00 18 08 08 08 1c 00 04 00 0c 04 04 04 44 38
>a960	40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a970	00 00 76 49 49 49 49 00 00 00 5c 62 42 42 42 00
>a980	00 00 3c 42 42 42 3c 00 00 00 5c 62 62 5c 40 40
>a990	00 00 3a 46 46 3a 02 02 00 00 5c 62 40 40 40 00
>a9a0	00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 12 0c 00
>a9b0	00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>a9c0	00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>a9d0	00 00 42 42 46 3a 02 3c 00 00 7e 04 18 20 7e 00
>a9e0	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a9f0	08 08 08 08 08 08 08 08 cc cc 33 33 cc cc 33 33
>aa00	cc 66 33 99 cc 66 33 99 00 00 00 00 00 00 00 00
>aa10	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>aa20	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>aa30	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>aa40	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>aa50	99 33 66 cc 99 33 66 cc 03 03 03 03 03 03 03 03
>aa60	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>aa70	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>aa80	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>aa90	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>aaa0	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>aab0	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>aac0	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>aad0	00 00 00 00 00 ff ff ff 01 02 44 48 50 60 40 00
>aae0	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>aaf0	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>ab00	f0 f0 f0 f0 0f 0f 0f 0f

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.ab08					FPSubtract:
.ab08	48		pha				pha
.ab09	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.ab0c	49 80		eor #$80			eor 	#$80
.ab0e	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.ab11	68		pla				pla 								; --- and fall through ---
.ab12					FPAdd:
.ab12	48		pha				pha
.ab13	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.ab16	d0 05		bne $ab1d			bne 	_FPA_NegativeLHS
.ab18	20 3a ab	jsr $ab3a			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.ab1b	68		pla				pla
.ab1c	60		rts				rts
.ab1d					_FPA_NegativeLHS:
.ab1d	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.ab20	49 80		eor #$80			eor 	#$80
.ab22	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ab25	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.ab28	49 80		eor #$80			eor 	#$80
.ab2a	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.ab2d	20 3a ab	jsr $ab3a			jsr 	FPAdd_Worker 				; do the add calculation.
.ab30	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 back
.ab33	49 80		eor #$80			eor 	#$80
.ab35	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ab38	68		pla				pla
.ab39	60		rts				rts
.ab3a					FPAdd_Worker:
.ab3a	3c 0b 03	bit $030b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.ab3d	70 08		bvs $ab47			bvs 	_FPAWExit 					; no change.
.ab3f	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.ab42	50 07		bvc $ab4b			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.ab44	20 df ad	jsr $addf			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.ab47					_FPAWExit:
.ab47	20 67 ae	jsr $ae67			jsr 	FPUNormalise 				; normalise the result.
.ab4a	60		rts				rts
.ab4b					_FPAWMakeSame:
.ab4b	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.ab4e	38		sec				sec
.ab4f	fd 0a 03	sbc $030a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.ab52	f0 1b		beq $ab6f			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.ab54	da		phx				phx 								; save X
.ab55	90 06		bcc $ab5d			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.ab57	e8		inx				inx
.ab58	e8		inx				inx
.ab59	e8		inx				inx
.ab5a	e8		inx				inx
.ab5b	e8		inx				inx
.ab5c	e8		inx				inx
.ab5d					_FPAWShiftA:
.ab5d	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.ab60	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.ab63	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.ab66	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.ab69	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.ab6c	fa		plx				plx 								; restore original X
.ab6d	80 dc		bra $ab4b			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.ab6f					_FPAW_DoArithmetic:
.ab6f	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.ab72	30 39		bmi $abad			bmi 	_FPAW_BNegative
.ab74	18		clc				clc
.ab75	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.ab78	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.ab7b	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.ab7e	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.ab81	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.ab84	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.ab87	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.ab8a	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.ab8d	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.ab90	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.ab93	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.ab96	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.ab99	90 ac		bcc $ab47			bcc 	_FPAWExit 					; no carry.
.ab9b	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.ab9e	38		sec				sec
.ab9f	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.aba2	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.aba5	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.aba8	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.abab	80 9a		bra $ab47			bra 	_FPAWExit
.abad					_FPAW_BNegative:
.abad	38		sec				sec
.abae	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.abb1	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa+0,x
.abb4	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.abb7	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.abba	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.abbd	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.abc0	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.abc3	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.abc6	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.abc9	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.abcc	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.abcf	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.abd2	b0 0b		bcs $abdf			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.abd4	20 0c ae	jsr $ae0c			jsr 	FPUNegateInteger			; negate the mantissa
.abd7	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip result sign
.abda	49 80		eor #$80			eor 	#$80
.abdc	9d 05 03	sta $0305,x			sta 	XS_Type,x
.abdf					_FPAWGoExit:
.abdf	4c 47 ab	jmp $ab47			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.abe2					FPD_IsDivZero:
.abe2	20 79 c4	jsr $c479			jsr 		ERR_Handler
>abe5	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>abed	20 62 79 20 7a 65 72 6f 00
.abf6					FPDivide:
.abf6	48		pha				pha
.abf7	5a		phy				phy
.abf8	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; check if division by zero
.abfb	70 e5		bvs $abe2			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.abfd	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.ac00	f0 03		beq $ac05			beq 	_FPDCalculateExp
.ac02					_FPD_Exit:
.ac02	7a		ply				ply
.ac03	68		pla				pla
.ac04	60		rts				rts
.ac05					_FPDCalculateExp:
.ac05	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.ac08	49 ff		eor #$ff			eor 	#$FF
.ac0a	1a		inc a				inc 	a
.ac0b	9d 0a 03	sta $030a,x			sta 	XS2_Exponent,x
.ac0e	20 02 ad	jsr $ad02			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.ac11	18		clc				clc 	 							; add 1 to the resulting exponent
.ac12	69 01		adc #$01			adc 	#1
.ac14	b0 65		bcs $ac7b			bcs 	_FPD_Overflow 				; which can overflow.
.ac16	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.ac19	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.ac1b	85 16		sta $16				sta 	zLTemp1+0
.ac1d	85 17		sta $17				sta 	zLTemp1+1
.ac1f	85 18		sta $18				sta 	zLTemp1+2
.ac21	85 19		sta $19				sta 	zLTemp1+3
.ac23	a0 20		ldy #$20			ldy 	#32 						; times round.
.ac25					_FPD_Loop:
.ac25	38		sec				sec 								; calculate X1-X2 stacking result because we might
.ac26	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; not save it.
.ac29	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa,x
.ac2c	48		pha				pha
.ac2d	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.ac30	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.ac33	48		pha				pha
.ac34	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.ac37	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.ac3a	48		pha				pha
.ac3b	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.ac3e	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.ac41	90 17		bcc $ac5a			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.ac43	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x 			; save results out to A
.ac46	68		pla				pla
.ac47	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.ac4a	68		pla				pla
.ac4b	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.ac4e	68		pla				pla
.ac4f	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.ac52	a5 19		lda $19				lda 	zLTemp1+3 					; set high bit of result
.ac54	09 80		ora #$80			ora 	#$80
.ac56	85 19		sta $19				sta 	zLTemp1+3
.ac58	80 03		bra $ac5d			bra 	_FPD_Rotates
.ac5a					_FPD_NoSubtract:
.ac5a	68		pla				pla 								; throw away unwanted results
.ac5b	68		pla				pla
.ac5c	68		pla				pla
.ac5d					_FPD_Rotates:
.ac5d	5e 09 03	lsr $0309,x			lsr 	3+XS2_Mantissa,x
.ac60	7e 08 03	ror $0308,x			ror 	2+XS2_Mantissa,x
.ac63	7e 07 03	ror $0307,x			ror 	1+XS2_Mantissa,x
.ac66	7e 06 03	ror $0306,x			ror 	0+XS2_Mantissa,x
.ac69	06 16		asl $16				asl 	zLTemp1 					; rotate result round left
.ac6b	26 17		rol $17				rol 	zLTemp1+1
.ac6d	26 18		rol $18				rol 	zLTemp1+2
.ac6f	26 19		rol $19				rol 	zLTemp1+3
.ac71	90 02		bcc $ac75			bcc 	_FPD_NoCarry
.ac73	e6 16		inc $16				inc 	zLTemp1 					; if rotated out, set LSB.
.ac75					_FPD_NoCarry:
.ac75	88		dey				dey 								; do 32 times
.ac76	d0 ad		bne $ac25			bne 	_FPD_Loop
.ac78	4c df ac	jmp $acdf			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.ac7b					_FPD_Overflow:
.ac7b	4c dc ae	jmp $aedc			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.ac7e					FPMultiply:
.ac7e	48		pha				pha
.ac7f	5a		phy				phy
.ac80	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.ac83	70 08		bvs $ac8d			bvs 	_FPM_Exit
.ac85	3c 0b 03	bit $030b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.ac88	50 06		bvc $ac90			bvc 	_FPM_CalcExponent
.ac8a	20 df ad	jsr $addf			jsr 	FPUCopyX2ToX1
.ac8d					_FPM_Exit:
.ac8d	7a		ply				ply
.ac8e	68		pla				pla
.ac8f	60		rts				rts
.ac90					_FPM_CalcExponent:
.ac90	18		clc				clc
.ac91	20 02 ad	jsr $ad02			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.ac94	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; save the result.
.ac97	a9 00		lda #$00			lda 	#0
.ac99	85 16		sta $16				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.ac9b	85 17		sta $17				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.ac9d	85 18		sta $18				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.ac9f	85 19		sta $19				sta 	zLTemp1+3
.aca1	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.aca3					_FPM_Loop:
.aca3	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x				; check LSB of long product
.aca6	29 01		and #$01			and 	#1
.aca8	18		clc				clc 								; clear carry for the long rotate.
.aca9	f0 1d		beq $acc8			beq 	_FPM_NoAddition
.acab	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.acac	a5 16		lda $16				lda 	zLTemp1+0
.acae	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.acb1	85 16		sta $16				sta 	zLTemp1+0
.acb3	a5 17		lda $17				lda 	zLTemp1+1
.acb5	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.acb8	85 17		sta $17				sta 	zLTemp1+1
.acba	a5 18		lda $18				lda 	zLTemp1+2
.acbc	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.acbf	85 18		sta $18				sta 	zLTemp1+2
.acc1	a5 19		lda $19				lda 	zLTemp1+3
.acc3	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.acc6	85 19		sta $19				sta 	zLTemp1+3
.acc8					_FPM_NoAddition:
.acc8	66 19		ror $19				ror 	3+zLTemp1
.acca	66 18		ror $18				ror 	2+zLTemp1
.accc	66 17		ror $17				ror 	1+zLTemp1
.acce	66 16		ror $16				ror 	0+zLTemp1
.acd0	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.acd3	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.acd6	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.acd9	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.acdc	88		dey				dey
.acdd	d0 c4		bne $aca3			bne 	_FPM_Loop 					; do this 32 times.
.acdf					FPM_CopySignNormalize:
.acdf	a5 16		lda $16				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.ace1	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.ace4	a5 17		lda $17				lda 	zLTemp1+1
.ace6	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.ace9	a5 18		lda $18				lda 	zLTemp1+2
.aceb	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.acee	a5 19		lda $19				lda 	zLTemp1+3
.acf0	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.acf3	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; sign is xor of signs
.acf6	5d 0b 03	eor $030b,x			eor 	XS2_Type,x
.acf9	9d 05 03	sta $0305,x			sta 	XS_Type,x
.acfc	20 67 ae	jsr $ae67			jsr 	FPUNormalise 				; normalise and exit.
.acff	7a		ply				ply
.ad00	68		pla				pla
.ad01	60		rts				rts
.ad02					FPCalculateExponent:
.ad02	18		clc				clc
.ad03	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.ad06	7d 0a 03	adc $030a,x			adc 	XS2_Exponent,x
.ad09	b0 08		bcs $ad13			bcs 	_FPCECarry 					; carry out ?
.ad0b	10 03		bpl $ad10			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.ad0d	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.ad0f	60		rts				rts
.ad10					_FPCEExpZero:
.ad10	a9 00		lda #$00			lda 	#0
.ad12	60		rts				rts
.ad13					_FPCECarry:
.ad13	30 03		bmi $ad18			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.ad15	09 80		ora #$80			ora 	#$80 						; put in right range
.ad17	60		rts				rts
.ad18					_FPCEOverflow:
.ad18	4c dc ae	jmp $aedc			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.ad1b					FPFractionalPart:
.ad1b	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.ad1e	38		sec				sec 								; this flag tells us to keep the fractional part
.ad1f	30 0f		bmi $ad30			bmi 	FPGetPart
.ad21	60		rts				rts
.ad22					FPIntegerPart:
.ad22	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.ad25	18		clc				clc 								; this flag says keep the integer part.
.ad26	30 08		bmi $ad30			bmi 	FPGetPart 					; -ve exponents are 0..127
.ad28	48		pha				pha
.ad29	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.ad2b	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ad2e	68		pla				pla
.ad2f	60		rts				rts
.ad30					FPGetPart:
.ad30	48		pha				pha
.ad31	5a		phy				phy 								; save Y
.ad32	08		php				php 								; save action
.ad33	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.ad36	70 62		bvs $ad9a			bvs 	_FPGP_Exit 					; then do nothing.
.ad38	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.ad3a	85 16		sta $16				sta 	zLTemp1+0 					; this mask is applied to chop out the
.ad3c	85 17		sta $17				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.ad3e	85 18		sta $18				sta 	zLTemp1+2
.ad40	85 19		sta $19				sta 	zLTemp1+3
.ad42	bd 04 03	lda $0304,x			lda 	XS_Exponent,x				; the number of shifts.
.ad45	38		sec				sec
.ad46	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.ad48	f0 12		beq $ad5c			beq 	_FPGP_NoShift 				; ... if any
.ad4a	c9 20		cmp #$20			cmp 	#32
.ad4c	90 02		bcc $ad50			bcc 	_FPGP_NotMax
.ad4e	a9 20		lda #$20			lda 	#32 						; max of 32.
.ad50					_FPGP_NotMax:
.ad50	a8		tay				tay 								; Y is the mask shift count.
.ad51					_FPGP_ShiftMask:
.ad51	46 19		lsr $19				lsr 	3+zLTemp1
.ad53	66 18		ror $18				ror 	2+zLTemp1
.ad55	66 17		ror $17				ror 	1+zLTemp1
.ad57	66 16		ror $16				ror 	0+zLTemp1
.ad59	88		dey				dey
.ad5a	d0 f5		bne $ad51			bne 	_FPGP_ShiftMask
.ad5c					_FPGP_NoShift:
.ad5c	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.ad5e	8e 2d 04	stx $042d			stx 	ExpTemp						; save X
.ad61					_FPGP_MaskLoop:
.ad61	b9 16 00	lda $0016,y			lda 	zlTemp1,y 					; get mask byte
.ad64	28		plp				plp 								; if CC we keep the top part, so we
.ad65	08		php				php		 							; flip the mask.
.ad66	b0 02		bcs $ad6a			bcs		_FPGP_NoFlip
.ad68	49 ff		eor #$ff			eor 	#$FF
.ad6a					_FPGP_NoFlip:
.ad6a	3d 00 03	and $0300,x			and 	XS_Mantissa,x 				; and into the mantissa.
.ad6d	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.ad70	e8		inx				inx
.ad71	c8		iny				iny
.ad72	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.ad74	d0 eb		bne $ad61			bne 	_FPGP_MaskLoop
.ad76	ae 2d 04	ldx $042d			ldx 	ExpTemp						; restore X
.ad79	28		plp				plp
.ad7a	08		php				php 								; get action flag on the stack
.ad7b	90 05		bcc $ad82			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.ad7d	a9 00		lda #$00			lda 	#0
.ad7f	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ad82					_FPGP_NotFractional:
.ad82	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 						; check if \1 zero
.ad85	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.ad88	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.ad8b	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.ad8e	f0 05		beq $ad95			beq 	_FPGP_Zero 					; if zero, return zero
.ad90	20 67 ae	jsr $ae67			jsr 	FPUNormalise
.ad93	80 05		bra $ad9a			bra 	_FPGP_Exit 					; and exit
.ad95					_FPGP_Zero:
.ad95	a9 40		lda #$40			lda 	#$40 						; set zero flag
.ad97	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ad9a					_FPGP_Exit:
.ad9a	68		pla				pla 								; throw saved action flag.
.ad9b	7a		ply				ply
.ad9c	68		pla				pla
.ad9d	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.ad9e					FPCompare:
.ad9e	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.ada1	48		pha				pha
.ada2	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x
.ada5	48		pha				pha
.ada6	20 08 ab	jsr $ab08			jsr 	FPSubtract 					; calculate X1-X2
.ada9	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.adac	70 2c		bvs $adda			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.adae	68		pla				pla
.adaf	8d 2d 04	sta $042d			sta 	ExpTemp						; save first exponent in temporary reg.
.adb2	68		pla				pla
.adb3	38		sec				sec
.adb4	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; calculate AX-BX
.adb7	70 15		bvs $adce			bvs 	_FPCNotEqual				; overflow, can't be equal.
.adb9	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.adba	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.adbc	b0 10		bcs $adce			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.adbe	38		sec				sec
.adbf	ad 2d 04	lda $042d			lda 	ExpTemp 					; get one of the exponents back.
.adc2	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.adc4	b0 02		bcs $adc8			bcs 	_FPCNotRange 				; keep in range.
.adc6	a9 01		lda #$01			lda 	#1
.adc8					_FPCNotRange:
.adc8	38		sec				sec
.adc9	fd 04 03	sbc $0304,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.adcc	b0 0e		bcs $addc			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.adce					_FPCNotEqual:
.adce	bd 05 03	lda $0305,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.add1	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.add3	f0 02		beq $add7			beq 	_FPCNE2
.add5	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.add7	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.add8	80 04		bra $adde			bra 	_FPCExit
.adda					_FPCPullZero:
.adda	68		pla				pla 								; throw saved exponents
.addb	68		pla				pla
.addc					_FPCZero:
.addc	a9 00		lda #$00			lda 	#0 							; and return zero
.adde					_FPCExit:
.adde	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.addf					FPUCopyX2ToX1:
.addf	48		pha				pha
.ade0	da		phx				phx
.ade1	5a		phy				phy
.ade2	a0 08		ldy #$08			ldy 	#8
.ade4	bd 06 03	lda $0306,x	_FPUC21:lda 	XS2_Mantissa,x
.ade7	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.adea	e8		inx				inx
.adeb	88		dey				dey
.adec	10 f6		bpl $ade4			bpl 	_FPUC21
.adee	7a		ply				ply
.adef	fa		plx				plx
.adf0	68		pla				pla
.adf1	60		rts				rts
.adf2					FPUSetInteger:
.adf2	48		pha				pha
.adf3	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.adf6	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.adf8	10 02		bpl $adfc			bpl 	_FPUSIExtend
.adfa	a9 ff		lda #$ff			lda 	#$FF
.adfc					_FPUSIExtend:
.adfc	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.adff	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.ae02	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.ae05	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.ae07	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ae0a	68		pla				pla
.ae0b	60		rts				rts
.ae0c					FPUNegateInteger:
.ae0c	48		pha				pha
.ae0d	38		sec				sec
.ae0e	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.ae10	fd 00 03	sbc $0300,x			sbc 	XS_Mantissa+0,x
.ae13	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.ae16	a9 00		lda #$00			lda 	#0
.ae18	fd 01 03	sbc $0301,x			sbc 	XS_Mantissa+1,x
.ae1b	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.ae1e	a9 00		lda #$00			lda 	#0
.ae20	fd 02 03	sbc $0302,x			sbc 	XS_Mantissa+2,x
.ae23	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.ae26	a9 00		lda #$00			lda 	#0
.ae28	fd 03 03	sbc $0303,x			sbc 	XS_Mantissa+3,x
.ae2b	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.ae2e	68		pla				pla
.ae2f	60		rts				rts
.ae30					FPUToFloat:
.ae30	48		pha				pha
.ae31	bd 05 03	lda $0305,x			lda 	XS_Type,x					; exit if already float.
.ae34	29 0f		and #$0f			and 	#$0F
.ae36	f0 2d		beq $ae65			beq 	_FPUFExit
.ae38	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.ae3a	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ae3d	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.ae3f	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; x mantissa.
.ae42	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.ae45	10 08		bpl $ae4f			bpl		_FPUFPositive
.ae47	20 0c ae	jsr $ae0c			jsr 	FPUNegateInteger 			; negate the mantissa
.ae4a	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.ae4c	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ae4f					_FPUFPositive:
.ae4f	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.ae52	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.ae55	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.ae58	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.ae5b	d0 05		bne $ae62			bne 	_FPUFNonZero
.ae5d	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.ae5f	9d 05 03	sta $0305,x			sta 	XS_Type,x
.ae62					_FPUFNonZero:
.ae62	20 67 ae	jsr $ae67			jsr 	FPUNormalise 				; normalise the floating point.
.ae65					_FPUFExit:
.ae65	68		pla				pla
.ae66	60		rts				rts
.ae67					FPUNormalise:
.ae67	48		pha				pha
.ae68	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.ae6b	70 20		bvs $ae8d			bvs 	_FPUNExit
.ae6d	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.ae70	f0 16		beq $ae88			beq 	_FPUNSetZero
.ae72					_FPUNLoop:
.ae72	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.ae75	30 16		bmi $ae8d			bmi 	_FPUNExit 					; if so, we are normalised.
.ae77	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa+0,x
.ae7a	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa+0,x
.ae7d	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa+0,x
.ae80	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa+0,x
.ae83	de 04 03	dec $0304,x			dec 	XS_Exponent,x 				; decrement exponent
.ae86	d0 ea		bne $ae72			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.ae88					_FPUNSetZero:
.ae88	a9 40		lda #$40			lda 	#$40
.ae8a	9d 05 03	sta $0305,x			sta 	XS_Type,x 					; the result is now zero.
.ae8d					_FPUNExit:
.ae8d	68		pla				pla
.ae8e	60		rts				rts
.ae8f					FPUToInteger:
.ae8f	48		pha				pha
.ae90	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if already integer, exit
.ae93	29 01		and #$01			and 	#1
.ae95	d0 3e		bne $aed5			bne 	_FPUTOI_Exit
.ae97	3c 05 03	bit $0305,x			bit 	XS_Type,x					; if zero, return zero.
.ae9a	70 2b		bvs $aec7			bvs 	_FPUTOI_Zero
.ae9c	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.ae9f	10 26		bpl $aec7			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.aea1	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.aea3	b0 37		bcs $aedc			bcs 	FP_Overflow
.aea5					_FPUToIToInteger:
.aea5	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.aea8	c9 a0		cmp #$a0			cmp 	#128+32
.aeaa	f0 11		beq $aebd			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.aeac	fe 04 03	inc $0304,x			inc 	XS_Exponent,X 				; increment Exponent
.aeaf	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.aeb2	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.aeb5	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.aeb8	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.aebb	80 e8		bra $aea5			bra 	_FPUToIToInteger 			; keep going.
.aebd					_FPUToICheckSign:
.aebd	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; check sign
.aec0	10 13		bpl $aed5			bpl 	_FPUToI_Exit 				; exit if unsigned.
.aec2	20 0c ae	jsr $ae0c			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.aec5	80 0e		bra $aed5			bra 	_FPUTOI_Exit
.aec7					_FPUTOI_Zero:
.aec7	a9 00		lda #$00			lda 	#0 							; return zero integer.
.aec9	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.aecc	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.aecf	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.aed2	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.aed5					_FPUToI_Exit:
.aed5	a9 01		lda #$01			lda 	#1 							; set type to integer
.aed7	9d 05 03	sta $0305,x			sta 	XS_Type,x
.aeda	68		pla				pla
.aedb	60		rts				rts
.aedc					FP_Overflow:
.aedc	20 79 c4	jsr $c479			jsr 	ERR_Handler
>aedf	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>aee7	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.aef7					FPUTimes10:
.aef7	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.aefa	85 16		sta $16				sta 	ZLTemp1+0
.aefc	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.aeff	85 17		sta $17				sta 	ZLTemp1+1
.af01	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.af04	85 18		sta $18				sta 	ZLTemp1+2
.af06	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.af09	85 19		sta $19				sta 	ZLTemp1+3
.af0b	20 4f af	jsr $af4f			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.af0e	20 4f af	jsr $af4f			jsr 	_FPUT_LSR_ZLTemp1
.af11	18		clc				clc
.af12	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.af15	65 16		adc $16				adc 	ZLTemp1+0
.af17	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.af1a	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.af1d	65 17		adc $17				adc 	ZLTemp1+1
.af1f	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.af22	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.af25	65 18		adc $18				adc 	ZLTemp1+2
.af27	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.af2a	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.af2d	65 19		adc $19				adc 	ZLTemp1+3
.af2f	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.af32	90 0f		bcc $af43			bcc 	_FPUTimes10
.af34	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.af37	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.af3a	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.af3d	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.af40	fe 04 03	inc $0304,x			inc 	XS_Exponent,x				; fix exponent
.af43					_FPUTimes10:
.af43	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.af46	18		clc				clc
.af47	69 03		adc #$03			adc 	#3
.af49	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.af4c	b0 8e		bcs $aedc			bcs 	FP_Overflow 				; error
.af4e	60		rts				rts
.af4f					_FPUT_LSR_ZLTemp1:
.af4f	46 19		lsr $19				lsr 	ZLTemp1+3
.af51	66 18		ror $18				ror 	ZLTemp1+2
.af53	66 17		ror $17				ror 	ZLTemp1+1
.af55	66 16		ror $16				ror 	ZLTemp1+0
.af57	60		rts				rts
.af58					FPUScale10A:
.af58	5a		phy				phy
.af59	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.af5b	f0 3d		beq $af9a			beq 	_FPUScaleExit
.af5d	da		phx				phx 								; save X
.af5e	e8		inx				inx
.af5f	e8		inx				inx
.af60	e8		inx				inx
.af61	e8		inx				inx
.af62	e8		inx				inx
.af63	e8		inx				inx
.af64	a8		tay				tay 								; save power scalar in Y.
.af65	a9 00		lda #$00			lda 	#0
.af67	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.af6a	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.af6d	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.af70	9d 05 03	sta $0305,x			sta 	XS_Type,x
.af73	a9 80		lda #$80			lda 	#$80
.af75	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.af78	a9 81		lda #$81			lda 	#$81
.af7a	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.af7d	5a		phy				phy 								; save 10^n on stack.
.af7e	c0 00		cpy #$00			cpy 	#0
.af80	10 05		bpl $af87			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.af82	98		tya				tya
.af83	49 ff		eor #$ff			eor 	#$FF
.af85	1a		inc a				inc 	a
.af86	a8		tay				tay
.af87					_FPUSAbs:
.af87	20 f7 ae	jsr $aef7			jsr 	FPUTimes10
.af8a	88		dey				dey
.af8b	d0 fa		bne $af87			bne 	_FPUSAbs 					; tos is now 10^|AC|
.af8d	68		pla				pla 								; restore count in A
.af8e	fa		plx				plx 								; restore X pointing to number to scale.
.af8f	0a		asl a				asl 	a
.af90	b0 05		bcs $af97			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.af92	20 7e ac	jsr $ac7e			jsr 	FPMultiply 					; if clear multiply.
.af95	80 03		bra $af9a			bra		_FPUScaleExit
.af97					_FPUSDivide:
.af97	20 f6 ab	jsr $abf6			jsr 	FPDivide
.af9a					_FPUScaleExit:
.af9a	7a		ply				ply
.af9b	60		rts				rts
.af9c					FPUCopyToNext:
.af9c	a0 06		ldy #$06			ldy 		#6
.af9e	da		phx				phx
.af9f					_FPUCopy1:
.af9f	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x
.afa2	9d 06 03	sta $0306,x			sta 	XS2_Mantissa,x
.afa5	e8		inx				inx
.afa6	88		dey				dey
.afa7	d0 f6		bne $af9f			bne 	_FPUCopy1
.afa9	fa		plx				plx
.afaa	60		rts				rts
.afab					FPUCopyFromNext:
.afab	a0 06		ldy #$06			ldy 		#6
.afad	da		phx				phx
.afae					_FPUCopy1:
.afae	bd 06 03	lda $0306,x			lda 	XS2_Mantissa,x
.afb1	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.afb4	e8		inx				inx
.afb5	88		dey				dey
.afb6	d0 f6		bne $afae			bne 	_FPUCopy1
.afb8	fa		plx				plx
.afb9	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.afba					TIM_Error:
.afba	20 35 a0	jsr $a035			jsr 	IFT_UpLine 					; go up one line.
.afbd	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.afbf	80 02		bra $afc3			bra 	TIM_ShowPrompt
.afc1					TIM_NewCommand:
.afc1	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.afc3					TIM_ShowPrompt:
.afc3	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.afc6	20 f9 a0	jsr $a0f9			jsr 	IFT_ReadLine	 			; get character, go to next line
.afc9	20 5b a0	jsr $a05b			jsr 	IFT_NewLine					; go to next line.
.afcc	86 10		stx $10				stx 	zTemp1 						; save line read address
.afce	84 11		sty $11				sty 	zTemp1+1
.afd0	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.afd2	b1 10		lda ($10),y			lda 	(zTemp1),y
.afd4	c9 52		cmp #$52			cmp 	#"R"						; show registers
.afd6	f0 6e		beq $b046			beq 	TIM_ShowRegisters
.afd8	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.afda	f0 12		beq $afee			beq 	TIM_ShowMemory
.afdc	c9 47		cmp #$47			cmp 	#"G"						; execute
.afde	f0 49		beq $b029			beq 	TIM_Execute
.afe0	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.afe2	f0 07		beq $afeb			beq 	TIM_GoLoadMemory
.afe4	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.afe6	d0 d2		bne $afba			bne 	TIM_Error
.afe8	4c 6b b1	jmp $b16b			jmp 	TIM_UpdateRegisters
.afeb					TIM_GoLoadMemory:
.afeb	4c 96 b1	jmp $b196			jmp 	TIM_LoadMemory
.afee					TIM_ShowMemory:
.afee	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.aff1	b0 c7		bcs $afba			bcs 	TIM_Error
.aff3	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.aff5	85 12		sta $12				sta 	zTemp2
.aff7	a5 15		lda $15				lda 	zTemp3+1
.aff9	85 13		sta $13				sta 	zTemp2+1
.affb	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.affe	90 08		bcc $b008			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.b000	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.b002	85 14		sta $14				sta 	zTemp3
.b004	a5 13		lda $13				lda 	zTemp2+1
.b006	85 15		sta $15				sta 	zTemp3+1
.b008					_TIMSM_Start:
.b008	20 bc b0	jsr $b0bc			jsr 	TIM_WriteLine 				; write one line of hex out
.b00b	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.b00d	18		clc				clc
.b00e	69 10		adc #$10			adc 	#16
.b010	85 12		sta $12				sta 	zTemp2
.b012	90 02		bcc $b016			bcc 	_TIMSM_NoCarry
.b014	e6 13		inc $13				inc 	zTemp2+1
.b016					_TIMSM_NoCarry:
.b016	20 e4 a1	jsr $a1e4			jsr 	IF_CheckBreak 				; check CTL+C
.b019	d0 0b		bne $b026			bne 	_TIMSM_Ends 				; if pressed break out.
.b01b	38		sec				sec 								; check past the end address in zTemp3
.b01c	a5 14		lda $14				lda 	zTemp3
.b01e	e5 12		sbc $12				sbc 	zTemp2
.b020	a5 15		lda $15				lda 	zTemp3+1
.b022	e5 13		sbc $13				sbc 	zTemp2+1
.b024	10 e2		bpl $b008			bpl 	_TIMSM_Start
.b026					_TIMSM_Ends:
.b026	4c c1 af	jmp $afc1			jmp 	TIM_NewCommand
.b029					TIM_Execute:
.b029	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; get the execute address
.b02c	b0 8c		bcs $afba			bcs 	TIM_Error 					; not legitimate
.b02e	ae 2c 04	ldx $042c			ldx 	TIM_SP 						; set up SP
.b031	9a		txs				txs
.b032	ad 27 04	lda $0427			lda 	TIM_SR 						; Status for PLP
.b035	48		pha				pha
.b036	ad 28 04	lda $0428			lda 	TIM_A 						; restore AXYZ
.b039	ae 29 04	ldx $0429			ldx 	TIM_X
.b03c	ac 2a 04	ldy $042a			ldy 	TIM_Y
.b03f	ab 2b 04	ldz $042b			ldz 	TIM_Z
.b042	28		plp				plp 								; and PS Byte.
.b043	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.b046					TIM_Start:
.b046					TIM_ShowRegisters:
.b046	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.b049	8d 26 04	sta $0426			sta 	TIM_IRQ+1
.b04c	ad ff ff	lda $ffff			lda 	$FFFF
.b04f	8d 25 04	sta $0425			sta 	TIM_IRQ
.b052	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.b054					_TIMSR_Text:
.b054	bd 80 b0	lda $b080,x			lda 	_TIMSR_Label,x
.b057	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b05a	e8		inx				inx
.b05b	e0 23		cpx #$23			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.b05d	d0 f5		bne $b054			bne 	_TIMSR_Text
.b05f	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.b061					_TIMSR_Skip:
.b061	e8		inx				inx
.b062					_TIMSR_LoopSpace:
.b062	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.b064	b0 04		bcs $b06a			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.b066	8a		txa				txa
.b067	4a		lsr a				lsr 	a
.b068	b0 05		bcs $b06f			bcs 	_TIMSR_NoSpace
.b06a					_TIMSR_Space:
.b06a	a9 20		lda #$20			lda 	#" "
.b06c	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b06f					_TIMSR_NoSpace:
.b06f	bd 23 04	lda $0423,x			lda 	TIM_PC,x 					; output hex value.
.b072	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b075	e8		inx				inx
.b076	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.b078	d0 e8		bne $b062			bne 	_TimSR_LoopSpace
.b07a	20 5b a0	jsr $a05b			jsr 	IFT_NewLine 				; new line
.b07d	4c c1 af	jmp $afc1			jmp	 	TIM_NewCommand 				; new command.
.b080					_TIMSR_Label:
>b080	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>b088	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>b098	52
>b099	20 5a 52					.text 	" ZR"
>b09c	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.b0a3					_TIMSR_LabelEnd:
.b0a3					TIM_WriteHex:
.b0a3	48		pha				pha 								; save A
.b0a4	4a		lsr a				lsr 	a 							; shift MSB->LSB
.b0a5	4a		lsr a				lsr 	a
.b0a6	4a		lsr a				lsr 	a
.b0a7	4a		lsr a				lsr 	a
.b0a8	20 ac b0	jsr $b0ac			jsr 	_TIMWH_Nibble 				; print MSB
.b0ab	68		pla				pla 								; restore and print LSB
.b0ac					_TIMWH_Nibble:
.b0ac	48		pha				pha
.b0ad	29 0f		and #$0f			and 	#15 						; mask out
.b0af	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b0b1	90 02		bcc $b0b5			bcc 	_TIMWHNoLetter
.b0b3	69 06		adc #$06			adc 	#6
.b0b5					_TIMWHNoLetter:
.b0b5	69 30		adc #$30			adc 	#48
.b0b7	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter 			; print it out.
.b0ba	68		pla				pla
.b0bb	60		rts				rts
.b0bc					TIM_WriteLine:
.b0bc	a9 2e		lda #$2e			lda 	#"." 						; prompt
.b0be	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b0c1	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.b0c3	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b0c6	a5 13		lda $13				lda 	zTemp2+1 					; write address
.b0c8	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b0cb	a5 12		lda $12				lda 	zTemp2
.b0cd	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b0d0	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.b0d2					_TIMWL_Loop:
.b0d2	a9 20		lda #$20			lda 	#" "
.b0d4	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b0d7	b1 12		lda ($12),y			lda 	(zTemp2),y
.b0d9	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b0dc	c8		iny				iny
.b0dd	c0 10		cpy #$10			cpy 	#16
.b0df	d0 f1		bne $b0d2			bne 	_TIMWL_Loop
.b0e1	4c 5b a0	jmp $a05b			jmp 	IFT_NewLine 				; new line and exit
.b0e4					TIM_GetHex:
.b0e4	c8		iny				iny
.b0e5	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.b0e7	c9 20		cmp #$20			cmp 	#32
.b0e9	f0 f9		beq $b0e4			beq 	TIM_GetHex
.b0eb	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.b0ed	f0 f5		beq $b0e4			beq 	TIM_GetHex
.b0ef	20 18 b1	jsr $b118			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.b0f2	b0 23		bcs $b117			bcs 	_TIMGH_Exit					; if first bad then exit now.
.b0f4	a9 00		lda #$00			lda 	#0 							; zero result
.b0f6	85 14		sta $14				sta 	zTemp3
.b0f8	85 15		sta $15				sta 	zTemp3+1
.b0fa					_TIM_GHLoop:
.b0fa	20 18 b1	jsr $b118			jsr 	TIM_GetHexCharacter 		; get next character
.b0fd	b0 17		bcs $b116			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.b0ff	c8		iny				iny 								; skip over it.
.b100	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.b102	26 15		rol $15				rol 	zTemp3+1
.b104	06 14		asl $14				asl 	zTemp3 						; now x 2
.b106	26 15		rol $15				rol 	zTemp3+1
.b108	06 14		asl $14				asl 	zTemp3						; now x 4
.b10a	26 15		rol $15				rol 	zTemp3+1
.b10c	06 14		asl $14				asl 	zTemp3 						; now x 8
.b10e	26 15		rol $15				rol 	zTemp3+1
.b110	05 14		ora $14				ora 	zTemp3 						; OR result in
.b112	85 14		sta $14				sta 	zTemp3
.b114	80 e4		bra $b0fa			bra 	_TIM_GHLoop 				; loop round again.
.b116					_TIMGH_Okay:
.b116	18		clc				clc
.b117					_TIMGH_Exit:
.b117	60		rts				rts
.b118					TIM_GetHexCharacter:
.b118	b1 10		lda ($10),y			lda 	(zTemp1),y
.b11a	38		sec				sec
.b11b	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.b11d	90 0e		bcc $b12d			bcc 	_TIM_GHCFail
.b11f	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.b121	90 0b		bcc $b12e			bcc 	_TIM_GHCExit
.b123	c9 11		cmp #$11			cmp 	#65-48						; < A
.b125	90 06		bcc $b12d			bcc		_TIM_GHCFail
.b127	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.b129	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.b12b	90 01		bcc $b12e			bcc		_TIM_GHCExit
.b12d					_TIM_GHCFail:
.b12d	38		sec				sec
.b12e					_TIM_GHCExit:
.b12e	60		rts				rts
.b12f					TIM_BreakVector:
.b12f	da		phx				phx									; save X/A on stack
.b130	48		pha				pha
.b131	ba		tsx				tsx 								; X points to S
.b132	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.b135	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.b137	d0 03		bne $b13c			bne 	_TIMBreak					; if set, it's BRK
.b139	68		pla				pla 								; abandon routine.
.b13a	fa		plx				plx
.b13b	40		rti				rti
.b13c					_TIMBreak:
.b13c	68		pla				pla 								; save A X Y and maybe Z
.b13d	8d 28 04	sta $0428			sta 	TIM_A
.b140	fa		plx				plx
.b141	8e 29 04	stx $0429			stx 	TIM_X
.b144	8c 2a 04	sty $042a			sty 	TIM_Y
.b147	9c 2b 04	stz $042b			stz 	TIM_Z
.b14a	68		pla				pla 								; get Status Register
.b14b	8d 27 04	sta $0427			sta 	TIM_SR
.b14e	68		pla				pla
.b14f	8d 24 04	sta $0424			sta 	TIM_PC+1 					; save calling address
.b152	68		pla				pla
.b153	8d 23 04	sta $0423			sta 	TIM_PC 						; high byte
.b156	ad 24 04	lda $0424			lda 	TIM_PC+1 					; dec PC to point right.
.b159	d0 03		bne $b15e			bne 	_TIMDecrement 				; brk bumps it.
.b15b	ce 23 04	dec $0423			dec 	TIM_PC
.b15e					_TIMDecrement:
.b15e	ce 24 04	dec $0424			dec 	TIM_PC+1
.b161	ba		tsx				tsx 								; and copy SP
.b162	8e 2c 04	stx $042c			stx 	TIM_SP
.b165	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.b167	9a		txs				txs
.b168	4c 46 b0	jmp $b046			jmp 	TIM_Start 					; and start up TIM monitor.
.b16b					TIM_UpdateRegisters:
.b16b	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; PC
.b16e	b0 23		bcs $b193			bcs 	_TIMURFail
.b170	a5 14		lda $14				lda 	zTemp3
.b172	8d 24 04	sta $0424			sta 	Tim_PC+1
.b175	a5 15		lda $15				lda 	zTemp3+1
.b177	8d 23 04	sta $0423			sta 	Tim_PC
.b17a	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; ignore IRQ
.b17d	b0 14		bcs $b193			bcs 	_TIMURFail
.b17f	a2 00		ldx #$00			ldx 	#0
.b181					_TIM_URLoop:
.b181	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; registers
.b184	b0 0d		bcs $b193			bcs 	_TIMURFail
.b186	a5 14		lda $14				lda 	zTemp3
.b188	9d 27 04	sta $0427,x			sta 	Tim_SR,x
.b18b	e8		inx				inx
.b18c	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.b18e	d0 f1		bne $b181			bne 	_TIM_URLoop
.b190	4c c1 af	jmp $afc1			jmp 	TIM_NewCommand
.b193					_TIMURFail:
.b193	4c ba af	jmp $afba			jmp 	TIM_Error
.b196					TIM_LoadMemory:
.b196	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; target address => zTemp2
.b199	a5 14		lda $14				lda 	zTemp3
.b19b	85 12		sta $12				sta 	zTemp2
.b19d	a5 15		lda $15				lda 	zTemp3+1
.b19f	85 13		sta $13				sta 	zTemp2+1
.b1a1					_TIM_LMLoop:
.b1a1	20 e4 b0	jsr $b0e4			jsr 	TIM_GetHex 					; next byte ?
.b1a4	b0 0e		bcs $b1b4			bcs 	_TIMLMDone 					; no more
.b1a6	a2 00		ldx #$00			ldx 	#0							; write out.
.b1a8	a5 14		lda $14				lda 	zTemp3
.b1aa	81 12		sta ($12,x)			sta 	(zTemp2,x)
.b1ac	e6 12		inc $12				inc 	zTemp2 						; bump address
.b1ae	d0 f1		bne $b1a1			bne 	_TIM_LMLoop
.b1b0	e6 13		inc $13				inc 	zTemp2+1
.b1b2	80 ed		bra $b1a1			bra 	_TIM_LMLoop
.b1b4					_TIMLMDone:
.b1b4	4c c1 af	jmp $afc1			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/testing/fptest.asm

.b1b7					FPTTest:
.b1b7	a9 70		lda #$70			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.b1b9	85 1a		sta $1a				sta 	zGenPtr
.b1bb	a9 b2		lda #$b2			lda 	#FPTTestData >> 8
.b1bd	85 1b		sta $1b				sta 	zGenPtr+1
.b1bf	a2 00		ldx #$00			ldx 	#0 							; start at stack bottom.
.b1c1	a5 1b		lda $1b		FPTLoop:lda 	zGenPtr+1
.b1c3	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b1c6	a5 1a		lda $1a				lda 	zGenPtr
.b1c8	20 a3 b0	jsr $b0a3			jsr 	TIM_WriteHex
.b1cb	a9 2e		lda #$2e			lda 	#"."
.b1cd	20 41 a0	jsr $a041			jsr		IFT_PrintCharacter
.b1d0	20 61 b2	jsr $b261			jsr 	FPTGet 						; get next command
.b1d3	c9 00		cmp #$00			cmp 	#0 							; zero, exit
.b1d5	f0 58		beq $b22f			beq 	FPTExit
.b1d7	c9 01		cmp #$01			cmp 	#1 							; 1,load
.b1d9	f0 46		beq $b221			beq 	FPTLoad
.b1db	c9 2b		cmp #$2b			cmp 	#"+" 						; the -1/0/1 value in AC.
.b1dd	d0 0b		bne $b1ea			bne 	_skip1
.b1df	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b1e2	20 12 ab	jsr $ab12			jsr 	FPAdd
.b1e5	20 5b b2	jsr $b25b			jsr 	FPT_Postamble
.b1e8	80 d7		bra $b1c1			bra 	FPTLoop
.b1ea					_skip1:
.b1ea	c9 2d		cmp #$2d			cmp 	#"-" 						; the -1/0/1 value in AC.
.b1ec	d0 0b		bne $b1f9			bne 	_skip1
.b1ee	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b1f1	20 08 ab	jsr $ab08			jsr 	FPSubtract
.b1f4	20 5b b2	jsr $b25b			jsr 	FPT_Postamble
.b1f7	80 c8		bra $b1c1			bra 	FPTLoop
.b1f9					_skip1:
.b1f9	c9 2a		cmp #$2a			cmp 	#"*" 						; the -1/0/1 value in AC.
.b1fb	d0 0b		bne $b208			bne 	_skip1
.b1fd	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b200	20 7e ac	jsr $ac7e			jsr 	FPMultiply
.b203	20 5b b2	jsr $b25b			jsr 	FPT_Postamble
.b206	80 b9		bra $b1c1			bra 	FPTLoop
.b208					_skip1:
.b208	c9 2f		cmp #$2f			cmp 	#"/" 						; the -1/0/1 value in AC.
.b20a	d0 0b		bne $b217			bne 	_skip1
.b20c	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b20f	20 f6 ab	jsr $abf6			jsr 	FPDivide
.b212	20 5b b2	jsr $b25b			jsr 	FPT_Postamble
.b215	80 aa		bra $b1c1			bra 	FPTLoop
.b217					_skip1:
.b217	c9 7e		cmp #$7e			cmp 	#"~" 						; ~, compare
.b219	f0 1b		beq $b236			beq 	FPTCompare
.b21b	c9 3d		cmp #$3d			cmp 	#"="						; = check equal
.b21d	f0 29		beq $b248			beq 	FPTCheck
.b21f					FPTError:
.b21f	80 fe		bra $b21f			bra 	FPTError
.b221					FPTLoad:
.b221	a0 06		ldy #$06			ldy 	#6 							; data to copy
.b223					_FPTLoadLoop:
.b223	20 61 b2	jsr $b261			jsr 	FPTGet
.b226	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.b229	e8		inx				inx
.b22a	88		dey				dey
.b22b	d0 f6		bne $b223			bne 	_FPTLoadLoop
.b22d	80 92		bra $b1c1			bra 	FPTLoop
.b22f					FPTExit:
.b22f	a9 2a		lda #$2a			lda 	#42
.b231	20 41 a0	jsr $a041			jsr 	IFT_PrintCharacter
.b234	80 fe		bra $b234	_halt:	bra 		_halt
.b236					FPTCompare:
.b236	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b239	20 9e ad	jsr $ad9e			jsr 	FPCompare
.b23c	20 f2 ad	jsr $adf2			jsr 	FPUSetInteger
.b23f	20 30 ae	jsr $ae30			jsr 	FPUToFloat
.b242	20 5b b2	jsr $b25b			jsr 	FPT_Postamble
.b245	4c c1 b1	jmp $b1c1			jmp 	FPTLoop
.b248					FPTCheck:
.b248	20 55 b2	jsr $b255			jsr 	FPT_Preamble
.b24b	20 9e ad	jsr $ad9e			jsr 	FPCompare
.b24e	09 00		ora #$00			ora 	#0
.b250					_FPTCFail:
.b250	d0 fe		bne $b250			bne 	_FPTCFail
.b252	4c c1 b1	jmp $b1c1			jmp 	FPTLoop
.b255					FPT_Preamble:
.b255	8a		txa				txa
.b256	38		sec				sec
.b257	e9 0c		sbc #$0c			sbc 	#12
.b259	aa		tax				tax
.b25a	60		rts				rts
.b25b					FPT_Postamble:
.b25b	8a		txa				txa
.b25c	18		clc				clc
.b25d	69 06		adc #$06			adc 	#6
.b25f	aa		tax				tax
.b260	60		rts				rts
.b261	5a		phy		FPTGet:	phy
.b262	a0 00		ldy #$00			ldy 	#0
.b264	b1 1a		lda ($1a),y			lda 	(zGenPtr),y
.b266	48		pha				pha
.b267	e6 1a		inc $1a				inc 	zGenPtr
.b269	d0 02		bne $b26d			bne 	_FPTGet1
.b26b	e6 1b		inc $1b				inc 	zGenPtr+1
.b26d					_FPTGet1:
.b26d	68		pla				pla
.b26e	7a		ply				ply
.b26f	60		rts				rts
.b270					FPTTestData:

;******  Processing file: modules/testing/script.inc

>b270	01					.byte 	1	; *** Load Integer 99999 ***
>b271	9f 86 01 00				.dword 	$1869f
>b275	00 01					.byte 	0,$01
>b277	01					.byte 	1     ; *** Load Float -14572768784868.703 ***
>b278	4f cb 0f d4				.dword 	$d40fcb4f
>b27c	ac 80					.byte 	$ac,$80
>b27e	01					.byte 	1     ; *** Load Float -14572768784868.703 ***
>b27f	4f cb 0f d4				.dword 	$d40fcb4f
>b283	ac 80					.byte 	$ac,$80
>b285	2f					.byte 	$2f   ; *** Command / ***
>b286	01					.byte 	1     ; *** Load Float 1.0 ***
>b287	00 00 00 80				.dword 	$80000000
>b28b	81 00					.byte 	$81,$0
>b28d	3d					.byte 	$3d   ; *** Command = ***
>b28e	01					.byte 	1     ; *** Load Float 2.985791 ***
>b28f	22 33 17 bf				.dword 	$bf173322
>b293	82 00					.byte 	$82,$0
>b295	01					.byte 	1     ; *** Load Float 2.0 ***
>b296	00 00 00 80				.dword 	$80000000
>b29a	82 00					.byte 	$82,$0
>b29c	2a					.byte 	$2a   ; *** Command * ***
>b29d	01					.byte 	1     ; *** Load Float 5.971582 ***
>b29e	22 33 17 bf				.dword 	$bf173322
>b2a2	83 00					.byte 	$83,$0
>b2a4	3d					.byte 	$3d   ; *** Command = ***
>b2a5	01					.byte 	1     ; *** Load Float 0.0 ***
>b2a6	00 00 00 00				.dword 	$0
>b2aa	80 40					.byte 	$80,$40
>b2ac	01					.byte 	1     ; *** Load Float 878.16 ***
>b2ad	70 3d 8a db				.dword 	$db8a3d70
>b2b1	8a 00					.byte 	$8a,$0
>b2b3	2b					.byte 	$2b   ; *** Command + ***
>b2b4	01					.byte 	1     ; *** Load Float 878.16 ***
>b2b5	70 3d 8a db				.dword 	$db8a3d70
>b2b9	8a 00					.byte 	$8a,$0
>b2bb	3d					.byte 	$3d   ; *** Command = ***
>b2bc	01					.byte 	1     ; *** Load Float 0.0 ***
>b2bd	00 00 00 00				.dword 	$0
>b2c1	80 40					.byte 	$80,$40
>b2c3	01					.byte 	1     ; *** Load Float -810.39 ***
>b2c4	c2 f5 98 ca				.dword 	$ca98f5c2
>b2c8	8a 80					.byte 	$8a,$80
>b2ca	2a					.byte 	$2a   ; *** Command * ***
>b2cb	01					.byte 	1     ; *** Load Float -0.0 ***
>b2cc	00 00 00 00				.dword 	$0
>b2d0	80 40					.byte 	$80,$40
>b2d2	3d					.byte 	$3d   ; *** Command = ***
>b2d3	01					.byte 	1     ; *** Load Float -14.0 ***
>b2d4	00 00 00 e0				.dword 	$e0000000
>b2d8	84 80					.byte 	$84,$80
>b2da	01					.byte 	1     ; *** Load Float -0.439622 ***
>b2db	81 22 16 e1				.dword 	$e1162281
>b2df	7f 80					.byte 	$7f,$80
>b2e1	2d					.byte 	$2d   ; *** Command - ***
>b2e2	01					.byte 	1     ; *** Load Float -13.560378 ***
>b2e3	eb 4e f7 d8				.dword 	$d8f74eeb
>b2e7	84 80					.byte 	$84,$80
>b2e9	3d					.byte 	$3d   ; *** Command = ***
>b2ea	01					.byte 	1     ; *** Load Float -11.0 ***
>b2eb	00 00 00 b0				.dword 	$b0000000
>b2ef	84 80					.byte 	$84,$80
>b2f1	01					.byte 	1     ; *** Load Float -2.721723914146423e-08 ***
>b2f2	81 57 cb e9				.dword 	$e9cb5781
>b2f6	67 80					.byte 	$67,$80
>b2f8	2f					.byte 	$2f   ; *** Command / ***
>b2f9	01					.byte 	1     ; *** Load Float 404155614.12479925 ***
>b2fa	f0 66 b7 c0				.dword 	$c0b766f0
>b2fe	9d 00					.byte 	$9d,$0
>b300	3d					.byte 	$3d   ; *** Command = ***
>b301	01					.byte 	1     ; *** Load Float 8.392331 ***
>b302	de fc 46 86				.dword 	$8646fcde
>b306	84 00					.byte 	$84,$0
>b308	01					.byte 	1     ; *** Load Float 335.61 ***
>b309	7a 14 ce a7				.dword 	$a7ce147a
>b30d	89 00					.byte 	$89,$0
>b30f	2f					.byte 	$2f   ; *** Command / ***
>b310	01					.byte 	1     ; *** Load Float 0.025006200649563482 ***
>b311	bf cd d9 cc				.dword 	$ccd9cdbf
>b315	7b 00					.byte 	$7b,$0
>b317	3d					.byte 	$3d   ; *** Command = ***
>b318	01					.byte 	1     ; *** Load Float 119.01 ***
>b319	b8 1e 05 ee				.dword 	$ee051eb8
>b31d	87 00					.byte 	$87,$0
>b31f	01					.byte 	1     ; *** Load Float -6.69835742428404e-16 ***
>b320	6f 27 11 c1				.dword 	$c111276f
>b324	4e 80					.byte 	$4e,$80
>b326	2b					.byte 	$2b   ; *** Command + ***
>b327	01					.byte 	1     ; *** Load Float 119.01 ***
>b328	b8 1e 05 ee				.dword 	$ee051eb8
>b32c	87 00					.byte 	$87,$0
>b32e	3d					.byte 	$3d   ; *** Command = ***
>b32f	01					.byte 	1     ; *** Load Float 548.4 ***
>b330	99 99 19 89				.dword 	$89199999
>b334	8a 00					.byte 	$8a,$0
>b336	01					.byte 	1     ; *** Load Float -3.870315849781037e-10 ***
>b337	6a da c5 d4				.dword 	$d4c5da6a
>b33b	61 80					.byte 	$61,$80
>b33d	2f					.byte 	$2f   ; *** Command / ***
>b33e	01					.byte 	1     ; *** Load Float -1416938620218.879 ***
>b33f	c2 0f f4 a4				.dword 	$a4f40fc2
>b343	a9 80					.byte 	$a9,$80
>b345	3d					.byte 	$3d   ; *** Command = ***
>b346	01					.byte 	1     ; *** Load Float 891.3530880000001 ***
>b347	fe 98 d6 de				.dword 	$ded698fe
>b34b	8a 00					.byte 	$8a,$0
>b34d	01					.byte 	1     ; *** Load Float 891.3530880000001 ***
>b34e	fe 98 d6 de				.dword 	$ded698fe
>b352	8a 00					.byte 	$8a,$0
>b354	7e					.byte 	$7e   ; *** Command ~ ***
>b355	01					.byte 	1     ; *** Load Float 0 ***
>b356	00 00 00 00				.dword 	$0
>b35a	80 40					.byte 	$80,$40
>b35c	3d					.byte 	$3d   ; *** Command = ***
>b35d	01					.byte 	1     ; *** Load Float -167.19 ***
>b35e	d7 a3 30 a7				.dword 	$a730a3d7
>b362	88 80					.byte 	$88,$80
>b364	01					.byte 	1     ; *** Load Float 10.0 ***
>b365	00 00 00 a0				.dword 	$a0000000
>b369	84 00					.byte 	$84,$0
>b36b	2a					.byte 	$2a   ; *** Command * ***
>b36c	01					.byte 	1     ; *** Load Float -1671.9 ***
>b36d	cc cc fc d0				.dword 	$d0fccccc
>b371	8b 80					.byte 	$8b,$80
>b373	3d					.byte 	$3d   ; *** Command = ***
>b374	01					.byte 	1     ; *** Load Float 7.376869 ***
>b375	93 4f 0f ec				.dword 	$ec0f4f93
>b379	83 00					.byte 	$83,$0
>b37b	01					.byte 	1     ; *** Load Float -996.28 ***
>b37c	85 eb 11 f9				.dword 	$f911eb85
>b380	8a 80					.byte 	$8a,$80
>b382	2f					.byte 	$2f   ; *** Command / ***
>b383	01					.byte 	1     ; *** Load Float -0.0074044134179146424 ***
>b384	bc b8 a0 f2				.dword 	$f2a0b8bc
>b388	79 80					.byte 	$79,$80
>b38a	3d					.byte 	$3d   ; *** Command = ***
>b38b	01					.byte 	1     ; *** Load Float 6.939941 ***
>b38c	25 ff 13 de				.dword 	$de13ff25
>b390	83 00					.byte 	$83,$0
>b392	01					.byte 	1     ; *** Load Float 0.0 ***
>b393	00 00 00 00				.dword 	$0
>b397	80 40					.byte 	$80,$40
>b399	2d					.byte 	$2d   ; *** Command - ***
>b39a	01					.byte 	1     ; *** Load Float 6.939941 ***
>b39b	25 ff 13 de				.dword 	$de13ff25
>b39f	83 00					.byte 	$83,$0
>b3a1	3d					.byte 	$3d   ; *** Command = ***
>b3a2	01					.byte 	1     ; *** Load Float -8.544666343368591e-13 ***
>b3a3	52 cf 82 f0				.dword 	$f082cf52
>b3a7	58 80					.byte 	$58,$80
>b3a9	01					.byte 	1     ; *** Load Float 356.26 ***
>b3aa	ae 47 21 b2				.dword 	$b22147ae
>b3ae	89 00					.byte 	$89,$0
>b3b0	7e					.byte 	$7e   ; *** Command ~ ***
>b3b1	01					.byte 	1     ; *** Load Float -1 ***
>b3b2	00 00 00 80				.dword 	$80000000
>b3b6	81 80					.byte 	$81,$80
>b3b8	3d					.byte 	$3d   ; *** Command = ***
>b3b9	01					.byte 	1     ; *** Load Float -566.78 ***
>b3ba	85 eb b1 8d				.dword 	$8db1eb85
>b3be	8a 80					.byte 	$8a,$80
>b3c0	01					.byte 	1     ; *** Load Float 7.167685 ***
>b3c1	ee ac 5d e5				.dword 	$e55dacee
>b3c5	83 00					.byte 	$83,$0
>b3c7	2a					.byte 	$2a   ; *** Command * ***
>b3c8	01					.byte 	1     ; *** Load Float -4062.5005042999996 ***
>b3c9	10 02 e8 fd				.dword 	$fde80210
>b3cd	8c 80					.byte 	$8c,$80
>b3cf	3d					.byte 	$3d   ; *** Command = ***
>b3d0	01					.byte 	1     ; *** Load Float 7.099043 ***
>b3d1	39 5c 2b e3				.dword 	$e32b5c39
>b3d5	83 00					.byte 	$83,$0
>b3d7	01					.byte 	1     ; *** Load Float -7.0 ***
>b3d8	00 00 00 e0				.dword 	$e0000000
>b3dc	83 80					.byte 	$83,$80
>b3de	2f					.byte 	$2f   ; *** Command / ***
>b3df	01					.byte 	1     ; *** Load Float -1.014149 ***
>b3e0	6a a2 cf 81				.dword 	$81cfa26a
>b3e4	81 80					.byte 	$81,$80
>b3e6	3d					.byte 	$3d   ; *** Command = ***
>b3e7	01					.byte 	1     ; *** Load Float 532.07 ***
>b3e8	e1 7a 04 85				.dword 	$85047ae1
>b3ec	8a 00					.byte 	$8a,$0
>b3ee	01					.byte 	1     ; *** Load Float 2590402.1503999997 ***
>b3ef	9a 08 1b 9e				.dword 	$9e1b089a
>b3f3	96 00					.byte 	$96,$0
>b3f5	2a					.byte 	$2a   ; *** Command * ***
>b3f6	01					.byte 	1     ; *** Load Float 1378275272.163328 ***
>b3f7	90 9f 4d a4				.dword 	$a44d9f90
>b3fb	9f 00					.byte 	$9f,$0
>b3fd	3d					.byte 	$3d   ; *** Command = ***
>b3fe	01					.byte 	1     ; *** Load Float 0.0 ***
>b3ff	00 00 00 00				.dword 	$0
>b403	80 40					.byte 	$80,$40
>b405	01					.byte 	1     ; *** Load Float -1869.840384 ***
>b406	6c e4 ba e9				.dword 	$e9bae46c
>b40a	8b 80					.byte 	$8b,$80
>b40c	2f					.byte 	$2f   ; *** Command / ***
>b40d	01					.byte 	1     ; *** Load Float -0.0 ***
>b40e	00 00 00 00				.dword 	$0
>b412	80 40					.byte 	$80,$40
>b414	3d					.byte 	$3d   ; *** Command = ***
>b415	01					.byte 	1     ; *** Load Float 7.602319 ***
>b416	7e 32 46 f3				.dword 	$f346327e
>b41a	83 00					.byte 	$83,$0
>b41c	01					.byte 	1     ; *** Load Float -0.954972 ***
>b41d	84 0b 79 f4				.dword 	$f4790b84
>b421	80 80					.byte 	$80,$80
>b423	2b					.byte 	$2b   ; *** Command + ***
>b424	01					.byte 	1     ; *** Load Float 6.647347 ***
>b425	0e 11 b7 d4				.dword 	$d4b7110e
>b429	83 00					.byte 	$83,$0
>b42b	3d					.byte 	$3d   ; *** Command = ***
>b42c	01					.byte 	1     ; *** Load Float -1.0 ***
>b42d	00 00 00 80				.dword 	$80000000
>b431	81 80					.byte 	$81,$80
>b433	01					.byte 	1     ; *** Load Float 14.0 ***
>b434	00 00 00 e0				.dword 	$e0000000
>b438	84 00					.byte 	$84,$0
>b43a	2f					.byte 	$2f   ; *** Command / ***
>b43b	01					.byte 	1     ; *** Load Float -0.07142857142857142 ***
>b43c	92 24 49 92				.dword 	$92492492
>b440	7d 80					.byte 	$7d,$80
>b442	3d					.byte 	$3d   ; *** Command = ***
>b443	01					.byte 	1     ; *** Load Float -875.61 ***
>b444	3d 0a e7 da				.dword 	$dae70a3d
>b448	8a 80					.byte 	$8a,$80
>b44a	01					.byte 	1     ; *** Load Float 15.0 ***
>b44b	00 00 00 f0				.dword 	$f0000000
>b44f	84 00					.byte 	$84,$0
>b451	2f					.byte 	$2f   ; *** Command / ***
>b452	01					.byte 	1     ; *** Load Float -58.374 ***
>b453	db f9 7e e9				.dword 	$e97ef9db
>b457	86 80					.byte 	$86,$80
>b459	3d					.byte 	$3d   ; *** Command = ***
>b45a	01					.byte 	1     ; *** Load Float 2.711834667934454e-14 ***
>b45b	6d a6 42 f4				.dword 	$f442a66d
>b45f	53 00					.byte 	$53,$0
>b461	01					.byte 	1     ; *** Load Float -12.0 ***
>b462	00 00 00 c0				.dword 	$c0000000
>b466	84 80					.byte 	$84,$80
>b468	2f					.byte 	$2f   ; *** Command / ***
>b469	01					.byte 	1     ; *** Load Float -2.2598622232787114e-15 ***
>b46a	9e 19 d7 a2				.dword 	$a2d7199e
>b46e	50 80					.byte 	$50,$80
>b470	3d					.byte 	$3d   ; *** Command = ***
>b471	01					.byte 	1     ; *** Load Float 12.0 ***
>b472	00 00 00 c0				.dword 	$c0000000
>b476	84 00					.byte 	$84,$0
>b478	01					.byte 	1     ; *** Load Float 3.0 ***
>b479	00 00 00 c0				.dword 	$c0000000
>b47d	82 00					.byte 	$82,$0
>b47f	2d					.byte 	$2d   ; *** Command - ***
>b480	01					.byte 	1     ; *** Load Float 9.0 ***
>b481	00 00 00 90				.dword 	$90000000
>b485	84 00					.byte 	$84,$0
>b487	3d					.byte 	$3d   ; *** Command = ***
>b488	01					.byte 	1     ; *** Load Float -208.37 ***
>b489	51 b8 5e d0				.dword 	$d05eb851
>b48d	88 80					.byte 	$88,$80
>b48f	01					.byte 	1     ; *** Load Float 8.0 ***
>b490	00 00 00 80				.dword 	$80000000
>b494	84 00					.byte 	$84,$0
>b496	7e					.byte 	$7e   ; *** Command ~ ***
>b497	01					.byte 	1     ; *** Load Float -1 ***
>b498	00 00 00 80				.dword 	$80000000
>b49c	81 80					.byte 	$81,$80
>b49e	3d					.byte 	$3d   ; *** Command = ***
>b49f	01					.byte 	1     ; *** Load Float -0.970461 ***
>b4a0	d1 21 70 f8				.dword 	$f87021d1
>b4a4	80 80					.byte 	$80,$80
>b4a6	01					.byte 	1     ; *** Load Float 62051351030.39897 ***
>b4a7	9f c7 28 e7				.dword 	$e728c79f
>b4ab	a4 00					.byte 	$a4,$0
>b4ad	2f					.byte 	$2f   ; *** Command / ***
>b4ae	01					.byte 	1     ; *** Load Float -1.56396433580402e-11 ***
>b4af	93 58 91 89				.dword 	$89915893
>b4b3	5d 80					.byte 	$5d,$80
>b4b5	3d					.byte 	$3d   ; *** Command = ***
>b4b6	01					.byte 	1     ; *** Load Float 2.7965158224105833e-08 ***
>b4b7	85 08 38 f0				.dword 	$f0380885
>b4bb	67 00					.byte 	$67,$0
>b4bd	01					.byte 	1     ; *** Load Float 5.208368 ***
>b4be	5e f3 aa a6				.dword 	$a6aaf35e
>b4c2	83 00					.byte 	$83,$0
>b4c4	7e					.byte 	$7e   ; *** Command ~ ***
>b4c5	01					.byte 	1     ; *** Load Float -1 ***
>b4c6	00 00 00 80				.dword 	$80000000
>b4ca	81 80					.byte 	$81,$80
>b4cc	3d					.byte 	$3d   ; *** Command = ***
>b4cd	01					.byte 	1     ; *** Load Float -264.69 ***
>b4ce	eb 51 58 84				.dword 	$845851eb
>b4d2	89 80					.byte 	$89,$80
>b4d4	01					.byte 	1     ; *** Load Float 4.0 ***
>b4d5	00 00 00 80				.dword 	$80000000
>b4d9	83 00					.byte 	$83,$0
>b4db	2a					.byte 	$2a   ; *** Command * ***
>b4dc	01					.byte 	1     ; *** Load Float -1058.76 ***
>b4dd	eb 51 58 84				.dword 	$845851eb
>b4e1	8b 80					.byte 	$8b,$80
>b4e3	3d					.byte 	$3d   ; *** Command = ***
>b4e4	01					.byte 	1     ; *** Load Float 4.0 ***
>b4e5	00 00 00 80				.dword 	$80000000
>b4e9	83 00					.byte 	$83,$0
>b4eb	01					.byte 	1     ; *** Load Float 1.6265246927105182e-15 ***
>b4ec	62 2b 68 ea				.dword 	$ea682b62
>b4f0	4f 00					.byte 	$4f,$0
>b4f2	2d					.byte 	$2d   ; *** Command - ***
>b4f3	01					.byte 	1     ; *** Load Float 3.9999999999999982 ***
>b4f4	ff ff ff ff				.dword 	$ffffffff
>b4f8	82 00					.byte 	$82,$0
>b4fa	3d					.byte 	$3d   ; *** Command = ***
>b4fb	01					.byte 	1     ; *** Load Float -106944960548.30695 ***
>b4fc	c1 54 33 c7				.dword 	$c73354c1
>b500	a5 80					.byte 	$a5,$80
>b502	01					.byte 	1     ; *** Load Float 6.214086897671224e-11 ***
>b503	05 33 a6 88				.dword 	$88a63305
>b507	5f 00					.byte 	$5f,$0
>b509	2a					.byte 	$2a   ; *** Command * ***
>b50a	01					.byte 	1     ; *** Load Float -6.645652781152001 ***
>b50b	05 30 a9 d4				.dword 	$d4a93005
>b50f	83 80					.byte 	$83,$80
>b511	3d					.byte 	$3d   ; *** Command = ***
>b512	01					.byte 	1     ; *** Load Float -945.15 ***
>b513	99 99 49 ec				.dword 	$ec499999
>b517	8a 80					.byte 	$8a,$80
>b519	01					.byte 	1     ; *** Load Float 2.726101 ***
>b51a	54 70 78 ae				.dword 	$ae787054
>b51e	82 00					.byte 	$82,$0
>b520	7e					.byte 	$7e   ; *** Command ~ ***
>b521	01					.byte 	1     ; *** Load Float -1 ***
>b522	00 00 00 80				.dword 	$80000000
>b526	81 80					.byte 	$81,$80
>b528	3d					.byte 	$3d   ; *** Command = ***
>b529	01					.byte 	1     ; *** Load Float 763.27 ***
>b52a	ae 47 d1 be				.dword 	$bed147ae
>b52e	8a 00					.byte 	$8a,$0
>b530	01					.byte 	1     ; *** Load Float -2.5274306535720824e-08 ***
>b531	af c9 1a d9				.dword 	$d91ac9af
>b535	67 80					.byte 	$67,$80
>b537	2b					.byte 	$2b   ; *** Command + ***
>b538	01					.byte 	1     ; *** Load Float 763.2699999747257 ***
>b539	ad 47 d1 be				.dword 	$bed147ad
>b53d	8a 00					.byte 	$8a,$0
>b53f	3d					.byte 	$3d   ; *** Command = ***
>b540	01					.byte 	1     ; *** Load Float 298.62 ***
>b541	28 5c 4f 95				.dword 	$954f5c28
>b545	89 00					.byte 	$89,$0
>b547	01					.byte 	1     ; *** Load Float -20.0 ***
>b548	00 00 00 a0				.dword 	$a0000000
>b54c	85 80					.byte 	$85,$80
>b54e	2d					.byte 	$2d   ; *** Command - ***
>b54f	01					.byte 	1     ; *** Load Float 318.62 ***
>b550	28 5c 4f 9f				.dword 	$9f4f5c28
>b554	89 00					.byte 	$89,$0
>b556	3d					.byte 	$3d   ; *** Command = ***
>b557	01					.byte 	1     ; *** Load Float 19.0 ***
>b558	00 00 00 98				.dword 	$98000000
>b55c	85 00					.byte 	$85,$0
>b55e	01					.byte 	1     ; *** Load Float -145.69 ***
>b55f	d7 a3 b0 91				.dword 	$91b0a3d7
>b563	88 80					.byte 	$88,$80
>b565	2d					.byte 	$2d   ; *** Command - ***
>b566	01					.byte 	1     ; *** Load Float 164.69 ***
>b567	d7 a3 b0 a4				.dword 	$a4b0a3d7
>b56b	88 00					.byte 	$88,$0
>b56d	3d					.byte 	$3d   ; *** Command = ***
>b56e	01					.byte 	1     ; *** Load Float 1.0413670679554343e-11 ***
>b56f	de 00 33 b7				.dword 	$b73300de
>b573	5c 00					.byte 	$5c,$0
>b575	01					.byte 	1     ; *** Load Float 4.975471 ***
>b576	f5 0e 37 9f				.dword 	$9f370ef5
>b57a	83 00					.byte 	$83,$0
>b57c	2b					.byte 	$2b   ; *** Command + ***
>b57d	01					.byte 	1     ; *** Load Float 4.975471000010414 ***
>b57e	f5 0e 37 9f				.dword 	$9f370ef5
>b582	83 00					.byte 	$83,$0
>b584	3d					.byte 	$3d   ; *** Command = ***
>b585	01					.byte 	1     ; *** Load Float 7.733526 ***
>b586	84 0b 79 f7				.dword 	$f7790b84
>b58a	83 00					.byte 	$83,$0
>b58c	01					.byte 	1     ; *** Load Float 0.0 ***
>b58d	00 00 00 00				.dword 	$0
>b591	80 40					.byte 	$80,$40
>b593	2d					.byte 	$2d   ; *** Command - ***
>b594	01					.byte 	1     ; *** Load Float 7.733526 ***
>b595	84 0b 79 f7				.dword 	$f7790b84
>b599	83 00					.byte 	$83,$0
>b59b	3d					.byte 	$3d   ; *** Command = ***
>b59c	01					.byte 	1     ; *** Load Float 0.0 ***
>b59d	00 00 00 00				.dword 	$0
>b5a1	80 40					.byte 	$80,$40
>b5a3	01					.byte 	1     ; *** Load Float 10.0 ***
>b5a4	00 00 00 a0				.dword 	$a0000000
>b5a8	84 00					.byte 	$84,$0
>b5aa	7e					.byte 	$7e   ; *** Command ~ ***
>b5ab	01					.byte 	1     ; *** Load Float -1 ***
>b5ac	00 00 00 80				.dword 	$80000000
>b5b0	81 80					.byte 	$81,$80
>b5b2	3d					.byte 	$3d   ; *** Command = ***
>b5b3	01					.byte 	1     ; *** Load Float -4922.2451200000005 ***
>b5b4	01 f6 d1 99				.dword 	$99d1f601
>b5b8	8d 80					.byte 	$8d,$80
>b5ba	01					.byte 	1     ; *** Load Float 23341133.98784 ***
>b5bb	fe 26 14 b2				.dword 	$b21426fe
>b5bf	99 00					.byte 	$99,$0
>b5c1	7e					.byte 	$7e   ; *** Command ~ ***
>b5c2	01					.byte 	1     ; *** Load Float -1 ***
>b5c3	00 00 00 80				.dword 	$80000000
>b5c7	81 80					.byte 	$81,$80
>b5c9	3d					.byte 	$3d   ; *** Command = ***
>b5ca	01					.byte 	1     ; *** Load Float 812693711.74912 ***
>b5cb	3e e3 c2 c1				.dword 	$c1c2e33e
>b5cf	9e 00					.byte 	$9e,$0
>b5d1	01					.byte 	1     ; *** Load Float -203.21 ***
>b5d2	8f c2 35 cb				.dword 	$cb35c28f
>b5d6	88 80					.byte 	$88,$80
>b5d8	2b					.byte 	$2b   ; *** Command + ***
>b5d9	01					.byte 	1     ; *** Load Float 812693508.53912 ***
>b5da	12 e0 c2 c1				.dword 	$c1c2e012
>b5de	9e 00					.byte 	$9e,$0
>b5e0	3d					.byte 	$3d   ; *** Command = ***
>b5e1	01					.byte 	1     ; *** Load Float 438.49 ***
>b5e2	51 b8 3e db				.dword 	$db3eb851
>b5e6	89 00					.byte 	$89,$0
>b5e8	01					.byte 	1     ; *** Load Float 4.0 ***
>b5e9	00 00 00 80				.dword 	$80000000
>b5ed	83 00					.byte 	$83,$0
>b5ef	2b					.byte 	$2b   ; *** Command + ***
>b5f0	01					.byte 	1     ; *** Load Float 442.49 ***
>b5f1	51 b8 3e dd				.dword 	$dd3eb851
>b5f5	89 00					.byte 	$89,$0
>b5f7	3d					.byte 	$3d   ; *** Command = ***
>b5f8	01					.byte 	1     ; *** Load Float -714.92 ***
>b5f9	47 e1 ba b2				.dword 	$b2bae147
>b5fd	8a 80					.byte 	$8a,$80
>b5ff	01					.byte 	1     ; *** Load Float -15.0 ***
>b600	00 00 00 f0				.dword 	$f0000000
>b604	84 80					.byte 	$84,$80
>b606	2b					.byte 	$2b   ; *** Command + ***
>b607	01					.byte 	1     ; *** Load Float -729.92 ***
>b608	47 e1 7a b6				.dword 	$b67ae147
>b60c	8a 80					.byte 	$8a,$80
>b60e	3d					.byte 	$3d   ; *** Command = ***
>b60f	01					.byte 	1     ; *** Load Float -4.0 ***
>b610	00 00 00 80				.dword 	$80000000
>b614	83 80					.byte 	$83,$80
>b616	01					.byte 	1     ; *** Load Float -15.0 ***
>b617	00 00 00 f0				.dword 	$f0000000
>b61b	84 80					.byte 	$84,$80
>b61d	7e					.byte 	$7e   ; *** Command ~ ***
>b61e	01					.byte 	1     ; *** Load Float 1 ***
>b61f	00 00 00 80				.dword 	$80000000
>b623	81 00					.byte 	$81,$0
>b625	3d					.byte 	$3d   ; *** Command = ***
>b626	01					.byte 	1     ; *** Load Float 7.965133 ***
>b627	99 5e e2 fe				.dword 	$fee25e99
>b62b	83 00					.byte 	$83,$0
>b62d	01					.byte 	1     ; *** Load Float -16.0 ***
>b62e	00 00 00 80				.dword 	$80000000
>b632	85 80					.byte 	$85,$80
>b634	2a					.byte 	$2a   ; *** Command * ***
>b635	01					.byte 	1     ; *** Load Float -127.442128 ***
>b636	99 5e e2 fe				.dword 	$fee25e99
>b63a	87 80					.byte 	$87,$80
>b63c	3d					.byte 	$3d   ; *** Command = ***
>b63d	01					.byte 	1     ; *** Load Float 5.932958 ***
>b63e	bc ca da bd				.dword 	$bddacabc
>b642	83 00					.byte 	$83,$0
>b644	01					.byte 	1     ; *** Load Float -0.524897 ***
>b645	58 a6 5f 86				.dword 	$865fa658
>b649	80 80					.byte 	$80,$80
>b64b	2f					.byte 	$2f   ; *** Command / ***
>b64c	01					.byte 	1     ; *** Load Float -11.303089939550047 ***
>b64d	d6 74 d9 b4				.dword 	$b4d974d6
>b651	84 80					.byte 	$84,$80
>b653	3d					.byte 	$3d   ; *** Command = ***
>b654	01					.byte 	1     ; *** Load Float 1.696218 ***
>b655	e2 ab 1d d9				.dword 	$d91dabe2
>b659	81 00					.byte 	$81,$0
>b65b	01					.byte 	1     ; *** Load Float -14716034.351104 ***
>b65c	59 82 8c e0				.dword 	$e08c8259
>b660	98 80					.byte 	$98,$80
>b662	2d					.byte 	$2d   ; *** Command - ***
>b663	01					.byte 	1     ; *** Load Float 14716036.047322001 ***
>b664	0c 84 8c e0				.dword 	$e08c840c
>b668	98 00					.byte 	$98,$0
>b66a	3d					.byte 	$3d   ; *** Command = ***
>b66b	01					.byte 	1     ; *** Load Float 937.15 ***
>b66c	99 99 49 ea				.dword 	$ea499999
>b670	8a 00					.byte 	$8a,$0
>b672	01					.byte 	1     ; *** Load Float -1.6146623238455503e-12 ***
>b673	53 57 3e e3				.dword 	$e33e5753
>b677	59 80					.byte 	$59,$80
>b679	2a					.byte 	$2a   ; *** Command * ***
>b67a	01					.byte 	1     ; *** Load Float -1.5131807967918575e-09 ***
>b67b	f1 50 f8 cf				.dword 	$cff850f1
>b67f	63 80					.byte 	$63,$80
>b681	3d					.byte 	$3d   ; *** Command = ***
>b682	01					.byte 	1     ; *** Load Float 1.312253 ***
>b683	03 e8 f7 a7				.dword 	$a7f7e803
>b687	81 00					.byte 	$81,$0
>b689	01					.byte 	1     ; *** Load Float 285.49 ***
>b68a	51 b8 be 8e				.dword 	$8ebeb851
>b68e	89 00					.byte 	$89,$0
>b690	2b					.byte 	$2b   ; *** Command + ***
>b691	01					.byte 	1     ; *** Load Float 286.802253 ***
>b692	39 b0 66 8f				.dword 	$8f66b039
>b696	89 00					.byte 	$89,$0
>b698	3d					.byte 	$3d   ; *** Command = ***
>b699	01					.byte 	1     ; *** Load Float 11.0 ***
>b69a	00 00 00 b0				.dword 	$b0000000
>b69e	84 00					.byte 	$84,$0
>b6a0	01					.byte 	1     ; *** Load Float 895.22 ***
>b6a1	7a 14 ce df				.dword 	$dfce147a
>b6a5	8a 00					.byte 	$8a,$0
>b6a7	2b					.byte 	$2b   ; *** Command + ***
>b6a8	01					.byte 	1     ; *** Load Float 906.22 ***
>b6a9	7a 14 8e e2				.dword 	$e28e147a
>b6ad	8a 00					.byte 	$8a,$0
>b6af	3d					.byte 	$3d   ; *** Command = ***
>b6b0	01					.byte 	1     ; *** Load Float 3.0 ***
>b6b1	00 00 00 c0				.dword 	$c0000000
>b6b5	82 00					.byte 	$82,$0
>b6b7	01					.byte 	1     ; *** Load Float -158.34 ***
>b6b8	3d 0a 57 9e				.dword 	$9e570a3d
>b6bc	88 80					.byte 	$88,$80
>b6be	2b					.byte 	$2b   ; *** Command + ***
>b6bf	01					.byte 	1     ; *** Load Float -155.34 ***
>b6c0	3d 0a 57 9b				.dword 	$9b570a3d
>b6c4	88 80					.byte 	$88,$80
>b6c6	3d					.byte 	$3d   ; *** Command = ***
>b6c7	01					.byte 	1     ; *** Load Float 0.0 ***
>b6c8	00 00 00 00				.dword 	$0
>b6cc	80 40					.byte 	$80,$40
>b6ce	01					.byte 	1     ; *** Load Float -0.623416 ***
>b6cf	e3 30 98 9f				.dword 	$9f9830e3
>b6d3	80 80					.byte 	$80,$80
>b6d5	2a					.byte 	$2a   ; *** Command * ***
>b6d6	01					.byte 	1     ; *** Load Float -0.0 ***
>b6d7	00 00 00 00				.dword 	$0
>b6db	80 40					.byte 	$80,$40
>b6dd	3d					.byte 	$3d   ; *** Command = ***
>b6de	01					.byte 	1     ; *** Load Float -7.0 ***
>b6df	00 00 00 e0				.dword 	$e0000000
>b6e3	83 80					.byte 	$83,$80
>b6e5	01					.byte 	1     ; *** Load Float 168.9 ***
>b6e6	66 66 e6 a8				.dword 	$a8e66666
>b6ea	88 00					.byte 	$88,$0
>b6ec	2f					.byte 	$2f   ; *** Command / ***
>b6ed	01					.byte 	1     ; *** Load Float -0.04144464179988158 ***
>b6ee	51 db c1 a9				.dword 	$a9c1db51
>b6f2	7c 80					.byte 	$7c,$80
>b6f4	3d					.byte 	$3d   ; *** Command = ***
>b6f5	01					.byte 	1     ; *** Load Float -2.0 ***
>b6f6	00 00 00 80				.dword 	$80000000
>b6fa	82 80					.byte 	$82,$80
>b6fc	01					.byte 	1     ; *** Load Float 26596.737024000002 ***
>b6fd	5b 79 c9 cf				.dword 	$cfc9795b
>b701	8f 00					.byte 	$8f,$0
>b703	2f					.byte 	$2f   ; *** Command / ***
>b704	01					.byte 	1     ; *** Load Float -7.519719423458851e-05 ***
>b705	ad 2f b3 9d				.dword 	$9db32fad
>b709	73 80					.byte 	$73,$80
>b70b	3d					.byte 	$3d   ; *** Command = ***
>b70c	01					.byte 	1     ; *** Load Float 36.4 ***
>b70d	99 99 99 91				.dword 	$91999999
>b711	86 00					.byte 	$86,$0
>b713	01					.byte 	1     ; *** Load Float 9.023027 ***
>b714	8f 51 5e 90				.dword 	$905e518f
>b718	84 00					.byte 	$84,$0
>b71a	2f					.byte 	$2f   ; *** Command / ***
>b71b	01					.byte 	1     ; *** Load Float 4.034122916843759 ***
>b71c	f1 88 17 81				.dword 	$811788f1
>b720	83 00					.byte 	$83,$0
>b722	3d					.byte 	$3d   ; *** Command = ***
>b723	01					.byte 	1     ; *** Load Float -1942837.2643839999 ***
>b724	1d aa 29 ed				.dword 	$ed29aa1d
>b728	95 80					.byte 	$95,$80
>b72a	01					.byte 	1     ; *** Load Float -2.740710973739624e-09 ***
>b72b	eb 18 57 bc				.dword 	$bc5718eb
>b72f	64 80					.byte 	$64,$80
>b731	2a					.byte 	$2a   ; *** Command * ***
>b732	01					.byte 	1     ; *** Load Float 0.0053247554106875 ***
>b733	2c 49 7b ae				.dword 	$ae7b492c
>b737	79 00					.byte 	$79,$0
>b739	3d					.byte 	$3d   ; *** Command = ***
>b73a	01					.byte 	1     ; *** Load Float -12.0 ***
>b73b	00 00 00 c0				.dword 	$c0000000
>b73f	84 80					.byte 	$84,$80
>b741	01					.byte 	1     ; *** Load Float 2.964962 ***
>b742	f9 ef c1 bd				.dword 	$bdc1eff9
>b746	82 00					.byte 	$82,$0
>b748	7e					.byte 	$7e   ; *** Command ~ ***
>b749	01					.byte 	1     ; *** Load Float -1 ***
>b74a	00 00 00 80				.dword 	$80000000
>b74e	81 80					.byte 	$81,$80
>b750	3d					.byte 	$3d   ; *** Command = ***
>b751	01					.byte 	1     ; *** Load Float -1.0173171997070312e-05 ***
>b752	e6 70 ad aa				.dword 	$aaad70e6
>b756	70 80					.byte 	$70,$80
>b758	01					.byte 	1     ; *** Load Float -3.0 ***
>b759	00 00 00 c0				.dword 	$c0000000
>b75d	82 80					.byte 	$82,$80
>b75f	2f					.byte 	$2f   ; *** Command / ***
>b760	01					.byte 	1     ; *** Load Float 3.391057332356771e-06 ***
>b761	de eb 91 e3				.dword 	$e391ebde
>b765	6e 00					.byte 	$6e,$0
>b767	3d					.byte 	$3d   ; *** Command = ***
>b768	01					.byte 	1     ; *** Load Float -10.0 ***
>b769	00 00 00 a0				.dword 	$a0000000
>b76d	84 80					.byte 	$84,$80
>b76f	01					.byte 	1     ; *** Load Float 429.46 ***
>b770	47 e1 ba d6				.dword 	$d6bae147
>b774	89 00					.byte 	$89,$0
>b776	2a					.byte 	$2a   ; *** Command * ***
>b777	01					.byte 	1     ; *** Load Float -4294.599999999999 ***
>b778	cc cc 34 86				.dword 	$8634cccc
>b77c	8d 80					.byte 	$8d,$80
>b77e	3d					.byte 	$3d   ; *** Command = ***
>b77f	01					.byte 	1     ; *** Load Float 20.0 ***
>b780	00 00 00 a0				.dword 	$a0000000
>b784	85 00					.byte 	$85,$0
>b786	01					.byte 	1     ; *** Load Float 14.0 ***
>b787	00 00 00 e0				.dword 	$e0000000
>b78b	84 00					.byte 	$84,$0
>b78d	7e					.byte 	$7e   ; *** Command ~ ***
>b78e	01					.byte 	1     ; *** Load Float 1 ***
>b78f	00 00 00 80				.dword 	$80000000
>b793	81 00					.byte 	$81,$0
>b795	3d					.byte 	$3d   ; *** Command = ***
>b796	01					.byte 	1     ; *** Load Float 2.577893 ***
>b797	eb 32 fc a4				.dword 	$a4fc32eb
>b79b	82 00					.byte 	$82,$0
>b79d	01					.byte 	1     ; *** Load Float -2.0 ***
>b79e	00 00 00 80				.dword 	$80000000
>b7a2	82 80					.byte 	$82,$80
>b7a4	2a					.byte 	$2a   ; *** Command * ***
>b7a5	01					.byte 	1     ; *** Load Float -5.155786 ***
>b7a6	eb 32 fc a4				.dword 	$a4fc32eb
>b7aa	83 80					.byte 	$83,$80
>b7ac	3d					.byte 	$3d   ; *** Command = ***
>b7ad	01					.byte 	1     ; *** Load Float 4.0 ***
>b7ae	00 00 00 80				.dword 	$80000000
>b7b2	83 00					.byte 	$83,$0
>b7b4	01					.byte 	1     ; *** Load Float -721.01 ***
>b7b5	d7 a3 40 b4				.dword 	$b440a3d7
>b7b9	8a 80					.byte 	$8a,$80
>b7bb	2d					.byte 	$2d   ; *** Command - ***
>b7bc	01					.byte 	1     ; *** Load Float 725.01 ***
>b7bd	d7 a3 40 b5				.dword 	$b540a3d7
>b7c1	8a 00					.byte 	$8a,$0
>b7c3	3d					.byte 	$3d   ; *** Command = ***
>b7c4	01					.byte 	1     ; *** Load Float 5.80056 ***
>b7c5	01 30 9e b9				.dword 	$b99e3001
>b7c9	83 00					.byte 	$83,$0
>b7cb	01					.byte 	1     ; *** Load Float 0.596438 ***
>b7cc	28 29 b0 98				.dword 	$98b02928
>b7d0	80 00					.byte 	$80,$0
>b7d2	2b					.byte 	$2b   ; *** Command + ***
>b7d3	01					.byte 	1     ; *** Load Float 6.396998 ***
>b7d4	26 35 b4 cc				.dword 	$ccb43526
>b7d8	83 00					.byte 	$83,$0
>b7da	3d					.byte 	$3d   ; *** Command = ***
>b7db	01					.byte 	1     ; *** Load Float 1.664836 ***
>b7dc	96 58 19 d5				.dword 	$d5195896
>b7e0	81 00					.byte 	$81,$0
>b7e2	01					.byte 	1     ; *** Load Float 498.66 ***
>b7e3	e1 7a 54 f9				.dword 	$f9547ae1
>b7e7	89 00					.byte 	$89,$0
>b7e9	2f					.byte 	$2f   ; *** Command / ***
>b7ea	01					.byte 	1     ; *** Load Float 0.0033386195002606985 ***
>b7eb	91 bd cc da				.dword 	$daccbd91
>b7ef	78 00					.byte 	$78,$0
>b7f1	3d					.byte 	$3d   ; *** Command = ***
>b7f2	01					.byte 	1     ; *** Load Float -8.0 ***
>b7f3	00 00 00 80				.dword 	$80000000
>b7f7	84 80					.byte 	$84,$80
>b7f9	01					.byte 	1     ; *** Load Float 535.56 ***
>b7fa	0a d7 e3 85				.dword 	$85e3d70a
>b7fe	8a 00					.byte 	$8a,$0
>b800	2d					.byte 	$2d   ; *** Command - ***
>b801	01					.byte 	1     ; *** Load Float -543.56 ***
>b802	0a d7 e3 87				.dword 	$87e3d70a
>b806	8a 80					.byte 	$8a,$80
>b808	3d					.byte 	$3d   ; *** Command = ***
>b809	01					.byte 	1     ; *** Load Float 0.066078 ***
>b80a	07 e7 53 87				.dword 	$8753e707
>b80e	7d 00					.byte 	$7d,$0
>b810	01					.byte 	1     ; *** Load Float 0.0 ***
>b811	00 00 00 00				.dword 	$0
>b815	80 40					.byte 	$80,$40
>b817	2d					.byte 	$2d   ; *** Command - ***
>b818	01					.byte 	1     ; *** Load Float 0.066078 ***
>b819	07 e7 53 87				.dword 	$8753e707
>b81d	7d 00					.byte 	$7d,$0
>b81f	3d					.byte 	$3d   ; *** Command = ***
>b820	01					.byte 	1     ; *** Load Float 5.091166 ***
>b821	f5 d4 ea a2				.dword 	$a2ead4f5
>b825	83 00					.byte 	$83,$0
>b827	01					.byte 	1     ; *** Load Float -203.13 ***
>b828	ae 47 21 cb				.dword 	$cb2147ae
>b82c	88 80					.byte 	$88,$80
>b82e	2b					.byte 	$2b   ; *** Command + ***
>b82f	01					.byte 	1     ; *** Load Float -198.038834 ***
>b830	06 f1 09 c6				.dword 	$c609f106
>b834	88 80					.byte 	$88,$80
>b836	3d					.byte 	$3d   ; *** Command = ***
>b837	01					.byte 	1     ; *** Load Float 6.188537 ***
>b838	bf 7e 08 c6				.dword 	$c6087ebf
>b83c	83 00					.byte 	$83,$0
>b83e	01					.byte 	1     ; *** Load Float 3.888574 ***
>b83f	7b 65 de f8				.dword 	$f8de657b
>b843	82 00					.byte 	$82,$0
>b845	2a					.byte 	$2a   ; *** Command * ***
>b846	01					.byte 	1     ; *** Load Float 24.064584076238003 ***
>b847	a7 44 84 c0				.dword 	$c08444a7
>b84b	85 00					.byte 	$85,$0
>b84d	3d					.byte 	$3d   ; *** Command = ***
>b84e	01					.byte 	1     ; *** Load Float 12.0 ***
>b84f	00 00 00 c0				.dword 	$c0000000
>b853	84 00					.byte 	$84,$0
>b855	01					.byte 	1     ; *** Load Float 4.0 ***
>b856	00 00 00 80				.dword 	$80000000
>b85a	83 00					.byte 	$83,$0
>b85c	2d					.byte 	$2d   ; *** Command - ***
>b85d	01					.byte 	1     ; *** Load Float 8.0 ***
>b85e	00 00 00 80				.dword 	$80000000
>b862	84 00					.byte 	$84,$0
>b864	3d					.byte 	$3d   ; *** Command = ***
>b865	01					.byte 	1     ; *** Load Float 119.15 ***
>b866	cc cc 4c ee				.dword 	$ee4ccccc
>b86a	87 00					.byte 	$87,$0
>b86c	01					.byte 	1     ; *** Load Float -17.0 ***
>b86d	00 00 00 88				.dword 	$88000000
>b871	85 80					.byte 	$85,$80
>b873	7e					.byte 	$7e   ; *** Command ~ ***
>b874	01					.byte 	1     ; *** Load Float 1 ***
>b875	00 00 00 80				.dword 	$80000000
>b879	81 00					.byte 	$81,$0
>b87b	3d					.byte 	$3d   ; *** Command = ***
>b87c	01					.byte 	1     ; *** Load Float 3.126489 ***
>b87d	51 65 18 c8				.dword 	$c8186551
>b881	82 00					.byte 	$82,$0
>b883	01					.byte 	1     ; *** Load Float 1.917204 ***
>b884	cf f0 66 f5				.dword 	$f566f0cf
>b888	81 00					.byte 	$81,$0
>b88a	2a					.byte 	$2a   ; *** Command * ***
>b88b	01					.byte 	1     ; *** Load Float 5.994117216755999 ***
>b88c	e8 ce cf bf				.dword 	$bfcfcee8
>b890	83 00					.byte 	$83,$0
>b892	3d					.byte 	$3d   ; *** Command = ***
>b893	01					.byte 	1     ; *** Load Float -105.28 ***
>b894	28 5c 8f d2				.dword 	$d28f5c28
>b898	87 80					.byte 	$87,$80
>b89a	01					.byte 	1     ; *** Load Float 11.0 ***
>b89b	00 00 00 b0				.dword 	$b0000000
>b89f	84 00					.byte 	$84,$0
>b8a1	2d					.byte 	$2d   ; *** Command - ***
>b8a2	01					.byte 	1     ; *** Load Float -116.28 ***
>b8a3	28 5c 8f e8				.dword 	$e88f5c28
>b8a7	87 80					.byte 	$87,$80
>b8a9	3d					.byte 	$3d   ; *** Command = ***
>b8aa	01					.byte 	1     ; *** Load Float 17.0 ***
>b8ab	00 00 00 88				.dword 	$88000000
>b8af	85 00					.byte 	$85,$0
>b8b1	01					.byte 	1     ; *** Load Float 13.0 ***
>b8b2	00 00 00 d0				.dword 	$d0000000
>b8b6	84 00					.byte 	$84,$0
>b8b8	2b					.byte 	$2b   ; *** Command + ***
>b8b9	01					.byte 	1     ; *** Load Float 30.0 ***
>b8ba	00 00 00 f0				.dword 	$f0000000
>b8be	85 00					.byte 	$85,$0
>b8c0	3d					.byte 	$3d   ; *** Command = ***
>b8c1	01					.byte 	1     ; *** Load Float -9.0 ***
>b8c2	00 00 00 90				.dword 	$90000000
>b8c6	84 80					.byte 	$84,$80
>b8c8	01					.byte 	1     ; *** Load Float -838.61 ***
>b8c9	3d 0a a7 d1				.dword 	$d1a70a3d
>b8cd	8a 80					.byte 	$8a,$80
>b8cf	2d					.byte 	$2d   ; *** Command - ***
>b8d0	01					.byte 	1     ; *** Load Float 829.61 ***
>b8d1	3d 0a 67 cf				.dword 	$cf670a3d
>b8d5	8a 00					.byte 	$8a,$0
>b8d7	3d					.byte 	$3d   ; *** Command = ***
>b8d8	01					.byte 	1     ; *** Load Float -5.0 ***
>b8d9	00 00 00 a0				.dword 	$a0000000
>b8dd	83 80					.byte 	$83,$80
>b8df	01					.byte 	1     ; *** Load Float 16.0 ***
>b8e0	00 00 00 80				.dword 	$80000000
>b8e4	85 00					.byte 	$85,$0
>b8e6	2d					.byte 	$2d   ; *** Command - ***
>b8e7	01					.byte 	1     ; *** Load Float -21.0 ***
>b8e8	00 00 00 a8				.dword 	$a8000000
>b8ec	85 80					.byte 	$85,$80
>b8ee	3d					.byte 	$3d   ; *** Command = ***
>b8ef	01					.byte 	1     ; *** Load Float -13.0 ***
>b8f0	00 00 00 d0				.dword 	$d0000000
>b8f4	84 80					.byte 	$84,$80
>b8f6	01					.byte 	1     ; *** Load Float -483.78 ***
>b8f7	0a d7 e3 f1				.dword 	$f1e3d70a
>b8fb	89 80					.byte 	$89,$80
>b8fd	7e					.byte 	$7e   ; *** Command ~ ***
>b8fe	01					.byte 	1     ; *** Load Float 1 ***
>b8ff	00 00 00 80				.dword 	$80000000
>b903	81 00					.byte 	$81,$0
>b905	3d					.byte 	$3d   ; *** Command = ***
>b906	01					.byte 	1     ; *** Load Float 6.0 ***
>b907	00 00 00 c0				.dword 	$c0000000
>b90b	83 00					.byte 	$83,$0
>b90d	01					.byte 	1     ; *** Load Float 268.24 ***
>b90e	51 b8 1e 86				.dword 	$861eb851
>b912	89 00					.byte 	$89,$0
>b914	2d					.byte 	$2d   ; *** Command - ***
>b915	01					.byte 	1     ; *** Load Float -262.24 ***
>b916	51 b8 1e 83				.dword 	$831eb851
>b91a	89 80					.byte 	$89,$80
>b91c	3d					.byte 	$3d   ; *** Command = ***
>b91d	01					.byte 	1     ; *** Load Float 12.0 ***
>b91e	00 00 00 c0				.dword 	$c0000000
>b922	84 00					.byte 	$84,$0
>b924	01					.byte 	1     ; *** Load Float 6.0 ***
>b925	00 00 00 c0				.dword 	$c0000000
>b929	83 00					.byte 	$83,$0
>b92b	7e					.byte 	$7e   ; *** Command ~ ***
>b92c	01					.byte 	1     ; *** Load Float 1 ***
>b92d	00 00 00 80				.dword 	$80000000
>b931	81 00					.byte 	$81,$0
>b933	3d					.byte 	$3d   ; *** Command = ***
>b934	01					.byte 	1     ; *** Load Float 8.280685 ***
>b935	8d af 7d 84				.dword 	$847daf8d
>b939	84 00					.byte 	$84,$0
>b93b	01					.byte 	1     ; *** Load Float -14.0 ***
>b93c	00 00 00 e0				.dword 	$e0000000
>b940	84 80					.byte 	$84,$80
>b942	2d					.byte 	$2d   ; *** Command - ***
>b943	01					.byte 	1     ; *** Load Float 22.280685 ***
>b944	c6 d7 3e b2				.dword 	$b23ed7c6
>b948	85 00					.byte 	$85,$0
>b94a	3d					.byte 	$3d   ; *** Command = ***
>b94b	01					.byte 	1     ; *** Load Float -1.0680407285690308e-08 ***
>b94c	91 ed 7c b7				.dword 	$b77ced91
>b950	66 80					.byte 	$66,$80
>b952	01					.byte 	1     ; *** Load Float -17.0 ***
>b953	00 00 00 88				.dword 	$88000000
>b957	85 80					.byte 	$85,$80
>b959	2f					.byte 	$2f   ; *** Command / ***
>b95a	01					.byte 	1     ; *** Load Float 6.282592520994298e-10 ***
>b95b	88 d0 b1 ac				.dword 	$acb1d088
>b95f	62 00					.byte 	$62,$0
>b961	3d					.byte 	$3d   ; *** Command = ***
>b962	01					.byte 	1     ; *** Load Float -866122147236732.1 ***
>b963	ba f1 ee c4				.dword 	$c4eef1ba
>b967	b2 80					.byte 	$b2,$80
>b969	01					.byte 	1     ; *** Load Float -115.13 ***
>b96a	5c 8f 42 e6				.dword 	$e6428f5c
>b96e	87 80					.byte 	$87,$80
>b970	2d					.byte 	$2d   ; *** Command - ***
>b971	01					.byte 	1     ; *** Load Float -866122147236617.0 ***
>b972	ba f1 ee c4				.dword 	$c4eef1ba
>b976	b2 80					.byte 	$b2,$80
>b978	3d					.byte 	$3d   ; *** Command = ***
>b979	01					.byte 	1     ; *** Load Float -729.82 ***
>b97a	e1 7a 74 b6				.dword 	$b6747ae1
>b97e	8a 80					.byte 	$8a,$80
>b980	01					.byte 	1     ; *** Load Float -8.0 ***
>b981	00 00 00 80				.dword 	$80000000
>b985	84 80					.byte 	$84,$80
>b987	2b					.byte 	$2b   ; *** Command + ***
>b988	01					.byte 	1     ; *** Load Float -737.82 ***
>b989	e1 7a 74 b8				.dword 	$b8747ae1
>b98d	8a 80					.byte 	$8a,$80
>b98f	3d					.byte 	$3d   ; *** Command = ***
>b990	01					.byte 	1     ; *** Load Float 4.832486411032732e-15 ***
>b991	ed d1 1b ae				.dword 	$ae1bd1ed
>b995	51 00					.byte 	$51,$0
>b997	01					.byte 	1     ; *** Load Float 1526995.0914560002 ***
>b998	bb 98 66 ba				.dword 	$ba6698bb
>b99c	95 00					.byte 	$95,$0
>b99e	2a					.byte 	$2a   ; *** Command * ***
>b99f	01					.byte 	1     ; *** Load Float 7.379183029174805e-09 ***
>b9a0	f8 fa 8b fd				.dword 	$fd8bfaf8
>b9a4	65 00					.byte 	$65,$0
>b9a6	3d					.byte 	$3d   ; *** Command = ***
>b9a7	01					.byte 	1     ; *** Load Float 3.331102504944283e-15 ***
>b9a8	d2 fe 07 f0				.dword 	$f007fed2
>b9ac	50 00					.byte 	$50,$0
>b9ae	01					.byte 	1     ; *** Load Float 1.983474 ***
>b9af	dd 79 e2 fd				.dword 	$fde279dd
>b9b3	81 00					.byte 	$81,$0
>b9b5	2d					.byte 	$2d   ; *** Command - ***
>b9b6	01					.byte 	1     ; *** Load Float -1.9834739999999966 ***
>b9b7	dd 79 e2 fd				.dword 	$fde279dd
>b9bb	81 80					.byte 	$81,$80
>b9bd	3d					.byte 	$3d   ; *** Command = ***
>b9be	01					.byte 	1     ; *** Load Float 1.2597115710377694e-10 ***
>b9bf	7f ba 81 8a				.dword 	$8a81ba7f
>b9c3	60 00					.byte 	$60,$0
>b9c5	01					.byte 	1     ; *** Load Float 3.353296 ***
>b9c6	d3 66 9c d6				.dword 	$d69c66d3
>b9ca	82 00					.byte 	$82,$0
>b9cc	2b					.byte 	$2b   ; *** Command + ***
>b9cd	01					.byte 	1     ; *** Load Float 3.353296000125971 ***
>b9ce	d3 66 9c d6				.dword 	$d69c66d3
>b9d2	82 00					.byte 	$82,$0
>b9d4	3d					.byte 	$3d   ; *** Command = ***
>b9d5	01					.byte 	1     ; *** Load Float -731.07 ***
>b9d6	e1 7a c4 b6				.dword 	$b6c47ae1
>b9da	8a 80					.byte 	$8a,$80
>b9dc	01					.byte 	1     ; *** Load Float -866.6 ***
>b9dd	66 66 a6 d8				.dword 	$d8a66666
>b9e1	8a 80					.byte 	$8a,$80
>b9e3	2b					.byte 	$2b   ; *** Command + ***
>b9e4	01					.byte 	1     ; *** Load Float -1597.67 ***
>b9e5	a3 70 b5 c7				.dword 	$c7b570a3
>b9e9	8b 80					.byte 	$8b,$80
>b9eb	3d					.byte 	$3d   ; *** Command = ***
>b9ec	01					.byte 	1     ; *** Load Float 2.872942 ***
>b9ed	1f 48 de b7				.dword 	$b7de481f
>b9f1	82 00					.byte 	$82,$0
>b9f3	01					.byte 	1     ; *** Load Float -879.43 ***
>b9f4	1e 85 db db				.dword 	$dbdb851e
>b9f8	8a 80					.byte 	$8a,$80
>b9fa	2d					.byte 	$2d   ; *** Command - ***
>b9fb	01					.byte 	1     ; *** Load Float 882.3029419999999 ***
>b9fc	66 63 93 dc				.dword 	$dc936366
>ba00	8a 00					.byte 	$8a,$0
>ba02	3d					.byte 	$3d   ; *** Command = ***
>ba03	01					.byte 	1     ; *** Load Float 9.0 ***
>ba04	00 00 00 90				.dword 	$90000000
>ba08	84 00					.byte 	$84,$0
>ba0a	01					.byte 	1     ; *** Load Float -305766237.995008 ***
>ba0b	ef fa cc 91				.dword 	$91ccfaef
>ba0f	9d 80					.byte 	$9d,$80
>ba11	2a					.byte 	$2a   ; *** Command * ***
>ba12	01					.byte 	1     ; *** Load Float -2751896141.955072 ***
>ba13	4d 9a 06 a4				.dword 	$a4069a4d
>ba17	a0 80					.byte 	$a0,$80
>ba19	3d					.byte 	$3d   ; *** Command = ***
>ba1a	01					.byte 	1     ; *** Load Float -415.1 ***
>ba1b	cc cc 8c cf				.dword 	$cf8ccccc
>ba1f	89 80					.byte 	$89,$80
>ba21	01					.byte 	1     ; *** Load Float 2.044261 ***
>ba22	16 2c d5 82				.dword 	$82d52c16
>ba26	82 00					.byte 	$82,$0
>ba28	7e					.byte 	$7e   ; *** Command ~ ***
>ba29	01					.byte 	1     ; *** Load Float -1 ***
>ba2a	00 00 00 80				.dword 	$80000000
>ba2e	81 80					.byte 	$81,$80
>ba30	3d					.byte 	$3d   ; *** Command = ***
>ba31	01					.byte 	1     ; *** Load Float 0.0 ***
>ba32	00 00 00 00				.dword 	$0
>ba36	80 40					.byte 	$80,$40
>ba38	01					.byte 	1     ; *** Load Float -2.7693924494087698e-11 ***
>ba39	8c 2c 99 f3				.dword 	$f3992c8c
>ba3d	5d 80					.byte 	$5d,$80
>ba3f	2a					.byte 	$2a   ; *** Command * ***
>ba40	01					.byte 	1     ; *** Load Float -0.0 ***
>ba41	00 00 00 00				.dword 	$0
>ba45	80 40					.byte 	$80,$40
>ba47	3d					.byte 	$3d   ; *** Command = ***
>ba48	01					.byte 	1     ; *** Load Float 0.0 ***
>ba49	00 00 00 00				.dword 	$0
>ba4d	80 40					.byte 	$80,$40
>ba4f	01					.byte 	1     ; *** Load Float 457.72 ***
>ba50	f5 28 dc e4				.dword 	$e4dc28f5
>ba54	89 00					.byte 	$89,$0
>ba56	2f					.byte 	$2f   ; *** Command / ***
>ba57	01					.byte 	1     ; *** Load Float 0.0 ***
>ba58	00 00 00 00				.dword 	$0
>ba5c	80 40					.byte 	$80,$40
>ba5e	3d					.byte 	$3d   ; *** Command = ***
>ba5f	01					.byte 	1     ; *** Load Float 3.0 ***
>ba60	00 00 00 c0				.dword 	$c0000000
>ba64	82 00					.byte 	$82,$0
>ba66	01					.byte 	1     ; *** Load Float -444.8 ***
>ba67	66 66 66 de				.dword 	$de666666
>ba6b	89 80					.byte 	$89,$80
>ba6d	2d					.byte 	$2d   ; *** Command - ***
>ba6e	01					.byte 	1     ; *** Load Float 447.8 ***
>ba6f	66 66 e6 df				.dword 	$dfe66666
>ba73	89 00					.byte 	$89,$0
>ba75	3d					.byte 	$3d   ; *** Command = ***
>ba76	01					.byte 	1     ; *** Load Float 3.774774 ***
>ba77	af e5 95 f1				.dword 	$f195e5af
>ba7b	82 00					.byte 	$82,$0
>ba7d	01					.byte 	1     ; *** Load Float -4.523759707808495e-11 ***
>ba7e	9f 01 f5 c6				.dword 	$c6f5019f
>ba82	5e 80					.byte 	$5e,$80
>ba84	7e					.byte 	$7e   ; *** Command ~ ***
>ba85	01					.byte 	1     ; *** Load Float 1 ***
>ba86	00 00 00 80				.dword 	$80000000
>ba8a	81 00					.byte 	$81,$0
>ba8c	3d					.byte 	$3d   ; *** Command = ***
>ba8d	01					.byte 	1     ; *** Load Float 582.69 ***
>ba8e	f5 28 ac 91				.dword 	$91ac28f5
>ba92	8a 00					.byte 	$8a,$0
>ba94	01					.byte 	1     ; *** Load Float 6.54362 ***
>ba95	c5 55 65 d1				.dword 	$d16555c5
>ba99	83 00					.byte 	$83,$0
>ba9b	2a					.byte 	$2a   ; *** Command * ***
>ba9c	01					.byte 	1     ; *** Load Float 3812.9019378000003 ***
>ba9d	56 6e 4e ee				.dword 	$ee4e6e56
>baa1	8c 00					.byte 	$8c,$0
>baa3	3d					.byte 	$3d   ; *** Command = ***
>baa4	01					.byte 	1     ; *** Load Float -1.8981192260980608e-10 ***
>baa5	76 4e b3 d0				.dword 	$d0b34e76
>baa9	60 80					.byte 	$60,$80
>baab	01					.byte 	1     ; *** Load Float 1.5111843822523952e-11 ***
>baac	db d8 ec 84				.dword 	$84ecd8db
>bab0	5d 00					.byte 	$5d,$0
>bab2	2d					.byte 	$2d   ; *** Command - ***
>bab3	01					.byte 	1     ; *** Load Float -2.0492376643233002e-10 ***
>bab4	91 e9 50 e1				.dword 	$e150e991
>bab8	60 80					.byte 	$60,$80
>baba	3d					.byte 	$3d   ; *** Command = ***
>babb	01					.byte 	1     ; *** Load Float 107.43 ***
>babc	f5 28 dc d6				.dword 	$d6dc28f5
>bac0	87 00					.byte 	$87,$0
>bac2	01					.byte 	1     ; *** Load Float 4.406020045280457e-09 ***
>bac3	1d c3 63 97				.dword 	$9763c31d
>bac7	65 00					.byte 	$65,$0
>bac9	7e					.byte 	$7e   ; *** Command ~ ***
>baca	01					.byte 	1     ; *** Load Float 1 ***
>bacb	00 00 00 80				.dword 	$80000000
>bacf	81 00					.byte 	$81,$0
>bad1	3d					.byte 	$3d   ; *** Command = ***
>bad2	01					.byte 	1     ; *** Load Float 0.0 ***
>bad3	00 00 00 00				.dword 	$0
>bad7	80 40					.byte 	$80,$40
>bad9	01					.byte 	1     ; *** Load Float 0.628518 ***
>bada	3e 8e e6 a0				.dword 	$a0e68e3e
>bade	80 00					.byte 	$80,$0
>bae0	2a					.byte 	$2a   ; *** Command * ***
>bae1	01					.byte 	1     ; *** Load Float 0.0 ***
>bae2	00 00 00 00				.dword 	$0
>bae6	80 40					.byte 	$80,$40
>bae8	3d					.byte 	$3d   ; *** Command = ***
>bae9	01					.byte 	1     ; *** Load Float 172.05 ***
>baea	cc cc 0c ac				.dword 	$ac0ccccc
>baee	88 00					.byte 	$88,$0
>baf0	01					.byte 	1     ; *** Load Float -7.622337341308593e-06 ***
>baf1	13 61 c3 ff				.dword 	$ffc36113
>baf5	6f 80					.byte 	$6f,$80
>baf7	2f					.byte 	$2f   ; *** Command / ***
>baf8	01					.byte 	1     ; *** Load Float -22571816.53029052 ***
>baf9	43 94 35 ac				.dword 	$ac359443
>bafd	99 80					.byte 	$99,$80
>baff	3d					.byte 	$3d   ; *** Command = ***
>bb00	01					.byte 	1     ; *** Load Float 40591787866420.414 ***
>bb01	62 0c ac 93				.dword 	$93ac0c62
>bb05	ae 00					.byte 	$ae,$0
>bb07	01					.byte 	1     ; *** Load Float 112.81 ***
>bb08	51 b8 9e e1				.dword 	$e19eb851
>bb0c	87 00					.byte 	$87,$0
>bb0e	2d					.byte 	$2d   ; *** Command - ***
>bb0f	01					.byte 	1     ; *** Load Float 40591787866307.6 ***
>bb10	62 0c ac 93				.dword 	$93ac0c62
>bb14	ae 00					.byte 	$ae,$0
>bb16	3d					.byte 	$3d   ; *** Command = ***
>bb17	01					.byte 	1     ; *** Load Float -996.32 ***
>bb18	e1 7a 14 f9				.dword 	$f9147ae1
>bb1c	8a 80					.byte 	$8a,$80
>bb1e	01					.byte 	1     ; *** Load Float -7.306134700775146e-08 ***
>bb1f	79 e6 e5 9c				.dword 	$9ce5e679
>bb23	69 80					.byte 	$69,$80
>bb25	7e					.byte 	$7e   ; *** Command ~ ***
>bb26	01					.byte 	1     ; *** Load Float -1 ***
>bb27	00 00 00 80				.dword 	$80000000
>bb2b	81 80					.byte 	$81,$80
>bb2d	3d					.byte 	$3d   ; *** Command = ***
>bb2e	01					.byte 	1     ; *** Load Float -1.0453096166429532e-15 ***
>bb2f	32 1e a5 96				.dword 	$96a51e32
>bb33	4f 80					.byte 	$4f,$80
>bb35	01					.byte 	1     ; *** Load Float -6.687912446068368e-16 ***
>bb36	6e 15 c4 c0				.dword 	$c0c4156e
>bb3a	4e 80					.byte 	$4e,$80
>bb3c	2d					.byte 	$2d   ; *** Command - ***
>bb3d	01					.byte 	1     ; *** Load Float -3.765183720361164e-16 ***
>bb3e	ec 4d 0c d9				.dword 	$d90c4dec
>bb42	4d 80					.byte 	$4d,$80
>bb44	3d					.byte 	$3d   ; *** Command = ***
>bb45	01					.byte 	1     ; *** Load Float -0.90395 ***
>bb46	67 44 69 e7				.dword 	$e7694467
>bb4a	80 80					.byte 	$80,$80
>bb4c	01					.byte 	1     ; *** Load Float -6.0 ***
>bb4d	00 00 00 c0				.dword 	$c0000000
>bb51	83 80					.byte 	$83,$80
>bb53	2a					.byte 	$2a   ; *** Command * ***
>bb54	01					.byte 	1     ; *** Load Float 5.4237 ***
>bb55	4d f3 8e ad				.dword 	$ad8ef34d
>bb59	83 00					.byte 	$83,$0
>bb5b	3d					.byte 	$3d   ; *** Command = ***
>bb5c	01					.byte 	1     ; *** Load Float -2.4067325909982173e-16 ***
>bb5d	a8 1a bd 8a				.dword 	$8abd1aa8
>bb61	4d 80					.byte 	$4d,$80
>bb63	01					.byte 	1     ; *** Load Float -4187.308032 ***
>bb64	d9 76 da 82				.dword 	$82da76d9
>bb68	8d 80					.byte 	$8d,$80
>bb6a	2f					.byte 	$2f   ; *** Command / ***
>bb6b	01					.byte 	1     ; *** Load Float 5.747684604537394e-20 ***
>bb6c	21 9f b6 87				.dword 	$87b69f21
>bb70	41 00					.byte 	$41,$0
>bb72	3d					.byte 	$3d   ; *** Command = ***
>bb73	01					.byte 	1     ; *** Load Float -309.02 ***
>bb74	5c 8f 82 9a				.dword 	$9a828f5c
>bb78	89 80					.byte 	$89,$80
>bb7a	01					.byte 	1     ; *** Load Float 15.0 ***
>bb7b	00 00 00 f0				.dword 	$f0000000
>bb7f	84 00					.byte 	$84,$0
>bb81	2b					.byte 	$2b   ; *** Command + ***
>bb82	01					.byte 	1     ; *** Load Float -294.02 ***
>bb83	5c 8f 02 93				.dword 	$93028f5c
>bb87	89 80					.byte 	$89,$80
>bb89	3d					.byte 	$3d   ; *** Command = ***
>bb8a	01					.byte 	1     ; *** Load Float -5.08568405166443e-14 ***
>bb8b	f1 f1 09 e5				.dword 	$e509f1f1
>bb8f	54 80					.byte 	$54,$80
>bb91	01					.byte 	1     ; *** Load Float -260223478.530048 ***
>bb92	68 1f 2b f8				.dword 	$f82b1f68
>bb96	9c 80					.byte 	$9c,$80
>bb98	2f					.byte 	$2f   ; *** Command / ***
>bb99	01					.byte 	1     ; *** Load Float 1.9543524974735073e-22 ***
>bb9a	ba 47 44 ec				.dword 	$ec4447ba
>bb9e	38 00					.byte 	$38,$0
>bba0	3d					.byte 	$3d   ; *** Command = ***
>bba1	01					.byte 	1     ; *** Load Float 4.0 ***
>bba2	00 00 00 80				.dword 	$80000000
>bba6	83 00					.byte 	$83,$0
>bba8	01					.byte 	1     ; *** Load Float -15.0 ***
>bba9	00 00 00 f0				.dword 	$f0000000
>bbad	84 80					.byte 	$84,$80
>bbaf	2f					.byte 	$2f   ; *** Command / ***
>bbb0	01					.byte 	1     ; *** Load Float -0.26666666666666666 ***
>bbb1	88 88 88 88				.dword 	$88888888
>bbb5	7f 80					.byte 	$7f,$80
>bbb7	3d					.byte 	$3d   ; *** Command = ***
>bbb8	01					.byte 	1     ; *** Load Float 478.93 ***
>bbb9	3d 0a 77 ef				.dword 	$ef770a3d
>bbbd	89 00					.byte 	$89,$0
>bbbf	01					.byte 	1     ; *** Load Float -353.01 ***
>bbc0	ae 47 81 b0				.dword 	$b08147ae
>bbc4	89 80					.byte 	$89,$80
>bbc6	2f					.byte 	$2f   ; *** Command / ***
>bbc7	01					.byte 	1     ; *** Load Float -1.3567037760969944 ***
>bbc8	26 78 a8 ad				.dword 	$ada87826
>bbcc	81 80					.byte 	$81,$80
>bbce	3d					.byte 	$3d   ; *** Command = ***
>bbcf	01					.byte 	1     ; *** Load Float 473.6 ***
>bbd0	cc cc cc ec				.dword 	$eccccccc
>bbd4	89 00					.byte 	$89,$0
>bbd6	01					.byte 	1     ; *** Load Float -0.891604 ***
>bbd7	e4 28 40 e4				.dword 	$e44028e4
>bbdb	80 80					.byte 	$80,$80
>bbdd	2f					.byte 	$2f   ; *** Command / ***
>bbde	01					.byte 	1     ; *** Load Float -531.177518270443 ***
>bbdf	75 5c cb 84				.dword 	$84cb5c75
>bbe3	8a 80					.byte 	$8a,$80
>bbe5	3d					.byte 	$3d   ; *** Command = ***
>bbe6	01					.byte 	1     ; *** Load Float 5.907697 ***
>bbe7	94 da 0b bd				.dword 	$bd0bda94
>bbeb	83 00					.byte 	$83,$0
>bbed	01					.byte 	1     ; *** Load Float 117228.83072 ***
>bbee	55 6a f6 e4				.dword 	$e4f66a55
>bbf2	91 00					.byte 	$91,$0
>bbf4	2b					.byte 	$2b   ; *** Command + ***
>bbf5	01					.byte 	1     ; *** Load Float 117234.738417 ***
>bbf6	84 5e f9 e4				.dword 	$e4f95e84
>bbfa	91 00					.byte 	$91,$0
>bbfc	3d					.byte 	$3d   ; *** Command = ***
>bbfd	01					.byte 	1     ; *** Load Float 5.470432 ***
>bbfe	68 c7 0d af				.dword 	$af0dc768
>bc02	83 00					.byte 	$83,$0
>bc04	01					.byte 	1     ; *** Load Float -955.08 ***
>bc05	b8 1e c5 ee				.dword 	$eec51eb8
>bc09	8a 80					.byte 	$8a,$80
>bc0b	2b					.byte 	$2b   ; *** Command + ***
>bc0c	01					.byte 	1     ; *** Load Float -949.6095680000001 ***
>bc0d	29 03 67 ed				.dword 	$ed670329
>bc11	8a 80					.byte 	$8a,$80
>bc13	3d					.byte 	$3d   ; *** Command = ***
>bc14	01					.byte 	1     ; *** Load Float 1.761777 ***
>bc15	a2 e8 81 e1				.dword 	$e181e8a2
>bc19	81 00					.byte 	$81,$0
>bc1b	01					.byte 	1     ; *** Load Float 2.435709 ***
>bc1c	00 a8 e2 9b				.dword 	$9be2a800
>bc20	82 00					.byte 	$82,$0
>bc22	7e					.byte 	$7e   ; *** Command ~ ***
>bc23	01					.byte 	1     ; *** Load Float -1 ***
>bc24	00 00 00 80				.dword 	$80000000
>bc28	81 80					.byte 	$81,$80
>bc2a	3d					.byte 	$3d   ; *** Command = ***
>bc2b	01					.byte 	1     ; *** Load Float 218111221113.55292 ***
>bc2c	75 c4 21 cb				.dword 	$cb21c475
>bc30	a6 00					.byte 	$a6,$0
>bc32	01					.byte 	1     ; *** Load Float 18.0 ***
>bc33	00 00 00 90				.dword 	$90000000
>bc37	85 00					.byte 	$85,$0
>bc39	2a					.byte 	$2a   ; *** Command * ***
>bc3a	01					.byte 	1     ; *** Load Float 3926001980043.9526 ***
>bc3b	04 fd 85 e4				.dword 	$e485fd04
>bc3f	aa 00					.byte 	$aa,$0
>bc41	3d					.byte 	$3d   ; *** Command = ***
>bc42	01					.byte 	1     ; *** Load Float 6.085795 ***
>bc43	27 d5 be c2				.dword 	$c2bed527
>bc47	83 00					.byte 	$83,$0
>bc49	01					.byte 	1     ; *** Load Float 6.0 ***
>bc4a	00 00 00 c0				.dword 	$c0000000
>bc4e	83 00					.byte 	$83,$0
>bc50	2d					.byte 	$2d   ; *** Command - ***
>bc51	01					.byte 	1     ; *** Load Float 0.08579500000000007 ***
>bc52	f9 49 b5 af				.dword 	$afb549f9
>bc56	7d 00					.byte 	$7d,$0
>bc58	3d					.byte 	$3d   ; *** Command = ***
>bc59	01					.byte 	1     ; *** Load Float 1.3967233826406299e-11 ***
>bc5a	3d d4 b6 f5				.dword 	$f5b6d43d
>bc5e	5c 00					.byte 	$5c,$0
>bc60	01					.byte 	1     ; *** Load Float -13.0 ***
>bc61	00 00 00 d0				.dword 	$d0000000
>bc65	84 80					.byte 	$84,$80
>bc67	2f					.byte 	$2f   ; *** Command / ***
>bc68	01					.byte 	1     ; *** Load Float -1.0744026020312537e-12 ***
>bc69	ea 6e 35 97				.dword 	$97356eea
>bc6d	59 80					.byte 	$59,$80
>bc6f	3d					.byte 	$3d   ; *** Command = ***
>bc70	01					.byte 	1     ; *** Load Float 725019.000832 ***
>bc71	03 b0 01 b1				.dword 	$b101b003
>bc75	94 00					.byte 	$94,$0
>bc77	01					.byte 	1     ; *** Load Float 1.369667 ***
>bc78	8d 3f 51 af				.dword 	$af513f8d
>bc7c	81 00					.byte 	$81,$0
>bc7e	2f					.byte 	$2f   ; *** Command / ***
>bc7f	01					.byte 	1     ; *** Load Float 529339.6138127005 ***
>bc80	d2 b9 3b 81				.dword 	$813bb9d2
>bc84	94 00					.byte 	$94,$0
>bc86	3d					.byte 	$3d   ; *** Command = ***
>bc87	01					.byte 	1     ; *** Load Float 206.94 ***
>bc88	d7 a3 f0 ce				.dword 	$cef0a3d7
>bc8c	88 00					.byte 	$88,$0
>bc8e	01					.byte 	1     ; *** Load Float 8.163735 ***
>bc8f	97 a8 9e 82				.dword 	$829ea897
>bc93	84 00					.byte 	$84,$0
>bc95	7e					.byte 	$7e   ; *** Command ~ ***
>bc96	01					.byte 	1     ; *** Load Float 1 ***
>bc97	00 00 00 80				.dword 	$80000000
>bc9b	81 00					.byte 	$81,$0
>bc9d	3d					.byte 	$3d   ; *** Command = ***
>bc9e	01					.byte 	1     ; *** Load Float 2126772147467.5835 ***
>bc9f	ca bf 96 f7				.dword 	$f796bfca
>bca3	a9 00					.byte 	$a9,$0
>bca5	01					.byte 	1     ; *** Load Float 3.080447 ***
>bca6	2c 0b 26 c5				.dword 	$c5260b2c
>bcaa	82 00					.byte 	$82,$0
>bcac	2d					.byte 	$2d   ; *** Command - ***
>bcad	01					.byte 	1     ; *** Load Float 2126772147464.503 ***
>bcae	ca bf 96 f7				.dword 	$f796bfca
>bcb2	a9 00					.byte 	$a9,$0
>bcb4	3d					.byte 	$3d   ; *** Command = ***
>bcb5	01					.byte 	1     ; *** Load Float -462.16 ***
>bcb6	e1 7a 14 e7				.dword 	$e7147ae1
>bcba	89 80					.byte 	$89,$80
>bcbc	01					.byte 	1     ; *** Load Float 664.76 ***
>bcbd	d7 a3 30 a6				.dword 	$a630a3d7
>bcc1	8a 00					.byte 	$8a,$0
>bcc3	2a					.byte 	$2a   ; *** Command * ***
>bcc4	01					.byte 	1     ; *** Load Float -307225.4816 ***
>bcc5	69 2f 03 96				.dword 	$96032f69
>bcc9	93 80					.byte 	$93,$80
>bccb	3d					.byte 	$3d   ; *** Command = ***
>bccc	01					.byte 	1     ; *** Load Float 0.0 ***
>bccd	00 00 00 00				.dword 	$0
>bcd1	80 40					.byte 	$80,$40
>bcd3	01					.byte 	1     ; *** Load Float -4265276187.0827518 ***
>bcd4	1b f3 3a fe				.dword 	$fe3af31b
>bcd8	a0 80					.byte 	$a0,$80
>bcda	2d					.byte 	$2d   ; *** Command - ***
>bcdb	01					.byte 	1     ; *** Load Float 4265276187.0827518 ***
>bcdc	1b f3 3a fe				.dword 	$fe3af31b
>bce0	a0 00					.byte 	$a0,$0
>bce2	3d					.byte 	$3d   ; *** Command = ***
>bce3	01					.byte 	1     ; *** Load Float 3.7866897583007814e-06 ***
>bce4	ae d5 1e fe				.dword 	$fe1ed5ae
>bce8	6e 00					.byte 	$6e,$0
>bcea	01					.byte 	1     ; *** Load Float -327697346030.73126 ***
>bceb	5b 91 98 98				.dword 	$9898915b
>bcef	a7 80					.byte 	$a7,$80
>bcf1	2d					.byte 	$2d   ; *** Command - ***
>bcf2	01					.byte 	1     ; *** Load Float 327697346030.73126 ***
>bcf3	5b 91 98 98				.dword 	$9898915b
>bcf7	a7 00					.byte 	$a7,$0
>bcf9	3d					.byte 	$3d   ; *** Command = ***
>bcfa	01					.byte 	1     ; *** Load Float -2.0 ***
>bcfb	00 00 00 80				.dword 	$80000000
>bcff	82 80					.byte 	$82,$80
>bd01	01					.byte 	1     ; *** Load Float -954.3 ***
>bd02	33 33 93 ee				.dword 	$ee933333
>bd06	8a 80					.byte 	$8a,$80
>bd08	7e					.byte 	$7e   ; *** Command ~ ***
>bd09	01					.byte 	1     ; *** Load Float 1 ***
>bd0a	00 00 00 80				.dword 	$80000000
>bd0e	81 00					.byte 	$81,$0
>bd10	3d					.byte 	$3d   ; *** Command = ***
>bd11	01					.byte 	1     ; *** Load Float 138.988544 ***
>bd12	38 11 fd 8a				.dword 	$8afd1138
>bd16	88 00					.byte 	$88,$0
>bd18	01					.byte 	1     ; *** Load Float 135007520946.12685 ***
>bd19	45 9a 78 fb				.dword 	$fb789a45
>bd1d	a5 00					.byte 	$a5,$0
>bd1f	2a					.byte 	$2a   ; *** Command * ***
>bd20	01					.byte 	1     ; *** Load Float 18764498765351.67 ***
>bd21	44 9a 87 88				.dword 	$88879a44
>bd25	ad 00					.byte 	$ad,$0
>bd27	3d					.byte 	$3d   ; *** Command = ***
>bd28	01					.byte 	1     ; *** Load Float -14.0 ***
>bd29	00 00 00 e0				.dword 	$e0000000
>bd2d	84 80					.byte 	$84,$80
>bd2f	01					.byte 	1     ; *** Load Float -12.0 ***
>bd30	00 00 00 c0				.dword 	$c0000000
>bd34	84 80					.byte 	$84,$80
>bd36	2d					.byte 	$2d   ; *** Command - ***
>bd37	01					.byte 	1     ; *** Load Float -2.0 ***
>bd38	00 00 00 80				.dword 	$80000000
>bd3c	82 80					.byte 	$82,$80
>bd3e	3d					.byte 	$3d   ; *** Command = ***
>bd3f	01					.byte 	1     ; *** Load Float 960.04 ***
>bd40	5c 8f 02 f0				.dword 	$f0028f5c
>bd44	8a 00					.byte 	$8a,$0
>bd46	01					.byte 	1     ; *** Load Float -9.571686387062073e-10 ***
>bd47	a6 60 8d 83				.dword 	$838d60a6
>bd4b	63 80					.byte 	$63,$80
>bd4d	2f					.byte 	$2f   ; *** Command / ***
>bd4e	01					.byte 	1     ; *** Load Float -1002999848906.1174 ***
>bd4f	1f 73 87 e9				.dword 	$e987731f
>bd53	a8 80					.byte 	$a8,$80
>bd55	3d					.byte 	$3d   ; *** Command = ***
>bd56	01					.byte 	1     ; *** Load Float -544.48 ***
>bd57	51 b8 1e 88				.dword 	$881eb851
>bd5b	8a 80					.byte 	$8a,$80
>bd5d	01					.byte 	1     ; *** Load Float -0.600546 ***
>bd5e	f5 61 bd 99				.dword 	$99bd61f5
>bd62	80 80					.byte 	$80,$80
>bd64	2f					.byte 	$2f   ; *** Command / ***
>bd65	01					.byte 	1     ; *** Load Float 906.6416227899279 ***
>bd66	59 10 a9 e2				.dword 	$e2a91059
>bd6a	8a 00					.byte 	$8a,$0
>bd6c	3d					.byte 	$3d   ; *** Command = ***
>bd6d	01					.byte 	1     ; *** Load Float 8.413521 ***
>bd6e	32 c8 9d 86				.dword 	$869dc832
>bd72	84 00					.byte 	$84,$0
>bd74	01					.byte 	1     ; *** Load Float -82.8 ***
>bd75	99 99 99 a5				.dword 	$a5999999
>bd79	87 80					.byte 	$87,$80
>bd7b	7e					.byte 	$7e   ; *** Command ~ ***
>bd7c	01					.byte 	1     ; *** Load Float 1 ***
>bd7d	00 00 00 80				.dword 	$80000000
>bd81	81 00					.byte 	$81,$0
>bd83	3d					.byte 	$3d   ; *** Command = ***
>bd84	01					.byte 	1     ; *** Load Float -246.14 ***
>bd85	0a d7 23 f6				.dword 	$f623d70a
>bd89	88 80					.byte 	$88,$80
>bd8b	01					.byte 	1     ; *** Load Float 7.322944 ***
>bd8c	a7 8e 55 ea				.dword 	$ea558ea7
>bd90	83 00					.byte 	$83,$0
>bd92	2a					.byte 	$2a   ; *** Command * ***
>bd93	01					.byte 	1     ; *** Load Float -1802.4694361599998 ***
>bd94	9e 05 4f e1				.dword 	$e14f059e
>bd98	8b 80					.byte 	$8b,$80
>bd9a	3d					.byte 	$3d   ; *** Command = ***
>bd9b	01					.byte 	1     ; *** Load Float -0.343848 ***
>bd9c	55 d8 0c b0				.dword 	$b00cd855
>bda0	7f 80					.byte 	$7f,$80
>bda2	01					.byte 	1     ; *** Load Float 7.803189 ***
>bda3	6a b9 b3 f9				.dword 	$f9b3b96a
>bda7	83 00					.byte 	$83,$0
>bda9	7e					.byte 	$7e   ; *** Command ~ ***
>bdaa	01					.byte 	1     ; *** Load Float -1 ***
>bdab	00 00 00 80				.dword 	$80000000
>bdaf	81 80					.byte 	$81,$80
>bdb1	3d					.byte 	$3d   ; *** Command = ***
>bdb2	01					.byte 	1     ; *** Load Float -0.394408 ***
>bdb3	6a d8 ef c9				.dword 	$c9efd86a
>bdb7	7f 80					.byte 	$7f,$80
>bdb9	01					.byte 	1     ; *** Load Float 159.99 ***
>bdba	a3 70 fd 9f				.dword 	$9ffd70a3
>bdbe	88 00					.byte 	$88,$0
>bdc0	2f					.byte 	$2f   ; *** Command / ***
>bdc1	01					.byte 	1     ; *** Load Float -0.002465204075254703 ***
>bdc2	e1 42 8f a1				.dword 	$a18f42e1
>bdc6	78 80					.byte 	$78,$80
>bdc8	3d					.byte 	$3d   ; *** Command = ***
>bdc9	01					.byte 	1     ; *** Load Float 1.7201781272888185e-08 ***
>bdca	f7 1d c3 93				.dword 	$93c31df7
>bdce	67 00					.byte 	$67,$0
>bdd0	01					.byte 	1     ; *** Load Float -0.982143 ***
>bdd1	40 b9 6d fb				.dword 	$fb6db940
>bdd5	80 80					.byte 	$80,$80
>bdd7	2a					.byte 	$2a   ; *** Command * ***
>bdd8	01					.byte 	1     ; *** Load Float -1.689460906469822e-08 ***
>bdd9	62 a3 1f 91				.dword 	$911fa362
>bddd	67 80					.byte 	$67,$80
>bddf	3d					.byte 	$3d   ; *** Command = ***
>bde0	01					.byte 	1     ; *** Load Float 708.55 ***
>bde1	33 33 23 b1				.dword 	$b1233333
>bde5	8a 00					.byte 	$8a,$0
>bde7	01					.byte 	1     ; *** Load Float 6.500521 ***
>bde8	9d 44 04 d0				.dword 	$d004449d
>bdec	83 00					.byte 	$83,$0
>bdee	7e					.byte 	$7e   ; *** Command ~ ***
>bdef	01					.byte 	1     ; *** Load Float 1 ***
>bdf0	00 00 00 80				.dword 	$80000000
>bdf4	81 00					.byte 	$81,$0
>bdf6	3d					.byte 	$3d   ; *** Command = ***
>bdf7	01					.byte 	1     ; *** Load Float -678.71 ***
>bdf8	a3 70 ad a9				.dword 	$a9ad70a3
>bdfc	8a 80					.byte 	$8a,$80
>bdfe	01					.byte 	1     ; *** Load Float -678.71 ***
>bdff	a3 70 ad a9				.dword 	$a9ad70a3
>be03	8a 80					.byte 	$8a,$80
>be05	7e					.byte 	$7e   ; *** Command ~ ***
>be06	01					.byte 	1     ; *** Load Float 0 ***
>be07	00 00 00 00				.dword 	$0
>be0b	80 40					.byte 	$80,$40
>be0d	3d					.byte 	$3d   ; *** Command = ***
>be0e	01					.byte 	1     ; *** Load Float -20.0 ***
>be0f	00 00 00 a0				.dword 	$a0000000
>be13	85 80					.byte 	$85,$80
>be15	01					.byte 	1     ; *** Load Float -342.5 ***
>be16	00 00 40 ab				.dword 	$ab400000
>be1a	89 80					.byte 	$89,$80
>be1c	2f					.byte 	$2f   ; *** Command / ***
>be1d	01					.byte 	1     ; *** Load Float 0.058394160583941604 ***
>be1e	1f b7 2e ef				.dword 	$ef2eb71f
>be22	7c 00					.byte 	$7c,$0
>be24	3d					.byte 	$3d   ; *** Command = ***
>be25	01					.byte 	1     ; *** Load Float 0.0 ***
>be26	00 00 00 00				.dword 	$0
>be2a	80 40					.byte 	$80,$40
>be2c	01					.byte 	1     ; *** Load Float -240.66 ***
>be2d	c2 f5 a8 f0				.dword 	$f0a8f5c2
>be31	88 80					.byte 	$88,$80
>be33	2b					.byte 	$2b   ; *** Command + ***
>be34	01					.byte 	1     ; *** Load Float -240.66 ***
>be35	c2 f5 a8 f0				.dword 	$f0a8f5c2
>be39	88 80					.byte 	$88,$80
>be3b	3d					.byte 	$3d   ; *** Command = ***
>be3c	01					.byte 	1     ; *** Load Float -13196.312576 ***
>be3d	13 40 31 ce				.dword 	$ce314013
>be41	8e 80					.byte 	$8e,$80
>be43	01					.byte 	1     ; *** Load Float -16.0 ***
>be44	00 00 00 80				.dword 	$80000000
>be48	85 80					.byte 	$85,$80
>be4a	7e					.byte 	$7e   ; *** Command ~ ***
>be4b	01					.byte 	1     ; *** Load Float -1 ***
>be4c	00 00 00 80				.dword 	$80000000
>be50	81 80					.byte 	$81,$80
>be52	3d					.byte 	$3d   ; *** Command = ***
>be53	01					.byte 	1     ; *** Load Float 125.95 ***
>be54	66 66 e6 fb				.dword 	$fbe66666
>be58	87 00					.byte 	$87,$0
>be5a	01					.byte 	1     ; *** Load Float -734.54 ***
>be5b	5c 8f a2 b7				.dword 	$b7a28f5c
>be5f	8a 80					.byte 	$8a,$80
>be61	2a					.byte 	$2a   ; *** Command * ***
>be62	01					.byte 	1     ; *** Load Float -92515.313 ***
>be63	10 a8 b1 b4				.dword 	$b4b1a810
>be67	91 80					.byte 	$91,$80
>be69	3d					.byte 	$3d   ; *** Command = ***
>be6a	01					.byte 	1     ; *** Load Float -44443561816473.2 ***
>be6b	db 4a af a1				.dword 	$a1af4adb
>be6f	ae 80					.byte 	$ae,$80
>be71	01					.byte 	1     ; *** Load Float 2.0 ***
>be72	00 00 00 80				.dword 	$80000000
>be76	82 00					.byte 	$82,$0
>be78	2f					.byte 	$2f   ; *** Command / ***
>be79	01					.byte 	1     ; *** Load Float -22221780908236.6 ***
>be7a	db 4a af a1				.dword 	$a1af4adb
>be7e	ad 80					.byte 	$ad,$80
>be80	3d					.byte 	$3d   ; *** Command = ***
>be81	01					.byte 	1     ; *** Load Float 669.62 ***
>be82	14 ae 67 a7				.dword 	$a767ae14
>be86	8a 00					.byte 	$8a,$0
>be88	01					.byte 	1     ; *** Load Float 955.6 ***
>be89	66 66 e6 ee				.dword 	$eee66666
>be8d	8a 00					.byte 	$8a,$0
>be8f	7e					.byte 	$7e   ; *** Command ~ ***
>be90	01					.byte 	1     ; *** Load Float -1 ***
>be91	00 00 00 80				.dword 	$80000000
>be95	81 80					.byte 	$81,$80
>be97	3d					.byte 	$3d   ; *** Command = ***
>be98	01					.byte 	1     ; *** Load Float -935.8 ***
>be99	33 33 f3 e9				.dword 	$e9f33333
>be9d	8a 80					.byte 	$8a,$80
>be9f	01					.byte 	1     ; *** Load Float 2.8571812435984614e-12 ***
>bea0	cb 66 0e c9				.dword 	$c90e66cb
>bea4	5a 00					.byte 	$5a,$0
>bea6	2b					.byte 	$2b   ; *** Command + ***
>bea7	01					.byte 	1     ; *** Load Float -935.7999999999971 ***
>bea8	33 33 f3 e9				.dword 	$e9f33333
>beac	8a 80					.byte 	$8a,$80
>beae	3d					.byte 	$3d   ; *** Command = ***
>beaf	01					.byte 	1     ; *** Load Float 4.0 ***
>beb0	00 00 00 80				.dword 	$80000000
>beb4	83 00					.byte 	$83,$0
>beb6	01					.byte 	1     ; *** Load Float -3471.327232 ***
>beb7	57 3c f5 d8				.dword 	$d8f53c57
>bebb	8c 80					.byte 	$8c,$80
>bebd	2b					.byte 	$2b   ; *** Command + ***
>bebe	01					.byte 	1     ; *** Load Float -3467.327232 ***
>bebf	57 3c b5 d8				.dword 	$d8b53c57
>bec3	8c 80					.byte 	$8c,$80
>bec5	3d					.byte 	$3d   ; *** Command = ***
>bec6	01					.byte 	1     ; *** Load Float 919.72 ***
>bec7	7a 14 ee e5				.dword 	$e5ee147a
>becb	8a 00					.byte 	$8a,$0
>becd	01					.byte 	1     ; *** Load Float -15.0 ***
>bece	00 00 00 f0				.dword 	$f0000000
>bed2	84 80					.byte 	$84,$80
>bed4	2b					.byte 	$2b   ; *** Command + ***
>bed5	01					.byte 	1     ; *** Load Float 904.72 ***
>bed6	7a 14 2e e2				.dword 	$e22e147a
>beda	8a 00					.byte 	$8a,$0
>bedc	3d					.byte 	$3d   ; *** Command = ***
>bedd	01					.byte 	1     ; *** Load Float 5.465937 ***
>bede	b6 f4 e8 ae				.dword 	$aee8f4b6
>bee2	83 00					.byte 	$83,$0
>bee4	01					.byte 	1     ; *** Load Float -475.98 ***
>bee5	a3 70 fd ed				.dword 	$edfd70a3
>bee9	89 80					.byte 	$89,$80
>beeb	2b					.byte 	$2b   ; *** Command + ***
>beec	01					.byte 	1     ; *** Load Float -470.514063 ***
>beed	d0 cc 41 eb				.dword 	$eb41ccd0
>bef1	89 80					.byte 	$89,$80
>bef3	3d					.byte 	$3d   ; *** Command = ***
>bef4	01					.byte 	1     ; *** Load Float 3.482754 ***
>bef5	08 71 e5 de				.dword 	$dee57108
>bef9	82 00					.byte 	$82,$0
>befb	01					.byte 	1     ; *** Load Float -7.0 ***
>befc	00 00 00 e0				.dword 	$e0000000
>bf00	83 80					.byte 	$83,$80
>bf02	2a					.byte 	$2a   ; *** Command * ***
>bf03	01					.byte 	1     ; *** Load Float -24.379278 ***
>bf04	e7 c2 08 c3				.dword 	$c308c2e7
>bf08	85 80					.byte 	$85,$80
>bf0a	3d					.byte 	$3d   ; *** Command = ***
>bf0b	01					.byte 	1     ; *** Load Float -9.0 ***
>bf0c	00 00 00 90				.dword 	$90000000
>bf10	84 80					.byte 	$84,$80
>bf12	01					.byte 	1     ; *** Load Float 9.372609 ***
>bf13	da 34 f6 95				.dword 	$95f634da
>bf17	84 00					.byte 	$84,$0
>bf19	2d					.byte 	$2d   ; *** Command - ***
>bf1a	01					.byte 	1     ; *** Load Float -18.372609 ***
>bf1b	6d 1a fb 92				.dword 	$92fb1a6d
>bf1f	85 80					.byte 	$85,$80
>bf21	3d					.byte 	$3d   ; *** Command = ***
>bf22	01					.byte 	1     ; *** Load Float 154.05 ***
>bf23	cc cc 0c 9a				.dword 	$9a0ccccc
>bf27	88 00					.byte 	$88,$0
>bf29	01					.byte 	1     ; *** Load Float -11.0 ***
>bf2a	00 00 00 b0				.dword 	$b0000000
>bf2e	84 80					.byte 	$84,$80
>bf30	7e					.byte 	$7e   ; *** Command ~ ***
>bf31	01					.byte 	1     ; *** Load Float 1 ***
>bf32	00 00 00 80				.dword 	$80000000
>bf36	81 00					.byte 	$81,$0
>bf38	3d					.byte 	$3d   ; *** Command = ***
>bf39	01					.byte 	1     ; *** Load Float 2.4850351110217162e-14 ***
>bf3a	25 02 d5 df				.dword 	$dfd50225
>bf3e	53 00					.byte 	$53,$0
>bf40	01					.byte 	1     ; *** Load Float 59522.74432 ***
>bf41	8b be 82 e8				.dword 	$e882be8b
>bf45	90 00					.byte 	$90,$0
>bf47	2a					.byte 	$2a   ; *** Command * ***
>bf48	01					.byte 	1     ; *** Load Float 1.4791610953956842e-09 ***
>bf49	b7 5a 4b cb				.dword 	$cb4b5ab7
>bf4d	63 00					.byte 	$63,$0
>bf4f	3d					.byte 	$3d   ; *** Command = ***
>bf50	01					.byte 	1     ; *** Load Float 4.0 ***
>bf51	00 00 00 80				.dword 	$80000000
>bf55	83 00					.byte 	$83,$0
>bf57	01					.byte 	1     ; *** Load Float 3.006169572472572e-10 ***
>bf58	55 13 44 a5				.dword 	$a5441355
>bf5c	61 00					.byte 	$61,$0
>bf5e	2d					.byte 	$2d   ; *** Command - ***
>bf5f	01					.byte 	1     ; *** Load Float 3.999999999699383 ***
>bf60	ff ff ff ff				.dword 	$ffffffff
>bf64	82 00					.byte 	$82,$0
>bf66	3d					.byte 	$3d   ; *** Command = ***
>bf67	01					.byte 	1     ; *** Load Float 9.0 ***
>bf68	00 00 00 90				.dword 	$90000000
>bf6c	84 00					.byte 	$84,$0
>bf6e	01					.byte 	1     ; *** Load Float -12.0 ***
>bf6f	00 00 00 c0				.dword 	$c0000000
>bf73	84 80					.byte 	$84,$80
>bf75	2a					.byte 	$2a   ; *** Command * ***
>bf76	01					.byte 	1     ; *** Load Float -108.0 ***
>bf77	00 00 00 d8				.dword 	$d8000000
>bf7b	87 80					.byte 	$87,$80
>bf7d	3d					.byte 	$3d   ; *** Command = ***
>bf7e	01					.byte 	1     ; *** Load Float 1.615136 ***
>bf7f	c5 c6 bc ce				.dword 	$cebcc6c5
>bf83	81 00					.byte 	$81,$0
>bf85	01					.byte 	1     ; *** Load Float -29.68 ***
>bf86	d7 a3 70 ed				.dword 	$ed70a3d7
>bf8a	85 80					.byte 	$85,$80
>bf8c	2a					.byte 	$2a   ; *** Command * ***
>bf8d	01					.byte 	1     ; *** Load Float -47.937236479999996 ***
>bf8e	eb ba bf bf				.dword 	$bfbfbaeb
>bf92	86 80					.byte 	$86,$80
>bf94	3d					.byte 	$3d   ; *** Command = ***
>bf95	01					.byte 	1     ; *** Load Float 4.074216 ***
>bf96	3b fa 5f 82				.dword 	$825ffa3b
>bf9a	83 00					.byte 	$83,$0
>bf9c	01					.byte 	1     ; *** Load Float 31805340.123136 ***
>bf9d	0f ce a7 f2				.dword 	$f2a7ce0f
>bfa1	99 00					.byte 	$99,$0
>bfa3	7e					.byte 	$7e   ; *** Command ~ ***
>bfa4	01					.byte 	1     ; *** Load Float -1 ***
>bfa5	00 00 00 80				.dword 	$80000000
>bfa9	81 80					.byte 	$81,$80
>bfab	3d					.byte 	$3d   ; *** Command = ***
>bfac	01					.byte 	1     ; *** Load Float 0.0 ***
>bfad	00 00 00 00				.dword 	$0
>bfb1	80 40					.byte 	$80,$40
>bfb3	01					.byte 	1     ; *** Load Float 686.35 ***
>bfb4	66 66 96 ab				.dword 	$ab966666
>bfb8	8a 00					.byte 	$8a,$0
>bfba	2b					.byte 	$2b   ; *** Command + ***
>bfbb	01					.byte 	1     ; *** Load Float 686.35 ***
>bfbc	66 66 96 ab				.dword 	$ab966666
>bfc0	8a 00					.byte 	$8a,$0
>bfc2	3d					.byte 	$3d   ; *** Command = ***
>bfc3	01					.byte 	1     ; *** Load Float -9.0 ***
>bfc4	00 00 00 90				.dword 	$90000000
>bfc8	84 80					.byte 	$84,$80
>bfca	01					.byte 	1     ; *** Load Float -991.92 ***
>bfcb	47 e1 fa f7				.dword 	$f7fae147
>bfcf	8a 80					.byte 	$8a,$80
>bfd1	2f					.byte 	$2f   ; *** Command / ***
>bfd2	01					.byte 	1     ; *** Load Float 0.009073312363900314 ***
>bfd3	f7 3a a8 94				.dword 	$94a83af7
>bfd7	7a 00					.byte 	$7a,$0
>bfd9	3d					.byte 	$3d   ; *** Command = ***
>bfda	01					.byte 	1     ; *** Load Float 9.247816 ***
>bfdb	e8 0d f7 93				.dword 	$93f70de8
>bfdf	84 00					.byte 	$84,$0
>bfe1	01					.byte 	1     ; *** Load Float 905.72 ***
>bfe2	7a 14 6e e2				.dword 	$e26e147a
>bfe6	8a 00					.byte 	$8a,$0
>bfe8	2f					.byte 	$2f   ; *** Command / ***
>bfe9	01					.byte 	1     ; *** Load Float 0.010210457978183103 ***
>bfea	c5 c3 49 a7				.dword 	$a749c3c5
>bfee	7a 00					.byte 	$7a,$0
>bff0	3d					.byte 	$3d   ; *** Command = ***
>bff1	01					.byte 	1     ; *** Load Float -132.43 ***
>bff2	7a 14 6e 84				.dword 	$846e147a
>bff6	88 80					.byte 	$88,$80
>bff8	01					.byte 	1     ; *** Load Float -129.43 ***
>bff9	7a 14 6e 81				.dword 	$816e147a
>bffd	88 80					.byte 	$88,$80
>bfff	2a					.byte 	$2a   ; *** Command * ***
>c000	01					.byte 	1     ; *** Load Float 17140.414900000003 ***
>c001	6d d4 e8 85				.dword 	$85e8d46d
>c005	8f 00					.byte 	$8f,$0
>c007	3d					.byte 	$3d   ; *** Command = ***
>c008	01					.byte 	1     ; *** Load Float 989.35 ***
>c009	66 66 56 f7				.dword 	$f7566666
>c00d	8a 00					.byte 	$8a,$0
>c00f	01					.byte 	1     ; *** Load Float 994.37 ***
>c010	14 ae 97 f8				.dword 	$f897ae14
>c014	8a 00					.byte 	$8a,$0
>c016	2b					.byte 	$2b   ; *** Command + ***
>c017	01					.byte 	1     ; *** Load Float 1983.72 ***
>c018	3d 0a f7 f7				.dword 	$f7f70a3d
>c01c	8b 00					.byte 	$8b,$0
>c01e	3d					.byte 	$3d   ; *** Command = ***
>c01f	01					.byte 	1     ; *** Load Float 12.0 ***
>c020	00 00 00 c0				.dword 	$c0000000
>c024	84 00					.byte 	$84,$0
>c026	01					.byte 	1     ; *** Load Float 15.0 ***
>c027	00 00 00 f0				.dword 	$f0000000
>c02b	84 00					.byte 	$84,$0
>c02d	2a					.byte 	$2a   ; *** Command * ***
>c02e	01					.byte 	1     ; *** Load Float 180.0 ***
>c02f	00 00 00 b4				.dword 	$b4000000
>c033	88 00					.byte 	$88,$0
>c035	3d					.byte 	$3d   ; *** Command = ***
>c036	01					.byte 	1     ; *** Load Float 424.88 ***
>c037	d7 a3 70 d4				.dword 	$d470a3d7
>c03b	89 00					.byte 	$89,$0
>c03d	01					.byte 	1     ; *** Load Float 424.88 ***
>c03e	d7 a3 70 d4				.dword 	$d470a3d7
>c042	89 00					.byte 	$89,$0
>c044	2f					.byte 	$2f   ; *** Command / ***
>c045	01					.byte 	1     ; *** Load Float 1.0 ***
>c046	00 00 00 80				.dword 	$80000000
>c04a	81 00					.byte 	$81,$0
>c04c	3d					.byte 	$3d   ; *** Command = ***
>c04d	01					.byte 	1     ; *** Load Float 1.49447 ***
>c04e	ff ca 4a bf				.dword 	$bf4acaff
>c052	81 00					.byte 	$81,$0
>c054	01					.byte 	1     ; *** Load Float 202.63 ***
>c055	ae 47 a1 ca				.dword 	$caa147ae
>c059	88 00					.byte 	$88,$0
>c05b	7e					.byte 	$7e   ; *** Command ~ ***
>c05c	01					.byte 	1     ; *** Load Float -1 ***
>c05d	00 00 00 80				.dword 	$80000000
>c061	81 80					.byte 	$81,$80
>c063	3d					.byte 	$3d   ; *** Command = ***
>c064	01					.byte 	1     ; *** Load Float 721.46 ***
>c065	a3 70 5d b4				.dword 	$b45d70a3
>c069	8a 00					.byte 	$8a,$0
>c06b	01					.byte 	1     ; *** Load Float 918.63 ***
>c06c	eb 51 a8 e5				.dword 	$e5a851eb
>c070	8a 00					.byte 	$8a,$0
>c072	7e					.byte 	$7e   ; *** Command ~ ***
>c073	01					.byte 	1     ; *** Load Float -1 ***
>c074	00 00 00 80				.dword 	$80000000
>c078	81 80					.byte 	$81,$80
>c07a	3d					.byte 	$3d   ; *** Command = ***
>c07b	01					.byte 	1     ; *** Load Float -1.0464245860930531e-12 ***
>c07c	44 6b 45 93				.dword 	$93456b44
>c080	59 80					.byte 	$59,$80
>c082	01					.byte 	1     ; *** Load Float -19151.323136 ***
>c083	72 a5 9e 95				.dword 	$959ea572
>c087	8f 80					.byte 	$8f,$80
>c089	7e					.byte 	$7e   ; *** Command ~ ***
>c08a	01					.byte 	1     ; *** Load Float 1 ***
>c08b	00 00 00 80				.dword 	$80000000
>c08f	81 00					.byte 	$81,$0
>c091	3d					.byte 	$3d   ; *** Command = ***
>c092	01					.byte 	1     ; *** Load Float 13.0 ***
>c093	00 00 00 d0				.dword 	$d0000000
>c097	84 00					.byte 	$84,$0
>c099	01					.byte 	1     ; *** Load Float -2201011.355648 ***
>c09a	6c cd 56 86				.dword 	$8656cd6c
>c09e	96 80					.byte 	$96,$80
>c0a0	2d					.byte 	$2d   ; *** Command - ***
>c0a1	01					.byte 	1     ; *** Load Float 2201024.355648 ***
>c0a2	6c 01 57 86				.dword 	$8657016c
>c0a6	96 00					.byte 	$96,$0
>c0a8	3d					.byte 	$3d   ; *** Command = ***
>c0a9	01					.byte 	1     ; *** Load Float 0.276864 ***
>c0aa	42 1e c1 8d				.dword 	$8dc11e42
>c0ae	7f 00					.byte 	$7f,$0
>c0b0	01					.byte 	1     ; *** Load Float 5.62096 ***
>c0b1	81 e7 de b3				.dword 	$b3dee781
>c0b5	83 00					.byte 	$83,$0
>c0b7	2d					.byte 	$2d   ; *** Command - ***
>c0b8	01					.byte 	1     ; *** Load Float -5.344096 ***
>c0b9	9d d5 02 ab				.dword 	$ab02d59d
>c0bd	83 80					.byte 	$83,$80
>c0bf	3d					.byte 	$3d   ; *** Command = ***
>c0c0	01					.byte 	1     ; *** Load Float 120036974143096.22 ***
>c0c1	68 92 58 da				.dword 	$da589268
>c0c5	af 00					.byte 	$af,$0
>c0c7	01					.byte 	1     ; *** Load Float -225.44 ***
>c0c8	d7 a3 70 e1				.dword 	$e170a3d7
>c0cc	88 80					.byte 	$88,$80
>c0ce	2d					.byte 	$2d   ; *** Command - ***
>c0cf	01					.byte 	1     ; *** Load Float 120036974143321.66 ***
>c0d0	68 92 58 da				.dword 	$da589268
>c0d4	af 00					.byte 	$af,$0
>c0d6	3d					.byte 	$3d   ; *** Command = ***
>c0d7	01					.byte 	1     ; *** Load Float 2.0 ***
>c0d8	00 00 00 80				.dword 	$80000000
>c0dc	82 00					.byte 	$82,$0
>c0de	01					.byte 	1     ; *** Load Float 0.539069 ***
>c0df	0d 6d 00 8a				.dword 	$8a006d0d
>c0e3	80 00					.byte 	$80,$0
>c0e5	2a					.byte 	$2a   ; *** Command * ***
>c0e6	01					.byte 	1     ; *** Load Float 1.078138 ***
>c0e7	0d 6d 00 8a				.dword 	$8a006d0d
>c0eb	81 00					.byte 	$81,$0
>c0ed	3d					.byte 	$3d   ; *** Command = ***
>c0ee	01					.byte 	1     ; *** Load Float 936.19 ***
>c0ef	f5 28 0c ea				.dword 	$ea0c28f5
>c0f3	8a 00					.byte 	$8a,$0
>c0f5	01					.byte 	1     ; *** Load Float 542.5 ***
>c0f6	00 00 a0 87				.dword 	$87a00000
>c0fa	8a 00					.byte 	$8a,$0
>c0fc	2b					.byte 	$2b   ; *** Command + ***
>c0fd	01					.byte 	1     ; *** Load Float 1478.69 ***
>c0fe	7a 14 d6 b8				.dword 	$b8d6147a
>c102	8b 00					.byte 	$8b,$0
>c104	3d					.byte 	$3d   ; *** Command = ***
>c105	01					.byte 	1     ; *** Load Float -628.78 ***
>c106	85 eb 31 9d				.dword 	$9d31eb85
>c10a	8a 80					.byte 	$8a,$80
>c10c	01					.byte 	1     ; *** Load Float 1.482296 ***
>c10d	15 e0 bb bd				.dword 	$bdbbe015
>c111	81 00					.byte 	$81,$0
>c113	7e					.byte 	$7e   ; *** Command ~ ***
>c114	01					.byte 	1     ; *** Load Float -1 ***
>c115	00 00 00 80				.dword 	$80000000
>c119	81 80					.byte 	$81,$80
>c11b	3d					.byte 	$3d   ; *** Command = ***
>c11c	01					.byte 	1     ; *** Load Float -0.445023 ***
>c11d	fd 0d da e3				.dword 	$e3da0dfd
>c121	7f 80					.byte 	$7f,$80
>c123	01					.byte 	1     ; *** Load Float -0.778266 ***
>c124	c9 70 3c c7				.dword 	$c73c70c9
>c128	80 80					.byte 	$80,$80
>c12a	2f					.byte 	$2f   ; *** Command / ***
>c12b	01					.byte 	1     ; *** Load Float 0.5718134930730624 ***
>c12c	7c 5e 62 92				.dword 	$92625e7c
>c130	80 00					.byte 	$80,$0
>c132	3d					.byte 	$3d   ; *** Command = ***
>c133	01					.byte 	1     ; *** Load Float 2.511377 ***
>c134	98 66 ba a0				.dword 	$a0ba6698
>c138	82 00					.byte 	$82,$0
>c13a	01					.byte 	1     ; *** Load Float -594.05 ***
>c13b	33 33 83 94				.dword 	$94833333
>c13f	8a 80					.byte 	$8a,$80
>c141	2b					.byte 	$2b   ; *** Command + ***
>c142	01					.byte 	1     ; *** Load Float -591.5386229999999 ***
>c143	cc 78 e2 93				.dword 	$93e278cc
>c147	8a 80					.byte 	$8a,$80
>c149	3d					.byte 	$3d   ; *** Command = ***
>c14a	01					.byte 	1     ; *** Load Float -2.5074268705793657e-13 ***
>c14b	5a d4 27 8d				.dword 	$8d27d45a
>c14f	57 80					.byte 	$57,$80
>c151	01					.byte 	1     ; *** Load Float 439103215468437.0 ***
>c152	96 57 ae c7				.dword 	$c7ae5796
>c156	b1 00					.byte 	$b1,$0
>c158	2b					.byte 	$2b   ; *** Command + ***
>c159	01					.byte 	1     ; *** Load Float 439103215468437.0 ***
>c15a	96 57 ae c7				.dword 	$c7ae5796
>c15e	b1 00					.byte 	$b1,$0
>c160	3d					.byte 	$3d   ; *** Command = ***
>c161	01					.byte 	1     ; *** Load Float 5.0 ***
>c162	00 00 00 a0				.dword 	$a0000000
>c166	83 00					.byte 	$83,$0
>c168	01					.byte 	1     ; *** Load Float 529.05 ***
>c169	33 33 43 84				.dword 	$84433333
>c16d	8a 00					.byte 	$8a,$0
>c16f	2a					.byte 	$2a   ; *** Command * ***
>c170	01					.byte 	1     ; *** Load Float 2645.25 ***
>c171	00 00 54 a5				.dword 	$a5540000
>c175	8c 00					.byte 	$8c,$0
>c177	3d					.byte 	$3d   ; *** Command = ***
>c178	01					.byte 	1     ; *** Load Float -19.0 ***
>c179	00 00 00 98				.dword 	$98000000
>c17d	85 80					.byte 	$85,$80
>c17f	01					.byte 	1     ; *** Load Float -2.0 ***
>c180	00 00 00 80				.dword 	$80000000
>c184	82 80					.byte 	$82,$80
>c186	2f					.byte 	$2f   ; *** Command / ***
>c187	01					.byte 	1     ; *** Load Float 9.5 ***
>c188	00 00 00 98				.dword 	$98000000
>c18c	84 00					.byte 	$84,$0
>c18e	3d					.byte 	$3d   ; *** Command = ***
>c18f	01					.byte 	1     ; *** Load Float -829.32 ***
>c190	e1 7a 54 cf				.dword 	$cf547ae1
>c194	8a 80					.byte 	$8a,$80
>c196	01					.byte 	1     ; *** Load Float 0.0 ***
>c197	00 00 00 00				.dword 	$0
>c19b	80 40					.byte 	$80,$40
>c19d	7e					.byte 	$7e   ; *** Command ~ ***
>c19e	01					.byte 	1     ; *** Load Float -1 ***
>c19f	00 00 00 80				.dword 	$80000000
>c1a3	81 80					.byte 	$81,$80
>c1a5	3d					.byte 	$3d   ; *** Command = ***
>c1a6	01					.byte 	1     ; *** Load Float 722390891029109.6 ***
>c1a7	1c af 40 a4				.dword 	$a440af1c
>c1ab	b2 00					.byte 	$b2,$0
>c1ad	01					.byte 	1     ; *** Load Float 722390891029109.6 ***
>c1ae	1c af 40 a4				.dword 	$a440af1c
>c1b2	b2 00					.byte 	$b2,$0
>c1b4	7e					.byte 	$7e   ; *** Command ~ ***
>c1b5	01					.byte 	1     ; *** Load Float 0 ***
>c1b6	00 00 00 00				.dword 	$0
>c1ba	80 40					.byte 	$80,$40
>c1bc	3d					.byte 	$3d   ; *** Command = ***
>c1bd	01					.byte 	1     ; *** Load Float 7.98751 ***
>c1be	92 ae 99 ff				.dword 	$ff99ae92
>c1c2	83 00					.byte 	$83,$0
>c1c4	01					.byte 	1     ; *** Load Float 7.0 ***
>c1c5	00 00 00 e0				.dword 	$e0000000
>c1c9	83 00					.byte 	$83,$0
>c1cb	2b					.byte 	$2b   ; *** Command + ***
>c1cc	01					.byte 	1     ; *** Load Float 14.98751 ***
>c1cd	49 d7 cc ef				.dword 	$efccd749
>c1d1	84 00					.byte 	$84,$0
>c1d3	3d					.byte 	$3d   ; *** Command = ***
>c1d4	01					.byte 	1     ; *** Load Float -662.88 ***
>c1d5	eb 51 b8 a5				.dword 	$a5b851eb
>c1d9	8a 80					.byte 	$8a,$80
>c1db	01					.byte 	1     ; *** Load Float -662.88 ***
>c1dc	eb 51 b8 a5				.dword 	$a5b851eb
>c1e0	8a 80					.byte 	$8a,$80
>c1e2	7e					.byte 	$7e   ; *** Command ~ ***
>c1e3	01					.byte 	1     ; *** Load Float 0 ***
>c1e4	00 00 00 00				.dword 	$0
>c1e8	80 40					.byte 	$80,$40
>c1ea	3d					.byte 	$3d   ; *** Command = ***
>c1eb	01					.byte 	1     ; *** Load Float -217.92 ***
>c1ec	1e 85 eb d9				.dword 	$d9eb851e
>c1f0	88 80					.byte 	$88,$80
>c1f2	01					.byte 	1     ; *** Load Float 34945867.186176 ***
>c1f3	cb d2 4e 85				.dword 	$854ed2cb
>c1f7	9a 00					.byte 	$9a,$0
>c1f9	2f					.byte 	$2f   ; *** Command / ***
>c1fa	01					.byte 	1     ; *** Load Float -6.235930527607724e-06 ***
>c1fb	40 3c 3e d1				.dword 	$d13e3c40
>c1ff	6f 80					.byte 	$6f,$80
>c201	3d					.byte 	$3d   ; *** Command = ***
>c202	01					.byte 	1     ; *** Load Float 11.0 ***
>c203	00 00 00 b0				.dword 	$b0000000
>c207	84 00					.byte 	$84,$0
>c209	01					.byte 	1     ; *** Load Float 7.754426 ***
>c20a	fe 41 24 f8				.dword 	$f82441fe
>c20e	83 00					.byte 	$83,$0
>c210	7e					.byte 	$7e   ; *** Command ~ ***
>c211	01					.byte 	1     ; *** Load Float 1 ***
>c212	00 00 00 80				.dword 	$80000000
>c216	81 00					.byte 	$81,$0
>c218	3d					.byte 	$3d   ; *** Command = ***
>c219	01					.byte 	1     ; *** Load Float 10.0 ***
>c21a	00 00 00 a0				.dword 	$a0000000
>c21e	84 00					.byte 	$84,$0
>c220	01					.byte 	1     ; *** Load Float 5.771507 ***
>c221	72 2f b0 b8				.dword 	$b8b02f72
>c225	83 00					.byte 	$83,$0
>c227	2b					.byte 	$2b   ; *** Command + ***
>c228	01					.byte 	1     ; *** Load Float 15.771507 ***
>c229	b9 17 58 fc				.dword 	$fc5817b9
>c22d	84 00					.byte 	$84,$0
>c22f	3d					.byte 	$3d   ; *** Command = ***
>c230	01					.byte 	1     ; *** Load Float 60140.027904 ***
>c231	24 07 ec ea				.dword 	$eaec0724
>c235	90 00					.byte 	$90,$0
>c237	01					.byte 	1     ; *** Load Float 5.0 ***
>c238	00 00 00 a0				.dword 	$a0000000
>c23c	83 00					.byte 	$83,$0
>c23e	2f					.byte 	$2f   ; *** Command / ***
>c23f	01					.byte 	1     ; *** Load Float 12028.0055808 ***
>c240	b6 05 f0 bb				.dword 	$bbf005b6
>c244	8e 00					.byte 	$8e,$0
>c246	3d					.byte 	$3d   ; *** Command = ***
>c247	01					.byte 	1     ; *** Load Float -444.217344 ***
>c248	ed d1 1b de				.dword 	$de1bd1ed
>c24c	89 80					.byte 	$89,$80
>c24e	01					.byte 	1     ; *** Load Float -177.23 ***
>c24f	47 e1 3a b1				.dword 	$b13ae147
>c253	88 80					.byte 	$88,$80
>c255	2d					.byte 	$2d   ; *** Command - ***
>c256	01					.byte 	1     ; *** Load Float -266.987344 ***
>c257	49 61 7e 85				.dword 	$857e6149
>c25b	89 80					.byte 	$89,$80
>c25d	3d					.byte 	$3d   ; *** Command = ***
>c25e	01					.byte 	1     ; *** Load Float 0.041005 ***
>c25f	df db f4 a7				.dword 	$a7f4dbdf
>c263	7c 00					.byte 	$7c,$0
>c265	01					.byte 	1     ; *** Load Float 2.2950286865234375e-05 ***
>c266	a2 5d 85 c0				.dword 	$c0855da2
>c26a	71 00					.byte 	$71,$0
>c26c	2f					.byte 	$2f   ; *** Command / ***
>c26d	01					.byte 	1     ; *** Load Float 1786.6879068128478 ***
>c26e	55 03 56 df				.dword 	$df560355
>c272	8b 00					.byte 	$8b,$0
>c274	3d					.byte 	$3d   ; *** Command = ***
>c275	01					.byte 	1     ; *** Load Float -1.0614442825317382e-07 ***
>c276	3c 84 f1 e3				.dword 	$e3f1843c
>c27a	69 80					.byte 	$69,$80
>c27c	01					.byte 	1     ; *** Load Float 20.0 ***
>c27d	00 00 00 a0				.dword 	$a0000000
>c281	85 00					.byte 	$85,$0
>c283	2f					.byte 	$2f   ; *** Command / ***
>c284	01					.byte 	1     ; *** Load Float -5.307221412658691e-09 ***
>c285	30 d0 5a b6				.dword 	$b65ad030
>c289	65 80					.byte 	$65,$80
>c28b	3d					.byte 	$3d   ; *** Command = ***
>c28c	01					.byte 	1     ; *** Load Float 6.0 ***
>c28d	00 00 00 c0				.dword 	$c0000000
>c291	83 00					.byte 	$83,$0
>c293	01					.byte 	1     ; *** Load Float 1.657608 ***
>c294	ba 7f 2c d4				.dword 	$d42c7fba
>c298	81 00					.byte 	$81,$0
>c29a	7e					.byte 	$7e   ; *** Command ~ ***
>c29b	01					.byte 	1     ; *** Load Float 1 ***
>c29c	00 00 00 80				.dword 	$80000000
>c2a0	81 00					.byte 	$81,$0
>c2a2	3d					.byte 	$3d   ; *** Command = ***
>c2a3	01					.byte 	1     ; *** Load Float 87.6 ***
>c2a4	33 33 33 af				.dword 	$af333333
>c2a8	87 00					.byte 	$87,$0
>c2aa	01					.byte 	1     ; *** Load Float 1.0 ***
>c2ab	00 00 00 80				.dword 	$80000000
>c2af	81 00					.byte 	$81,$0
>c2b1	2a					.byte 	$2a   ; *** Command * ***
>c2b2	01					.byte 	1     ; *** Load Float 87.6 ***
>c2b3	33 33 33 af				.dword 	$af333333
>c2b7	87 00					.byte 	$87,$0
>c2b9	3d					.byte 	$3d   ; *** Command = ***
>c2ba	01					.byte 	1     ; *** Load Float 374.61 ***
>c2bb	7a 14 4e bb				.dword 	$bb4e147a
>c2bf	89 00					.byte 	$89,$0
>c2c1	01					.byte 	1     ; *** Load Float 6.465617 ***
>c2c2	9f 55 e6 ce				.dword 	$cee6559f
>c2c6	83 00					.byte 	$83,$0
>c2c8	2b					.byte 	$2b   ; *** Command + ***
>c2c9	01					.byte 	1     ; *** Load Float 381.075617 ***
>c2ca	d1 ad 89 be				.dword 	$be89add1
>c2ce	89 00					.byte 	$89,$0
>c2d0	3d					.byte 	$3d   ; *** Command = ***
>c2d1	01					.byte 	1     ; *** Load Float -593.55 ***
>c2d2	33 33 63 94				.dword 	$94633333
>c2d6	8a 80					.byte 	$8a,$80
>c2d8	01					.byte 	1     ; *** Load Float 3.831001 ***
>c2d9	d1 1e 2f f5				.dword 	$f52f1ed1
>c2dd	82 00					.byte 	$82,$0
>c2df	2b					.byte 	$2b   ; *** Command + ***
>c2e0	01					.byte 	1     ; *** Load Float -589.7189989999999 ***
>c2e1	14 04 6e 93				.dword 	$936e0414
>c2e5	8a 80					.byte 	$8a,$80
>c2e7	3d					.byte 	$3d   ; *** Command = ***
>c2e8	01					.byte 	1     ; *** Load Float 9794836608321.586 ***
>c2e9	1b 9c 88 8e				.dword 	$8e889c1b
>c2ed	ac 00					.byte 	$ac,$0
>c2ef	01					.byte 	1     ; *** Load Float 1.659383 ***
>c2f0	82 a9 66 d4				.dword 	$d466a982
>c2f4	81 00					.byte 	$81,$0
>c2f6	7e					.byte 	$7e   ; *** Command ~ ***
>c2f7	01					.byte 	1     ; *** Load Float 1 ***
>c2f8	00 00 00 80				.dword 	$80000000
>c2fc	81 00					.byte 	$81,$0
>c2fe	3d					.byte 	$3d   ; *** Command = ***
>c2ff	01					.byte 	1     ; *** Load Float 2.637953 ***
>c300	d1 38 d4 a8				.dword 	$a8d438d1
>c304	82 00					.byte 	$82,$0
>c306	01					.byte 	1     ; *** Load Float -9.4884033203125e-06 ***
>c307	c7 61 30 9f				.dword 	$9f3061c7
>c30b	70 80					.byte 	$70,$80
>c30d	2d					.byte 	$2d   ; *** Command - ***
>c30e	01					.byte 	1     ; *** Load Float 2.6379624884033204 ***
>c30f	9d 60 d4 a8				.dword 	$a8d4609d
>c313	82 00					.byte 	$82,$0
>c315	3d					.byte 	$3d   ; *** Command = ***
>c316	01					.byte 	1     ; *** Load Float 883.43 ***
>c317	1e 85 db dc				.dword 	$dcdb851e
>c31b	8a 00					.byte 	$8a,$0
>c31d	01					.byte 	1     ; *** Load Float 3.559136 ***
>c31e	5c e2 c8 e3				.dword 	$e3c8e25c
>c322	82 00					.byte 	$82,$0
>c324	2d					.byte 	$2d   ; *** Command - ***
>c325	01					.byte 	1     ; *** Load Float 879.870864 ***
>c326	3c bc f7 db				.dword 	$dbf7bc3c
>c32a	8a 00					.byte 	$8a,$0
>c32c	3d					.byte 	$3d   ; *** Command = ***
>c32d	01					.byte 	1     ; *** Load Float -0.762067 ***
>c32e	aa d2 16 c3				.dword 	$c316d2aa
>c332	80 80					.byte 	$80,$80
>c334	01					.byte 	1     ; *** Load Float 9.227096 ***
>c335	6a 2f a2 93				.dword 	$93a22f6a
>c339	84 00					.byte 	$84,$0
>c33b	2a					.byte 	$2a   ; *** Command * ***
>c33c	01					.byte 	1     ; *** Load Float -7.031665367432 ***
>c33d	16 67 03 e1				.dword 	$e1036716
>c341	83 80					.byte 	$83,$80
>c343	3d					.byte 	$3d   ; *** Command = ***
>c344	01					.byte 	1     ; *** Load Float 6.0 ***
>c345	00 00 00 c0				.dword 	$c0000000
>c349	83 00					.byte 	$83,$0
>c34b	01					.byte 	1     ; *** Load Float 4.175468 ***
>c34c	11 6f 9d 85				.dword 	$859d6f11
>c350	83 00					.byte 	$83,$0
>c352	7e					.byte 	$7e   ; *** Command ~ ***
>c353	01					.byte 	1     ; *** Load Float 1 ***
>c354	00 00 00 80				.dword 	$80000000
>c358	81 00					.byte 	$81,$0
>c35a	3d					.byte 	$3d   ; *** Command = ***
>c35b	01					.byte 	1     ; *** Load Float -467.65 ***
>c35c	33 33 d3 e9				.dword 	$e9d33333
>c360	89 80					.byte 	$89,$80
>c362	01					.byte 	1     ; *** Load Float -6842788625231.38 ***
>c363	87 bf 26 c7				.dword 	$c726bf87
>c367	ab 80					.byte 	$ab,$80
>c369	2b					.byte 	$2b   ; *** Command + ***
>c36a	01					.byte 	1     ; *** Load Float -6842788625699.03 ***
>c36b	87 bf 26 c7				.dword 	$c726bf87
>c36f	ab 80					.byte 	$ab,$80
>c371	3d					.byte 	$3d   ; *** Command = ***
>c372	01					.byte 	1     ; *** Load Float -335.62 ***
>c373	28 5c cf a7				.dword 	$a7cf5c28
>c377	89 80					.byte 	$89,$80
>c379	01					.byte 	1     ; *** Load Float -88186.814464 ***
>c37a	40 68 3d ac				.dword 	$ac3d6840
>c37e	91 80					.byte 	$91,$80
>c380	2a					.byte 	$2a   ; *** Command * ***
>c381	01					.byte 	1     ; *** Load Float 29597258.67040768 ***
>c382	55 25 cf e1				.dword 	$e1cf2555
>c386	99 00					.byte 	$99,$0
>c388	3d					.byte 	$3d   ; *** Command = ***
>c389	01					.byte 	1     ; *** Load Float 0.0 ***
>c38a	00 00 00 00				.dword 	$0
>c38e	80 40					.byte 	$80,$40
>c390	01					.byte 	1     ; *** Load Float 5.192011594772339e-10 ***
>c391	97 88 b7 8e				.dword 	$8eb78897
>c395	62 00					.byte 	$62,$0
>c397	2a					.byte 	$2a   ; *** Command * ***
>c398	01					.byte 	1     ; *** Load Float 0.0 ***
>c399	00 00 00 00				.dword 	$0
>c39d	80 40					.byte 	$80,$40
>c39f	3d					.byte 	$3d   ; *** Command = ***
>c3a0	01					.byte 	1     ; *** Load Float -271.29 ***
>c3a1	b8 1e a5 87				.dword 	$87a51eb8
>c3a5	89 80					.byte 	$89,$80
>c3a7	01					.byte 	1     ; *** Load Float -145.72 ***
>c3a8	eb 51 b8 91				.dword 	$91b851eb
>c3ac	88 80					.byte 	$88,$80
>c3ae	2a					.byte 	$2a   ; *** Command * ***
>c3af	01					.byte 	1     ; *** Load Float 39532.378800000006 ***
>c3b0	f9 60 6c 9a				.dword 	$9a6c60f9
>c3b4	90 00					.byte 	$90,$0
>c3b6	3d					.byte 	$3d   ; *** Command = ***
>c3b7	01					.byte 	1     ; *** Load Float 8.44864 ***
>c3b8	22 a1 2d 87				.dword 	$872da122
>c3bc	84 00					.byte 	$84,$0
>c3be	01					.byte 	1     ; *** Load Float 8.785179 ***
>c3bf	da 17 90 8c				.dword 	$8c9017da
>c3c3	84 00					.byte 	$84,$0
>c3c5	7e					.byte 	$7e   ; *** Command ~ ***
>c3c6	01					.byte 	1     ; *** Load Float -1 ***
>c3c7	00 00 00 80				.dword 	$80000000
>c3cb	81 80					.byte 	$81,$80
>c3cd	3d					.byte 	$3d   ; *** Command = ***
>c3ce	01					.byte 	1     ; *** Load Float 3.70846 ***
>c3cf	9c 68 57 ed				.dword 	$ed57689c
>c3d3	82 00					.byte 	$82,$0
>c3d5	01					.byte 	1     ; *** Load Float 17.0 ***
>c3d6	00 00 00 88				.dword 	$88000000
>c3da	85 00					.byte 	$85,$0
>c3dc	7e					.byte 	$7e   ; *** Command ~ ***
>c3dd	01					.byte 	1     ; *** Load Float -1 ***
>c3de	00 00 00 80				.dword 	$80000000
>c3e2	81 80					.byte 	$81,$80
>c3e4	3d					.byte 	$3d   ; *** Command = ***
>c3e5	01					.byte 	1     ; *** Load Float 168.64 ***
>c3e6	0a d7 a3 a8				.dword 	$a8a3d70a
>c3ea	88 00					.byte 	$88,$0
>c3ec	01					.byte 	1     ; *** Load Float 459.09 ***
>c3ed	1e 85 8b e5				.dword 	$e58b851e
>c3f1	89 00					.byte 	$89,$0
>c3f3	2f					.byte 	$2f   ; *** Command / ***
>c3f4	01					.byte 	1     ; *** Load Float 0.3673353808621403 ***
>c3f5	0e 62 13 bc				.dword 	$bc13620e
>c3f9	7f 00					.byte 	$7f,$0
>c3fb	3d					.byte 	$3d   ; *** Command = ***
>c3fc	01					.byte 	1     ; *** Load Float 1.0 ***
>c3fd	00 00 00 80				.dword 	$80000000
>c401	81 00					.byte 	$81,$0
>c403	01					.byte 	1     ; *** Load Float 6.402837 ***
>c404	6b 0a e4 cc				.dword 	$cce40a6b
>c408	83 00					.byte 	$83,$0
>c40a	7e					.byte 	$7e   ; *** Command ~ ***
>c40b	01					.byte 	1     ; *** Load Float -1 ***
>c40c	00 00 00 80				.dword 	$80000000
>c410	81 80					.byte 	$81,$80
>c412	3d					.byte 	$3d   ; *** Command = ***
>c413	01					.byte 	1     ; *** Load Float 1.25852 ***
>c414	f0 2e 17 a1				.dword 	$a1172ef0
>c418	81 00					.byte 	$81,$0
>c41a	01					.byte 	1     ; *** Load Float 3.707782525452786e-15 ***
>c41b	f6 41 96 85				.dword 	$859641f6
>c41f	51 00					.byte 	$51,$0
>c421	2a					.byte 	$2a   ; *** Command * ***
>c422	01					.byte 	1     ; *** Load Float 4.66631846393284e-15 ***
>c423	f4 30 1f a8				.dword 	$a81f30f4
>c427	51 00					.byte 	$51,$0
>c429	3d					.byte 	$3d   ; *** Command = ***
>c42a	01					.byte 	1     ; *** Load Float -0.930551 ***
>c42b	20 97 38 ee				.dword 	$ee389720
>c42f	80 80					.byte 	$80,$80
>c431	01					.byte 	1     ; *** Load Float 18.0 ***
>c432	00 00 00 90				.dword 	$90000000
>c436	85 00					.byte 	$85,$0
>c438	7e					.byte 	$7e   ; *** Command ~ ***
>c439	01					.byte 	1     ; *** Load Float -1 ***
>c43a	00 00 00 80				.dword 	$80000000
>c43e	81 80					.byte 	$81,$80
>c440	3d					.byte 	$3d   ; *** Command = ***
>c441	01					.byte 	1     ; *** Load Float 454593.347584 ***
>c442	1f 2b f8 dd				.dword 	$ddf82b1f
>c446	93 00					.byte 	$93,$0
>c448	01					.byte 	1     ; *** Load Float 5.848223 ***
>c449	8f a4 24 bb				.dword 	$bb24a48f
>c44d	83 00					.byte 	$83,$0
>c44f	7e					.byte 	$7e   ; *** Command ~ ***
>c450	01					.byte 	1     ; *** Load Float 1 ***
>c451	00 00 00 80				.dword 	$80000000
>c455	81 00					.byte 	$81,$0
>c457	3d					.byte 	$3d   ; *** Command = ***
>c458	01					.byte 	1     ; *** Load Float 336.53555200000005 ***
>c459	f7 8c 44 a8				.dword 	$a8448cf7
>c45d	89 00					.byte 	$89,$0
>c45f	01					.byte 	1     ; *** Load Float 1.32604 ***
>c460	c0 ad bb a9				.dword 	$a9bbadc0
>c464	81 00					.byte 	$81,$0
>c466	2b					.byte 	$2b   ; *** Command + ***
>c467	01					.byte 	1     ; *** Load Float 337.86159200000003 ***
>c468	a5 48 ee a8				.dword 	$a8ee48a5
>c46c	89 00					.byte 	$89,$0
>c46e	3d					.byte 	$3d   ; *** Command = ***
>c46f	01					.byte 	1	; *** Load Integer 99999 ***
>c470	9f 86 01 00				.dword 	$1869f
>c474	00 01					.byte 	0,$01

;******  Return to file: modules/testing/fptest.asm

>c476	00						.byte 	0

;******  Return to file: _include.asm


;******  Return to file: basic.asm

.c477	80 fe		bra $c477	_halt:	bra 		_halt
.c479					ERR_Handler:
.c479	80 fe		bra $c479			bra 	ERR_Handler
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff					.word DefaultInterrupt
>fffc	00 a0						.word 	StartROM
>fffe	f8 ff					.word DefaultInterrupt

;******  End of listing
