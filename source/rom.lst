
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -X -b -q -L rom.lst -o rom.bin basic.asm
; Sat Aug 31 18:09:47 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				cpu = "65816"
="em65816"				hardware = "em65816"
=1					exitonend = 1
=0					autorun = 0
=1					loadtest = 1
=1					hasfloat = 1
=1					hasinteger = 1
=253					maxstring = 253

;******  Processing file: modules/basic/pointer/em65816/src_em65816.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/handlers.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stackmarkers.inc

=5					SourcePosSize   =   5 							; Source position stack space needed.
=1					SMark_Gosub 	= 	1 							; 0 is GOSUB/RETURN.
=2					SMark_Repeat 	= 	2 							; 1 is REPEAT/UNTIL.
=3					SMark_While 	= 	3 							; 2 is WHILE/WEND.
=4					SMark_If 		= 	4 							; 3 is IF/ENDIF
=5					SMark_For 		= 	5 							; 4 is FOR/NEXT

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/common.inc


;******  Return to file: _include.asm


;******  Processing file: modules/hardware/common/macros32.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/data/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zCodePtr:	.dword ? 						; code pointer.
>001a					zLTemp1:	.dword ?						; long word (used in multiply)
>001e					zGenPtr:	.word ? 						; general pointer.
>0020					zTempStr:	.word ?							; temporary string allocator. When high zero, not initialised.
>0022					zVarDataPtr: .word ? 						; position of variable data.
>0024					zVarType: 	.byte ? 						; type of data (token)
>0025					zNullString:.byte ? 						; represents a NULL string.
>0026					zBasicSP:	.word ? 						; stack pointer
>0080					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0084					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0085					XS_Type 	.byte ? 						; bit 7 sign (float only)
=6					XS_Size = 6
=134					XS2_Mantissa = XS_Mantissa+XS_Size
=138					XS2_Exponent = XS_Exponent+XS_Size
=139					XS2_Type = XS_Type+XS_Size
=140					XS3_Mantissa = XS_Mantissa+XS_Size*2
=144					XS3_Exponent = XS_Exponent+XS_Size*2
=145					XS3_Type = XS_Type+XS_Size*2
>0300					StringPtr:	.word ? 						; Top of free memory (for string allocation)
>0302					VarMemPtr: 	.word ?							; Bottom of free memory (for variables)
>0304					endOfProgram: .dword ? 						; End of Program Memory (long)
>0308					vecPrintCharacter .word ?
>030a					vecInputCharacter .word ?
>030c					UserVector .fill 4 							; USR(x) calls this.
>0310					LocalVector .fill 4 						; Indirect calls call this.
>0314					NumBufX 	.byte 	?						; buffer index position
>0315					Num_Buffer	.fill 	32 						; buffer for numeric conversions
=6					HashTableCount = 6 							; there are 6 hash tables, in token order.
=8					HashTableSize = 8 							; each hash table as 8 links.
.0335					HashTableBase:
>0335								.fill	HashTableCount * HashTableSize * 2
.0395					HashTableEnd:
=$315					Var_Buffer 	= Num_Buffer 					; buffer for variable name (same space)
>0395					Var_Type    .byte ? 						; type of variable (as a type token)
>0396					Var_Hash 	.byte ? 						; hash of identifier name.
>0397					Var_Length 	.byte ? 						; length of variable name
>0398					Var_HashAddress .byte ?						; low byte of hash table entry.
>0399					Var_DataSize .byte ?						; size of one element.
>039a					NumSuppress	.byte 	?						; leading zero suppression flag
>039b					NumConvCount .byte 	? 						; count for conversions.
>039c					ExpTemp:	.byte ?							; Working temp for exponents.
>039d					ExpCount:	.byte ? 						; Count of decimal exponents.
>039e					SignCount:	.byte ?							; Integer Divide Sign Counts.
>039f					TempStringWriteIndex: .byte ? 				; Write offset.
>03a0					ValSign: 	.byte ? 						; sign flag for val()
>03a1					SliceStart:	.byte ? 						; string slice parts
>03a2					SliceCount:	.byte ?
>03a3					RandomSeed:	.dword ? 						; Random seed.
>03a7					SignNext:	.byte ? 						; Used for keeping sign of STEP in FOR/NEXT
>03a8					BreakCount:	.byte ? 						; Counter, avoid checking break every command.
=3					ArrayMaxDim = 3 							; number of dimensions.
>03a9					ArrayDef:	.fill (ArrayMaxDim+1)*2 		; dimensions for auto-creation
>03b1					UsrArrayDef:.fill (ArrayMaxDim+1)*2 		; dimensions created in DIM
>03b9					UsrArrayIdx:.byte ? 						; index into UsrArrayDef
>03ba					LastPrinted:.byte ? 						; last printed char ?
>03bb					ListIndent: .byte ? 						; list indent level
>03bc					LastListIndent:.byte ? 						; previous one.
>03bd					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>03bf					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>03c1					Tim_SR:		.byte ? 						; Processor Status
>03c2					Tim_A:		.byte ? 						; Processor Registers
>03c3					Tim_X:		.byte ?
>03c4					Tim_Y:		.byte ?
>03c5					Tim_Z:		.byte ?
>03c6					Tim_SP:		.word ?							; Stack Pointer (just in cases)
>0400					BasicStack:	.fill 	256 					; and occupy whole pages.
.0500					EndBasicStack:
>0500					IFT_XCursor:.byte ?							; current logical position on screen
>0501					IFT_YCursor:.byte ?
>0502					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0566					IFT_LineBuffer: .fill 100 					; line input buffer.

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

=$7f00					HighMemory = $7F00
=$3000					VariableMemory = $3000
.1000					BasicProgram:

;******  Processing file: modules/hardware/../basic/testcode/testcode.src

>1000	05 0a 00 d0 00 05 14 00			.byte	$05,$0a,$00,$d0,$00,$05,$14,$00
>1008	91 00 0a 1e 00 92 09 84			.byte	$91,$00,$0a,$1e,$00,$92,$09,$84
>1010	41 c8 42 00 0a 28 00 92			.byte	$41,$c8,$42,$00,$0a,$28,$00,$92
>1018	0a 84 42 c8 43 00 0a 32			.byte	$0a,$84,$42,$c8,$43,$00,$0a,$32
>1020	00 92 0b 84 41 c8 44 00			.byte	$00,$92,$0b,$84,$41,$c8,$44,$00
>1028	0c 3c 00 8f 09 8a 0a 8a			.byte	$0c,$3c,$00,$8f,$09,$8a,$0a,$8a
>1030	0b 84 46 00 0a 46 00 d6			.byte	$0b,$84,$46,$00,$0a,$46,$00,$d6
>1038	09 bf 0a bf 0b 00 05 50			.byte	$09,$bf,$0a,$bf,$0b,$00,$05,$50
>1040	00 94 00 06 5a 00 97 0b			.byte	$00,$94,$00,$06,$5a,$00,$97,$0b
>1048	00 06 64 00 97 0a 00 06			.byte	$00,$06,$64,$00,$97,$0a,$00,$06
>1050	6e 00 97 09 00 06 78 00			.byte	$6e,$00,$97,$09,$00,$06,$78,$00
>1058	96 40 00 05 82 00 c4 00			.byte	$96,$40,$00,$05,$82,$00,$c4,$00
>1060	00					.byte	$00

;******  Return to file: modules/hardware/em65816.asm

.c000					StartROM:
.c000	18		clc				clc
.c001	fb		xce				xce
.c002	c2 30		rep #$30			rep 	#$30
.c004	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c007	1b		tcs				tcs
.c008	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.c00b	e2 30		sep #$30			sep 	#$30
.c00d	c2 30		rep #$30			rep 	#$30						; clear AXY in 16 bit.
.c00f	a9 00		lda #$00			lda 	#$0000
.c011	aa		tax				tax
.c012	a8		tay				tay
.c013	e2 30		sep #$30			sep 	#$30
.c015	5c df 87 01	jmp $0187df		jmp BASIC_Start
.c019					TIM_BreakHandler:
.c019	5c 76 83 01	jmp $018376			jmp 	TIM_BreakVector

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.018000					IFT_ClearScreen:
.018000	48		pha				pha
.018001	da		phx				phx
.018002	5a		phy				phy
.018003	20 a9 81	jsr $0181a9			jsr 	IF_Home 					; home cursor
.018006	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.018008					_IFT_CS0:
.018008	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.01800a					_IFT_CS1:
.01800a	a9 20		lda #$20			lda 	#' '						; clear line.
.01800c	20 d5 81	jsr $0181d5			jsr 	IF_Write
.01800f	88		dey				dey
.018010	d0 f8		bne $01800a			bne 	_IFT_CS1
.018012	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; next line down
.018015	ca		dex				dex
.018016	d0 f0		bne $018008			bne 	_IFT_CS0
.018018	7a		ply				ply
.018019	fa		plx				plx
.01801a	68		pla				pla
.01801b					IFT_HomeCursor:
.01801b	48		pha				pha
.01801c	20 a9 81	jsr $0181a9			jsr 	IF_Home
.01801f	a9 00		lda #$00			lda 	#0
.018021	8d 00 05	sta $0500			sta 	IFT_XCursor
.018024	8d 01 05	sta $0501			sta 	IFT_YCursor
.018027	68		pla				pla
.018028	60		rts				rts
.018029					IFT_UpLine:
.018029	48		pha				pha
.01802a	ad 01 05	lda $0501			lda  	IFT_YCursor 				; get Y
.01802d	3a		dec a				dec 	a 							; line above
.01802e	30 03		bmi $018033			bmi 	_IFTULExit 					; too far, abort
.018030	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos					; set to that line.
.018033					_IFTULExit:
.018033	68		pla				pla
.018034	60		rts				rts
.018035					IFT_PrintCharacter:
.018035	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.018037	f0 23		beq $01805c			beq 	IFT_NewLine
.018039	48		pha				pha
.01803a	20 74 80	jsr $018074			jsr 	IFT_UpperCase 				; make upper case
.01803d	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write out.
.018040	ee 00 05	inc $0500			inc 	IFT_XCursor 				; bump x cursor
.018043	ad 00 05	lda $0500			lda 	IFT_XCursor 				; reached RHS ?
.018046	c9 40		cmp #$40			cmp 	#IF_Width
.018048	d0 03		bne $01804d			bne 	_IFT_PCNotEOL
.01804a	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; if so do new line.
.01804d					_IFT_PCNotEOL:
.01804d	68		pla				pla
.01804e	60		rts				rts
.01804f					IFT_Tab:
.01804f	a9 20		lda #$20			lda 	#" " 						; space
.018051	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018054	ad 00 05	lda $0500			lda 	IFT_XCursor 				; until x % 8 == 0
.018057	29 07		and #$07			and 	#7
.018059	d0 f4		bne $01804f			bne 	IFT_Tab
.01805b	60		rts				rts
.01805c					IFT_NewLine:
.01805c	48		pha				pha
.01805d	20 bc 81	jsr $0181bc			jsr 	IF_NewLine 					; new line on actual screen.
.018060	a9 00		lda #$00			lda 	#0 							; reset x position
.018062	8d 00 05	sta $0500			sta 	IFT_XCursor
.018065	ee 01 05	inc $0501			inc 	IFT_YCursor 				; move down.
.018068	ad 01 05	lda $0501			lda 	IFT_YCursor
.01806b	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.01806d	d0 03		bne $018072			bne 	_IFT_NL_NotEOS
.01806f	20 7f 80	jsr $01807f			jsr 	IFT_Scroll 					; scroll screen up.
.018072					_IFT_NL_NotEOS:
.018072	68		pla				pla
.018073	60		rts				rts
.018074					IFT_UpperCase:
.018074	c9 61		cmp #$61			cmp 	#"a"
.018076	90 06		bcc $01807e			bcc 	_IFT_UCExit
.018078	c9 7b		cmp #$7b			cmp 	#"z"+1
.01807a	b0 02		bcs $01807e			bcs 	_IFT_UCExit
.01807c	49 20		eor #$20			eor 	#$20
.01807e					_IFT_UCExit:
.01807e	60		rts				rts
.01807f					IFT_Scroll:
.01807f	48		pha				pha 								; save AXY
.018080	da		phx				phx
.018081	5a		phy				phy
.018082	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.018084					_IFT_SLoop:
.018084	20 a4 80	jsr $0180a4			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.018087	e8		inx				inx
.018088	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.01808a	d0 f8		bne $018084			bne 	_IFT_SLoop
.01808c	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01808e	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018091	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.018093					_IFT_SBlank:
.018093	a9 20		lda #$20			lda 	#32
.018095	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018098	ca		dex				dex
.018099	d0 f8		bne $018093			bne 	_IFT_SBlank
.01809b	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.01809d	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180a0	7a		ply				ply
.0180a1	fa		plx				plx
.0180a2	68		pla				pla
.0180a3	60		rts				rts
.0180a4					_IFT_ScrollLine:
.0180a4	da		phx				phx
.0180a5	da		phx				phx
.0180a6	8a		txa				txa 								; copy line into buffer.
.0180a7	1a		inc a				inc 	a 							; next line down.
.0180a8	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180ab	a2 00		ldx #$00			ldx 	#0
.0180ad					_IFTScrollCopy1:
.0180ad	20 cc 81	jsr $0181cc			jsr 	IF_Read
.0180b0	9d 02 05	sta $0502,x			sta 	IFT_Buffer,x
.0180b3	e8		inx				inx
.0180b4	e0 40		cpx #$40			cpx 	#IF_Width
.0180b6	d0 f5		bne $0180ad			bne 	_IFTScrollCopy1
.0180b8	68		pla				pla
.0180b9	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.0180bc	a2 00		ldx #$00			ldx 	#0
.0180be					_IFTScrollCopy2:
.0180be	bd 02 05	lda $0502,x			lda 	IFT_Buffer,x
.0180c1	20 d5 81	jsr $0181d5			jsr 	IF_Write
.0180c4	e8		inx				inx
.0180c5	e0 40		cpx #$40			cpx 	#IF_Width
.0180c7	d0 f5		bne $0180be			bne 	_IFTScrollCopy2
.0180c9	fa		plx				plx
.0180ca	60		rts				rts
.0180cb					IFT_SetYPos:
.0180cb	48		pha				pha
.0180cc	da		phx				phx
.0180cd	aa		tax				tax
.0180ce	20 1b 80	jsr $01801b			jsr 	IFT_HomeCursor
.0180d1	e0 00		cpx #$00			cpx 	#0
.0180d3	f0 09		beq $0180de			beq 	_IFT_MOAExit
.0180d5					_IFT_MOALoop:
.0180d5	20 bc 81	jsr $0181bc			jsr 	IF_NewLine
.0180d8	ee 01 05	inc $0501			inc 	IFT_YCursor
.0180db	ca		dex				dex
.0180dc	d0 f7		bne $0180d5			bne		_IFT_MOALoop
.0180de					_IFT_MOAExit:
.0180de	fa		plx				plx
.0180df	68		pla				pla
.0180e0	60		rts				rts
.0180e1					IFT_GetKeyCursor:
.0180e1	20 e9 80	jsr $0180e9			jsr 	_IFT_FlipCursor 			; reverse current
.0180e4					_IFT_GKCWait:
.0180e4	20 e6 81	jsr $0181e6			jsr 	IF_GetKey 					; get key
.0180e7	f0 fb		beq $0180e4			beq 	_IFT_GKCWait
.0180e9					_IFT_FlipCursor:
.0180e9	48		pha				pha 								; save
.0180ea	20 cc 81	jsr $0181cc			jsr 	IF_Read 					; read
.0180ed	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f0	49 80		eor #$80			eor 	#$80 						; reverse
.0180f2	20 d5 81	jsr $0181d5			jsr 	IF_Write 					; write
.0180f5	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.0180f8	68		pla				pla
.0180f9	60		rts				rts
.0180fa					IFT_ReadLine:
.0180fa	48		pha				pha
.0180fb					_IFT_RLLoop:
.0180fb	20 e1 80	jsr $0180e1			jsr 	IFT_GetKeyCursor 			; get keystroke
.0180fe	c9 0d		cmp #$0d			cmp 	#13							; return
.018100	f0 7d		beq $01817f			beq 	_IFT_RLExit
.018102	c9 20		cmp #$20			cmp 	#32 						; control character
.018104	90 05		bcc $01810b			bcc 	_IFT_Control
.018106	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018109	80 f0		bra $0180fb			bra 	_IFT_RLLoop
.01810b					_IFT_Control:
.01810b	c9 01		cmp #$01			cmp 	#"A"-64
.01810d	f0 26		beq $018135			beq 	_IFT_Left
.01810f	c9 04		cmp #$04			cmp 	#"D"-64
.018111	f0 2e		beq $018141			beq 	_IFT_Right
.018113	c9 17		cmp #$17			cmp 	#"W"-64
.018115	f0 36		beq $01814d			beq 	_IFT_Up
.018117	c9 13		cmp #$13			cmp 	#"S"-64
.018119	f0 3e		beq $018159			beq 	_IFT_Down
.01811b	c9 08		cmp #$08			cmp 	#"H"-64
.01811d	f0 09		beq $018128			beq 	_IFT_Backspace
.01811f	c9 1a		cmp #$1a			cmp 	#"Z"-64
.018121	d0 d8		bne $0180fb			bne 	_IFT_RLLoop
.018123	20 00 80	jsr $018000			jsr 	IFT_ClearScreen				; clear CTL-Z
.018126	80 d3		bra $0180fb			bra 	_IFT_RLLoop
.018128					_IFT_Backspace:
.018128	ad 00 05	lda $0500			lda 	IFT_XCursor 				; check not start of line.
.01812b	f0 ce		beq $0180fb			beq 	_IFT_RLLoop
.01812d	20 de 81	jsr $0181de			jsr 	IF_LeftOne
.018130	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.018132	20 d5 81	jsr $0181d5			jsr 	IF_Write
.018135					_IFT_Left:
.018135	ce 00 05	dec $0500			dec 	IFT_XCursor 				; left CTL-W
.018138	10 29		bpl $018163			bpl 	_IFT_Reposition
.01813a	a9 3f		lda #$3f			lda 	#IF_Width-1
.01813c					_IFT_SetX:
.01813c	8d 00 05	sta $0500			sta 	IFT_XCursor
.01813f	80 22		bra $018163			bra 	_IFT_Reposition
.018141					_IFT_Right:
.018141	ee 00 05	inc $0500			inc 	IFT_XCursor
.018144	ad 00 05	lda $0500			lda 	IFT_XCursor
.018147	49 40		eor #$40			eor 	#IF_Width
.018149	f0 f1		beq $01813c			beq 	_IFT_SetX
.01814b	80 16		bra $018163			bra 	_IFT_Reposition
.01814d					_IFT_Up:
.01814d	ce 01 05	dec $0501			dec 	IFT_YCursor
.018150	10 11		bpl $018163			bpl 	_IFT_Reposition
.018152	a9 1f		lda #$1f			lda 	#IF_Height-1
.018154					_IFT_SetY:
.018154	8d 01 05	sta $0501			sta 	IFT_YCursor
.018157	80 0a		bra $018163			bra 	_IFT_Reposition
.018159					_IFT_Down:
.018159	ee 01 05	inc $0501			inc 	IFT_YCursor
.01815c	ad 01 05	lda $0501			lda 	IFT_YCursor
.01815f	49 20		eor #$20			eor 	#IF_Height
.018161	f0 f1		beq $018154			beq 	_IFT_SetY
.018163					_IFT_Reposition:
.018163	ad 00 05	lda $0500			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.018166	48		pha				pha
.018167	ad 01 05	lda $0501			lda 	IFT_YCursor
.01816a	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.01816d	68		pla				pla
.01816e	aa		tax				tax
.01816f	e0 00		cpx #$00			cpx 	#0
.018171	f0 88		beq $0180fb			beq 	_IFT_RLLoop
.018173					_IFT_MoveRight:
.018173	20 cc 81	jsr $0181cc			jsr 	IF_Read
.018176	ee 00 05	inc $0500			inc 	IFT_XCursor
.018179	ca		dex				dex
.01817a	d0 f7		bne $018173			bne 	_IFT_MoveRight
.01817c	4c fb 80	jmp $0180fb			jmp 	_IFT_RLLoop
.01817f					_IFT_RLExit:
.01817f	ad 01 05	lda $0501			lda 	IFT_YCursor 				; go to start of line.
.018182	20 cb 80	jsr $0180cb			jsr 	IFT_SetYPos
.018185	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.018187					_IFT_RLRead:
.018187	20 cc 81	jsr $0181cc			jsr 	IF_Read
.01818a	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.01818d	e8		inx				inx
.01818e	e0 40		cpx #$40			cpx 	#IF_Width
.018190	d0 f5		bne $018187			bne 	_IFT_RLRead
.018192					_IFT_RL_Trim:
.018192	ca		dex				dex 	 							; previous char
.018193	30 07		bmi $01819c			bmi 	_IFT_Found 					; gone too far
.018195	bd 66 05	lda $0566,x			lda 	IFT_LineBuffer,x			; go back if space
.018198	c9 20		cmp #$20			cmp 	#" "
.01819a	f0 f6		beq $018192			beq 	_IFT_RL_Trim
.01819c					_IFT_Found:
.01819c	e8		inx				inx 								; forward to non-space
.01819d	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.01819f	9d 66 05	sta $0566,x			sta 	IFT_LineBuffer,x
.0181a2	68		pla				pla
.0181a3	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.0181a5	a0 05		ldy #$05			ldy 	#IFT_LineBuffer >> 8
.0181a7	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.0181a8					IF_Reset:
.0181a8	60		rts				rts
.0181a9					IF_Home:
.0181a9	48		pha				pha
.0181aa	64 08		stz $08				stz 	IF_XPos 					; zero X position
.0181ac	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.0181ae	85 04		sta $04				sta 	IF_Pos
.0181b0	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.0181b2	85 05		sta $05				sta 	IF_Pos+1
.0181b4	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.0181b6	85 06		sta $06				sta 	IF_Pos+2
.0181b8	64 07		stz $07				stz 	IF_Pos+3
.0181ba	68		pla				pla
.0181bb	60		rts				rts
.0181bc					IF_NewLine:
.0181bc	48		pha				pha
.0181bd	64 08		stz $08				stz 	IF_XPos						; back to start of line
.0181bf	18		clc				clc 								; down one line
.0181c0	a5 04		lda $04				lda 	IF_Pos
.0181c2	69 40		adc #$40			adc 	#64
.0181c4	85 04		sta $04				sta 	IF_Pos
.0181c6	90 02		bcc $0181ca			bcc 	_IF_NoCarry 				; carry through.
.0181c8	e6 05		inc $05				inc 	IF_Pos+1
.0181ca					_IF_NoCarry:
.0181ca	68		pla				pla
.0181cb	60		rts				rts
.0181cc					IF_Read:
.0181cc	5a		phy				phy 								; save current Y
.0181cd	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.0181cf	b7 04		lda [$04],y			lda 	[IF_Pos],y
.0181d1	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181d3	7a		ply				ply									; restore Y
.0181d4	60		rts				rts
.0181d5					IF_Write:
.0181d5	5a		phy				phy 								; save current Y
.0181d6	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.0181d8	97 04		sta [$04],y			sta 	[IF_Pos],y
.0181da	e6 08		inc $08				inc 	IF_XPos 					; step right.
.0181dc	7a		ply				ply									; restore Y
.0181dd	60		rts				rts
.0181de					IF_LeftOne:
.0181de	c6 08		dec $08				dec 	IF_XPos
.0181e0	60		rts				rts
.0181e1					IF_CheckBreak:
.0181e1	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.0181e5	60		rts				rts
.0181e6					IF_GetKey:
.0181e6	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.0181ea	f0 08		beq $0181f4			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.0181ec	48		pha				pha 								; key pressed, clear queue.
.0181ed	a9 00		lda #$00			lda 	#0
.0181ef	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.0181f3	68		pla				pla
.0181f4					_IFGK_NoKey:
.0181f4	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.0181f6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.0181f7					TIM_Error:
.0181f7	20 29 80	jsr $018029			jsr 	IFT_UpLine 					; go up one line.
.0181fa	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.0181fc	80 02		bra $018200			bra 	TIM_ShowPrompt
.0181fe					TIM_NewCommand:
.0181fe	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.018200					TIM_ShowPrompt:
.018200	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.018203	20 fa 80	jsr $0180fa			jsr 	IFT_ReadLine	 			; get character, go to next line
.018206	20 5c 80	jsr $01805c			jsr 	IFT_NewLine					; go to next line.
.018209	86 10		stx $10				stx 	zTemp1 						; save line read address
.01820b	84 11		sty $11				sty 	zTemp1+1
.01820d	a0 00		ldy #$00			ldy 	#0 							; get first character after the prompt.
.01820f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018211	c9 3f		cmp #$3f			cmp 	#"?"
.018213	f0 04		beq $018219			beq 	TIM_SkipFirst
.018215	c9 2e		cmp #$2e			cmp 	#"."						; if . skip it
.018217	d0 01		bne $01821a			bne 	TIM_NotDot
.018219					TIM_SkipFirst:
.018219	c8		iny				iny
.01821a					TIM_NotDot:
.01821a	b1 10		lda ($10),y			lda 	(zTemp1),y 					; get character
.01821c	c9 52		cmp #$52			cmp 	#"R"						; show registers
.01821e	f0 6b		beq $01828b			beq 	TIM_ShowRegisters
.018220	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.018222	f0 12		beq $018236			beq 	TIM_ShowMemory
.018224	c9 47		cmp #$47			cmp 	#"G"						; execute
.018226	f0 49		beq $018271			beq 	TIM_Execute
.018228	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.01822a	f0 07		beq $018233			beq 	TIM_GoLoadMemory
.01822c	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.01822e	d0 c7		bne $0181f7			bne 	TIM_Error
.018230	4c af 83	jmp $0183af			jmp 	TIM_UpdateRegisters
.018233					TIM_GoLoadMemory:
.018233	4c df 83	jmp $0183df			jmp 	TIM_LoadMemory
.018236					TIM_ShowMemory:
.018236	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018239	b0 bc		bcs $0181f7			bcs 	TIM_Error
.01823b	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.01823d	85 12		sta $12				sta 	zTemp2
.01823f	a5 15		lda $15				lda 	zTemp3+1
.018241	85 13		sta $13				sta 	zTemp2+1
.018243	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.018246	90 08		bcc $018250			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.018248	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.01824a	85 14		sta $14				sta 	zTemp3
.01824c	a5 13		lda $13				lda 	zTemp2+1
.01824e	85 15		sta $15				sta 	zTemp3+1
.018250					_TIMSM_Start:
.018250	20 03 83	jsr $018303			jsr 	TIM_WriteLine 				; write one line of hex out
.018253	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.018255	18		clc				clc
.018256	69 10		adc #$10			adc 	#16
.018258	85 12		sta $12				sta 	zTemp2
.01825a	90 02		bcc $01825e			bcc 	_TIMSM_NoCarry
.01825c	e6 13		inc $13				inc 	zTemp2+1
.01825e					_TIMSM_NoCarry:
.01825e	20 e1 81	jsr $0181e1			jsr 	IF_CheckBreak 				; check CTL+C
.018261	d0 0b		bne $01826e			bne 	_TIMSM_Ends 				; if pressed break out.
.018263	38		sec				sec 								; check past the end address in zTemp3
.018264	a5 14		lda $14				lda 	zTemp3
.018266	e5 12		sbc $12				sbc 	zTemp2
.018268	a5 15		lda $15				lda 	zTemp3+1
.01826a	e5 13		sbc $13				sbc 	zTemp2+1
.01826c	10 e2		bpl $018250			bpl 	_TIMSM_Start
.01826e					_TIMSM_Ends:
.01826e	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.018271					TIM_Execute:
.018271	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; get the execute address
.018274	b0 81		bcs $0181f7			bcs 	TIM_Error 					; not legitimate
.018276	ae c6 03	ldx $03c6			ldx 	TIM_SP 						; set up SP
.018279	9a		txs				txs
.01827a	ad c1 03	lda $03c1			lda 	TIM_SR 						; Status for PLP
.01827d	48		pha				pha
.01827e	ad c2 03	lda $03c2			lda 	TIM_A 						; restore AXYZ
.018281	ae c3 03	ldx $03c3			ldx 	TIM_X
.018284	ac c4 03	ldy $03c4			ldy 	TIM_Y
.018287	28		plp				plp 								; and PS Byte.
.018288	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.01828b					TIM_Start:
.01828b					TIM_ShowRegisters:
.01828b	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.01828e	8d c0 03	sta $03c0			sta 	TIM_IRQ+1
.018291	ad ff ff	lda $ffff			lda 	$FFFF
.018294	8d bf 03	sta $03bf			sta 	TIM_IRQ
.018297	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.018299					_TIMSR_Text:
.018299	bf ca 82 01	lda $0182ca,x			lda 	_TIMSR_Label,x
.01829d	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182a0	e8		inx				inx
.0182a1	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.0182a3	d0 f4		bne $018299			bne 	_TIMSR_Text
.0182a5	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.0182a7					_TIMSR_Skip:
.0182a7	e8		inx				inx
.0182a8					_TIMSR_LoopSpace:
.0182a8	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.0182aa	b0 04		bcs $0182b0			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.0182ac	8a		txa				txa
.0182ad	4a		lsr a				lsr 	a
.0182ae	b0 05		bcs $0182b5			bcs 	_TIMSR_NoSpace
.0182b0					_TIMSR_Space:
.0182b0	a9 20		lda #$20			lda 	#" "
.0182b2	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.0182b5					_TIMSR_NoSpace:
.0182b5	bd bd 03	lda $03bd,x			lda 	TIM_PC,x 					; output hex value.
.0182b8	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.0182bb	e8		inx				inx
.0182bc	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.0182be	f0 e7		beq $0182a7			beq 	_TIMSR_Skip
.0182c0	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.0182c2	d0 e4		bne $0182a8			bne 	_TimSR_LoopSpace
.0182c4	20 5c 80	jsr $01805c			jsr 	IFT_NewLine 				; new line
.0182c7	4c fe 81	jmp $0181fe			jmp	 	TIM_NewCommand 				; new command.
.0182ca					_TIMSR_Label:
>0182ca	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>0182d2	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>0182e2	52
>0182e3	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.0182ea					_TIMSR_LabelEnd:
.0182ea					TIM_WriteHex:
.0182ea	48		pha				pha 								; save A
.0182eb	4a		lsr a				lsr 	a 							; shift MSB->LSB
.0182ec	4a		lsr a				lsr 	a
.0182ed	4a		lsr a				lsr 	a
.0182ee	4a		lsr a				lsr 	a
.0182ef	20 f3 82	jsr $0182f3			jsr 	_TIMWH_Nibble 				; print MSB
.0182f2	68		pla				pla 								; restore and print LSB
.0182f3					_TIMWH_Nibble:
.0182f3	48		pha				pha
.0182f4	29 0f		and #$0f			and 	#15 						; mask out
.0182f6	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.0182f8	90 02		bcc $0182fc			bcc 	_TIMWHNoLetter
.0182fa	69 06		adc #$06			adc 	#6
.0182fc					_TIMWHNoLetter:
.0182fc	69 30		adc #$30			adc 	#48
.0182fe	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter 			; print it out.
.018301	68		pla				pla
.018302	60		rts				rts
.018303					TIM_WriteLine:
.018303	a9 2e		lda #$2e			lda 	#"." 						; prompt
.018305	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.018308	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.01830a	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01830d	a5 13		lda $13				lda 	zTemp2+1 					; write address
.01830f	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018312	a5 12		lda $12				lda 	zTemp2
.018314	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018317	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.018319					_TIMWL_Loop:
.018319	a9 20		lda #$20			lda 	#" "
.01831b	20 35 80	jsr $018035			jsr 	IFT_PrintCharacter
.01831e	b1 12		lda ($12),y			lda 	(zTemp2),y
.018320	20 ea 82	jsr $0182ea			jsr 	TIM_WriteHex
.018323	c8		iny				iny
.018324	c0 10		cpy #$10			cpy 	#16
.018326	d0 f1		bne $018319			bne 	_TIMWL_Loop
.018328	4c 5c 80	jmp $01805c			jmp 	IFT_NewLine 				; new line and exit
.01832b					TIM_GetHex:
.01832b	c8		iny				iny
.01832c	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.01832e	c9 20		cmp #$20			cmp 	#32
.018330	f0 f9		beq $01832b			beq 	TIM_GetHex
.018332	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.018334	f0 f5		beq $01832b			beq 	TIM_GetHex
.018336	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.018339	b0 23		bcs $01835e			bcs 	_TIMGH_Exit					; if first bad then exit now.
.01833b	a9 00		lda #$00			lda 	#0 							; zero result
.01833d	85 14		sta $14				sta 	zTemp3
.01833f	85 15		sta $15				sta 	zTemp3+1
.018341					_TIM_GHLoop:
.018341	20 5f 83	jsr $01835f			jsr 	TIM_GetHexCharacter 		; get next character
.018344	b0 17		bcs $01835d			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.018346	c8		iny				iny 								; skip over it.
.018347	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.018349	26 15		rol $15				rol 	zTemp3+1
.01834b	06 14		asl $14				asl 	zTemp3 						; now x 2
.01834d	26 15		rol $15				rol 	zTemp3+1
.01834f	06 14		asl $14				asl 	zTemp3						; now x 4
.018351	26 15		rol $15				rol 	zTemp3+1
.018353	06 14		asl $14				asl 	zTemp3 						; now x 8
.018355	26 15		rol $15				rol 	zTemp3+1
.018357	05 14		ora $14				ora 	zTemp3 						; OR result in
.018359	85 14		sta $14				sta 	zTemp3
.01835b	80 e4		bra $018341			bra 	_TIM_GHLoop 				; loop round again.
.01835d					_TIMGH_Okay:
.01835d	18		clc				clc
.01835e					_TIMGH_Exit:
.01835e	60		rts				rts
.01835f					TIM_GetHexCharacter:
.01835f	b1 10		lda ($10),y			lda 	(zTemp1),y
.018361	38		sec				sec
.018362	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.018364	90 0e		bcc $018374			bcc 	_TIM_GHCFail
.018366	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.018368	90 0b		bcc $018375			bcc 	_TIM_GHCExit
.01836a	c9 11		cmp #$11			cmp 	#65-48						; < A
.01836c	90 06		bcc $018374			bcc		_TIM_GHCFail
.01836e	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.018370	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.018372	90 01		bcc $018375			bcc		_TIM_GHCExit
.018374					_TIM_GHCFail:
.018374	38		sec				sec
.018375					_TIM_GHCExit:
.018375	60		rts				rts
.018376					TIM_BreakVector:
.018376	da		phx				phx									; save X/A on stack
.018377	48		pha				pha
.018378	ba		tsx				tsx 								; X points to S
.018379	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.01837c	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.01837e	d0 03		bne $018383			bne 	_TIMBreak					; if set, it's BRK
.018380	68		pla				pla 								; abandon routine.
.018381	fa		plx				plx
.018382	40		rti				rti
.018383					_TIMBreak:
.018383	68		pla				pla 								; save A X Y and maybe Z
.018384	8d c2 03	sta $03c2			sta 	TIM_A
.018387	fa		plx				plx
.018388	8e c3 03	stx $03c3			stx 	TIM_X
.01838b	8c c4 03	sty $03c4			sty 	TIM_Y
.01838e	68		pla				pla 								; get Status Register
.01838f	8d c1 03	sta $03c1			sta 	TIM_SR
.018392	68		pla				pla
.018393	8d be 03	sta $03be			sta 	TIM_PC+1 					; save calling address
.018396	68		pla				pla
.018397	8d bd 03	sta $03bd			sta 	TIM_PC 						; high byte
.01839a	ad be 03	lda $03be			lda 	TIM_PC+1 					; dec PC to point right.
.01839d	d0 03		bne $0183a2			bne 	_TIMDecrement 				; brk bumps it.
.01839f	ce bd 03	dec $03bd			dec 	TIM_PC
.0183a2					_TIMDecrement:
.0183a2	ce be 03	dec $03be			dec 	TIM_PC+1
.0183a5	ba		tsx				tsx 								; and copy SP
.0183a6	8e c6 03	stx $03c6			stx 	TIM_SP
.0183a9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.0183ab	9a		txs				txs
.0183ac	4c 8b 82	jmp $01828b			jmp 	TIM_Start 					; and start up TIM monitor.
.0183af					TIM_UpdateRegisters:
.0183af	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; PC
.0183b2	b0 28		bcs $0183dc			bcs 	_TIMURFail
.0183b4	a5 14		lda $14				lda 	zTemp3
.0183b6	8d be 03	sta $03be			sta 	Tim_PC+1
.0183b9	a5 15		lda $15				lda 	zTemp3+1
.0183bb	8d bd 03	sta $03bd			sta 	Tim_PC
.0183be	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; ignore IRQ
.0183c1	b0 19		bcs $0183dc			bcs 	_TIMURFail
.0183c3	a2 00		ldx #$00			ldx 	#0
.0183c5					_TIM_URLoop:
.0183c5	e0 04		cpx #$04			cpx 	#Tim_Z-Tim_SR
.0183c7	d0 01		bne $0183ca			bne 	_TIM_1
.0183c9	e8		inx				inx
.0183ca					_TIM_1:
.0183ca	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; registers
.0183cd	b0 0d		bcs $0183dc			bcs 	_TIMURFail
.0183cf	a5 14		lda $14				lda 	zTemp3
.0183d1	9d c1 03	sta $03c1,x			sta 	Tim_SR,x
.0183d4	e8		inx				inx
.0183d5	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.0183d7	d0 ec		bne $0183c5			bne 	_TIM_URLoop
.0183d9	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand
.0183dc					_TIMURFail:
.0183dc	4c f7 81	jmp $0181f7			jmp 	TIM_Error
.0183df					TIM_LoadMemory:
.0183df	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; target address => zTemp2
.0183e2	a5 14		lda $14				lda 	zTemp3
.0183e4	85 12		sta $12				sta 	zTemp2
.0183e6	a5 15		lda $15				lda 	zTemp3+1
.0183e8	85 13		sta $13				sta 	zTemp2+1
.0183ea					_TIM_LMLoop:
.0183ea	20 2b 83	jsr $01832b			jsr 	TIM_GetHex 					; next byte ?
.0183ed	b0 0e		bcs $0183fd			bcs 	_TIMLMDone 					; no more
.0183ef	a2 00		ldx #$00			ldx 	#0							; write out.
.0183f1	a5 14		lda $14				lda 	zTemp3
.0183f3	81 12		sta ($12,x)			sta 	(zTemp2,x)
.0183f5	e6 12		inc $12				inc 	zTemp2 						; bump address
.0183f7	d0 f1		bne $0183ea			bne 	_TIM_LMLoop
.0183f9	e6 13		inc $13				inc 	zTemp2+1
.0183fb	80 ed		bra $0183ea			bra 	_TIM_LMLoop
.0183fd					_TIMLMDone:
.0183fd	4c fe 81	jmp $0181fe			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/skip.asm

.018400					StructureSearchSingle:
.018400	a2 00		ldx #$00			ldx 	#0
.018402					StructureSearchDouble:
.018402	85 10		sta $10				sta 	zTemp1 						; save the target on zTemp1,zTemp1+1
.018404	86 11		stx $11				stx 	zTemp1+1
.018406	a9 00		lda #$00			lda 	#0 							; set the structure depth to zero (zTemp2)
.018408	85 12		sta $12				sta 	zTemp2
.01840a	80 18		bra $018424			bra 	_SSWLoop 					; jump in, start scanning from here.
.01840c					_SSWNextLine:
.01840c	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01840e	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018410	18		clc				clc
.018411	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018413	85 16		sta $16				sta 	zCodePtr
.018415	90 02		bcc $018419			bcc 	_SNLNoCarry
.018417	e6 17		inc $17				inc 	zCodePtr+1
.018419					_SNLNoCarry:
.018419	a0 00		ldy #$00			ldy 	#0
.01841b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01841d	c9 00		cmp #$00			cmp 	#0					 		; if zero, fail.
.01841f	f0 54		beq $018475			beq 	_SSWFail
.018421	c8		iny				iny
.018422	c8		iny				iny
.018423					_SSWNextSimple:
.018423	c8		iny				iny
.018424					_SSWLoop:
.018424	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018426	c9 00		cmp #$00			cmp 	#0 							; end of line ?
.018428	f0 e2		beq $01840c			beq 	_SSWNextLine 				; if so, then next line
.01842a	10 f7		bpl $018423			bpl 	_SSWNextSimple 				; needs to be a token, just skip char/number.
.01842c	a6 12		ldx $12				ldx 	zTemp2 						; check structure count
.01842e	d0 08		bne $018438			bne 	_SSWCheckUpDown 			; if it's non zero, then a match doesn't work.
.018430	c5 10		cmp $10				cmp 	zTemp1 						; found the right keyword, either choice.
.018432	f0 2d		beq $018461			beq 	_SSWFound 					; so exit.
.018434	c5 11		cmp $11				cmp 	zTemp1+1
.018436	f0 29		beq $018461			beq 	_SSWFound
.018438					_SSWCheckUpDown:
.018438	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus 			; if < keyword +
.01843a	90 10		bcc $01844c			bcc 	_SSWNext
.01843c	c9 93		cmp #$93			cmp 	#firstKeywordMinus 			; if < keyword - then as keyword +
.01843e	90 08		bcc $018448			bcc 	_SSWPlus
.018440	c9 98		cmp #$98			cmp 	#firstUnaryFunction			; if < first unary down as keyword -
.018442	b0 08		bcs $01844c			bcs 	_SSWNext
.018444	c6 12		dec $12				dec 	zTemp2 						; reduce structure count.
.018446	c6 12		dec $12				dec 	zTemp2
.018448					_SSWPlus:
.018448	e6 12		inc $12				inc 	zTemp2
.01844a	30 16		bmi $018462			bmi 	_SSWUnder					; error if driven -ve
.01844c					_SSWNext:
.01844c	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.01844e	c8		iny				iny 								; skip
.01844f	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018451	90 0c		bcc $01845f			bcc 	_SEDone 					; so just skip over it.
.018453	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018455	90 07		bcc $01845e			bcc 	_SEDouble
.018457	98		tya				tya 								; this is Y + 1
.018458	18		clc				clc
.018459	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.01845b	a8		tay				tay 								; back in Y.
.01845c	88		dey				dey 								; fix up, one for the +1, one for the iny
.01845d	88		dey				dey
.01845e					_SEDouble:
.01845e	c8		iny				iny
.01845f					_SEDone:
.01845f	80 c3		bra $018424			bra 	_SSWLoop
.018461					_SSWFound:
.018461	60		rts				rts
.018462					_SSWUnder:
.018462	20 57 85	jsr $018557			jsr ERR_Handler
>018465	53 74 72 75 63 74 75 72			.text "Structure order",0
>01846d	65 20 6f 72 64 65 72 00
.018475					_SSWFail:
.018475	20 57 85	jsr $018557			jsr ERR_Handler
>018478	43 61 6e 27 74 20 66 69			.text "Can't find structure",0
>018480	6e 64 20 73 74 72 75 63 74 75 72 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/stack.asm

.01848d					StackReset:
.01848d	48		pha				pha
.01848e	5a		phy				phy
.01848f	a9 00		lda #$00			lda 	#(BasicStack & $FF) 		; reset pointer
.018491	85 26		sta $26				sta 	zBasicSP
.018493	a9 04		lda #$04			lda 	#(BasicStack >> 8)
.018495	85 27		sta $27				sta 	zBasicSP+1
.018497	a0 00		ldy #$00			ldy 	#0 							; reset stack top to $00 which cannot
.018499	98		tya				tya 								; be a legal token.
.01849a	91 26		sta ($26),y			sta 	(zBasicSP),y
.01849c	7a		ply				ply
.01849d	68		pla				pla
.01849e	60		rts				rts
.01849f					StackPushFrame:
.01849f	48		pha				pha
.0184a0	5a		phy				phy
.0184a1	1a		inc a				inc 	a 							; one extra byte in frame, for the marker.
.0184a2	48		pha				pha 								; save it.
.0184a3	29 0f		and #$0f			and 	#$0F 						; lower 4 bits
.0184a5	18		clc				clc 								; add to Basic Stack
.0184a6	65 26		adc $26				adc 	zBasicSP
.0184a8	85 26		sta $26				sta 	zBasicSP
.0184aa	90 02		bcc $0184ae			bcc 	_SPFNoBump
.0184ac	e6 27		inc $27				inc 	zBasicSP+1
.0184ae					_SPFNoBump:
.0184ae	a0 00		ldy #$00			ldy 	#0
.0184b0	68		pla				pla
.0184b1	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184b3	7a		ply				ply
.0184b4	68		pla				pla
.0184b5	60		rts				rts
.0184b6					StackPopFrame:
.0184b6	48		pha				pha
.0184b7	5a		phy				phy
.0184b8	a0 00		ldy #$00			ldy 	#0 							; compare with top of stack using EOR
.0184ba	51 26		eor ($26),y			eor 	(zBasicSP),y
.0184bc	29 f0		and #$f0			and 	#$F0 						; top 4 bits zero, match
.0184be	d0 12		bne $0184d2			bne 	SPFError 					; mixed structures
.0184c0	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; get size from byte
.0184c2	29 0f		and #$0f			and 	#$0F
.0184c4	49 ff		eor #$ff			eor 	#$FF						; 2's complement
.0184c6	38		sec				sec
.0184c7	65 26		adc $26				adc 	zBasicSP
.0184c9	85 26		sta $26				sta 	zBasicSP
.0184cb	b0 02		bcs $0184cf			bcs 	_SPFNoBump
.0184cd	c6 27		dec $27				dec 	zBasicSP+1
.0184cf					_SPFNoBump:
.0184cf	7a		ply				ply
.0184d0	68		pla				pla
.0184d1	60		rts				rts
.0184d2					SPFError:
.0184d2	20 57 85	jsr $018557			jsr ERR_Handler
>0184d5	4d 69 78 65 64 20 53 74			.text "Mixed Structures",0
>0184dd	72 75 63 74 75 72 65 73 00
.0184e6					StackSavePosition:
.0184e6	98		tya				tya
.0184e7	5a		phy				phy
.0184e8	a0 05		ldy #$05			ldy 	#5
.0184ea	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184ec	a0 01		ldy #$01			ldy 	#1
.0184ee	a5 16		lda $16				lda 	zCodePtr+0 					; 4 bytes, could reduce this for 65816/6502
.0184f0	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f2	c8		iny				iny
.0184f3	a5 17		lda $17				lda 	zCodePtr+1
.0184f5	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184f7	c8		iny				iny
.0184f8	a5 18		lda $18				lda 	zCodePtr+2
.0184fa	91 26		sta ($26),y			sta 	(zBasicSP),y
.0184fc	c8		iny				iny
.0184fd	a5 19		lda $19				lda 	zCodePtr+3
.0184ff	91 26		sta ($26),y			sta 	(zBasicSP),y
.018501	7a		ply				ply
.018502	60		rts				rts
.018503					StackRestorePosition:
.018503	5a		phy				phy
.018504	a0 01		ldy #$01			ldy 	#1 							; copy 4 bytes that are the pointer
.018506	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018508	85 16		sta $16				sta 	zCodePtr+0
.01850a	c8		iny				iny
.01850b	b1 26		lda ($26),y			lda 	(zBasicSP),y
.01850d	85 17		sta $17				sta 	zCodePtr+1
.01850f	c8		iny				iny
.018510	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018512	85 18		sta $18				sta 	zCodePtr+2
.018514	c8		iny				iny
.018515	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018517	85 19		sta $19				sta 	zCodePtr+3
.018519	c8		iny				iny
.01851a	b1 26		lda ($26),y			lda 	(zBasicSP),y 				; offset
.01851c	7a		ply				ply 								; restore Y
.01851d	a8		tay				tay
.01851e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/vectors.asm

.01851f					CharPrint:
.01851f	4c 35 80	jmp $018035			jmp 	IFT_PrintCharacter
.018522					CharGet:
.018522	4c e6 81	jmp $0181e6			jmp 	IF_GetKey
.018525					CheckBreak:
.018525	4c e1 81	jmp $0181e1			jmp 	IF_CheckBreak

;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/errors.asm

.018528					SyntaxError:
.018528	20 57 85	jsr $018557			jsr 	ERR_Handler
>01852b	53 79 6e 74 61 78 20 45				.text 	"Syntax Error",0
>018533	72 72 6f 72 00
.018538					TypeError:
.018538	20 57 85	jsr $018557			jsr 	ERR_Handler
>01853b	57 72 6f 6e 67 20 74 79				.text 	"Wrong type",0
>018543	70 65 00
.018546					BadParamError:
.018546	20 57 85	jsr $018557			jsr 	ERR_Handler
>018549	42 61 64 20 50 61 72 61				.text 	"Bad Parameter",0
>018551	6d 65 74 65 72 00
.018557					ERR_Handler:
.018557	a0 00		ldy #$00			ldy 	#0
.018559	c8		iny				iny
.01855a	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01855c	85 80		sta $80				sta 	XS_Mantissa
.01855e	c8		iny				iny
.01855f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018561	85 81		sta $81				sta 	XS_Mantissa+1
.018563	fa		plx				plx 								; address in XY
.018564	7a		ply				ply
.018565	e8		inx				inx 								; bump, because of RTS/JSR address -1
.018566	d0 01		bne $018569			bne 	_EHNoSkip
.018568	c8		iny				iny
.018569					_EHNoSkip:
.018569	20 88 85	jsr $018588			jsr 	PrintROMMessage 			; print message from ROM.
.01856c	a5 80		lda $80				lda 	XS_Mantissa					; line number = 0
.01856e	05 81		ora $81				ora 	XS_Mantissa+1
.018570	f0 0c		beq $01857e			beq 	_EHNoLine
.018572	a2 83		ldx #$83			ldx 	#_EHAt & $FF 				; print " at "
.018574	a0 85		ldy #$85			ldy 	#(_EHAt >> 8) & $FF
.018576	20 88 85	jsr $018588			jsr 	PrintROMMessage
.018579	a2 00		ldx #$00			ldx 	#0 							; Print line number
.01857b	20 9d 85	jsr $01859d			jsr 	Print16BitInteger
.01857e					_EHNoLine:
.01857e	80 fe		bra $01857e			bra 	_EHNoLine
.018580	4c 10 88	jmp $018810			jmp 	WarmStart
>018583	20 61 74 20 00			_EHAt:	.text 	" at ",0
.018588					PrintROMMessage:
.018588	86 1a		stx $1a				stx 	zLTemp1 					; save addres
.01858a	84 1b		sty $1b				sty 	zLTemp1+1
.01858c	4b		phk				phk
.01858d	68		pla				pla
.01858e	85 1c		sta $1c				sta 	ZLTemp1+2
.018590	a0 00		ldy #$00			ldy 	#0
.018592					_PRMLoop:
.018592	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018594	f0 06		beq $01859c			beq		_PRMExit
.018596	c8		iny				iny
.018597	20 1f 85	jsr $01851f			jsr 	CharPrint
.01859a	80 f6		bra $018592			bra 	_PRMLoop
.01859c					_PRMExit:
.01859c	60		rts				rts
.01859d					Print16BitInteger:
.01859d	a9 00		lda #$00			lda 	#0 							; make 32 bit
.01859f	85 82		sta $82				sta 	XS_Mantissa+2
.0185a1	85 83		sta $83				sta 	XS_Mantissa+3
.0185a3					Print32BitInteger:
.0185a3	a9 00		lda #$00			lda 	#0
.0185a5	8d 14 03	sta $0314			sta 	NumBufX 					; reset the conversion pointer
.0185a8	aa		tax				tax 								; convert bottom level.
.0185a9	20 7d 9c	jsr $019c7d			jsr 	INTToString 				; make string
.0185ac	a2 00		ldx #$00			ldx 	#0 							; print buffer
.0185ae	bd 15 03	lda $0315,x	_P1Loop:lda 	Num_Buffer,x
.0185b1	f0 06		beq $0185b9			beq 	_P1Exit
.0185b3	20 1f 85	jsr $01851f			jsr 	CharPrint
.0185b6	e8		inx				inx
.0185b7	80 f5		bra $0185ae			bra 	_P1Loop
.0185b9	8a		txa		_P1Exit:txa 								; return chars printed.
.0185ba	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/core.asm


;******  Processing file: modules/basic/../basic/header/header.src

=$93					firstKeywordMinus = $93
=$8f					firstKeywordPlus = $8f
=$98					firstUnaryFunction = $98
=$b6					lastUnaryFunction = $b6
.0185bb					VectorTable:
>0185bb	f1 90					.word BinaryOp_And         & $FFFF ; $80 and
>0185bd	0d 91					.word BinaryOp_Or          & $FFFF ; $81 or
>0185bf	29 91					.word BinaryOp_Xor         & $FFFF ; $82 xor
>0185c1	29 91					.word BinaryOp_Eor         & $FFFF ; $83 eor
>0185c3	60 91					.word Binary_Equal         & $FFFF ; $84 =
>0185c5	7a 91					.word Binary_NotEqual      & $FFFF ; $85 <>
>0185c7	83 91					.word Binary_Less          & $FFFF ; $86 <
>0185c9	8c 91					.word Binary_LessEqual     & $FFFF ; $87 <=
>0185cb	9e 91					.word Binary_Greater       & $FFFF ; $88 >
>0185cd	95 91					.word Binary_GreaterEqual  & $FFFF ; $89 >=
>0185cf	23 92					.word BinaryOp_Add         & $FFFF ; $8a +
>0185d1	3f 92					.word BinaryOp_Subtract    & $FFFF ; $8b -
>0185d3	50 92					.word BinaryOp_Multiply    & $FFFF ; $8c *
>0185d5	61 92					.word BinaryOp_Divide      & $FFFF ; $8d /
>0185d7	79 86					.word NotImplemented       & $FFFF ; $8e ^
>0185d9	e1 8a					.word Command_IF           & $FFFF ; $8f if
>0185db	ed 8e					.word Command_WHILE        & $FFFF ; $90 while
>0185dd	15 8f					.word Command_REPEAT       & $FFFF ; $91 repeat
>0185df	72 89					.word Command_FOR          & $FFFF ; $92 for
>0185e1	79 86					.word NotImplemented       & $FFFF ; $93 then
>0185e3	3e 8b					.word Command_ENDIF        & $FFFF ; $94 endif
>0185e5	0a 8f					.word Command_WEND         & $FFFF ; $95 wend
>0185e7	1e 8f					.word Command_UNTIL        & $FFFF ; $96 until
>0185e9	ef 89					.word Command_NEXT         & $FFFF ; $97 next
>0185eb	79 86					.word NotImplemented       & $FFFF ; $98 not
>0185ed	79 86					.word NotImplemented       & $FFFF ; $99 fn(
>0185ef	66 93					.word Unary_Abs            & $FFFF ; $9a abs(
>0185f1	a7 94					.word Unary_Asc            & $FFFF ; $9b asc(
>0185f3	a9 a3					.word Unary_Int            & $FFFF ; $9c int(
>0185f5	80 93					.word Unary_Peek           & $FFFF ; $9d peek(
>0185f7	2a a3					.word Unary_Rnd            & $FFFF ; $9e rnd(
>0185f9	e7 93					.word Unary_Usr            & $FFFF ; $9f usr(
>0185fb	e6 94					.word Unary_Left           & $FFFF ; $a0 left$(
>0185fd	fb 94					.word Unary_Right          & $FFFF ; $a1 right$(
>0185ff	cd 94					.word Unary_Mid            & $FFFF ; $a2 mid$(
>018601	44 96					.word Unary_Spc            & $FFFF ; $a3 spc(
>018603	75 94					.word Unary_Str            & $FFFF ; $a4 str$(
>018605	09 94					.word Unary_Val            & $FFFF ; $a5 val(
>018607	be 94					.word Unary_Len            & $FFFF ; $a6 len(
>018609	73 95					.word Unary_Hex            & $FFFF ; $a7 hex$(
>01860b	79 86					.word NotImplemented       & $FFFF ; $a8 sin(
>01860d	79 86					.word NotImplemented       & $FFFF ; $a9 cos(
>01860f	79 86					.word NotImplemented       & $FFFF ; $aa tan(
>018611	79 86					.word NotImplemented       & $FFFF ; $ab atn(
>018613	79 86					.word NotImplemented       & $FFFF ; $ac exp(
>018615	79 86					.word NotImplemented       & $FFFF ; $ad log(
>018617	79 86					.word NotImplemented       & $FFFF ; $ae sqr(
>018619	c9 95					.word Unary_Dec            & $FFFF ; $af dec(
>01861b	84 93					.word Unary_Deek           & $FFFF ; $b0 deek(
>01861d	88 93					.word Unary_Leek           & $FFFF ; $b1 leek(
>01861f	b4 93					.word Unary_Mod            & $FFFF ; $b2 mod(
>018621	20 93					.word Unary_Sgn            & $FFFF ; $b3 sgn(
>018623	26 96					.word Unary_Chr            & $FFFF ; $b4 chr$(
>018625	79 86					.word NotImplemented       & $FFFF ; $b5 pos(
>018627	79 86					.word NotImplemented       & $FFFF ; $b6 tab(
>018629	79 86					.word NotImplemented       & $FFFF ; $b7 $
>01862b	79 86					.word NotImplemented       & $FFFF ; $b8 $(
>01862d	79 86					.word NotImplemented       & $FFFF ; $b9 #
>01862f	79 86					.word NotImplemented       & $FFFF ; $ba #(
>018631	79 86					.word NotImplemented       & $FFFF ; $bb %
>018633	79 86					.word NotImplemented       & $FFFF ; $bc %(
>018635	79 86					.word NotImplemented       & $FFFF ; $bd (
>018637	79 86					.word NotImplemented       & $FFFF ; $be )
>018639	79 86					.word NotImplemented       & $FFFF ; $bf ,
>01863b	71 89					.word Command_COLON        & $FFFF ; $c0 :
>01863d	79 86					.word NotImplemented       & $FFFF ; $c1 ;
>01863f	79 86					.word NotImplemented       & $FFFF ; $c2 def
>018641	d1 8e					.word Command_CLR          & $FFFF ; $c3 clr
>018643	e5 8e					.word Command_STOP         & $FFFF ; $c4 stop
>018645	79 86					.word NotImplemented       & $FFFF ; $c5 data
>018647	79 86					.word NotImplemented       & $FFFF ; $c6 read
>018649	1d 88					.word Command_DIM          & $FFFF ; $c7 dim
>01864b	79 86					.word NotImplemented       & $FFFF ; $c8 to
>01864d	79 86					.word NotImplemented       & $FFFF ; $c9 step
>01864f	4d 8e					.word Command_GOSUB        & $FFFF ; $ca gosub
>018651	5b 8e					.word Command_RETURN       & $FFFF ; $cb return
>018653	47 8e					.word Command_GOTO         & $FFFF ; $cc goto
>018655	dd 8a					.word Command_END          & $FFFF ; $cd end
>018657	79 86					.word NotImplemented       & $FFFF ; $ce input
>018659	a2 8a					.word Command_LET          & $FFFF ; $cf let
>01865b	44 8b					.word Command_LIST         & $FFFF ; $d0 list
>01865d	f0 8d					.word Command_NEW          & $FFFF ; $d1 new
>01865f	0c 8e					.word Command_OLD          & $FFFF ; $d2 old
>018661	79 86					.word NotImplemented       & $FFFF ; $d3 on
>018663	79 86					.word NotImplemented       & $FFFF ; $d4 restore
>018665	bf 8d					.word Command_POKE         & $FFFF ; $d5 poke
>018667	38 8d					.word Command_PRINT        & $FFFF ; $d6 print
>018669	e3 88					.word Command_RUN          & $FFFF ; $d7 run
>01866b	a5 88					.word Command_WAIT         & $FFFF ; $d8 wait
>01866d	c3 8a					.word Command_SYS          & $FFFF ; $d9 sys
>01866f	c3 8d					.word Command_DOKE         & $FFFF ; $da doke
>018671	c7 8d					.word Command_LOKE         & $FFFF ; $db loke
>018673	a7 8d					.word Command_ASSERT       & $FFFF ; $dc assert
>018675	79 86					.word NotImplemented       & $FFFF ; $dd get
>018677	38 8b					.word Command_ELSE         & $FFFF ; $de else
.018679					NotImplemented:
.018679	20 57 85	jsr $018557			jsr ERR_Handler
>01867c	4e 6f 74 20 69 6d 70 6c			.text "Not implemented",0
>018684	65 6d 65 6e 74 65 64 00
.01868c					BinaryPrecedence:
>01868c	01					.byte 1    ; $80 and
>01868d	01					.byte 1    ; $81 or
>01868e	01					.byte 1    ; $82 xor
>01868f	01					.byte 1    ; $83 eor
>018690	02					.byte 2    ; $84 =
>018691	02					.byte 2    ; $85 <>
>018692	02					.byte 2    ; $86 <
>018693	02					.byte 2    ; $87 <=
>018694	02					.byte 2    ; $88 >
>018695	02					.byte 2    ; $89 >=
>018696	03					.byte 3    ; $8a +
>018697	03					.byte 3    ; $8b -
>018698	04					.byte 4    ; $8c *
>018699	04					.byte 4    ; $8d /
>01869a	05					.byte 5    ; $8e ^
.01869b					KeywordText:
>01869b	41 4e c4				.byte $41,$4e,$c4                      ; $80 and
>01869e	4f d2					.byte $4f,$d2                          ; $81 or
>0186a0	58 4f d2				.byte $58,$4f,$d2                      ; $82 xor
>0186a3	45 4f d2				.byte $45,$4f,$d2                      ; $83 eor
>0186a6	bd					.byte $bd                              ; $84 =
>0186a7	3c be					.byte $3c,$be                          ; $85 <>
>0186a9	bc					.byte $bc                              ; $86 <
>0186aa	3c bd					.byte $3c,$bd                          ; $87 <=
>0186ac	be					.byte $be                              ; $88 >
>0186ad	3e bd					.byte $3e,$bd                          ; $89 >=
>0186af	ab					.byte $ab                              ; $8a +
>0186b0	ad					.byte $ad                              ; $8b -
>0186b1	aa					.byte $aa                              ; $8c *
>0186b2	af					.byte $af                              ; $8d /
>0186b3	de					.byte $de                              ; $8e ^
>0186b4	49 c6					.byte $49,$c6                          ; $8f if
>0186b6	57 48 49 4c c5				.byte $57,$48,$49,$4c,$c5              ; $90 while
>0186bb	52 45 50 45 41 d4			.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
>0186c1	46 4f d2				.byte $46,$4f,$d2                      ; $92 for
>0186c4	54 48 45 ce				.byte $54,$48,$45,$ce                  ; $93 then
>0186c8	45 4e 44 49 c6				.byte $45,$4e,$44,$49,$c6              ; $94 endif
>0186cd	57 45 4e c4				.byte $57,$45,$4e,$c4                  ; $95 wend
>0186d1	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc              ; $96 until
>0186d6	4e 45 58 d4				.byte $4e,$45,$58,$d4                  ; $97 next
>0186da	4e 4f d4				.byte $4e,$4f,$d4                      ; $98 not
>0186dd	46 4e a8				.byte $46,$4e,$a8                      ; $99 fn(
>0186e0	41 42 53 a8				.byte $41,$42,$53,$a8                  ; $9a abs(
>0186e4	41 53 43 a8				.byte $41,$53,$43,$a8                  ; $9b asc(
>0186e8	49 4e 54 a8				.byte $49,$4e,$54,$a8                  ; $9c int(
>0186ec	50 45 45 4b a8				.byte $50,$45,$45,$4b,$a8              ; $9d peek(
>0186f1	52 4e 44 a8				.byte $52,$4e,$44,$a8                  ; $9e rnd(
>0186f5	55 53 52 a8				.byte $55,$53,$52,$a8                  ; $9f usr(
>0186f9	4c 45 46 54 24 a8			.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
>0186ff	52 49 47 48 54 24 a8			.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
>018706	4d 49 44 24 a8				.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
>01870b	53 50 43 a8				.byte $53,$50,$43,$a8                  ; $a3 spc(
>01870f	53 54 52 24 a8				.byte $53,$54,$52,$24,$a8              ; $a4 str$(
>018714	56 41 4c a8				.byte $56,$41,$4c,$a8                  ; $a5 val(
>018718	4c 45 4e a8				.byte $4c,$45,$4e,$a8                  ; $a6 len(
>01871c	48 45 58 24 a8				.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
>018721	53 49 4e a8				.byte $53,$49,$4e,$a8                  ; $a8 sin(
>018725	43 4f 53 a8				.byte $43,$4f,$53,$a8                  ; $a9 cos(
>018729	54 41 4e a8				.byte $54,$41,$4e,$a8                  ; $aa tan(
>01872d	41 54 4e a8				.byte $41,$54,$4e,$a8                  ; $ab atn(
>018731	45 58 50 a8				.byte $45,$58,$50,$a8                  ; $ac exp(
>018735	4c 4f 47 a8				.byte $4c,$4f,$47,$a8                  ; $ad log(
>018739	53 51 52 a8				.byte $53,$51,$52,$a8                  ; $ae sqr(
>01873d	44 45 43 a8				.byte $44,$45,$43,$a8                  ; $af dec(
>018741	44 45 45 4b a8				.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
>018746	4c 45 45 4b a8				.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
>01874b	4d 4f 44 a8				.byte $4d,$4f,$44,$a8                  ; $b2 mod(
>01874f	53 47 4e a8				.byte $53,$47,$4e,$a8                  ; $b3 sgn(
>018753	43 48 52 24 a8				.byte $43,$48,$52,$24,$a8              ; $b4 chr$(
>018758	50 4f 53 a8				.byte $50,$4f,$53,$a8                  ; $b5 pos(
>01875c	54 41 42 a8				.byte $54,$41,$42,$a8                  ; $b6 tab(
>018760	a4					.byte $a4                              ; $b7 $
>018761	24 a8					.byte $24,$a8                          ; $b8 $(
>018763	a3					.byte $a3                              ; $b9 #
>018764	23 a8					.byte $23,$a8                          ; $ba #(
>018766	a5					.byte $a5                              ; $bb %
>018767	25 a8					.byte $25,$a8                          ; $bc %(
>018769	a8					.byte $a8                              ; $bd (
>01876a	a9					.byte $a9                              ; $be )
>01876b	ac					.byte $ac                              ; $bf ,
>01876c	ba					.byte $ba                              ; $c0 :
>01876d	bb					.byte $bb                              ; $c1 ;
>01876e	44 45 c6				.byte $44,$45,$c6                      ; $c2 def
>018771	43 4c d2				.byte $43,$4c,$d2                      ; $c3 clr
>018774	53 54 4f d0				.byte $53,$54,$4f,$d0                  ; $c4 stop
>018778	44 41 54 c1				.byte $44,$41,$54,$c1                  ; $c5 data
>01877c	52 45 41 c4				.byte $52,$45,$41,$c4                  ; $c6 read
>018780	44 49 cd				.byte $44,$49,$cd                      ; $c7 dim
>018783	54 cf					.byte $54,$cf                          ; $c8 to
>018785	53 54 45 d0				.byte $53,$54,$45,$d0                  ; $c9 step
>018789	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2              ; $ca gosub
>01878e	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce          ; $cb return
>018794	47 4f 54 cf				.byte $47,$4f,$54,$cf                  ; $cc goto
>018798	45 4e c4				.byte $45,$4e,$c4                      ; $cd end
>01879b	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4              ; $ce input
>0187a0	4c 45 d4				.byte $4c,$45,$d4                      ; $cf let
>0187a3	4c 49 53 d4				.byte $4c,$49,$53,$d4                  ; $d0 list
>0187a7	4e 45 d7				.byte $4e,$45,$d7                      ; $d1 new
>0187aa	4f 4c c4				.byte $4f,$4c,$c4                      ; $d2 old
>0187ad	4f ce					.byte $4f,$ce                          ; $d3 on
>0187af	52 45 53 54 4f 52 c5			.byte $52,$45,$53,$54,$4f,$52,$c5      ; $d4 restore
>0187b6	50 4f 4b c5				.byte $50,$4f,$4b,$c5                  ; $d5 poke
>0187ba	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4              ; $d6 print
>0187bf	52 55 ce				.byte $52,$55,$ce                      ; $d7 run
>0187c2	57 41 49 d4				.byte $57,$41,$49,$d4                  ; $d8 wait
>0187c6	53 59 d3				.byte $53,$59,$d3                      ; $d9 sys
>0187c9	44 4f 4b c5				.byte $44,$4f,$4b,$c5                  ; $da doke
>0187cd	4c 4f 4b c5				.byte $4c,$4f,$4b,$c5                  ; $db loke
>0187d1	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4          ; $dc assert
>0187d7	47 45 d4				.byte $47,$45,$d4                      ; $dd get
>0187da	45 4c 53 c5				.byte $45,$4c,$53,$c5                  ; $de else
>0187de	00					.byte $00
=$80					token_and = $80
=$81					token_or = $81
=$82					token_xor = $82
=$83					token_eor = $83
=$84					token_equal = $84
=$85					token_lessgreater = $85
=$86					token_less = $86
=$87					token_lessequal = $87
=$88					token_greater = $88
=$89					token_greaterequal = $89
=$8a					token_plus = $8a
=$8b					token_minus = $8b
=$8c					token_star = $8c
=$8d					token_slash = $8d
=$8e					token_hat = $8e
=$8f					token_if = $8f
=$90					token_while = $90
=$91					token_repeat = $91
=$92					token_for = $92
=$93					token_then = $93
=$94					token_endif = $94
=$95					token_wend = $95
=$96					token_until = $96
=$97					token_next = $97
=$98					token_not = $98
=$99					token_fn = $99
=$9a					token_abs = $9a
=$9b					token_asc = $9b
=$9c					token_int = $9c
=$9d					token_peek = $9d
=$9e					token_rnd = $9e
=$9f					token_usr = $9f
=$a0					token_leftdollarlparen = $a0
=$a1					token_rightdollarlparen = $a1
=$a2					token_middollarlparen = $a2
=$a3					token_spc = $a3
=$a4					token_strdollarlparen = $a4
=$a5					token_val = $a5
=$a6					token_len = $a6
=$a7					token_hexdollarlparen = $a7
=$a8					token_sin = $a8
=$a9					token_cos = $a9
=$aa					token_tan = $aa
=$ab					token_atn = $ab
=$ac					token_exp = $ac
=$ad					token_log = $ad
=$ae					token_sqr = $ae
=$af					token_dec = $af
=$b0					token_deek = $b0
=$b1					token_leek = $b1
=$b2					token_mod = $b2
=$b3					token_sgn = $b3
=$b4					token_chrdollarlparen = $b4
=$b5					token_pos = $b5
=$b6					token_tab = $b6
=$b7					token_dollar = $b7
=$b8					token_dollarlparen = $b8
=$b9					token_hash = $b9
=$ba					token_hashlparen = $ba
=$bb					token_percent = $bb
=$bc					token_percentlparen = $bc
=$bd					token_lparen = $bd
=$be					token_rparen = $be
=$bf					token_comma = $bf
=$c0					token_colon = $c0
=$c1					token_semicolon = $c1
=$c2					token_def = $c2
=$c3					token_clr = $c3
=$c4					token_stop = $c4
=$c5					token_data = $c5
=$c6					token_read = $c6
=$c7					token_dim = $c7
=$c8					token_to = $c8
=$c9					token_step = $c9
=$ca					token_gosub = $ca
=$cb					token_return = $cb
=$cc					token_goto = $cc
=$cd					token_end = $cd
=$ce					token_input = $ce
=$cf					token_let = $cf
=$d0					token_list = $d0
=$d1					token_new = $d1
=$d2					token_old = $d2
=$d3					token_on = $d3
=$d4					token_restore = $d4
=$d5					token_poke = $d5
=$d6					token_print = $d6
=$d7					token_run = $d7
=$d8					token_wait = $d8
=$d9					token_sys = $d9
=$da					token_doke = $da
=$db					token_loke = $db
=$dc					token_assert = $dc
=$dd					token_get = $dd
=$de					token_else = $de

;******  Return to file: modules/basic/core.asm

.0187df					BASIC_Start:
.0187df	20 a8 81	jsr $0181a8			jsr 	IF_Reset 					; set up and clear screen.
.0187e2	20 00 80	jsr $018000			jsr 	IFT_ClearScreen
.0187e5	a9 5c		lda #$5c			lda 	#$5C 						; JMP Long opcode
.0187e7	8d 10 03	sta $0310			sta 	LocalVector
.0187ea	8d 0c 03	sta $030c			sta 	UserVector
.0187ed	a9 f7		lda #$f7			lda 	#USRDefault & $FF 			; reset USR vector
.0187ef	8d 0d 03	sta $030d			sta 	UserVector+1
.0187f2	a9 93		lda #$93			lda 	#(USRDefault >> 8) & $FF
.0187f4	8d 0e 03	sta $030e			sta 	UserVector+2
.0187f7	a9 01		lda #$01			lda 	#(USRDefault >> 16) & $FF
.0187f9	8d 0f 03	sta $030f			sta 	UserVector+3
.0187fc	20 9e 96	jsr $01969e			jsr 	UpdateProgramEnd 			; update the program end.
.0187ff	20 d1 8e	jsr $018ed1			jsr 	ResetRunStatus 				; clear everything (CLR command)
.018802	c2 30		rep #$30			rep 	#$30
.018804	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018807	1b		tcs				tcs
.018808	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.01880b	e2 30		sep #$30			sep 	#$30
.01880d	4c e3 88	jmp $0188e3			jmp 	COMMAND_Run
.018810					WarmStart:
.018810	c2 30		rep #$30			rep 	#$30
.018812	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.018815	1b		tcs				tcs
.018816	a9 00 00	lda #$0000			lda 	#$0000 						; make sure A zero.
.018819	e2 30		sep #$30			sep 	#$30
.01881b	80 f3		bra $018810			bra 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/dim.asm

.01881d					Command_DIM:
.01881d	98		tya				tya
.01881e	48		pha				pha 								; push on stack.
.01881f	20 06 98	jsr $019806			jsr 	VariableExtract 			; get the identifier
.018822	ad 95 03	lda $0395			lda 	Var_Type 					; check it is an array
.018825	29 01		and #$01			and 	#1
.018827	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.018829	d0 6c		bne $018897			bne 	_CDIError
.01882b	a9 00		lda #$00			lda 	#0 							; reset the DIM index. The dimensions are
.01882d	8d b9 03	sta $03b9			sta 	UsrArrayIdx 				; built up here and copied in case we autodim
.018830					_CDIGetDimension:
.018830	ad b9 03	lda $03b9			lda 	UsrArrayIdx 				; done too many ?
.018833	c9 06		cmp #$06			cmp 	#ArrayMaxDim*2
.018835	f0 60		beq $018897			beq 	_CDIError
.018837	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; evaluate an index size
.01883a	a5 81		lda $81				lda 	XS_Mantissa+1 				; check in range 0-7FFF
.01883c	29 80		and #$80			and 	#$80
.01883e	05 82		ora $82				ora 	XS_Mantissa+2
.018840	05 83		ora $83				ora 	XS_Mantissa+3
.018842	d0 53		bne $018897			bne 	_CDIError
.018844	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy into the array table.
.018847	18		clc				clc 								; add 1 - max index => size.
.018848	a5 80		lda $80				lda 	XS_Mantissa+0
.01884a	69 01		adc #$01			adc 	#1
.01884c	9d b1 03	sta $03b1,x			sta 	UsrArrayDef+0,x
.01884f	a5 81		lda $81				lda 	XS_Mantissa+1
.018851	69 00		adc #$00			adc 	#0
.018853	9d b2 03	sta $03b2,x			sta 	UsrArrayDef+1,x
.018856	30 3f		bmi $018897			bmi 	_CDIError 					; could be dim a(32767)
.018858	e8		inx				inx 								; bump index.
.018859	e8		inx				inx
.01885a	8e b9 03	stx $03b9			stx 	UsrArrayIdx
.01885d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01885f	c8		iny				iny
.018860	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another dimension
.018862	f0 cc		beq $018830			beq 	_CDIGetDimension
.018864	88		dey				dey
.018865	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; closing ) present ?
.018868	ae b9 03	ldx $03b9			ldx 	UsrArrayIdx 				; copy USR array to default
.01886b	a9 ff		lda #$ff			lda 	#$FF 						; put end marker in ArrayDef
.01886d	9d aa 03	sta $03aa,x			sta 	ArrayDef+1,x
.018870					_CDICopy:
.018870	bd b1 03	lda $03b1,x			lda 	UsrArrayDef,x
.018873	9d a9 03	sta $03a9,x			sta 	ArrayDef,x
.018876	ca		dex				dex
.018877	10 f7		bpl $018870			bpl 	_CDICopy
.018879	68		pla				pla									; position of array identifier
.01887a	85 10		sta $10				sta 	zTemp1
.01887c	98		tya				tya
.01887d	48		pha				pha
.01887e	a5 10		lda $10				lda 	zTemp1 						; point to identifier
.018880	a8		tay				tay
.018881	20 06 98	jsr $019806			jsr 	VariableExtract 			; get the identifier
.018884	20 9f 9a	jsr $019a9f			jsr 	VariableLocate 				; check if it exists already.
.018887	b0 0e		bcs $018897			bcs 	_CDIError
.018889	20 92 98	jsr $019892			jsr 	VariableCreate 				; create it using the current ArrayDef
.01888c	68		pla				pla 								; restore code position
.01888d	a8		tay				tay
.01888e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018890	c8		iny				iny
.018891	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma, do another DIM
.018893	f0 88		beq $01881d			beq 	Command_DIM
.018895	88		dey				dey
.018896	60		rts				rts
.018897					_CDIError:
.018897	20 57 85	jsr $018557			jsr ERR_Handler
>01889a	42 61 64 20 44 49 4d 00			.text "Bad DIM",0
.0188a2					_CDISyntax:
.0188a2	4c 28 85	jmp $018528			jmp 	SyntaxError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/wait.asm

.0188a5					Command_WAIT:
.0188a5	20 d2 90	jsr $0190d2			jsr		EvaluateInteger 			; address
.0188a8	a2 06		ldx #$06			ldx 	#XS_Size 					; and mask.
.0188aa	20 02 97	jsr $019702			jsr 	CheckNextComma
.0188ad	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX
.0188b0	a9 00		lda #$00			lda 	#0							; set default xor.
.0188b2	85 8c		sta $8c				sta 	XS_Mantissa+XS_Size*2
.0188b4	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188b6	c9 bf		cmp #$bf			cmp 	#token_Comma 				; no use the default
.0188b8	d0 06		bne $0188c0			bne 	_CWAXorDefault
.0188ba	c8		iny				iny
.0188bb	a2 0c		ldx #$0c			ldx 	#XS_Size*2
.0188bd	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX
.0188c0					_CWAXorDefault:
.0188c0	a5 80		lda $80				lda 	XS_Mantissa 				; copy 24 bits of mantissa to ZLTemp1
.0188c2	85 1a		sta $1a				sta 	zLTemp1
.0188c4	a5 81		lda $81				lda 	XS_Mantissa+1
.0188c6	85 1b		sta $1b				sta 	zLTemp1+1
.0188c8	a5 82		lda $82				lda 	XS_Mantissa+2
.0188ca	85 1c		sta $1c				sta 	zLTemp1+2
.0188cc					_CWAWaitLoop:
.0188cc	20 25 85	jsr $018525			jsr 	CheckBreak 					; exit on break.
.0188cf	c9 00		cmp #$00			cmp 	#0
.0188d1	d0 0f		bne $0188e2			bne 	_CWAWaitExit
.0188d3	a9 01		lda #$01			lda 	#1							; read 1 byte to mantissa/0
.0188d5	a2 00		ldx #$00			ldx 	#0
.0188d7	5a		phy				phy 								; this is the same routine as PEEK.
.0188d8	20 7c 96	jsr $01967c			jsr 	MemRead
.0188db	7a		ply				ply
.0188dc	25 86		and $86				and 	XS_Mantissa+XS_Size 		; process it
.0188de	45 8c		eor $8c				eor 	XS_Mantissa+XS_Size*2
.0188e0	f0 ea		beq $0188cc			beq 	_CWAWaitLoop
.0188e2					_CWAWaitExit:
.0188e2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/run.asm

.0188e3					Command_RUN:
.0188e3	20 d1 8e	jsr $018ed1			jsr 	ResetRunStatus 				; clear, reset stacks etc.
.0188e6	a9 00		lda #$00			lda 	#BasicProgram & $FF
.0188e8	85 16		sta $16				sta 	zCodePtr+0
.0188ea	a9 10		lda #$10			lda 	#BasicProgram >> 8
.0188ec	85 17		sta $17				sta 	zCodePtr+1
.0188ee	a9 00		lda #$00			lda 	#0
.0188f0	85 18		sta $18				sta 	zCodePtr+2
.0188f2	85 19		sta $19				sta 	zCodePtr+3
.0188f4	a0 03		ldy #$03			ldy 	#3
.0188f6					RUN_NewLine:
.0188f6	a0 00		ldy #$00			ldy 	#0
.0188f8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0188fa	c8		iny				iny
.0188fb	c8		iny				iny
.0188fc	c8		iny				iny
.0188fd	c9 00		cmp #$00			cmp 	#0 							; if the offset is zero then END.
.0188ff	d0 16		bne $018917			bne 	RUN_NextCommand
.018901	4c dd 8a	jmp $018add			jmp 	Command_END 				; go do the command code.
.018904					RUN_Skip:
.018904	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018906	c8		iny				iny 								; skip
.018907	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018909	90 0c		bcc $018917			bcc 	_SEDone 					; so just skip over it.
.01890b	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.01890d	90 07		bcc $018916			bcc 	_SEDouble
.01890f	98		tya				tya 								; this is Y + 1
.018910	18		clc				clc
.018911	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018913	a8		tay				tay 								; back in Y.
.018914	88		dey				dey 								; fix up, one for the +1, one for the iny
.018915	88		dey				dey
.018916					_SEDouble:
.018916	c8		iny				iny
.018917					_SEDone:
.018917					RUN_NextCommand:
.018917	ad a8 03	lda $03a8			lda 	BreakCount 					; break counter
.01891a	69 10		adc #$10			adc 	#16 						; one time in 16
.01891c	8d a8 03	sta $03a8			sta 	BreakCount
.01891f	90 0a		bcc $01892b			bcc 	RUN_NoCheckBreak
.018921	20 25 85	jsr $018525			jsr 	CheckBreak 					; check for break
.018924	c9 00		cmp #$00			cmp 	#0
.018926	f0 03		beq $01892b			beq 	RUN_NoCheckBreak
.018928	4c e5 8e	jmp $018ee5			jmp 	Command_STOP 				; stop on BREAK.
.01892b					RUN_NoCheckBreak:
.01892b	a9 00		lda #$00			lda 	#0 							; this resets temporary string allocation.
.01892d	85 21		sta $21				sta 	zTempStr+1 					; (initialised when first called)
.01892f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018931	c9 c0		cmp #$c0			cmp 	#token_Colon 				; skip over colons
.018933	f0 cf		beq $018904			beq 	RUN_Skip
.018935	c9 00		cmp #$00			cmp 	#0 							; if non-zero execute whatever
.018937	d0 0f		bne $018948			bne 	RUN_Execute
.018939					RUN_NextLine:
.018939	a0 00		ldy #$00			ldy 	#0 							; point to offset
.01893b	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.01893d	18		clc				clc
.01893e	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018940	85 16		sta $16				sta 	zCodePtr
.018942	90 02		bcc $018946			bcc 	_SNLNoCarry
.018944	e6 17		inc $17				inc 	zCodePtr+1
.018946					_SNLNoCarry:
.018946	80 ae		bra $0188f6			bra 	RUN_NewLine 				; go do the new line code
.018948					RUN_Execute:
.018948	c9 f8		cmp #$f8			cmp 	#$F8 						; handle shifts, REM etc.
.01894a	b0 1e		bcs $01896a			bcs 	RUN_Extension
.01894c	c8		iny				iny
.01894d	0a		asl a				asl 	a 							; double the character read.
.01894e	90 14		bcc $018964			bcc 	RUN_Default 				; if carry clear was $00-$7F, so try LET.
.018950	aa		tax				tax 								; ready to look up.
.018951	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into LocalVector
.018955	8d 11 03	sta $0311			sta 	LocalVector+1
.018958	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.01895c	8d 12 03	sta $0312			sta 	LocalVector+2
.01895f	20 1f 90	jsr $01901f			jsr 	EVCallLocalVector 			; execute the appropriate code.
.018962	80 b3		bra $018917			bra 	RUN_NextCommand 			; do the next command.
.018964					RUN_Default:
.018964	88		dey				dey
.018965	20 a2 8a	jsr $018aa2			jsr 	Command_LET 				; and try LET.
.018968	80 ad		bra $018917			bra 	RUN_NextCommand
.01896a					RUN_Extension:
.01896a	c9 ff		cmp #$ff			cmp 	#$FF 						; if $FF (REM)
.01896c	f0 96		beq $018904			beq 	RUN_Skip 					; skip over it.
.01896e	4c 28 85	jmp $018528			jmp 	SyntaxError
.018971					Command_COLON:
.018971	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/for.asm

.018972					Command_FOR:
.018972	20 a2 8a	jsr $018aa2			jsr 	Command_LET 				; do the A = 99 bit
.018975	a5 24		lda $24				lda 	zVarType 					; obviously has to be integer/real.
.018977	c9 b7		cmp #$b7			cmp 	#token_Dollar
.018979	f0 71		beq $0189ec			beq 	_CFOError
.01897b	48		pha				pha 								; save the variable type.
.01897c	5a		phy				phy 								; save type/variable address.
.01897d	a0 01		ldy #$01			ldy 	#1							; type at + 1
.01897f	91 26		sta ($26),y			sta 	(zBasicSP),y
.018981	c8		iny				iny
.018982	a5 22		lda $22				lda 	zVarDataPtr 				; data low at +2
.018984	91 26		sta ($26),y			sta 	(zBasicSP),y
.018986	c8		iny				iny
.018987	a5 23		lda $23				lda 	zVarDataPtr+1 				; data high at +3
.018989	91 26		sta ($26),y			sta 	(zBasicSP),y
.01898b	7a		ply				ply
.01898c	a9 53		lda #$53			lda 	#(SMark_For << 4) + 3
.01898e	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on the stack with FOR marker.
.018991	a9 c8		lda #$c8			lda 	#token_TO
.018993	20 e3 96	jsr $0196e3			jsr 	CheckNextToken
.018996	a2 00		ldx #$00			ldx 	#0 							; put in Mantissa, bottom
.018998	20 3c 8f	jsr $018f3c			jsr 	EvaluateExpression
.01899b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01899d	a2 06		ldx #$06			ldx 	#XS_Size 					; X to second level
.01899f	c9 c9		cmp #$c9			cmp 	#token_STEP
.0189a1	d0 06		bne $0189a9			bne 	_CFOStep1
.0189a3	c8		iny				iny
.0189a4	20 3e 8f	jsr $018f3e			jsr 	EvaluateExpressionX 		; get STEP value.
.0189a7	80 0e		bra $0189b7			bra 	_CFOHaveStep
.0189a9					_CFOStep1:
.0189a9	a9 00		lda #$00			lda 	#0							; set step to integer 1.
.0189ab	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0189ad	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0189af	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0189b1	a9 01		lda #$01			lda 	#1
.0189b3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0189b5	95 85		sta $85,x			sta 	XS_Type,x
.0189b7					_CFOHaveStep:
.0189b7	68		pla				pla 								; restore variable type
.0189b8	a2 00		ldx #$00			ldx 	#0
.0189ba	c9 bb		cmp #$bb			cmp 	#token_Percent 				; do conversion to type
.0189bc	f0 0a		beq $0189c8			beq 	_CFOInteger
.0189be	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat
.0189c1	a2 06		ldx #$06			ldx 	#6
.0189c3	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat
.0189c6	80 08		bra $0189d0			bra 	_CFOEndConv
.0189c8					_CFOInteger:
.0189c8	20 f6 a0	jsr $01a0f6			jsr 	FPUToInteger
.0189cb	a2 06		ldx #$06			ldx 	#6
.0189cd	20 f6 a0	jsr $01a0f6			jsr 	FPUToInteger
.0189d0					_CFOEndConv:
.0189d0	20 e6 84	jsr $0184e6			jsr 	StackSavePosition 			; save the loop position at 1-5
.0189d3	a9 55		lda #$55			lda 	#(SMark_For << 4)+SourcePosSize
.0189d5	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push the loop address frame.
.0189d8	5a		phy				phy
.0189d9	a0 00		ldy #$00			ldy 	#0
.0189db					_CFOCopy:
.0189db	b9 80 00	lda $0080,y			lda 	XS_Mantissa+0,y
.0189de	c8		iny				iny
.0189df	91 26		sta ($26),y			sta 	(zBasicSP),y
.0189e1	c0 0c		cpy #$0c			cpy 	#XS_Size*2
.0189e3	d0 f6		bne $0189db			bne 	_CFOCopy
.0189e5	7a		ply				ply
.0189e6	a9 5c		lda #$5c			lda 	#(SMark_For << 4)+(XS_Size*2)
.0189e8	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.0189eb	60		rts				rts
.0189ec					_CFOError:
.0189ec	4c 38 85	jmp $018538			jmp 	TypeError 					; wrong type.
.0189ef					Command_NEXT:
.0189ef	a9 00		lda #$00			lda 	#0 							; set variable data pointer+1 to zero
.0189f1	85 23		sta $23				sta 	zVarDataPtr+1 				; this means we don't check
.0189f3	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0189f5	c9 00		cmp #$00			cmp 	#0 							; EOL
.0189f7	f0 07		beq $018a00			beq 	_CNextNoVariable
.0189f9	c9 40		cmp #$40			cmp 	#$40
.0189fb	b0 03		bcs $018a00			bcs 	_CNextNoVariable
.0189fd	20 9b 97	jsr $01979b			jsr 	VariableFind
.018a00					_CNextNoVariable:
.018a00	a5 26		lda $26				lda 	zBasicSP 					; save on stack
.018a02	48		pha				pha
.018a03	a5 27		lda $27				lda 	zBasicSP+1
.018a05	48		pha				pha
.018a06	a9 50		lda #$50			lda 	#(SMark_For << 4) 			; pop loop address frame
.018a08	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a0b	a9 50		lda #$50			lda 	#(SMark_For << 4) 			; pop STEP/TARGET frame.
.018a0d	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a10	a9 50		lda #$50			lda 	#(Smark_For << 4) 			; pop variable address frame.
.018a12	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018a15	a5 23		lda $23				lda 	zVarDataPtr+1 				; if zero, then no variable provided
.018a17	f0 11		beq $018a2a			beq 	_CNextGetTarget 			; e.g. just NEXT not NEXT x
.018a19	5a		phy				phy 								; check addresses match.
.018a1a	a0 02		ldy #$02			ldy 	#2
.018a1c	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a1e	c5 22		cmp $22				cmp 	zVarDataPtr
.018a20	d0 69		bne $018a8b			bne 	_CNextWrong
.018a22	c8		iny				iny
.018a23	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a25	c5 23		cmp $23				cmp 	zVarDataPtr+1
.018a27	d0 62		bne $018a8b			bne 	_CNextWrong
.018a29	7a		ply				ply
.018a2a					_CNextGetTarget:
.018a2a	5a		phy				phy
.018a2b	a0 01		ldy #$01			ldy 	#1 							; restore variable type and data.
.018a2d	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a2f	85 24		sta $24				sta 	zVarType
.018a31	c8		iny				iny
.018a32	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a34	85 22		sta $22				sta 	zVarDataPtr
.018a36	c8		iny				iny
.018a37	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a39	85 23		sta $23				sta 	zVarDataPtr+1
.018a3b	a2 0c		ldx #$0c			ldx 	#12
.018a3d	20 e3 9a	jsr $019ae3			jsr 	VariableGet 				; get that variable value into expr[2]
.018a40	a2 00		ldx #$00			ldx 	#0 							; copy stacked Target/Step into expr[0] and [1]
.018a42	a0 0b		ldy #$0b			ldy 	#11
.018a44					_CNXCopy:
.018a44	b1 26		lda ($26),y			lda 	(zBasicSP),y
.018a46	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018a48	e8		inx				inx
.018a49	c8		iny				iny
.018a4a	e0 0c		cpx #$0c			cpx 	#XS_Size*2
.018a4c	d0 f6		bne $018a44			bne 	_CNXCopy
.018a4e	7a		ply				ply
.018a4f	a2 06		ldx #$06			ldx 	#6 							; point at expr[1] s
.018a51	20 44 93	jsr $019344			jsr 	GetSignCurrent
.018a54	8d a7 03	sta $03a7			sta 	SignNext 					; save in temporary.
.018a57	a2 06		ldx #$06			ldx 	#6 							; add them, however
.018a59	20 23 92	jsr $019223			jsr 	BinaryOp_Add
.018a5c	20 34 9b	jsr $019b34			jsr 	VariableSet					; and write variable back.
.018a5f	a2 00		ldx #$00			ldx 	#0
.018a61	20 a7 91	jsr $0191a7			jsr 	CompareValues
.018a64	09 00		ora #$00			ora 	#0
.018a66	f0 05		beq $018a6d			beq 	_CNXAgain 					; if true, then do it again.
.018a68	cd a7 03	cmp $03a7			cmp 	SignNext 					; if sign different, then loop has finished.
.018a6b	d0 0f		bne $018a7c			bne 	_CNXLoopDone
.018a6d					_CNXAgain:
.018a6d	a9 53		lda #$53			lda 	#(SMark_For << 4) + 3		; re-stack variable address
.018a6f	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018a72	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; get restore position back, e.g. loop round.
.018a75	68		pla				pla
.018a76	85 27		sta $27				sta 	zBasicSP+1
.018a78	68		pla				pla
.018a79	85 26		sta $26				sta 	zBasicSP
.018a7b					_CNXExit:
.018a7b	60		rts				rts
.018a7c					_CNXLoopDone:
.018a7c	68		pla				pla
.018a7d	68		pla				pla
.018a7e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018a80	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma ?
.018a82	d0 f7		bne $018a7b			bne 	_CNXExit
.018a84	c8		iny				iny
.018a85	20 9b 97	jsr $01979b			jsr 	VariableFind 				; identify the variable
.018a88	4c 00 8a	jmp $018a00			jmp 	_CNextNoVariable 			; go back with variable pre-found
.018a8b					_CNextWrong:
.018a8b	20 57 85	jsr $018557			jsr ERR_Handler
>018a8e	57 72 6f 6e 67 20 4e 65			.text "Wrong Next Variable",0
>018a96	78 74 20 56 61 72 69 61 62 6c 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/let.asm

.018aa2					Command_LET:
.018aa2	20 9b 97	jsr $01979b			jsr 	VariableFind 				; get reference to one variable.
.018aa5	a9 84		lda #$84			lda 	#token_Equal  				; get equals
.018aa7	20 e3 96	jsr $0196e3			jsr 	CheckNextToken
.018aaa	a5 22		lda $22				lda 	zVarDataPtr 				; save variable info on stack
.018aac	48		pha				pha
.018aad	a5 23		lda $23				lda 	zVarDataPtr+1
.018aaf	48		pha				pha
.018ab0	a5 24		lda $24				lda 	zVarType
.018ab2	48		pha				pha
.018ab3	20 3c 8f	jsr $018f3c			jsr 	EvaluateExpression 			; evaluate the RHS.
.018ab6	68		pla				pla 								; restore target variable information.
.018ab7	85 24		sta $24				sta 	zVarType
.018ab9	68		pla				pla
.018aba	85 23		sta $23				sta 	zVarDataPtr+1
.018abc	68		pla				pla
.018abd	85 22		sta $22				sta 	zVarDataPtr
.018abf	20 34 9b	jsr $019b34			jsr 	VariableSet 				; set the value out.
.018ac2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/sys.asm

.018ac3					Command_SYS:
.018ac3	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; address
.018ac6	a5 80		lda $80				lda 	XS_Mantissa+0				; copy to localvector
.018ac8	8d 10 03	sta $0310			sta 	LocalVector+0 				; only three, can only do 24 bit calls
.018acb	a5 81		lda $81				lda 	XS_Mantissa+1 				; and that only on 65816
.018acd	8d 11 03	sta $0311			sta 	LocalVector+1
.018ad0	a5 82		lda $82				lda 	XS_Mantissa+2
.018ad2	8d 12 03	sta $0312			sta 	LocalVector+2
.018ad5	22 da 8a 01	jsl $018ada			jsl 	_CSYLocalCall
.018ad9	60		rts				rts
.018ada					_CSYLocalCall:
.018ada	dc 10 03	jmp [$0310]			jmp 	[LocalVector]

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/end.asm

.018add					Command_END:
>018add	02						.byte 	2
.018ade	4c 10 88	jmp $018810			jmp 	WarmStart

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/if.asm

.018ae1					Command_IF:
.018ae1	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; check success.
.018ae4	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018ae6	05 81		ora $81				ora 	XS_Mantissa+1
.018ae8	05 82		ora $82				ora 	XS_Mantissa+2
.018aea	05 83		ora $83				ora 	XS_Mantissa+3
.018aec	aa		tax				tax 								; put into X.
.018aed	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018aef	c9 93		cmp #$93			cmp 	#token_Then 				; then found.
.018af1	d0 2c		bne $018b1f			bne 	_FIFExtended
.018af3	c8		iny				iny
.018af4	e0 00		cpx #$00			cpx 	#0 							; was it successful.
.018af6	f0 0b		beq $018b03			beq 	_FIFEndOfLine 				; if not, go to the end of the line.
.018af8	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018afa	29 c0		and #$c0			and 	#$C0 						; is it a number
.018afc	c9 40		cmp #$40			cmp 	#$40
.018afe	d0 1e		bne $018b1e			bne 	_FIFContinue 				; if not, do what ever follows.
.018b00	4c 47 8e	jmp $018e47			jmp		Command_GOTO 				; we have IF <expr> THEN <number> so we do GOTO code.
.018b03					_FIFEndOfLine:
.018b03	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b05	c9 00		cmp #$00			cmp 	#0 							; if zero, end of line, so exit
.018b07	f0 15		beq $018b1e			beq 	_FIFContinue
.018b09	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018b0b	c8		iny				iny 								; skip
.018b0c	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018b0e	90 0c		bcc $018b1c			bcc 	_SEDone 					; so just skip over it.
.018b10	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018b12	90 07		bcc $018b1b			bcc 	_SEDouble
.018b14	98		tya				tya 								; this is Y + 1
.018b15	18		clc				clc
.018b16	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018b18	a8		tay				tay 								; back in Y.
.018b19	88		dey				dey 								; fix up, one for the +1, one for the iny
.018b1a	88		dey				dey
.018b1b					_SEDouble:
.018b1b	c8		iny				iny
.018b1c					_SEDone:
.018b1c	80 e5		bra $018b03			bra 	_FIFEndOfLine
.018b1e					_FIFContinue:
.018b1e	60		rts				rts
.018b1f					_FIFExtended:
.018b1f	da		phx				phx 								; save result
.018b20	a9 40		lda #$40			lda 	#(SMark_If << 4) 			; push marker on the stack, nothing else.
.018b22	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018b25	68		pla				pla 								; restore result
.018b26	f0 01		beq $018b29			beq 	_FIXSkip 					; if zero then it has failed.
.018b28	60		rts				rts 								; test passed, so continue executing
.018b29					_FIXSkip:
.018b29	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found either ELSE or ENDIF
.018b2b	a2 de		ldx #$de			ldx 	#token_else 				; at the same level.
.018b2d	20 02 84	jsr $018402			jsr 	StructureSearchDouble
.018b30	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b32	c8		iny				iny
.018b33	c9 94		cmp #$94			cmp 	#token_endif 				; if endif, handle endif code.
.018b35	f0 07		beq $018b3e			beq 	Command_ENDIF
.018b37	60		rts				rts
.018b38					Command_ELSE:
.018b38	a9 94		lda #$94			lda 	#token_endif 				; scan forward till found ENDIF
.018b3a	20 00 84	jsr $018400			jsr 	StructureSearchSingle 		; then do the ENDIF pop.
.018b3d	c8		iny				iny
.018b3e					Command_ENDIF:
.018b3e	a9 40		lda #$40			lda 	#(SMark_If << 4)
.018b40	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018b43	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/list.asm

.018b44					Command_LIST:
.018b44	20 d1 8c	jsr $018cd1			jsr 	ListGetRange				; get any parameters
.018b47	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018b49	85 16		sta $16				sta 	zCodePtr+0
.018b4b	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018b4d	85 17		sta $17				sta 	zCodePtr+1
.018b4f	a9 00		lda #$00			lda 	#0
.018b51	85 18		sta $18				sta 	zCodePtr+2
.018b53	85 19		sta $19				sta 	zCodePtr+3
.018b55	a0 03		ldy #$03			ldy 	#3
.018b57	a9 00		lda #$00			lda 	#0 							; reset the indent & last indent
.018b59	8d bc 03	sta $03bc			sta 	LastListIndent
.018b5c	8d bb 03	sta $03bb			sta 	ListIndent
.018b5f					_CILLoop:
.018b5f	a0 00		ldy #$00			ldy 	#0
.018b61	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b63	c9 00		cmp #$00			cmp 	#0 							; if zero, end of program
.018b65	f0 23		beq $018b8a			beq 	_CILExit
.018b67	20 25 85	jsr $018525			jsr 	CheckBreak 					; check break
.018b6a	c9 00		cmp #$00			cmp 	#0
.018b6c	d0 1c		bne $018b8a			bne 	_CILExit
.018b6e	20 18 8d	jsr $018d18			jsr 	ListCheckRange 				; check current line in range.
.018b71	b0 08		bcs $018b7b			bcs		_CILNext
.018b73	a0 00		ldy #$00			ldy 	#0
.018b75	c8		iny				iny
.018b76	c8		iny				iny
.018b77	c8		iny				iny
.018b78	20 8d 8b	jsr $018b8d			jsr 	ListLine 					; list one line.
.018b7b					_CILNext:
.018b7b	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018b7d	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018b7f	18		clc				clc
.018b80	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018b82	85 16		sta $16				sta 	zCodePtr
.018b84	90 02		bcc $018b88			bcc 	_SNLNoCarry
.018b86	e6 17		inc $17				inc 	zCodePtr+1
.018b88					_SNLNoCarry:
.018b88	80 d5		bra $018b5f			bra 	_CILLoop
.018b8a					_CILExit:
.018b8a	4c 10 88	jmp $018810			jmp 	WarmStart
.018b8d					ListLine:
.018b8d	ad bb 03	lda $03bb			lda 	ListIndent 					; copy current list indent -> last
.018b90	8d bc 03	sta $03bc			sta 	LastListIndent
.018b93					_LICountIndent:
.018b93	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018b95	c9 00		cmp #$00			cmp 	#0
.018b97	f0 2f		beq $018bc8			beq 	_LIDoneIndent
.018b99	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus
.018b9b	90 16		bcc $018bb3			bcc 	_LICINext
.018b9d	c9 98		cmp #$98			cmp 	#firstUnaryFunction
.018b9f	b0 12		bcs $018bb3			bcs 	_LICINext
.018ba1	ee bb 03	inc $03bb			inc 	ListIndent
.018ba4	c9 93		cmp #$93			cmp 	#firstKeywordMinus
.018ba6	90 0b		bcc $018bb3			bcc 	_LICINext
.018ba8	ce bb 03	dec $03bb			dec 	ListIndent
.018bab	ce bb 03	dec $03bb			dec 	ListIndent
.018bae	10 03		bpl $018bb3			bpl 	_LICINext
.018bb0	ee bb 03	inc $03bb			inc 	ListIndent
.018bb3					_LICINext:
.018bb3	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read element
.018bb5	c8		iny				iny 								; skip
.018bb6	c9 f8		cmp #$f8			cmp 	#$F8 						; if < $F8 single character,token
.018bb8	90 0c		bcc $018bc6			bcc 	_SEDone 					; so just skip over it.
.018bba	c9 fc		cmp #$fc			cmp 	#$FC 						; if < $FC double character token
.018bbc	90 07		bcc $018bc5			bcc 	_SEDouble
.018bbe	98		tya				tya 								; this is Y + 1
.018bbf	18		clc				clc
.018bc0	77 16		adc [$16],y			adc 	[zCodePtr],y 				; add total length of element
.018bc2	a8		tay				tay 								; back in Y.
.018bc3	88		dey				dey 								; fix up, one for the +1, one for the iny
.018bc4	88		dey				dey
.018bc5					_SEDouble:
.018bc5	c8		iny				iny
.018bc6					_SEDone:
.018bc6	80 cb		bra $018b93			bra 	_LICountIndent
.018bc8					_LIDoneIndent:
.018bc8	a0 00		ldy #$00			ldy 	#0
.018bca	c8		iny				iny
.018bcb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bcd	85 80		sta $80				sta 	XS_Mantissa
.018bcf	c8		iny				iny
.018bd0	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bd2	85 81		sta $81				sta 	XS_Mantissa+1
.018bd4	20 9d 85	jsr $01859d			jsr 	Print16BitInteger 			; print integer.
.018bd7	85 10		sta $10				sta 	zTemp1 						; save spaces printed.
.018bd9	ad bb 03	lda $03bb			lda 	ListIndent 					; smaller of current/prev indent
.018bdc	cd bc 03	cmp $03bc			cmp 	LastListIndent
.018bdf	90 03		bcc $018be4			bcc 	_LISmaller
.018be1	ad bc 03	lda $03bc			lda 	LastListIndent
.018be4					_LISmaller:
.018be4	0a		asl a				asl 	a 							; double indent
.018be5	49 ff		eor #$ff			eor 	#$FF 						; 2's complement arithmetic
.018be7	38		sec				sec
.018be8	65 10		adc $10				adc 	zTemp1 						; "subtract" indent e.g. print more.
.018bea	aa		tax				tax 								; print spaces to column 6
.018beb					_LISpace:
.018beb	a9 20		lda #$20			lda 	#" "
.018bed	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018bf0	e8		inx				inx
.018bf1	e0 06		cpx #$06			cpx 	#6
.018bf3	d0 f6		bne $018beb			bne 	_LISpace
.018bf5					_LIDecode:
.018bf5	c8		iny				iny
.018bf6	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018bf8	c9 00		cmp #$00			cmp 	#0 							; zero, exit.
.018bfa	f0 0f		beq $018c0b			beq 	_LIExit
.018bfc	30 12		bmi $018c10			bmi 	_LIToken
.018bfe	c9 40		cmp #$40			cmp 	#$40 						; 01-$3F, character.
.018c00	b0 50		bcs $018c52			bcs 	_LIInteger
.018c02	49 20		eor #$20			eor 	#$20 						; make 7 bit
.018c04	69 20		adc #$20			adc 	#$20
.018c06	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC 				; print in LC
.018c09	80 ea		bra $018bf5			bra 	_LIDecode
.018c0b					_LIExit:
.018c0b	a9 0d		lda #$0d			lda 	#13 						; print new line.
.018c0d	4c c1 8c	jmp $018cc1			jmp 	ListPrintLC
.018c10					_LIToken:
.018c10	c9 fc		cmp #$fc			cmp 	#$FC 						; $FC-$FF ?
.018c12	90 49		bcc $018c5d			bcc		_LICommandToken
.018c14	48		pha				pha 								; save in case end
.018c15	a2 22		ldx #$22			ldx 	#'"'						; print if $FE quoted string
.018c17	c9 fe		cmp #$fe			cmp 	#$FE
.018c19	f0 17		beq $018c32			beq 	_LIPrint
.018c1b	a2 2e		ldx #$2e			ldx 	#'.'						; print if $FD decimals
.018c1d	c9 fd		cmp #$fd			cmp 	#$FD
.018c1f	f0 11		beq $018c32			beq 	_LIPrint
.018c21	a9 52		lda #$52			lda 	#'R'						; must be REM
.018c23	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c26	a9 45		lda #$45			lda 	#'E'
.018c28	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c2b	a9 4d		lda #$4d			lda 	#'M'
.018c2d	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c30	a2 20		ldx #$20			ldx 	#' '
.018c32					_LIPrint:
.018c32	8a		txa				txa
.018c33	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c36	c8		iny				iny
.018c37	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c39	aa		tax				tax 								; put in X
.018c3a	ca		dex				dex
.018c3b					_LILoop:
.018c3b	ca		dex				dex 								; exit when count reached zero.
.018c3c	f0 08		beq $018c46			beq 	_LIEnd
.018c3e	c8		iny				iny
.018c3f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018c41	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c44	80 f5		bra $018c3b			bra 	_LILoop
.018c46	68		pla		_LIEnd:	pla 								; get A back
.018c47	c9 fe		cmp #$fe			cmp 	#$FE 						; if '"' need closing quotes
.018c49	d0 aa		bne $018bf5			bne 	_LIDecode
.018c4b	a9 22		lda #$22			lda 	#'"'
.018c4d	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018c50	80 a3		bra $018bf5			bra 	_LIDecode
.018c52					_LIInteger:
.018c52	a2 00		ldx #$00			ldx 	#0
.018c54	20 44 90	jsr $019044			jsr 	EvaluateGetInteger 			; get an atom
.018c57	88		dey				dey
.018c58	20 a3 85	jsr $0185a3			jsr 	Print32BitInteger 			; print integer.
.018c5b	80 98		bra $018bf5			bra 	_LIDecode
.018c5d					_LICommandToken:
.018c5d	5a		phy				phy 								; save Y
.018c5e	48		pha				pha 								; save token
.018c5f	a2 9b		ldx #$9b			ldx  	#KeywordText & $FF 			; address of keyword text table.
.018c61	a9 86		lda #$86			lda 	(#KeywordText >> 8) & $FF
.018c63	86 1a		stx $1a				stx 	zLTemp1
.018c65	85 1b		sta $1b				sta 	zLTemp1+1
.018c67	a9 01		lda #$01			lda 	(#KeywordText >> 16) & $FF 	; this is for 65816 (it's a table in code
.018c69	85 1c		sta $1c				sta 	zLTemp1+2 					; space) and won't affect a 6502 at all.
.018c6b	68		pla				pla 								; get token
.018c6c	29 7f		and #$7f			and 	#127 						; chuck bit 7.
.018c6e	f0 16		beq $018c86			beq 	_LIFoundToken
.018c70	aa		tax				tax
.018c71					_LITokenLoop:
.018c71	a0 00		ldy #$00			ldy 	#0 							; last character not a token.
.018c73					_LIFindEnd:
.018c73	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c75	c8		iny				iny
.018c76	0a		asl a				asl 	a
.018c77	90 fa		bcc $018c73			bcc 	_LIFindEnd
.018c79	98		tya				tya 								; that is step to the next
.018c7a	18		clc				clc 								; we don't bother bumping the 3rd byte
.018c7b	65 1a		adc $1a				adc 	zLTemp1 					; here.
.018c7d	85 1a		sta $1a				sta 	zLTemp1
.018c7f	90 02		bcc $018c83			bcc 	_LINoBump
.018c81	e6 1b		inc $1b				inc 	zLTemp1+1
.018c83					_LINoBump:
.018c83	ca		dex				dex 								; no go round again.
.018c84	d0 eb		bne $018c71			bne 	_LITokenLoop
.018c86					_LIFoundToken:
.018c86	a0 00		ldy #$00			ldy 	#0
.018c88					_LIPrintToken:
.018c88	b7 1a		lda [$1a],y			lda 	[zLTemp1],y
.018c8a	c0 00		cpy #$00			cpy 	#0 							; see if needs prefix space
.018c8c	d0 16		bne $018ca4			bne 	_LINoPrefixSpace
.018c8e	c9 41		cmp #$41			cmp 	#"A" 						; e.g. alphabetic token.
.018c90	90 12		bcc $018ca4			bcc 	_LINoPrefixSpace
.018c92	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018c94	b0 0e		bcs $018ca4			bcs 	_LINoPrefixSpace
.018c96	ae ba 03	ldx $03ba			ldx 	LastPrinted 				; if last was space not required
.018c99	e0 20		cpx #$20			cpx 	#" "
.018c9b	f0 07		beq $018ca4			beq 	_LINoPrefixSpace
.018c9d	48		pha				pha
.018c9e	a9 20		lda #$20			lda 	#" "
.018ca0	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018ca3	68		pla				pla
.018ca4					_LINoPrefixSpace:
.018ca4	c8		iny				iny
.018ca5	48		pha				pha 								; save it
.018ca6	29 7f		and #$7f			and 	#$7F
.018ca8	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018cab	68		pla				pla
.018cac	10 da		bpl $018c88			bpl 	_LIPrintToken 				; go back if not end
.018cae	7a		ply				ply 								; restore Y
.018caf	29 7f		and #$7f			and 	#$7F 						; if last char is a letter
.018cb1	c9 41		cmp #$41			cmp 	#"A"
.018cb3	90 09		bcc $018cbe			bcc 	_LINotLetter2
.018cb5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018cb7	b0 05		bcs $018cbe			bcs 	_LINotLetter2
.018cb9	a9 20		lda #$20			lda 	#" " 						; add spacing
.018cbb	20 c1 8c	jsr $018cc1			jsr 	ListPrintLC
.018cbe					_LINotLetter2:
.018cbe	4c f5 8b	jmp $018bf5			jmp 	_LIDecode
.018cc1					ListPrintLC:
.018cc1	8d ba 03	sta $03ba			sta 	LastPrinted
.018cc4	c9 41		cmp #$41			cmp 	#"A"
.018cc6	90 06		bcc $018cce			bcc 	_LPLC0
.018cc8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.018cca	b0 02		bcs $018cce			bcs 	_LPLC0
.018ccc	69 20		adc #$20			adc 	#$20
.018cce	4c 1f 85	jmp $01851f	_LPLC0:	jmp 	CharPrint
.018cd1					ListGetRange:
.018cd1	a2 0b		ldx #$0b			ldx 	#XS_Size*2-1 				; clear first 2 slots back to defaults.
.018cd3					_LGRClear:
.018cd3	a9 00		lda #$00			lda 	#0
.018cd5	95 80		sta $80,x			sta 	XS_Mantissa,x
.018cd7	ca		dex				dex
.018cd8	10 f9		bpl $018cd3			bpl 	_LGRClear
.018cda	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018cdc	c9 00		cmp #$00			cmp 	#0 							; nothing
.018cde	f0 21		beq $018d01			beq 	_LGRBlank
.018ce0	c9 c0		cmp #$c0			cmp 	#token_Colon 				; or colon
.018ce2	f0 1d		beq $018d01			beq 	_LGRBlank
.018ce4	c9 bf		cmp #$bf			cmp 	#token_Comma 				; comma
.018ce6	f0 18		beq $018d00			beq 	_LGREnd 					; then it's LIST ,x
.018ce8	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; get the first number into bottom
.018ceb	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ced	c9 bf		cmp #$bf			cmp 	#token_Comma
.018cef	f0 0f		beq $018d00			beq 	_LGREnd 					; then it is LIST a,b
.018cf1	a5 80		lda $80				lda 	XS_Mantissa+0 				; copy first to second LIST n is n,n
.018cf3	85 86		sta $86				sta 	XS_Mantissa+XS_Size+0
.018cf5	a5 81		lda $81				lda 	XS_Mantissa+1
.018cf7	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018cf9					_LGRBumpExit:
.018cf9	e6 86		inc $86				inc 	XS_Mantissa+XS_Size 		; bump it so we can use cc.
.018cfb	d0 02		bne $018cff			bne 	_LGRBump2
.018cfd	e6 87		inc $87				inc 	XS_Mantissa+XS_Size+1
.018cff					_LGRBump2:
.018cff	60		rts				rts
.018d00					_LGREnd:
.018d00	c8		iny				iny
.018d01					_LGRBlank:
.018d01	a9 ff		lda #$ff			lda 	#$FF 						; default to the end.
.018d03	85 86		sta $86				sta 	XS_Mantissa+XS_Size
.018d05	85 87		sta $87				sta 	XS_Mantissa+XS_Size+1
.018d07	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d09	c9 00		cmp #$00			cmp 	#0
.018d0b	f0 f2		beq $018cff			beq 	_LGRBump2
.018d0d	0a		asl a				asl 	a 							; if not a number, then exit (to end)
.018d0e	b0 ef		bcs $018cff			bcs 	_LGRBump2
.018d10	a2 06		ldx #$06			ldx 	#XS_Size 					; get to range
.018d12	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX
.018d15	80 e2		bra $018cf9			bra 	_LGRBumpExit
.018d17	60		rts				rts
.018d18					ListCheckRange:
.018d18	c8		iny				iny
.018d19	a2 00		ldx #$00			ldx 	#0 							; test low
.018d1b	20 28 8d	jsr $018d28			jsr 	_LCRCompare
.018d1e	90 06		bcc $018d26			bcc 	_LCRFail
.018d20	a2 06		ldx #$06			ldx 	#XS_Size 					; test high
.018d22	20 28 8d	jsr $018d28			jsr 	_LCRCompare
.018d25	60		rts				rts
.018d26					_LCRFail:
.018d26	38		sec				sec
.018d27	60		rts				rts
.018d28					_LCRCompare:
.018d28	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d2a	38		sec				sec
.018d2b	f5 80		sbc $80,x			sbc	 	XS_Mantissa+0,x
.018d2d	08		php				php
.018d2e	c8		iny				iny
.018d2f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d31	28		plp				plp
.018d32	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.018d34	08		php				php
.018d35	88		dey				dey
.018d36	28		plp				plp
.018d37	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/print.asm

.018d38					Command_PRINT:
.018d38	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d3a	c9 00		cmp #$00			cmp 	#0 							; end
.018d3c	f0 65		beq $018da3			beq 	_CPR_NewLine
.018d3e	c9 c0		cmp #$c0			cmp 	#token_Colon
.018d40	f0 61		beq $018da3			beq 	_CPR_NewLine
.018d42	c9 c1		cmp #$c1			cmp 	#token_SemiColon
.018d44	f0 50		beq $018d96			beq 	_CPR_Skip
.018d46	c9 bf		cmp #$bf			cmp 	#token_Comma
.018d48	f0 49		beq $018d93			beq 	_CPR_Tab
.018d4a	20 3c 8f	jsr $018f3c			jsr 	EvaluateExpression 			; get expression.
.018d4d	a5 85		lda $85				lda 	XS_Type 					; get type.
.018d4f	29 02		and #$02			and 	#2
.018d51	d0 24		bne $018d77			bne 	_CPR_String 				; if type = 2 output as string.
.018d53					_CPR_Number:
.018d53	a9 00		lda #$00			lda 	#0 							; reset buffer index
.018d55	8d 14 03	sta $0314			sta 	NumBufX
.018d58	a5 85		lda $85				lda 	XS_Type 					; get type
.018d5a	4a		lsr a				lsr 	a
.018d5b	b0 05		bcs $018d62			bcs 	_CPRInt 					; if msb set do as integer
.018d5d	20 f5 a1	jsr $01a1f5			jsr 	FPToString 					; call fp to str otherwise
.018d60	80 03		bra $018d65			bra 	_CPRNPrint
.018d62	20 7d 9c	jsr $019c7d	_CPRInt:jsr 	IntToString
.018d65					_CPRNPrint:
.018d65	ad 15 03	lda $0315			lda 	Num_Buffer 					; is first character -
.018d68	c9 2d		cmp #$2d			cmp 	#"-"
.018d6a	f0 05		beq $018d71			beq 	_CPRNoSpace
.018d6c	a9 20		lda #$20			lda 	#" "						; print the leading space
.018d6e	20 1f 85	jsr $01851f			jsr 	CharPrint 					; so beloved of MS Basics.
.018d71					_CPRNoSpace:
.018d71	a2 14		ldx #$14			ldx 	#(Num_Buffer-1) & $FF
.018d73	a9 03		lda #$03			lda 	#(Num_Buffer-1) >> 8
.018d75	80 04		bra $018d7b			bra 	_CPRPrint
.018d77					_CPR_String:
.018d77	a6 80		ldx $80				ldx 	XS_Mantissa
.018d79	a5 81		lda $81				lda 	XS_Mantissa+1
.018d7b					_CPRPrint:
.018d7b	86 1e		stx $1e				stx 	zGenPtr
.018d7d	85 1f		sta $1f				sta 	zGenPtr+1
.018d7f	5a		phy				phy
.018d80	a0 00		ldy #$00			ldy 	#0							; get length into X
.018d82	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d84	aa		tax				tax
.018d85	f0 09		beq $018d90			beq 	_CPREndPrint 				; nothing to print
.018d87					_CPRLoop:
.018d87	c8		iny				iny
.018d88	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.018d8a	20 1f 85	jsr $01851f			jsr 	CharPrint
.018d8d	ca		dex				dex
.018d8e	d0 f7		bne $018d87			bne 	_CPRLoop
.018d90					_CPREndPrint:
.018d90	7a		ply				ply
.018d91	80 a5		bra $018d38			bra 	Command_Print
.018d93					_CPR_Tab:
.018d93	20 4f 80	jsr $01804f			jsr 	IFT_Tab
.018d96					_CPR_Skip:
.018d96	c8		iny				iny
.018d97	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018d99	c9 c0		cmp #$c0			cmp 	#token_Colon 				; colon or $00, exit
.018d9b	f0 09		beq $018da6			beq 	_CPR_Exit
.018d9d	c9 00		cmp #$00			cmp 	#0
.018d9f	d0 97		bne $018d38			bne 	Command_PRINT 				; if not go round again.
.018da1	80 03		bra $018da6			bra 	_CPR_Exit
.018da3					_CPR_NewLine:
.018da3	20 5c 80	jsr $01805c			jsr 	IFT_NewLine
.018da6					_CPR_Exit:
.018da6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/assert.asm

.018da7					Command_ASSERT:
.018da7	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; calculate thing being asserted
.018daa	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; check if true (non-zero)
.018dac	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.018dae	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.018db0	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.018db2	f0 01		beq $018db5			beq 	_ASFail
.018db4	60		rts				rts
.018db5					_ASFail:
.018db5	20 57 85	jsr $018557			jsr ERR_Handler
>018db8	41 73 73 65 72 74 00			.text "Assert",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/poke.asm

.018dbf					Command_POKE:
.018dbf	a9 01		lda #$01			lda 	#1
.018dc1	80 06		bra $018dc9			bra 	CmdPoke_Main
.018dc3					Command_DOKE:
.018dc3	a9 02		lda #$02			lda 	#2
.018dc5	80 02		bra $018dc9			bra 	CmdPoke_Main
.018dc7					Command_LOKE:
.018dc7	a9 04		lda #$04			lda 	#4
.018dc9					CmdPoke_Main:
.018dc9	48		pha				pha
.018dca	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; get two parameters.
.018dcd	e8		inx				inx
.018dce	e8		inx				inx
.018dcf	e8		inx				inx
.018dd0	e8		inx				inx
.018dd1	e8		inx				inx
.018dd2	e8		inx				inx
.018dd3	20 02 97	jsr $019702			jsr 	CheckNextComma
.018dd6	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX
.018dd9	a5 80		lda $80				lda 	XS_Mantissa+0 			; copy the mantissa into ZLTemp1 (address)
.018ddb	85 1a		sta $1a				sta 	zLTemp1
.018ddd	a5 81		lda $81				lda 	XS_Mantissa+1
.018ddf	85 1b		sta $1b				sta 	zLTemp1+1
.018de1	a5 82		lda $82				lda 	XS_Mantissa+2
.018de3	85 1c		sta $1c				sta 	zLTemp1+2
.018de5	a5 83		lda $83				lda 	XS_Mantissa+3
.018de7	85 1d		sta $1d				sta 	zLTemp1+3
.018de9	68		pla				pla 								; get count
.018dea	5a		phy				phy 								; save Y
.018deb	20 8d 96	jsr $01968d			jsr 	MemWrite 					; write it out
.018dee	7a		ply				ply 								; restore Y and done.
.018def	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/newold.asm

.018df0					Command_NEW:
.018df0	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018df2	85 16		sta $16				sta 	zCodePtr+0
.018df4	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018df6	85 17		sta $17				sta 	zCodePtr+1
.018df8	a9 00		lda #$00			lda 	#0
.018dfa	85 18		sta $18				sta 	zCodePtr+2
.018dfc	85 19		sta $19				sta 	zCodePtr+3
.018dfe	a0 03		ldy #$03			ldy 	#3
.018e00	a0 00		ldy #$00			ldy 	#0
.018e02	a9 00		lda #$00			lda 	#0 							; write a 0 there.
.018e04	97 16		sta [$16],y			sta 	[zCodePtr],y
.018e06	20 9e 96	jsr $01969e			jsr 	UpdateProgramEnd 			; update program end.
.018e09	4c 10 88	jmp $018810			jmp 	WarmStart
.018e0c					Command_OLD:
.018e0c	ea		nop				nop
.018e0d	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018e0f	85 16		sta $16				sta 	zCodePtr+0
.018e11	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018e13	85 17		sta $17				sta 	zCodePtr+1
.018e15	a9 00		lda #$00			lda 	#0
.018e17	85 18		sta $18				sta 	zCodePtr+2
.018e19	85 19		sta $19				sta 	zCodePtr+3
.018e1b	a0 03		ldy #$03			ldy 	#3
.018e1d					_COL_Find:
.018e1d	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e1f	c8		iny				iny
.018e20	c9 00		cmp #$00			cmp 	#0 							; if zero, then the position Y/Z is new offset
.018e22	f0 18		beq $018e3c			beq 	_COL_Found
.018e24	98		tya				tya
.018e25	c9 00		cmp #$00			cmp 	#0
.018e27	d0 f4		bne $018e1d			bne 	_COL_Find 					; can't find old EOL, give up.
.018e29	20 57 85	jsr $018557			jsr ERR_Handler
>018e2c	50 72 6f 67 72 61 6d 20			.text "Program Corrupt",0
>018e34	43 6f 72 72 75 70 74 00
.018e3c					_COL_Found:
.018e3c	98		tya				tya
.018e3d	48		pha				pha
.018e3e	a0 00		ldy #$00			ldy 	#0
.018e40	68		pla				pla
.018e41	97 16		sta [$16],y			sta 	[zCodePtr],y
.018e43	20 9e 96	jsr $01969e			jsr 	UpdateProgramEnd 			; reset variable pointer
.018e46	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/branch.asm

.018e47					Command_GOTO:
.018e47	20 64 8e	jsr $018e64			jsr 	GotoGetLineNumber
.018e4a	4c 81 8e	jmp $018e81			jmp 	GotoChangeToLineNumber
.018e4d					Command_GOSUB:
.018e4d	20 64 8e	jsr $018e64			jsr 	GotoGetLineNumber
.018e50	20 e6 84	jsr $0184e6			jsr 	StackSavePosition
.018e53	a9 15		lda #$15			lda 	#(SMark_Gosub << 4)+SourcePosSize
.018e55	20 9f 84	jsr $01849f			jsr 	StackPushFrame
.018e58	4c 81 8e	jmp $018e81			jmp 	GotoChangeToLineNumber
.018e5b					Command_RETURN:
.018e5b	a9 10		lda #$10			lda 	#(SMark_Gosub << 4)
.018e5d	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018e60	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018e63	60		rts				rts
.018e64					GotoGetLineNumber:
.018e64	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger
.018e67	a5 82		lda $82				lda 	XS_Mantissa+2 				; check range
.018e69	05 83		ora $83				ora 	XS_Mantissa+3
.018e6b	d0 01		bne $018e6e			bne 	_GLINError
.018e6d	60		rts				rts
.018e6e					_GLINError:
.018e6e	20 57 85	jsr $018557			jsr ERR_Handler
>018e71	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018e79	20 4e 75 6d 62 65 72 00
.018e81					GotoChangeToLineNumber:
.018e81	a5 80		lda $80				lda 	XS_Mantissa+0 				; check line number not zero
.018e83	05 81		ora $81				ora 	XS_Mantissa+1
.018e85	f0 37		beq $018ebe			beq 	_GCTLFail
.018e87	a9 00		lda #$00			lda 	#BasicProgram & $FF
.018e89	85 16		sta $16				sta 	zCodePtr+0
.018e8b	a9 10		lda #$10			lda 	#BasicProgram >> 8
.018e8d	85 17		sta $17				sta 	zCodePtr+1
.018e8f	a9 00		lda #$00			lda 	#0
.018e91	85 18		sta $18				sta 	zCodePtr+2
.018e93	85 19		sta $19				sta 	zCodePtr+3
.018e95	a0 03		ldy #$03			ldy 	#3
.018e97					_GCTLLoop:
.018e97	a0 00		ldy #$00			ldy 	#0
.018e99	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018e9b	c9 00		cmp #$00			cmp 	#0
.018e9d	f0 1f		beq $018ebe			beq 	_GCTLFail
.018e9f	c8		iny				iny
.018ea0	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ea2	c5 80		cmp $80				cmp 	XS_Mantissa+0
.018ea4	d0 07		bne $018ead			bne 	_GCTLNext
.018ea6	c8		iny				iny
.018ea7	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018ea9	c5 81		cmp $81				cmp 	XS_Mantissa+1
.018eab	f0 0f		beq $018ebc			beq 	_GCTLExit
.018ead					_GCTLNext:
.018ead	a0 00		ldy #$00			ldy 	#0 							; point to offset
.018eaf	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.018eb1	18		clc				clc
.018eb2	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.018eb4	85 16		sta $16				sta 	zCodePtr
.018eb6	90 02		bcc $018eba			bcc 	_SNLNoCarry
.018eb8	e6 17		inc $17				inc 	zCodePtr+1
.018eba					_SNLNoCarry:
.018eba	80 db		bra $018e97			bra 	_GCTLLoop 					; try next line.
.018ebc					_GCTLExit:
.018ebc	c8		iny				iny
.018ebd	60		rts				rts
.018ebe					_GCTLFail:
.018ebe	20 57 85	jsr $018557			jsr ERR_Handler
>018ec1	42 61 64 20 4c 69 6e 65			.text "Bad Line Number",0
>018ec9	20 4e 75 6d 62 65 72 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/clr.asm

.018ed1					Command_CLR:
.018ed1					ResetRunStatus:
.018ed1	20 d7 97	jsr $0197d7			jsr 	VariableClear
.018ed4	20 8d 84	jsr $01848d			jsr 	StackReset
.018ed7	a9 00		lda #$00			lda 	#HighMemory & $FF
.018ed9	8d 00 03	sta $0300			sta 	StringPtr
.018edc	a9 7f		lda #$7f			lda 	#HighMemory >> 8
.018ede	8d 01 03	sta $0301			sta 	StringPtr+1
.018ee1	20 a1 99	jsr $0199a1			jsr 	ArrayResetDefault
.018ee4	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/stop.asm

.018ee5					Command_STOP:
.018ee5	20 57 85	jsr $018557			jsr ERR_Handler
>018ee8	53 74 6f 70 00				.text "Stop",0

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/while.asm

.018eed					Command_WHILE:
.018eed	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack, but don't yet push.
.018ef0	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger 			; calculate the while loop value.
.018ef3	a5 80		lda $80				lda 	XS_Mantissa+0				; check the result if zero
.018ef5	05 81		ora $81				ora 	XS_Mantissa+1
.018ef7	05 82		ora $82				ora 	XS_Mantissa+2
.018ef9	05 83		ora $83				ora 	XS_Mantissa+3
.018efb	f0 06		beq $018f03			beq 	_CWHSkip 					; if it is zero, then skip to WEND.
.018efd	a9 35		lda #$35			lda 	#(SMark_While << 4)+SourcePosSize
.018eff	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018f02	60		rts				rts
.018f03					_CWHSkip:
.018f03	a9 95		lda #$95			lda 	#token_Wend 				; look for the WEND token.
.018f05	20 00 84	jsr $018400			jsr 	StructureSearchSingle
.018f08	c8		iny				iny
.018f09	60		rts				rts
.018f0a					Command_WEND:
.018f0a	a9 30		lda #$30			lda 	#(SMark_While << 4)			; remove the frame
.018f0c	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018f0f	20 03 85	jsr $018503			jsr 	StackRestorePosition
.018f12	80 d9		bra $018eed			bra 	Command_WHILE 				; and do the while again.
.018f14	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/commands/structure/repeat.asm

.018f15					Command_REPEAT:
.018f15	20 e6 84	jsr $0184e6			jsr 	StackSavePosition			; save position into stack
.018f18	a9 25		lda #$25			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018f1a	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; push on stack
.018f1d	60		rts				rts
.018f1e					Command_UNTIL:
.018f1e	a9 20		lda #$20			lda 	#(SMark_Repeat << 4)		; remove the frame
.018f20	20 b6 84	jsr $0184b6			jsr 	StackPopFrame
.018f23	20 d2 90	jsr $0190d2			jsr 	EvaluateInteger				; work out UNTIL
.018f26	a5 80		lda $80				lda 	XS_Mantissa+0 				; check if zero.
.018f28	05 81		ora $81				ora 	XS_Mantissa+1
.018f2a	05 82		ora $82				ora 	XS_Mantissa+2
.018f2c	05 83		ora $83				ora 	XS_Mantissa+3
.018f2e	d0 08		bne $018f38			bne 	_CUTExit 					; if not, just exit
.018f30	20 03 85	jsr $018503			jsr 	StackRestorePosition 		; otherwise loop round again.
.018f33	a9 25		lda #$25			lda 	#(SMark_Repeat << 4)+SourcePosSize
.018f35	20 9f 84	jsr $01849f			jsr 	StackPushFrame 				; fix the stack back.
.018f38					_CUTExit:
.018f38	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/evaluate.asm

.018f39					EVESyntax:
.018f39	4c 28 85	jmp $018528			jmp 	SyntaxError
.018f3c					EvaluateExpression:
.018f3c	a2 00		ldx #$00			ldx 	#0 							; start with stack at 0.
.018f3e					EvaluateExpressionX:
.018f3e	a9 00		lda #$00			lda 	#0 							; start at precedence level 0.
.018f40					EvaluateExpressionXA:
.018f40	48		pha				pha 								; save precedence on stack.
.018f41	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f43	f0 f4		beq $018f39			beq 	EVESyntax 					; end of line, syntax error.
.018f45	c9 1b		cmp #$1b			cmp 	#26+1 						; is it A-Z ?
.018f47	b0 03		bcs $018f4c			bcs 	_EVNotVariable
.018f49	4c 16 90	jmp $019016			jmp 	_EVVariableHandler 			; if so, go to the variable handler.
.018f4c					_EVNotVariable:
.018f4c	c9 40		cmp #$40			cmp 	#$40 						; up to $40, syntax error.
.018f4e	90 e9		bcc $018f39			bcc 	EVESyntax
.018f50	c9 80		cmp #$80			cmp 	#$80 						; $40-$7F not integer
.018f52	b0 58		bcs $018fac			bcs 	_EVNotInteger
.018f54	20 44 90	jsr $019044			jsr 	EvaluateGetInteger
.018f57					_EVCheckDecimal:
.018f57	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f59	c9 fd		cmp #$fd			cmp 	#$FD 						; decimal ?
.018f5b	d0 05		bne $018f62			bne 	_EVGotAtom 					; no, get atom.
.018f5d					_EVIsDecimal:
.018f5d	20 6a 90	jsr $01906a			jsr 	EVGetDecimal 				; extend to the decimal part.
.018f60	80 00		bra $018f62			bra 	_EVGotAtom 					; and continue to got atom.
.018f62					_EVGotAtom:
.018f62	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f64	10 44		bpl $018faa			bpl 	_EVExitDrop 				; must be a token.
.018f66	c9 8f		cmp #$8f			cmp 	#firstKeywordPlus  			; check it's in the binary token range (they're first)
.018f68	b0 40		bcs $018faa			bcs 	_EVExitDrop
.018f6a	68		pla				pla 								; get current precedence
.018f6b	85 1e		sta $1e				sta 	zGenPtr 					; save in zGenPtr as temp.
.018f6d	da		phx				phx 								; save X
.018f6e	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f70	aa		tax				tax 								; put in X
.018f71	bf 0c 86 01	lda $01860c,x			lda 	BinaryPrecedence-$80,x 		; read the binary precedence.
.018f75	85 1f		sta $1f				sta 	zGenPtr+1 					; save it.
.018f77	fa		plx				plx 								; restore X
.018f78	c5 1e		cmp $1e				cmp 	zGenPtr 					; compared against the current precedence
.018f7a	90 2f		bcc $018fab			bcc 	_EVExit 					; exit if too low.
.018f7c	f0 2d		beq $018fab			beq 	_EVExit 					; exit if equals
.018f7e	a5 1e		lda $1e				lda 	zGenPtr 					; push precedence
.018f80	48		pha				pha
.018f81	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018f83	48		pha				pha
.018f84	c8		iny				iny
.018f85	da		phx				phx 								; save current position
.018f86	e8		inx				inx
.018f87	e8		inx				inx
.018f88	e8		inx				inx
.018f89	e8		inx				inx
.018f8a	e8		inx				inx
.018f8b	e8		inx				inx
.018f8c	a5 1f		lda $1f				lda 	zGenPtr+1 					; get the precedence of the operator in A.
.018f8e	20 40 8f	jsr $018f40			jsr 	EvaluateExpressionXA 		; do the RHS.
.018f91	fa		plx				plx 								; restore X
.018f92	68		pla				pla 								; get the binary operator in A.
.018f93					_EVCallA:
.018f93	da		phx				phx 								; save X again
.018f94	0a		asl a				asl 	a 							; double, lose the MSB.
.018f95	aa		tax				tax									; put in X
.018f96	bf bb 85 01	lda $0185bb,x			lda 	VectorTable,x 				; copy address into zGenPtr
.018f9a	8d 11 03	sta $0311			sta 	LocalVector+1
.018f9d	bf bc 85 01	lda $0185bc,x			lda 	VectorTable+1,x
.018fa1	8d 12 03	sta $0312			sta 	LocalVector+2
.018fa4	fa		plx				plx 								; restore X
.018fa5	20 1f 90	jsr $01901f			jsr 	EVCallLocalVector
.018fa8	80 b8		bra $018f62			bra 	_EVGotAtom 					; and loop back.
.018faa					_EVExitDrop:
.018faa	68		pla				pla
.018fab					_EVExit:
.018fab	60		rts				rts
.018fac					_EVNotInteger:
.018fac	c8		iny				iny
.018fad	c9 8b		cmp #$8b			cmp 	#token_minus 				; is it unary minus ?
.018faf	d0 16		bne $018fc7			bne 	_EVNotMinus
.018fb1	20 b3 90	jsr $0190b3			jsr 	EvaluateGetAtomX 			; get a numeric value into X.
.018fb4	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.018fb6	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.018fb8	f0 05		beq $018fbf			beq 	_EVMinusFloat
.018fba	20 60 9c	jsr $019c60			jsr 	IntegerNegateAlways 		; negation
.018fbd	80 a3		bra $018f62			bra 	_EVGotAtom 					; and go back.
.018fbf					_EVMinusFloat:
.018fbf	b5 85		lda $85,x			lda 	XS_Type,x 					; invert the sign bit.
.018fc1	49 80		eor #$80			eor 	#$80
.018fc3	95 85		sta $85,x			sta 	XS_Type,x
.018fc5	80 9b		bra $018f62			bra 	_EVGotAtom
.018fc7					_EVNotMinus:
.018fc7	c9 bd		cmp #$bd			cmp 	#token_lparen 				; is it left parenthesis
.018fc9	d0 17		bne $018fe2			bne 	_EVNotParenthesis
.018fcb	20 3e 8f	jsr $018f3e			jsr 	EvaluateExpressionX 		; full evaluate at level x.
.018fce	b7 16		lda [$16],y			lda 	[zCodePtr],y
.018fd0	c8		iny				iny
.018fd1	c9 be		cmp #$be			cmp 	#token_rparen 				; okay if right bracket.
.018fd3	f0 8d		beq $018f62			beq 	_EVGotAtom
.018fd5	20 57 85	jsr $018557			jsr ERR_Handler
>018fd8	4d 69 73 73 69 6e 67 20			.text "Missing )",0
>018fe0	29 00
.018fe2					_EVNotParenthesis:
.018fe2	c9 98		cmp #$98			cmp 	#token_not 					; is it not ?
.018fe4	d0 0c		bne $018ff2			bne 	_EVNotNot
.018fe6	20 b3 90	jsr $0190b3			jsr 	EvaluateGetAtomX 			; get expression in parenthesis.
.018fe9	20 f6 a0	jsr $01a0f6			jsr 	FPUToInteger 				; make it an integer - if possible.
.018fec	20 98 90	jsr $019098			jsr 	NotInteger 					; do the not calculation
.018fef	4c 62 8f	jmp $018f62			jmp 	_EVGotAtom
.018ff2					_EVNotNot:
.018ff2	c9 fe		cmp #$fe			cmp 	#$FE
.018ff4	d0 12		bne $019008			bne 	_EVNotString
.018ff6	20 75 97	jsr $019775			jsr 	CreateTempStringCopy 		; copy of string in code in temporary memory.
.018ff9	a5 20		lda $20				lda 	zTempStr 					; copy address of string into mantissa
.018ffb	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.018ffd	a5 21		lda $21				lda 	zTempStr+1
.018fff	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019001	a9 02		lda #$02			lda 	#2 							; set to type 2 (e.g. string)
.019003	95 85		sta $85,x			sta 	XS_Type,x
.019005	4c 62 8f	jmp $018f62			jmp 	_EVGotAtom
.019008					_EVNotString:
.019008	c9 98		cmp #$98			cmp 	#firstUnaryFunction
.01900a	90 04		bcc $019010			bcc 	_EVBadElement
.01900c	c9 b7		cmp #$b7			cmp 	#lastUnaryFunction+1
.01900e	90 03		bcc $019013			bcc 	_EVUnaryFunction
.019010					_EVBadElement:
.019010	4c 28 85	jmp $018528			jmp 	SyntaxError
.019013					_EVUnaryFunction:
.019013	4c 93 8f	jmp $018f93			jmp 	_EVCallA
.019016					_EVVariableHandler:
.019016	20 9b 97	jsr $01979b			jsr 	VariableFind 				; locate a variable
.019019	20 e3 9a	jsr $019ae3			jsr 	VariableGet 				; copy into memory.
.01901c	4c 62 8f	jmp $018f62			jmp 	_EVGotAtom 					; and go round.
.01901f					EVCallLocalVector:
.01901f	6c 11 03	jmp ($0311)			jmp 	(LocalVector+1)
.019022					EVShiftMantissaLeft6:
.019022	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 				; copy up, using exponent as a temp
.019024	95 84		sta $84,x			sta 	XS_Exponent,x
.019026	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019028	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01902a	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01902c	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01902e	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019030	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019032	a9 00		lda #$00			lda 	#0
.019034	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019036	20 39 90	jsr $019039			jsr 	_EVSMLShift 					; call it here to do it twice
.019039					_EVSMLShift:
.019039	56 84		lsr $84,x			lsr 	XS_Exponent,x
.01903b	76 83		ror $83,x			ror 	XS_Mantissa+3,x
.01903d	76 82		ror $82,x			ror 	XS_Mantissa+2,x
.01903f	76 81		ror $81,x			ror 	XS_Mantissa+1,x
.019041	76 80		ror $80,x			ror 	XS_Mantissa+0,x
.019043	60		rts				rts
.019044					EvaluateGetInteger:
.019044	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019046	29 3f		and #$3f			and 	#$3F 						; it's a constant 0-63
.019048	95 80		sta $80,x			sta 	XS_Mantissa,x 				; put into the mantissa space (32 bit integer)
.01904a	a9 00		lda #$00			lda 	#0
.01904c	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01904e	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019050	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019052	1a		inc a				inc 	a 							; set to type 1 (integer)
.019053	95 85		sta $85,x			sta 	XS_Type,x
.019055					_EVCheckNextInteger:
.019055	c8		iny				iny
.019056	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019058	49 40		eor #$40			eor 	#$40 						; 40-7F now 00-3F.
.01905a	c9 40		cmp #$40			cmp 	#$40 						; if not, we have an atom.
.01905c	b0 0b		bcs $019069			bcs 	_EVEndInteger
.01905e	48		pha				pha 								; save it.
.01905f	20 22 90	jsr $019022			jsr 	EVShiftMantissaLeft6 		; shift the mantissa left 6.
.019062	68		pla				pla
.019063	15 80		ora $80,x			ora 	XS_Mantissa+0,x 			; put in lower 6 bits.
.019065	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019067	80 ec		bra $019055			bra 	_EVCheckNextInteger
.019069					_EVEndInteger:
.019069	60		rts				rts
.01906a					EVGetDecimal:
.01906a	a9 2e		lda #$2e			lda 	#'.'							; put DP in NUM_Buffer
.01906c	8d 15 03	sta $0315			sta 	Num_Buffer
.01906f	da		phx				phx
.019070	c8		iny				iny
.019071	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019073	c8		iny				iny
.019074	3a		dec a				dec 	a								; convert to a string length.
.019075	3a		dec a				dec 	a
.019076	a2 01		ldx #$01			ldx 	#1 								; offset in X.
.019078					_EVGDCopy:
.019078	48		pha				pha 									; save count
.019079	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01907b	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.01907e	e8		inx				inx 									; forward ....
.01907f	c8		iny				iny
.019080	68		pla				pla 									; get count
.019081	3a		dec a				dec 	a 								; until zero
.019082	d0 f4		bne $019078			bne 	_EVGDCopy
.019084	9d 15 03	sta $0315,x			sta 	Num_Buffer,x 					; make string ASCIIZ.
.019087	fa		plx				plx 									; restore X
.019088	a9 15		lda #$15			lda 	#Num_Buffer & $FF 				; set zGenPtr
.01908a	85 1e		sta $1e				sta 	zGenPtr
.01908c	a9 03		lda #$03			lda 	#Num_Buffer >> 8
.01908e	85 1f		sta $1f				sta 	zGenPtr+1
.019090	5a		phy				phy 									; save Y
.019091	a0 00		ldy #$00			ldy 	#0 								; start position
.019093	20 b0 a2	jsr $01a2b0			jsr 	FPFromString 					; convert current
.019096	7a		ply				ply 									; restore Y
.019097	60		rts				rts
.019098					NotInteger:
.019098	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.01909a	49 ff		eor #$ff			eor 	#$FF
.01909c	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01909e	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0190a0	49 ff		eor #$ff			eor 	#$FF
.0190a2	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0190a4	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.0190a6	49 ff		eor #$ff			eor 	#$FF
.0190a8	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0190aa	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.0190ac	49 ff		eor #$ff			eor 	#$FF
.0190ae	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0190b0	60		rts				rts
.0190b1					EvaluateGetAtom:
.0190b1	a2 00		ldx #$00			ldx 	#0 								; start at the bottom :)
.0190b3					EvaluateGetAtomX:
.0190b3	a9 08		lda #$08			lda 	#8 								; very high precedence so no binary operations.
.0190b5	20 40 8f	jsr $018f40			jsr 	EvaluateExpressionXA
.0190b8	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0 (float) 1 (integer)
.0190ba	29 0f		and #$0f			and 	#15
.0190bc	c9 02		cmp #$02			cmp 	#2
.0190be	b0 01		bcs $0190c1			bcs 	EvaluateType
.0190c0	60		rts				rts
.0190c1					EvaluateType:
.0190c1	4c 38 85	jmp $018538			jmp 	TypeError
.0190c4					EvaluateNumber:
.0190c4	a2 00		ldx #$00			ldx 	#0
.0190c6					EvaluateNumberX:
.0190c6	20 3e 8f	jsr $018f3e			jsr 	EvaluateExpressionX
.0190c9	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 0/1
.0190cb	29 0f		and #$0f			and 	#15
.0190cd	c9 02		cmp #$02			cmp 	#2
.0190cf	b0 f0		bcs $0190c1			bcs 	EvaluateType
.0190d1	60		rts				rts
.0190d2					EvaluateInteger:
.0190d2	a2 00		ldx #$00			ldx 	#0
.0190d4					EvaluateIntegerX:
.0190d4	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX
.0190d7	20 f6 a0	jsr $01a0f6			jsr 	FPUToInteger
.0190da	60		rts				rts
.0190db					EvaluateString:
.0190db	a2 00		ldx #$00			ldx 	#0
.0190dd					EvaluateStringX:
.0190dd	20 3e 8f	jsr $018f3e			jsr 	EvaluateExpressionX
.0190e0	b5 85		lda $85,x			lda 	XS_Type,x 						; check type is 2
.0190e2	29 0f		and #$0f			and 	#15
.0190e4	c9 02		cmp #$02			cmp 	#2
.0190e6	d0 d9		bne $0190c1			bne 	EvaluateType
.0190e8	b5 80		lda $80,x			lda 	XS_Mantissa,x 					; copy to zGenPtr
.0190ea	85 1e		sta $1e				sta 	zGenPtr
.0190ec	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0190ee	85 1f		sta $1f				sta 	zGenPtr+1
.0190f0	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/logical.asm

.0190f1					BinaryOp_And:
.0190f1	20 45 91	jsr $019145			jsr 	BinaryMakeBothInteger
.0190f4	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.0190f6	35 86		and $86,x			and 	XS2_Mantissa+0,x
.0190f8	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0190fa	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.0190fc	35 87		and $87,x			and 	XS2_Mantissa+1,x
.0190fe	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019100	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.019102	35 88		and $88,x			and 	XS2_Mantissa+2,x
.019104	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019106	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.019108	35 89		and $89,x			and 	XS2_Mantissa+3,x
.01910a	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01910c	60		rts				rts
.01910d					BinaryOp_Or:
.01910d	20 45 91	jsr $019145			jsr 	BinaryMakeBothInteger
.019110	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.019112	15 86		ora $86,x			ora 	XS2_Mantissa+0,x
.019114	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019116	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.019118	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.01911a	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01911c	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01911e	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.019120	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019122	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.019124	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.019126	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019128	60		rts				rts
.019129					BinaryOp_Eor:
.019129					BinaryOp_Xor:
.019129	20 45 91	jsr $019145			jsr 	BinaryMakeBothInteger
.01912c	b5 80		lda $80,x			lda		XS_Mantissa+0,x
.01912e	55 86		eor $86,x			eor 	XS2_Mantissa+0,x
.019130	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019132	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.019134	55 87		eor $87,x			eor 	XS2_Mantissa+1,x
.019136	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019138	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01913a	55 88		eor $88,x			eor 	XS2_Mantissa+2,x
.01913c	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01913e	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.019140	55 89		eor $89,x			eor 	XS2_Mantissa+3,x
.019142	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019144	60		rts				rts
.019145					BinaryMakeBothInteger:
.019145	da		phx				phx 								; save X
.019146	e8		inx				inx
.019147	e8		inx				inx
.019148	e8		inx				inx
.019149	e8		inx				inx
.01914a	e8		inx				inx
.01914b	e8		inx				inx
.01914c	20 50 91	jsr $019150			jsr 	BinaryMakeInteger 			; convert to integer.
.01914f	fa		plx				plx 								; restore X and fall through.
.019150					BinaryMakeInteger:
.019150	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.019152	29 0f		and #$0f			and 	#15 						; check type zero
.019154	f0 04		beq $01915a			beq 	_BMIConvert 				; if float convert to integer.
.019156	4a		lsr a				lsr 	a 							; if bit 0 clear it's not an integer
.019157	90 04		bcc $01915d			bcc 	_BMIError
.019159	60		rts				rts
.01915a					_BMIConvert:
.01915a	4c f6 a0	jmp $01a0f6			jmp 	FPUToInteger 				; convert to integer
.01915d					_BMIError:
.01915d	4c 38 85	jmp $018538			jmp 	TypeError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/compare.asm

.019160					Binary_Equal:
.019160	20 a7 91	jsr $0191a7			jsr 	CompareValues
.019163	09 00		ora #$00			ora 	#0
.019165	f0 04		beq $01916b			beq 	CCTrue
.019167	a9 00		lda #$00	CCFalse:lda 	#0							; set false
.019169	80 02		bra $01916d			bra 	CCWrite
.01916b	a9 ff		lda #$ff	CCTrue:	lda 	#$FF 						; set true
.01916d	95 80		sta $80,x	CCWrite:sta 	XS_Mantissa+0,x 			; write into integer slot
.01916f	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019171	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019173	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019175	a9 01		lda #$01			lda 	#1
.019177	95 85		sta $85,x			sta 	XS_Type,x 					; set type to integer whatever.
.019179	60		rts				rts
.01917a					Binary_NotEqual:
.01917a	20 a7 91	jsr $0191a7			jsr 	CompareValues
.01917d	09 00		ora #$00			ora 	#0
.01917f	f0 e6		beq $019167			beq 	CCFalse
.019181	80 e8		bra $01916b			bra 	CCTrue
.019183					Binary_Less:
.019183	20 a7 91	jsr $0191a7			jsr 	CompareValues
.019186	09 00		ora #$00			ora 	#0
.019188	30 e1		bmi $01916b			bmi 	CCTrue
.01918a	80 db		bra $019167			bra 	CCFalse
.01918c					Binary_LessEqual:
.01918c	20 a7 91	jsr $0191a7			jsr 	CompareValues
.01918f	c9 01		cmp #$01			cmp 	#1
.019191	d0 d8		bne $01916b			bne 	CCTrue
.019193	80 d2		bra $019167			bra 	CCFalse
.019195					Binary_GreaterEqual:
.019195	20 a7 91	jsr $0191a7			jsr 	CompareValues
.019198	09 00		ora #$00			ora 	#0
.01919a	10 cf		bpl $01916b			bpl 	CCTrue
.01919c	80 c9		bra $019167			bra 	CCFalse
.01919e					Binary_Greater:
.01919e	20 a7 91	jsr $0191a7			jsr 	CompareValues
.0191a1	c9 01		cmp #$01			cmp 	#1
.0191a3	f0 c6		beq $01916b			beq 	CCTrue
.0191a5	80 c0		bra $019167			bra 	CCFalse
.0191a7					CompareValues:
.0191a7	b5 85		lda $85,x			lda 	XS_Type,x 					; and the types together
.0191a9	35 8b		and $8b,x			and 	XS2_Type,x
.0191ab	c9 02		cmp #$02			cmp 	#2
.0191ad	f0 11		beq $0191c0			beq 	_CVString
.0191af	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.0191b1	35 8b		and $8b,x			and 	XS2_Type,x
.0191b3	4a		lsr a				lsr 	a 							; shift bit 0 into C
.0191b4	90 03		bcc $0191b9			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.0191b6	4c 02 92	jmp $019202			jmp 	CompareInteger32 							; so execute code at \1
.0191b9					_BCFloat:
.0191b9	20 a6 92	jsr $0192a6			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.0191bc	4c ef 9f	jmp $019fef			jmp 	FPCompare 							; and execute code at \2
.0191bf	60		rts				rts
.0191c0					_CVString:
.0191c0	da		phx				phx 								; save XY
.0191c1	5a		phy				phy
.0191c2	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.0191c4	85 1a		sta $1a				sta		zLTemp1+0
.0191c6	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0191c8	85 1b		sta $1b				sta 	zLTemp1+1
.0191ca	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.0191cc	85 1c		sta $1c				sta 	zLTemp1+2
.0191ce	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.0191d0	85 1d		sta $1d				sta 	zLTemp1+3
.0191d2	a0 00		ldy #$00			ldy 	#0 							; find the shorter string length, we compare this.
.0191d4	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0191d6	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.0191d8	90 02		bcc $0191dc			bcc 	_CVCommon
.0191da	b1 1c		lda ($1c),y			lda 	(zLTemp1+2),y
.0191dc					_CVCommon:
.0191dc	aa		tax				tax 								; put shorter string length in zero.
.0191dd	f0 0c		beq $0191eb			beq 	_CVMatch 					; if the shorter is zero, then the 'common parts' match
.0191df					_CVCompare:
.0191df	c8		iny				iny 								; next character
.0191e0	b1 1a		lda ($1a),y			lda 	(zLTemp1),y 				; compare characters
.0191e2	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.0191e4	90 13		bcc $0191f9			bcc 	_CVReturnLess 				; <
.0191e6	d0 15		bne $0191fd			bne 	_CVReturnGreater 			; >
.0191e8	ca		dex				dex 								; until common length matched.
.0191e9	d0 f4		bne $0191df			bne 	_CVCompare
.0191eb					_CVMatch:
.0191eb	a0 00		ldy #$00			ldy 	#0
.0191ed	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0191ef	d1 1c		cmp ($1c),y			cmp 	(zLTemp1+2),y
.0191f1	90 06		bcc $0191f9			bcc 	_CVReturnLess 				; <
.0191f3	d0 08		bne $0191fd			bne 	_CVReturnGreater 			; >
.0191f5	a9 00		lda #$00			lda 	#0
.0191f7	80 06		bra $0191ff			bra 	_CVExit 					; same common, same length, same string
.0191f9					_CVReturnLess:
.0191f9	a9 ff		lda #$ff			lda 	#$FF
.0191fb	80 02		bra $0191ff			bra 	_CVExit
.0191fd					_CVReturnGreater:
.0191fd	a9 01		lda #$01			lda 	#$01
.0191ff					_CVExit:
.0191ff	7a		ply				ply
.019200	fa		plx				plx
.019201	60		rts				rts
.019202					CompareInteger32:
.019202	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; invert both sign flags, makes compare signed
.019204	49 80		eor #$80			eor 	#$80
.019206	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019208	b5 89		lda $89,x			lda 	XS2_Mantissa+3,x
.01920a	49 80		eor #$80			eor 	#$80
.01920c	95 89		sta $89,x			sta 	XS2_Mantissa+3,x
.01920e	20 8c 92	jsr $01928c			jsr 	SubInteger32 				; subtraction
.019211	90 0d		bcc $019220			bcc 	_CI32Less 					; cc return -1
.019213	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; check if zero
.019215	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019217	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019219	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01921b	f0 02		beq $01921f			beq 	_CI32Exit
.01921d	a9 01		lda #$01			lda 	#1							; otherwise it's positive
.01921f					_CI32Exit:
.01921f	60		rts				rts
.019220					_CI32Less:
.019220	a9 ff		lda #$ff			lda 	#$FF
.019222	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/arithmetic.asm

.019223					BinaryOp_Add:
.019223	b5 85		lda $85,x			lda 	XS_Type,x  					; and types together
.019225	35 8b		and $8b,x			and 	XS2_Type,x
.019227	29 02		and #$02			and 	#2 							; if bit 1 set they are both strings
.019229	d0 11		bne $01923c			bne 	_BOAString
.01922b	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.01922d	35 8b		and $8b,x			and 	XS2_Type,x
.01922f	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019230	90 03		bcc $019235			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019232	4c 72 92	jmp $019272			jmp 	AddInteger32 							; so execute code at \1
.019235					_BCFloat:
.019235	20 a6 92	jsr $0192a6			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.019238	4c ca 9d	jmp $019dca			jmp 	FPAdd 							; and execute code at \2
.01923b	60		rts				rts
.01923c					_BOAString:
.01923c	4c c0 92	jmp $0192c0			jmp 	ConcatenateString 			; concatenate two strings.
.01923f					BinaryOp_Subtract:
.01923f	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019241	35 8b		and $8b,x			and 	XS2_Type,x
.019243	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019244	90 03		bcc $019249			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019246	4c 8c 92	jmp $01928c			jmp 	SubInteger32 							; so execute code at \1
.019249					_BCFloat:
.019249	20 a6 92	jsr $0192a6			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.01924c	4c c2 9d	jmp $019dc2			jmp 	FPSubtract 							; and execute code at \2
.01924f	60		rts				rts
.019250					BinaryOp_Multiply:
.019250	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019252	35 8b		and $8b,x			and 	XS2_Type,x
.019254	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019255	90 03		bcc $01925a			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019257	4c 9b 9b	jmp $019b9b			jmp 	MulInteger32 							; so execute code at \1
.01925a					_BCFloat:
.01925a	20 a6 92	jsr $0192a6			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.01925d	4c f1 9e	jmp $019ef1			jmp 	FPMultiply 							; and execute code at \2
.019260	60		rts				rts
.019261					BinaryOp_Divide:
.019261	b5 85		lda $85,x			lda 	XS_Type,x 					; and 2 type bytes together.
.019263	35 8b		and $8b,x			and 	XS2_Type,x
.019265	4a		lsr a				lsr 	a 							; shift bit 0 into C
.019266	90 03		bcc $01926b			bcc 	_BCFloat 					; if zero, they aren't both integer, so do it as float
.019268	4c d9 9b	jmp $019bd9			jmp 	DivInteger32 							; so execute code at \1
.01926b					_BCFloat:
.01926b	20 a6 92	jsr $0192a6			jsr 	BinaryMakeBothFloat 		; validate they are floats, make them both float.
.01926e	4c 7e 9e	jmp $019e7e			jmp 	FPDivide 							; and execute code at \2
.019271	60		rts				rts
.019272					AddInteger32:
.019272	18		clc				clc
.019273	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019275	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019277	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019279	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01927b	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.01927d	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01927f	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019281	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019283	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019285	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019287	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019289	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01928b	60		rts				rts
.01928c					SubInteger32:
.01928c	38		sec				sec
.01928d	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.01928f	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019291	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019293	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019295	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019297	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019299	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01929b	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.01929d	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01929f	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.0192a1	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.0192a3	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0192a5	60		rts				rts
.0192a6					BinaryMakeBothFloat:
.0192a6	da		phx				phx 								; save X
.0192a7	e8		inx				inx
.0192a8	e8		inx				inx
.0192a9	e8		inx				inx
.0192aa	e8		inx				inx
.0192ab	e8		inx				inx
.0192ac	e8		inx				inx
.0192ad	20 b1 92	jsr $0192b1			jsr 	BinaryMakeFloat 			; convert to float.
.0192b0	fa		plx				plx 								; restore X and fall through.
.0192b1					BinaryMakeFloat:
.0192b1	b5 85		lda $85,x			lda 	XS_Type,x 					; get type byte.
.0192b3	4a		lsr a				lsr 	a 							; if bit 0 set, it's integer so convert
.0192b4	b0 04		bcs $0192ba			bcs 	_BMFConvert
.0192b6	4a		lsr a				lsr 	a 							; if bit 1 set, it's a string so error (type)
.0192b7	b0 04		bcs $0192bd			bcs 	_BMFError
.0192b9	60		rts				rts
.0192ba					_BMFConvert:
.0192ba	4c aa a0	jmp $01a0aa			jmp 	FPUToFloat 					; convert to float
.0192bd					_BMFError:
.0192bd	4c 38 85	jmp $018538			jmp 	TypeError
.0192c0					ConcatenateString:
.0192c0	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy string addresses to ZLTemp and ZLTemp+2
.0192c2	85 1a		sta $1a				sta		zLTemp1+0
.0192c4	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0192c6	85 1b		sta $1b				sta 	zLTemp1+1
.0192c8	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x
.0192ca	85 1c		sta $1c				sta 	zLTemp1+2
.0192cc	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.0192ce	85 1d		sta $1d				sta 	zLTemp1+3
.0192d0	5a		phy				phy
.0192d1	a0 00		ldy #$00			ldy 	#0 							; work out total length.
.0192d3	b1 1a		lda ($1a),y			lda 	(zlTemp1),y
.0192d5	71 1c		adc ($1c),y			adc 	(zlTemp1+2),y
.0192d7	7a		ply				ply
.0192d8	b0 33		bcs $01930d			bcs 	_CSError					; check in range.
.0192da	c9 fe		cmp #$fe			cmp 	#maxString+1
.0192dc	b0 2f		bcs $01930d			bcs 	_CSError
.0192de	20 3a 97	jsr $01973a			jsr 	AllocateTempString 			; store the result
.0192e1	20 f8 92	jsr $0192f8			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.0192e4	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; point zLTemp1 to second string
.0192e6	85 1a		sta $1a				sta 	zLTemp1
.0192e8	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x
.0192ea	85 1b		sta $1b				sta 	zLTemp1+1
.0192ec	20 f8 92	jsr $0192f8			jsr 	_CSCopyString 				; copy zlTemp1 string in.
.0192ef	a5 20		lda $20				lda 	zTempStr 					; point current to new string
.0192f1	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0192f3	a5 21		lda $21				lda 	zTempStr+1
.0192f5	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0192f7	60		rts				rts
.0192f8					_CSCopyString:
.0192f8	da		phx				phx
.0192f9	5a		phy				phy
.0192fa	a0 00		ldy #$00			ldy 	#0 							; get length
.0192fc	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.0192fe	f0 0a		beq $01930a			beq 	_CSCSExit 					; if zero, exit
.019300	aa		tax				tax 								; put in X
.019301					_CSCSLoop:
.019301	c8		iny				iny 								; get next char
.019302	b1 1a		lda ($1a),y			lda 	(zLTemp1),y
.019304	20 65 97	jsr $019765			jsr		WriteTempString 			; copy out
.019307	ca		dex				dex 								; do whole string
.019308	d0 f7		bne $019301			bne 	_CSCSLoop
.01930a					_CSCSExit:
.01930a	7a		ply				ply
.01930b	fa		plx				plx
.01930c	60		rts				rts
.01930d					_CSError:
.01930d	20 57 85	jsr $018557			jsr ERR_Handler
>019310	53 74 72 69 6e 67 20 74			.text "String too long",0
>019318	6f 6f 20 6c 6f 6e 67 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/sgn.asm

.019320					Unary_Sgn:
.019320	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; get value
.019323	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; check right bracket.
.019326	20 44 93	jsr $019344			jsr 	GetSignCurrent 				; get sign.
.019329	09 00		ora #$00			ora 	#0
.01932b	10 08		bpl $019335			bpl		UnarySetAInteger			; if 0,1 return that.
.01932d	80 00		bra $01932f			bra 	UnarySetAMinus1 			; -1 return $FFFFF...
.01932f					UnarySetAMinus1:
.01932f	a9 ff		lda #$ff			lda 	#$FF
.019331	95 80		sta $80,x			sta 	XS_Mantissa,x
.019333	80 04		bra $019339			bra 	UnarySetAFill
.019335					UnarySetAInteger:
.019335	95 80		sta $80,x			sta 	XS_Mantissa,x
.019337	a9 00		lda #$00			lda 	#0
.019339					UnarySetAFill:
.019339	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01933b	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01933d	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01933f	a9 01		lda #$01			lda 	#1
.019341	95 85		sta $85,x			sta 	XS_Type,x
.019343	60		rts				rts
.019344					GetSignCurrent:
.019344	b5 85		lda $85,x			lda 	XS_Type,x 					; identify type.
.019346	4a		lsr a				lsr 	a 							; if LSB set it is integer.
.019347	90 15		bcc $01935e			bcc 	_GSCFloat
.019349	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01934b	30 0e		bmi $01935b			bmi 	_GSCMinus1
.01934d	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.01934f	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019351	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019353	d0 03		bne $019358			bne 	_GSCPlus1
.019355					_GSCZero:
.019355	a9 00		lda #$00			lda 	#0
.019357	60		rts				rts
.019358					_GSCPlus1:
.019358	a9 01		lda #$01			lda 	#$01
.01935a	60		rts				rts
.01935b					_GSCMinus1:
.01935b	a9 ff		lda #$ff			lda 	#$FF
.01935d	60		rts				rts
.01935e					_GSCFloat:
.01935e	34 85		bit $85,x			bit 	XS_Type,x
.019360	70 f3		bvs $019355			bvs 	_GSCZero
.019362	30 f7		bmi $01935b			bmi 	_GSCMinus1
.019364	80 f2		bra $019358			bra 	_GSCPlus1

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/abs.asm

.019366					Unary_Abs:
.019366	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; get value
.019369	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; check right bracket.
.01936c	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.01936e	29 0f		and #$0f			and 	#15 						; if type bits zero, it's float.
.019370	f0 07		beq $019379			beq 	_UAMinusFloat
.019372	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; check MSB
.019374	10 09		bpl $01937f			bpl 	_UAExit
.019376	4c 60 9c	jmp $019c60			jmp 	IntegerNegateAlways 		; negation
.019379					_UAMinusFloat:
.019379	b5 85		lda $85,x			lda 	XS_Type,x 					; clear the sign bit.
.01937b	29 7f		and #$7f			and		#$7F
.01937d	95 85		sta $85,x			sta 	XS_Type,x
.01937f					_UAExit:
.01937f	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/peek.asm

.019380					Unary_Peek:
.019380	a9 01		lda #$01			lda 	#1
.019382	80 06		bra $01938a			bra 	UPMain
.019384					Unary_Deek:
.019384	a9 02		lda #$02			lda 	#2
.019386	80 02		bra $01938a			bra 	UPMain
.019388					Unary_Leek:
.019388	a9 04		lda #$04			lda 	#4
.01938a					UPMain:
.01938a	48		pha				pha 								; set bytes to copy.
.01938b	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 			; numeric parameter
.01938e	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.019391	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy the mantissa into ZLTemp1 (address)
.019393	85 1a		sta $1a				sta 	zLTemp1
.019395	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019397	85 1b		sta $1b				sta 	zLTemp1+1
.019399	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01939b	85 1c		sta $1c				sta 	zLTemp1+2
.01939d	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01939f	85 1d		sta $1d				sta 	zLTemp1+3
.0193a1	a9 00		lda #$00			lda 	#0 							; clear target area
.0193a3	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0193a5	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0193a7	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0193a9	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0193ab	68		pla				pla 								; restore bytes to copy
.0193ac	da		phx				phx 								; save XY
.0193ad	5a		phy				phy
.0193ae	20 7c 96	jsr $01967c			jsr 	MemRead 					; read the bytes in
.0193b1	7a		ply				ply 								; restore and exit
.0193b2	fa		plx				plx
.0193b3	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/mod.asm

.0193b4					Unary_Mod:
.0193b4	20 dc 93	jsr $0193dc			jsr 	_UMParameter 				; first parameter
.0193b7	20 02 97	jsr $019702			jsr 	CheckNextComma
.0193ba	da		phx				phx 								; second parameter
.0193bb	e8		inx				inx
.0193bc	e8		inx				inx
.0193bd	e8		inx				inx
.0193be	e8		inx				inx
.0193bf	e8		inx				inx
.0193c0	e8		inx				inx
.0193c1	20 dc 93	jsr $0193dc			jsr 	_UMParameter
.0193c4	fa		plx				plx
.0193c5	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen
.0193c8	20 d9 9b	jsr $019bd9			jsr 	DivInteger32 				; divide
.0193cb	a5 1a		lda $1a				lda 	zLTemp1+0 					; modulus is in zLTemp, copy it.
.0193cd	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0193cf	a5 1b		lda $1b				lda 	zLTemp1+1
.0193d1	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0193d3	a5 1c		lda $1c				lda 	zLTemp1+2
.0193d5	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0193d7	a5 1d		lda $1d				lda 	zLTemp1+3
.0193d9	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0193db	60		rts				rts
.0193dc					_UMParameter:
.0193dc	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 			; get value
.0193df	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; absolute value
.0193e1	10 03		bpl $0193e6			bpl 	_UMNotSigned
.0193e3	20 60 9c	jsr $019c60			jsr 	IntegerNegateAlways
.0193e6					_UMNotSigned:
.0193e6	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/number/usr.asm

.0193e7					Unary_Usr:
.0193e7	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; numeric parameter
.0193ea	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.0193ed	da		phx				phx 								; save XY
.0193ee	5a		phy				phy
.0193ef	ea		nop				nop
.0193f0	22 0c 03 00	jsl $00030c			jsl 	UserVector
.0193f4	7a		ply				ply 								; and exit
.0193f5	fa		plx				plx
.0193f6	60		rts				rts
.0193f7					USRDefault:
.0193f7	20 57 85	jsr $018557			jsr ERR_Handler
>0193fa	4e 6f 20 55 53 52 20 76			.text "No USR vector.",0
>019402	65 63 74 6f 72 2e 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/val.asm

.019409					Unary_Val:
.019409	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 			; get string
.01940c	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; check right bracket.
.01940f	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; put string address +1 into zGenPtr
.019411	85 1e		sta $1e				sta 	zGenPtr
.019413	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019415	85 1f		sta $1f				sta 	zGenPtr+1
.019417	5a		phy				phy
.019418	a0 00		ldy #$00			ldy 	#0 							; get count of characters.
.01941a	b1 1e		lda ($1e),y			lda 	(zGenPtr),y  				; if zero, it's bad obviously :)
.01941c	f0 54		beq $019472			beq 	_UVBadNumber
.01941e	48		pha				pha 								; save length.
.01941f	1a		inc a				inc 	a 							; one for the length, one for the terminator
.019420	1a		inc a				inc 	a
.019421	20 3a 97	jsr $01973a			jsr 	AllocateTempString
.019424	c8		iny				iny 								; move to the next.
.019425	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get character
.019427	49 2d		eor #$2d			eor 	#"-"						; zero if minus sign
.019429	8d a0 03	sta $03a0			sta 	ValSign
.01942c	d0 04		bne $019432			bne 	_UVNotMinus
.01942e	c8		iny				iny 								; skip over it.
.01942f	68		pla				pla 								; decrement character count.
.019430	3a		dec a				dec 	a
.019431	48		pha				pha
.019432					_UVNotMinus:
.019432	68		pla				pla 								; this is the count.
.019433	48		pha		_UVCopy:pha									; copy into new temp string which is ASCIIZ
.019434	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.019436	c8		iny				iny
.019437	20 65 97	jsr $019765			jsr 	WriteTempString
.01943a	68		pla				pla
.01943b	3a		dec a				dec 	a
.01943c	d0 f5		bne $019433			bne 	_UVCopy
.01943e	20 65 97	jsr $019765			jsr 	WriteTempString 			; make it ASCIIZ
.019441	18		clc				clc
.019442	a5 20		lda $20				lda 	zTempStr 					; tempstring +1 => genptr
.019444	69 01		adc #$01			adc 	#1
.019446	85 1e		sta $1e				sta 	zGenPtr
.019448	a5 21		lda $21				lda 	zTempStr+1
.01944a	69 00		adc #$00			adc 	#0
.01944c	85 1f		sta $1f				sta 	zGenPtr+1
.01944e	18		clc				clc
.01944f	20 32 9d	jsr $019d32			jsr 	IntFromString 				; first bit.
.019452	b0 1e		bcs $019472			bcs 	_UVBadNumber
.019454	20 b0 a2	jsr $01a2b0			jsr 	FPFromString				; try for a float part.
.019457	ad a0 03	lda $03a0			lda 	ValSign 					; was it negative
.01945a	d0 10		bne $01946c			bne 	_UVNotNegative
.01945c	b5 85		lda $85,x			lda 	XS_Type,x 					; check if integer
.01945e	4a		lsr a				lsr 	a
.01945f	b0 08		bcs $019469			bcs 	_UVInteger
.019461	b5 85		lda $85,x			lda 	XS_Type,x 					; set sign bit
.019463	09 80		ora #$80			ora 	#$80
.019465	95 85		sta $85,x			sta 	XS_Type,x
.019467	80 03		bra $01946c			bra 	_UVNotNegative
.019469					_UVInteger:
.019469	20 60 9c	jsr $019c60			jsr 	IntegerNegateAlways 		; sign it.
.01946c					_UVNotNegative:
.01946c	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; used everything
.01946e	d0 02		bne $019472			bne 	_UVBadNumber
.019470	7a		ply				ply
.019471	60		rts				rts
.019472					_UVBadNumber:
.019472	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/str.asm

.019475					Unary_Str:
.019475	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; numeric parameter
.019478	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.01947b	a9 00		lda #$00			lda 	#0 							; reset buffer index
.01947d	8d 14 03	sta $0314			sta 	NumBufX
.019480	b5 85		lda $85,x			lda 	XS_Type,x 					; get type
.019482	4a		lsr a				lsr 	a
.019483	b0 05		bcs $01948a			bcs 	_USInt 						; if msb set do as integer
.019485	20 f5 a1	jsr $01a1f5			jsr 	FPToString 					; call fp to str otherwise
.019488	80 03		bra $01948d			bra 	_USDuplicate
.01948a	20 7d 9c	jsr $019c7d	_USInt:	jsr 	IntToString
.01948d					_USDuplicate:
.01948d	ad 14 03	lda $0314			lda 	NumBufX 					; chars in buffer
.019490	1a		inc a				inc 	a 							; one more for length
.019491	20 3a 97	jsr $01973a			jsr 	AllocateTempString 			; allocate space for it.
.019494	5a		phy				phy 								; save Y
.019495	a0 00		ldy #$00			ldy 	#0 							; start copying
.019497	b9 15 03	lda $0315,y	_USCopy:lda 	Num_Buffer,y 				; get and write
.01949a	20 65 97	jsr $019765			jsr 	WriteTempString
.01949d	c8		iny				iny
.01949e	cc 14 03	cpy $0314			cpy 	NumBufX 					; done the lot
.0194a1	d0 f4		bne $019497			bne 	_USCopy
.0194a3	7a		ply				ply 								; restore Y
.0194a4	4c 6f 96	jmp $01966f			jmp 	UnaryReturnTempStr 			; return new temporary string.

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/asc.asm

.0194a7					Unary_Asc:
.0194a7	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 			; string parameter
.0194aa	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.0194ad	5a		phy				phy 								; get the string length
.0194ae	a0 00		ldy #$00			ldy 	#0
.0194b0	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.0194b2	f0 07		beq $0194bb			beq 	_UAIllegal 					; must be at least one character
.0194b4	c8		iny				iny
.0194b5	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; read it.
.0194b7	7a		ply				ply
.0194b8	4c 35 93	jmp $019335			jmp 	UnarySetAInteger
.0194bb					_UAIllegal:
.0194bb	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/len.asm

.0194be					Unary_Len:
.0194be	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 			; string parameter
.0194c1	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.0194c4	5a		phy				phy 								; get the string length
.0194c5	a0 00		ldy #$00			ldy 	#0
.0194c7	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.0194c9	7a		ply				ply
.0194ca	4c 35 93	jmp $019335			jmp 	UnarySetAInteger

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/slice.asm

.0194cd					Unary_Mid:
.0194cd	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 				; get string.
.0194d0	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.0194d2	48		pha				pha
.0194d3	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0194d5	48		pha				pha
.0194d6	20 02 97	jsr $019702			jsr 	CheckNextComma 					; skip comma
.0194d9	20 62 95	jsr $019562			jsr 	SLIByteParameter 				; get a byte parameter (start)
.0194dc	48		pha				pha 									; and push it.
.0194dd	20 02 97	jsr $019702			jsr 	CheckNextComma 					; skip comma
.0194e0	20 62 95	jsr $019562			jsr 	SLIByteParameter 				; get a byte parameter (#chars)
.0194e3	48		pha				pha 									; and push it.
.0194e4	80 41		bra $019527			bra 	SLIProcess
.0194e6					Unary_Left:
.0194e6	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 				; get string.
.0194e9	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.0194eb	48		pha				pha
.0194ec	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.0194ee	48		pha				pha
.0194ef	a9 01		lda #$01			lda 	#1 								; push start position (1)
.0194f1	48		pha				pha
.0194f2	20 02 97	jsr $019702			jsr 	CheckNextComma 					; skip comma
.0194f5	20 62 95	jsr $019562			jsr 	SLIByteParameter 				; get a byte parameter (# chars)
.0194f8	48		pha				pha 									; and push it.
.0194f9	80 2c		bra $019527			bra 	SLIProcess
.0194fb					Unary_Right:
.0194fb	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 				; get string.
.0194fe	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 				; push address on stack
.019500	48		pha				pha
.019501	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019503	48		pha				pha
.019504	da		phx				phx 									; get the string length and push on stack.
.019505	a2 00		ldx #$00			ldx 	#0
.019507	a1 1e		lda ($1e,x)			lda		(zGenPtr,x)
.019509	fa		plx				plx
.01950a	48		pha				pha
.01950b	20 02 97	jsr $019702			jsr 	CheckNextComma 					; skip comma
.01950e	20 62 95	jsr $019562			jsr 	SLIByteParameter 				; get a byte parameter.
.019511	8d 9e 03	sta $039e			sta 	SignCount 						; save in temporary.
.019514	68		pla				pla 									; restore string length.
.019515	1a		inc a				inc 	a 								; we add one. length 5, right 2, we start at 4.
.019516	38		sec				sec
.019517	ed 9e 03	sbc $039e			sbc 	SignCount 						; subtract characters needed, gives start position.
.01951a	f0 02		beq $01951e			beq 	_URStart 						; if <= 0 start from 1.
.01951c	10 02		bpl $019520			bpl 	_UROkay
.01951e					_URStart:
.01951e	a9 01		lda #$01			lda 	#1
.019520					_UROkay:
.019520	48		pha				pha 									; push start
.019521	ad 9e 03	lda $039e			lda 	SignCount 						; push count of characters
.019524	48		pha				pha
.019525	80 00		bra $019527			bra 	SLIProcess
.019527					SLIProcess:
.019527	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 				; closing right bracket.
.01952a	68		pla				pla
.01952b	8d a2 03	sta $03a2			sta 	SliceCount 						; count in signcount
.01952e	1a		inc a				inc 	a 								; allocate +1 for it.
.01952f	20 3a 97	jsr $01973a			jsr 	AllocateTempString
.019532	68		pla				pla 									; pop start number off stack.
.019533	f0 3b		beq $019570			beq 	SLIError 						; exit if start = 0
.019535	8d a1 03	sta $03a1			sta 	SliceStart
.019538	68		pla				pla  									; pop string address.
.019539	85 1f		sta $1f				sta 	zGenPtr+1
.01953b	68		pla				pla
.01953c	85 1e		sta $1e				sta 	zGenPtr
.01953e	da		phx				phx
.01953f	5a		phy				phy
.019540	a2 00		ldx #$00			ldx 	#0 								; point to string length.
.019542	ac a1 03	ldy $03a1			ldy 	SliceStart 						; start of the string (+1 for count)
.019545					_SLICopy:
.019545	ad a2 03	lda $03a2			lda 	SliceCount 						; done count characters
.019548	f0 12		beq $01955c			beq 	_SLIExit
.01954a	ce a2 03	dec $03a2			dec 	SliceCount
.01954d	98		tya				tya 									; index of character
.01954e	c1 1e		cmp ($1e,x)			cmp 	(zGenPtr,x)						; compare against length
.019550	f0 02		beq $019554			beq 	_SLIOk 							; if equal, okay.
.019552	b0 08		bcs $01955c			bcs 	_SLIExit 						; if past end, then exit.
.019554	b1 1e		lda ($1e),y	_SLIOk:	lda 	(zGenPtr),y 					; copy one character
.019556	c8		iny				iny
.019557	20 65 97	jsr $019765			jsr 	WriteTempString
.01955a	80 e9		bra $019545			bra 	_SLICopy 						; go round till copied characters
.01955c					_SLIExit:
.01955c	7a		ply				ply 									; restore YX
.01955d	fa		plx				plx
.01955e	4c 6f 96	jmp $01966f			jmp 	UnaryReturnTempStr 				; return new temporary string.
.019561	ea		nop				nop
.019562					SLIByteParameter:
.019562	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 				; get integer
.019565	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 				; check high bytes zero
.019567	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019569	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01956b	d0 03		bne $019570			bne 	SLIError
.01956d	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.01956f	60		rts				rts
.019570					SLIError:
.019570	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/hex.asm

.019573					Unary_Hex:
.019573	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 			; numeric parameter
.019576	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.019579	a9 09		lda #$09			lda 	#9 							; allocate 9 bytes (8 chars + length)
.01957b	20 3a 97	jsr $01973a			jsr 	AllocateTempString			; allocate string space
.01957e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; do each byte in turn.
.019580	20 a4 95	jsr $0195a4			jsr 	_UHConvert
.019583	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019585	20 a4 95	jsr $0195a4			jsr 	_UHConvert
.019588	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01958a	20 a4 95	jsr $0195a4			jsr 	_UHConvert
.01958d	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.01958f	20 a4 95	jsr $0195a4			jsr 	_UHConvert
.019592	5a		phy				phy 								; get length of new string
.019593	a0 00		ldy #$00			ldy 	#0
.019595	b1 20		lda ($20),y			lda 	(zTempStr),y
.019597	7a		ply				ply
.019598	c9 00		cmp #$00			cmp 	#0
.01959a	d0 05		bne $0195a1			bne 	_UHExit 					; if it was non zero okay
.01959c	a9 30		lda #$30			lda 	#"0" 						; empty, output one zero.
.01959e	20 65 97	jsr $019765			jsr 	WriteTempString
.0195a1					_UHExit:
.0195a1	4c 6f 96	jmp $01966f			jmp 	UnaryReturnTempStr 			; return new temporary string.
.0195a4					_UHConvert:
.0195a4	48		pha				pha
.0195a5	4a		lsr a				lsr 	a 							; do MSB
.0195a6	4a		lsr a				lsr 	a
.0195a7	4a		lsr a				lsr 	a
.0195a8	4a		lsr a				lsr 	a
.0195a9	20 ad 95	jsr $0195ad			jsr 	_UHNibble
.0195ac	68		pla				pla 								; do LSB
.0195ad					_UHNibble:
.0195ad	29 0f		and #$0f			and 	#15 						; get nibble
.0195af	d0 0c		bne $0195bd			bne 	_UHNonZero
.0195b1	5a		phy				phy									; get the length
.0195b2	a0 00		ldy #$00			ldy 	#0
.0195b4	b1 20		lda ($20),y			lda 	(zTempStr),y
.0195b6	7a		ply				ply
.0195b7	c9 00		cmp #$00			cmp 	#0 							; suppress leading zeros.
.0195b9	f0 0d		beq $0195c8			beq 	_UHExit2
.0195bb	a9 00		lda #$00			lda 	#0
.0195bd					_UHNonZero:
.0195bd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.0195bf	90 02		bcc $0195c3			bcc 	_UHDigit
.0195c1	69 06		adc #$06			adc 	#7-1
.0195c3					_UHDigit:
.0195c3	69 30		adc #$30			adc 	#48
.0195c5	20 65 97	jsr $019765			jsr 	WriteTempString				; output.
.0195c8					_UHExit2:
.0195c8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/dec.asm

.0195c9					Unary_Dec:
.0195c9	20 dd 90	jsr $0190dd			jsr 	EvaluateStringX 			; string parameter
.0195cc	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.0195cf	5a		phy				phy
.0195d0	a0 00		ldy #$00			ldy 	#0 							; get length of hex string.
.0195d2	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.0195d4	f0 41		beq $019617			beq 	_UDFail 					; must fail if zero.
.0195d6	8d 9e 03	sta $039e			sta 	SignCount 					; use SignCount as a counter
.0195d9	a9 00		lda #$00			lda 	#0 							; set result to zero integer.
.0195db	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.0195dd	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.0195df	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.0195e1	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.0195e3	a9 01		lda #$01			lda 	#1
.0195e5	95 85		sta $85,x			sta 	XS_Type,x
.0195e7					_UDConvertLoop:
.0195e7	5a		phy				phy 								; shift mantissa left 4
.0195e8	a0 04		ldy #$04			ldy 	#4
.0195ea					_UDShift:
.0195ea	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.0195ec	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.0195ee	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.0195f0	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.0195f2	88		dey				dey
.0195f3	d0 f5		bne $0195ea			bne 	_UDShift
.0195f5	7a		ply				ply
.0195f6	c8		iny				iny 								; next character
.0195f7	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; fetch it.
.0195f9	20 1a 96	jsr $01961a			jsr 	ConvertUpper 				; convert to U/C
.0195fc	c9 30		cmp #$30			cmp 	#"0"
.0195fe	90 17		bcc $019617			bcc 	_UDFail
.019600	c9 3a		cmp #$3a			cmp 	#"9"+1
.019602	90 06		bcc $01960a			bcc 	_UDOkay
.019604	e9 37		sbc #$37			sbc 	#7+"0" 						; alpha fudge
.019606	c9 10		cmp #$10			cmp 	#16
.019608	b0 0d		bcs $019617			bcs 	_UDFail
.01960a					_UDOkay:
.01960a	29 0f		and #$0f			and 	#15 						; nibble only
.01960c	15 80		ora $80,x			ora 	XS_Mantissa+0,x
.01960e	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019610	ce 9e 03	dec $039e			dec 	SignCount 					; do it for each character
.019613	d0 d2		bne $0195e7			bne 	_UDConvertLoop
.019615	7a		ply				ply
.019616	60		rts				rts
.019617					_UDFail:
.019617	4c 46 85	jmp $018546			jmp 	BadParamError
.01961a					ConvertUpper:
.01961a	c9 61		cmp #$61			cmp 	#"a"
.01961c	90 07		bcc $019625			bcc 	_CUExit
.01961e	c9 7b		cmp #$7b			cmp 	#"z"+1
.019620	b0 03		bcs $019625			bcs 	_CUExit
.019622	38		sec				sec
.019623	e9 20		sbc #$20			sbc 	#32
.019625	60		rts		_CUExit:rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/chr.asm

.019626					Unary_Chr:
.019626	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX			; numeric parameter
.019629	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.01962c	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.01962e	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019630	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019632	d0 0d		bne $019641			bne 	_UCChar
.019634	a9 01		lda #$01			lda 	#1 							; one character string
.019636	20 3a 97	jsr $01973a			jsr 	AllocateTempString
.019639	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; get char# and write it.
.01963b	20 65 97	jsr $019765			jsr 	WriteTempString
.01963e	4c 6f 96	jmp $01966f			jmp 	UnaryReturnTempStr
.019641					_UCChar:
.019641	4c 46 85	jmp $018546			jmp 	BadParamError

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/string/spc.asm

.019644					Unary_Spc:
.019644	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 			; numeric parameter
.019647	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; right bracket.
.01964a	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; check upper bytes 0
.01964c	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.01964e	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019650	d0 1a		bne $01966c			bne 	_USSize
.019652	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019654	c9 fe		cmp #$fe			cmp 	#maxString+1
.019656	b0 14		bcs $01966c			bcs 	_USSize
.019658	48		pha				pha 								; save length
.019659	1a		inc a				inc 	a 							; allocate one more.
.01965a	20 3a 97	jsr $01973a			jsr 	AllocateTempString
.01965d	68		pla				pla 								; get length
.01965e	f0 0f		beq $01966f			beq 	UnaryReturnTempStr 			; return the current temp string
.019660					_USLoop:
.019660	48		pha				pha
.019661	a9 20		lda #$20			lda 	#" "
.019663	20 65 97	jsr $019765			jsr 	WriteTempString
.019666	68		pla				pla
.019667	3a		dec a				dec 	a
.019668	d0 f6		bne $019660			bne 	_USLoop
.01966a	80 03		bra $01966f			bra 	UnaryReturnTempStr
.01966c					_USSize:
.01966c	4c 46 85	jmp $018546			jmp 	BadParamError
.01966f					UnaryReturnTempStr:
.01966f	a5 20		lda $20				lda 	zTempStr 					; copy temp string addr -> mantissa
.019671	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019673	a5 21		lda $21				lda 	zTempStr+1
.019675	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019677	a9 02		lda #$02			lda 	#2 							; set type to string
.019679	95 85		sta $85,x			sta 	XS_Type,x
.01967b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/memory/65816.asm

.01967c					MemRead:
.01967c	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.01967f	a0 00		ldy #$00			ldy 	#0 							; start from here
.019681	b7 1a		lda [$1a],y	_MLoop1:lda 	[zlTemp1],y 				; read the long address
.019683	95 80		sta $80,x			sta 	XS_Mantissa,x 				; copy into mantissa
.019685	c8		iny				iny 								; next to copy
.019686	e8		inx				inx
.019687	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.01968a	d0 f5		bne $019681			bne 	_MLoop1
.01968c	60		rts				rts
.01968d					MemWrite:
.01968d	8d 9e 03	sta $039e			sta 	SignCount 					; save count
.019690	a0 00		ldy #$00			ldy 	#0 							; start from here
.019692	b5 80		lda $80,x	_MLoop1:lda 	XS_Mantissa,x 				; read mantisssa
.019694	97 1a		sta [$1a],y			sta 	[zlTemp1],y 				; write it out
.019696	c8		iny				iny 								; next to copy
.019697	e8		inx				inx
.019698	cc 9e 03	cpy $039e			cpy 	SignCount 					; do required # of bytes.
.01969b	d0 f5		bne $019692			bne 	_MLoop1
.01969d	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/programend.asm

.01969e					UpdateProgramEnd:
.01969e	a9 00		lda #$00			lda 	#BasicProgram & $FF
.0196a0	85 16		sta $16				sta 	zCodePtr+0
.0196a2	a9 10		lda #$10			lda 	#BasicProgram >> 8
.0196a4	85 17		sta $17				sta 	zCodePtr+1
.0196a6	a9 00		lda #$00			lda 	#0
.0196a8	85 18		sta $18				sta 	zCodePtr+2
.0196aa	85 19		sta $19				sta 	zCodePtr+3
.0196ac	a0 03		ldy #$03			ldy 	#3
.0196ae					_UPDLoop:
.0196ae	a0 00		ldy #$00			ldy 	#0
.0196b0	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0196b2	c9 00		cmp #$00			cmp 	#0 							; end if offset is zero.
.0196b4	f0 0f		beq $0196c5			beq 	_UPDFoundEnd
.0196b6	a0 00		ldy #$00			ldy 	#0 							; point to offset
.0196b8	b7 16		lda [$16],y			lda 	[zCodePtr],y 				; read it
.0196ba	18		clc				clc
.0196bb	65 16		adc $16				adc 	zCodePtr 					; add to code pointer
.0196bd	85 16		sta $16				sta 	zCodePtr
.0196bf	90 02		bcc $0196c3			bcc 	_SNLNoCarry
.0196c1	e6 17		inc $17				inc 	zCodePtr+1
.0196c3					_SNLNoCarry:
.0196c3	80 e9		bra $0196ae			bra 	_UPDLoop
.0196c5					_UPDFoundEnd:
.0196c5	18		clc				clc 								; end of program 2 on.
.0196c6	a5 16		lda $16				lda 	zCodePtr
.0196c8	69 02		adc #$02			adc 	#2
.0196ca	8d 04 03	sta $0304			sta 	endOfProgram
.0196cd	a5 17		lda $17				lda 	zCodePtr+1
.0196cf	69 00		adc #$00			adc 	#0
.0196d1	8d 05 03	sta $0305			sta 	endOfProgram+1
.0196d4	a5 18		lda $18				lda 	zCodePtr+2
.0196d6	69 00		adc #$00			adc		#0
.0196d8	8d 06 03	sta $0306			sta 	endOfProgram+2
.0196db	a5 19		lda $19				lda 	zCodePtr+3
.0196dd	69 00		adc #$00			adc 	#0
.0196df	8d 07 03	sta $0307			sta 	endOfProgram+3
.0196e2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/pointer/checks.asm

.0196e3					CheckNextToken:
.0196e3	d7 16		cmp [$16],y			cmp 	[zCodePtr],y
.0196e5	d0 02		bne $0196e9			bne 	CTFail 						; no, then fail
.0196e7	c8		iny				iny
.0196e8	60		rts				rts
.0196e9					CTFail:
.0196e9	20 57 85	jsr $018557			jsr ERR_Handler
>0196ec	4d 69 73 73 69 6e 67 20			.text "Missing token",0
>0196f4	74 6f 6b 65 6e 00
.0196fa					CheckNextRParen:
.0196fa	b7 16		lda [$16],y			lda 	[zCodePtr],y
.0196fc	c9 be		cmp #$be			cmp 	#token_rparen
.0196fe	d0 e9		bne $0196e9			bne 	CTFail
.019700	c8		iny				iny
.019701	60		rts				rts
.019702					CheckNextComma:
.019702	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019704	c9 bf		cmp #$bf			cmp 	#token_comma
.019706	d0 e1		bne $0196e9			bne 	CTFail
.019708	c8		iny				iny
.019709	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/concrete.asm

.01970a					StringConcrete:
.01970a	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; save source to zTemp1
.01970c	85 10		sta $10				sta 	zTemp1
.01970e	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019710	85 11		sta $11				sta 	zTemp1+1
.019712	a0 00		ldy #$00			ldy 	#0 							; subtract the length+1 (clc) of the string.
.019714	18		clc				clc 								; from the string pointer
.019715	ad 00 03	lda $0300			lda 	StringPtr 					; and put in zTemp2 as well
.019718	f1 10		sbc ($10),y			sbc 	(zTemp1),y
.01971a	8d 00 03	sta $0300			sta 	StringPtr
.01971d	85 12		sta $12				sta 	zTemp2
.01971f	ad 01 03	lda $0301			lda 	StringPtr+1
.019722	e9 00		sbc #$00			sbc 	#0
.019724	8d 01 03	sta $0301			sta 	StringPtr+1
.019727	85 13		sta $13				sta 	zTemp2+1
.019729	b1 10		lda ($10),y			lda 	(zTemp1),y 					; length add one for count
.01972b	1a		inc a				inc 	a
.01972c	aa		tax				tax
.01972d	b1 10		lda ($10),y	_SCCopy:lda 	(zTemp1),y 					; copy whole thing including length
.01972f	91 12		sta ($12),y			sta 	(zTemp2),y
.019731	c8		iny				iny
.019732	ca		dex				dex
.019733	d0 f8		bne $01972d			bne 	_SCCopy
.019735	a5 13		lda $13				lda 	zTemp2+1 					; return concrete string in AX
.019737	a6 12		ldx $12				ldx 	zTemp2
.019739	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/stringmem/tempalloc.asm

.01973a					AllocateTempString:
.01973a	48		pha				pha 								; save required count.
.01973b	a5 21		lda $21				lda 	zTempStr+1 					; check if initialised yet ?
.01973d	d0 0b		bne $01974a			bne 	_ATSInitialised
.01973f	ad 00 03	lda $0300			lda 	StringPtr 					; set temporary string ptr 1 page below available
.019742	85 20		sta $20				sta 	zTempStr					; space, this is for strings to be concreted.
.019744	ad 01 03	lda $0301			lda 	StringPtr+1
.019747	3a		dec a				dec 	a
.019748	85 21		sta $21				sta 	zTempStr+1
.01974a					_ATSInitialised:
.01974a	68		pla				pla 								; get required count back.
.01974b	49 ff		eor #$ff			eor 	#$FF 						; negate 2's complement.
.01974d	1a		inc a				inc 	a
.01974e	18		clc				clc
.01974f	65 20		adc $20				adc 	zTempStr 					; "add" to the temp string pointer
.019751	85 20		sta $20				sta 	zTempStr
.019753	a9 ff		lda #$ff			lda 	#$FF
.019755	65 21		adc $21				adc 	zTempStr+1
.019757	85 21		sta $21				sta 	zTempStr+1
.019759	a9 00		lda #$00			lda 	#0 							; clear temp string.
.01975b	5a		phy				phy
.01975c	a8		tay				tay
.01975d	91 20		sta ($20),y			sta 	(zTempStr),y
.01975f	7a		ply				ply
.019760	1a		inc a				inc 	a 							; reset the write index.
.019761	8d 9f 03	sta $039f			sta 	TempStringWriteIndex
.019764	60		rts				rts
.019765					WriteTempString:
.019765	5a		phy				phy 								; save Y
.019766	ac 9f 03	ldy $039f			ldy 	TempStringWriteIndex	 	; write position.
.019769	91 20		sta ($20),y			sta 	(zTempStr),y 				; write character out.
.01976b	ee 9f 03	inc $039f			inc 	TempStringWriteIndex 		; increment the write position.
.01976e	98		tya				tya 								; unchanged Y is now length
.01976f	a0 00		ldy #$00			ldy 	#0
.019771	91 20		sta ($20),y			sta 	(zTempStr),y
.019773	7a		ply				ply 								; restore Y and exit
.019774	60		rts				rts
.019775					CreateTempStringCopy:
.019775	da		phx				phx 								; save X
.019776	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019778	3a		dec a				dec 	a 							; we need one more than actual length for temp str
.019779	20 3a 97	jsr $01973a			jsr 	AllocateTempString 			; allocate memory for temporary string.
.01977c	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01977e	c8		iny				iny
.01977f	3a		dec a				dec 	a 							; make the actual length in charactes
.019780	3a		dec a				dec 	a
.019781	a2 00		ldx #$00			ldx 	#0 							; set that as the length of the string.
.019783	81 20		sta ($20,x)			sta 	(zTempStr,x)
.019785	85 1a		sta $1a				sta 	zLTemp1 					; that's used as a count.
.019787	09 00		ora #$00			ora 	#0 							; if zero already, exit
.019789	f0 0e		beq $019799			beq 	_CTSCExit
.01978b					_CTSCLoop:
.01978b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01978d	c8		iny				iny
.01978e	5a		phy				phy 								; save in Y
.01978f	e8		inx				inx 								; bump index
.019790	da		phx				phx 								; index into Y
.019791	7a		ply				ply
.019792	91 20		sta ($20),y			sta 	(zTempStr),y 				; save at index
.019794	7a		ply				ply 								; restore Y
.019795	c6 1a		dec $1a				dec 	zLTemp1 					; do for each character
.019797	d0 f2		bne $01978b			bne 	_CTSCLoop
.019799					_CTSCExit:
.019799	fa		plx				plx 								; restore X
.01979a	60		rts				rts 								; exit

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/variables.asm

.01979b					VariableFind:
.01979b	20 06 98	jsr $019806			jsr 	VariableExtract 		; find out all about it ....
.01979e	20 9f 9a	jsr $019a9f			jsr 	VariableLocate 			; does it already exist ?
.0197a1	b0 03		bcs $0197a6			bcs 	_VFExists 				; if so, use that.
.0197a3	20 92 98	jsr $019892			jsr 	VariableCreate 			; otherwise create it.
.0197a6					_VFExists:
.0197a6	a5 24		lda $24				lda 	zVarType 				; is it still an array ?
.0197a8	29 01		and #$01			and 	#1
.0197aa	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.0197ac	d0 28		bne $0197d6			bne 	_VFSingleElement
.0197ae					_VFNextIndex:
.0197ae	a5 22		lda $22				lda 	zVarDataPtr 			; push the data ptr and type on the stack.
.0197b0	48		pha				pha
.0197b1	a5 23		lda $23				lda 	zVarDataPtr+1
.0197b3	48		pha				pha
.0197b4	a5 24		lda $24				lda 	zVarType
.0197b6	48		pha				pha
.0197b7	20 d4 90	jsr $0190d4			jsr 	EvaluateIntegerX 		; calculate the index.
.0197ba	68		pla				pla 							; restore and index.
.0197bb	85 24		sta $24				sta 	zVarType
.0197bd	68		pla				pla
.0197be	85 23		sta $23				sta 	zVarDataPtr+1
.0197c0	68		pla				pla
.0197c1	85 22		sta $22				sta 	zVarDataPtr
.0197c3	20 1d 99	jsr $01991d			jsr 	ArrayIndexFollow 		; do the index.
.0197c6	a5 24		lda $24				lda 	zVarType 				; is it still an array ??
.0197c8	29 01		and #$01			and 	#1
.0197ca	c9 00		cmp #$00			cmp 	#(token_DollarLParen) & 1
.0197cc	d0 05		bne $0197d3			bne 	_VFArrayDone 			; if so then exit.
.0197ce	20 02 97	jsr $019702			jsr 	CheckNextComma 			; comma should follow
.0197d1	80 db		bra $0197ae			bra 	_VFNextIndex
.0197d3					_VFArrayDone:
.0197d3	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 		; check closing right bracket.
.0197d6					_VFSingleElement:
.0197d6	60		rts				rts
.0197d7					VariableClear:
.0197d7	48		pha				pha 							; save registers
.0197d8	da		phx				phx
.0197d9	a2 00		ldx #$00			ldx 	#0 						; clear out the hash table.
.0197db	8a		txa				txa
.0197dc	9d 35 03	sta $0335,x	_VCLoop:sta 	HashTableBase,x
.0197df	e8		inx				inx
.0197e0	e0 60		cpx #$60			cpx 	#HashTableEnd-HashTableBase
.0197e2	d0 f8		bne $0197dc			bne 	_VCLoop
.0197e4	a9 00		lda #$00			lda 	#VariableMemory & $FF
.0197e6	8d 02 03	sta $0302			sta 	VarMemPtr
.0197e9	a9 30		lda #$30			lda 	#VariableMemory >> 8
.0197eb	8d 03 03	sta $0303			sta 	VarMemPtr+1
.0197ee	fa		plx				plx 							; restore registers
.0197ef	68		pla				pla
.0197f0	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/extract.asm

.0197f1					VariableNameError:
.0197f1	20 57 85	jsr $018557			jsr ERR_Handler
>0197f4	42 61 64 20 56 61 72 69			.text "Bad Variable Name",0
>0197fc	61 62 6c 65 20 4e 61 6d 65 00
.019806					VariableExtract:
.019806	da		phx				phx 							; save X.
.019807	a9 ba		lda #$ba			lda 	#token_hashlParen  		; set the type to #( e.g. real array.
.019809	8d 95 03	sta $0395			sta 	Var_Type
.01980c	8d 96 03	sta $0396			sta 	Var_Hash 				; we initialise the hash with this. It doesn't matter
.01980f	b7 16		lda [$16],y			lda 	[zCodePtr],y
.019811	c9 00		cmp #$00			cmp 	#0 						; first one must be A-Z
.019813	f0 dc		beq $0197f1			beq 	VariableNameError
.019815	c9 1b		cmp #$1b			cmp 	#26+1
.019817	b0 d8		bcs $0197f1			bcs 	VariableNameError
.019819	a2 ff		ldx #$ff			ldx 	#255 					; now copy it into the variable buffer.
.01981b					_VECopyBuffer:
.01981b	e8		inx				inx
.01981c	e0 1f		cpx #$1f			cpx 	#31 					; too long
.01981e	f0 d1		beq $0197f1			beq 	VariableNameError
.019820	9d 15 03	sta $0315,x			sta 	Var_Buffer,x 			; save character
.019823	18		clc				clc  							; update the hash value for it.
.019824	6d 96 03	adc $0396			adc 	Var_Hash
.019827	8d 96 03	sta $0396			sta 	Var_Hash
.01982a	c8		iny				iny
.01982b	b7 16		lda [$16],y			lda 	[zCodePtr],y
.01982d	c9 00		cmp #$00			cmp 	#0 						; zero or token, end of variable
.01982f	f0 0e		beq $01983f			beq 	_VECopyEnd
.019831	30 0c		bmi $01983f			bmi 	_VECopyEnd
.019833	c9 1b		cmp #$1b			cmp 	#26+1 					; A-Z continue copying
.019835	90 e4		bcc $01981b			bcc 	_VECopyBuffer
.019837	c9 30		cmp #$30			cmp 	#"0" 					; 0-9 copy as well.
.019839	90 04		bcc $01983f			bcc 	_VECopyEnd
.01983b	c9 3a		cmp #$3a			cmp 	#"9"+1
.01983d	90 dc		bcc $01981b			bcc 	_VECopyBuffer
.01983f					_VECopyEnd:
.01983f	c8		iny				iny
.019840	c9 b7		cmp #$b7			cmp 	#token_Dollar 			; first type token.
.019842	90 04		bcc $019848			bcc 	_VEDefaultRequired
.019844	c9 bd		cmp #$bd			cmp 	#token_PercentLParen+1	; last type token.
.019846	90 0b		bcc $019853			bcc 	_VEHaveType
.019848					_VEDefaultRequired:
.019848	c9 bd		cmp #$bd			cmp 	#token_LParen 			; if it ends in ( then use the real array
.01984a	f0 04		beq $019850			beq 	_VESetType 				; default set above.
.01984c	ce 95 03	dec $0395			dec 	Var_Type 				; this changes that default to the variable default
.01984f	88		dey				dey
.019850					_VESetType:
.019850	ad 95 03	lda $0395			lda 	Var_Type 				; get type ....
.019853					_VEHaveType:
.019853	8d 95 03	sta $0395			sta 	Var_Type 				; save as type.
.019856	bd 15 03	lda $0315,x			lda 	Var_Buffer,x 			; set bit 7 of name, marks the end.
.019859	09 80		ora #$80			ora 	#$80
.01985b	9d 15 03	sta $0315,x			sta 	Var_Buffer,x
.01985e	e8		inx				inx 							; offset 3 => length 4.
.01985f	8e 97 03	stx $0397			stx 	Var_Length 				; save length of variable name.
.019862	ad 95 03	lda $0395			lda 	Var_Type 				; get offset of var type from first type token
.019865	38		sec				sec
.019866	e9 b7		sbc #$b7			sbc 	#token_Dollar
.019868	0a		asl a				asl 	a 						; multiply by 16. This requires HashTableSize
.019869	0a		asl a				asl 	a 						; in data.asm to be 8 (8 sets of links,2 bytes each)
.01986a	0a		asl a				asl 	a
.01986b	0a		asl a				asl 	a
.01986c	8d 98 03	sta $0398			sta 	Var_HashAddress
.01986f	ad 96 03	lda $0396			lda 	Var_Hash 				; get the hash
.019872	29 07		and #$07			and 	#(HashTableSize-1) 		; force into range 0-tableSize-1
.019874	0a		asl a				asl 	a 						; double it (2 bytes per entry) & clears carry
.019875	6d 98 03	adc $0398			adc 	Var_HashAddress 		; add table offset.
.019878	69 35		adc #$35			adc 	#HashTableBase & $FF 	; now the low byte of the actual table address
.01987a	8d 98 03	sta $0398			sta 	Var_HashAddress
.01987d	a2 05		ldx #$05			ldx 	#5 						; hash is 5 bytes (real)
.01987f	ad 95 03	lda $0395			lda 	Var_Type
.019882	c9 b9		cmp #$b9			cmp 	#token_Hash
.019884	f0 07		beq $01988d			beq 	_VEHaveSize
.019886	ca		dex				dex
.019887	c9 bb		cmp #$bb			cmp 	#token_Percent 			; percent is 4 bytes (integer)
.019889	f0 02		beq $01988d			beq 	_VEHaveSize
.01988b	a2 02		ldx #$02			ldx 	#2 						; everything else is two.
.01988d					_VEHaveSize:
.01988d	8e 99 03	stx $0399			stx 	Var_DataSize
.019890	fa		plx				plx
.019891	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varcreate.asm

.019892					VariableCreate:
.019892	da		phx				phx
.019893	5a		phy				phy
.019894	ad 02 03	lda $0302			lda 	VarMemPtr 					; get address of next free into zTemp1
.019897	85 10		sta $10				sta 	zTemp1
.019899	ad 03 03	lda $0303			lda 	VarMemPtr+1
.01989c	85 11		sta $11				sta 	zTemp1+1
.01989e	ad 99 03	lda $0399			lda 	Var_DataSize 				; bytes for the data bit
.0198a1	18		clc				clc
.0198a2	6d 97 03	adc $0397			adc 	Var_Length 					; add the length of the name
.0198a5	69 03		adc #$03			adc 	#3 							; 3 for the link and the hash.
.0198a7	6d 02 03	adc $0302			adc 	VarMemPtr 					; add to variable memory pointer
.0198aa	8d 02 03	sta $0302			sta 	VarMemPtr
.0198ad	90 03		bcc $0198b2			bcc 	_VCNoCarry
.0198af	ee 03 03	inc $0303			inc 	VarMemPtr+1
.0198b2					_VCNoCarry:
.0198b2	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.0198b5	85 12		sta $12				sta 	zTemp2
.0198b7	a9 03		lda #$03			lda 	#HashTableBase >> 8
.0198b9	85 13		sta $13				sta 	zTemp2+1
.0198bb	a0 00		ldy #$00			ldy 	#0 							; put current hash link in position.
.0198bd	b1 12		lda ($12),y			lda 	(zTemp2),y
.0198bf	91 10		sta ($10),y			sta 	(zTemp1),y
.0198c1	c8		iny				iny
.0198c2	b1 12		lda ($12),y			lda 	(zTemp2),y
.0198c4	91 10		sta ($10),y			sta 	(zTemp1),y
.0198c6	c8		iny				iny
.0198c7	ad 96 03	lda $0396			lda 	Var_Hash 					; write the hash out.
.0198ca	91 10		sta ($10),y			sta 	(zTemp1),y
.0198cc	c8		iny				iny
.0198cd	a2 00		ldx #$00			ldx 	#0 							; copy the name out.
.0198cf					_VCCopyName:
.0198cf	bd 15 03	lda $0315,x			lda 	Var_Buffer,x
.0198d2	91 10		sta ($10),y			sta 	(zTemp1),y
.0198d4	e8		inx				inx
.0198d5	c8		iny				iny
.0198d6	ec 97 03	cpx $0397			cpx 	Var_Length
.0198d9	d0 f4		bne $0198cf			bne 	_VCCopyName
.0198db	5a		phy				phy 								; save the data offset.
.0198dc	ae 99 03	ldx $0399			ldx 	Var_DataSize 				; and write the data out.
.0198df	a9 00		lda #$00			lda 	#0 							; which is all zeroes.
.0198e1					_VCClearData:
.0198e1	91 10		sta ($10),y			sta 	(zTemp1),y
.0198e3	c8		iny				iny
.0198e4	ca		dex				dex
.0198e5	d0 fa		bne $0198e1			bne 	_VCClearData
.0198e7	68		pla				pla 								; offset to the data
.0198e8	18		clc				clc
.0198e9	65 10		adc $10				adc 	zTemp1 						; add to start and save as data pointer.
.0198eb	85 22		sta $22				sta 	zVarDataPtr
.0198ed	a5 11		lda $11				lda 	zTemp1+1
.0198ef	69 00		adc #$00			adc 	#0
.0198f1	85 23		sta $23				sta 	zVarDataPtr+1
.0198f3	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.0198f6	85 24		sta $24				sta 	zVarType
.0198f8	a5 10		lda $10				lda 	zTemp1 						; fix hash link to point to new record
.0198fa	a0 00		ldy #$00			ldy 	#0
.0198fc	91 12		sta ($12),y			sta 	(zTemp2),y
.0198fe	c8		iny				iny
.0198ff	a5 11		lda $11				lda 	zTemp1+1
.019901	91 12		sta ($12),y			sta 	(zTemp2),y
.019903	ad 95 03	lda $0395			lda 	Var_Type 					; array ? if so create the empty one.
.019906	29 01		and #$01			and 	#1
.019908	c9 00		cmp #$00			cmp 	#(token_DollarLParen & 1)
.01990a	d0 0e		bne $01991a			bne 	_VCNotArray
.01990c	a2 00		ldx #$00			ldx 	#0 							; call recursive array creator
.01990e	20 b4 99	jsr $0199b4			jsr 	ArrayCreate
.019911	5a		phy				phy 								; save YA at zVarDataPtr
.019912	a0 00		ldy #$00			ldy 	#0
.019914	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019916	c8		iny				iny
.019917	68		pla				pla
.019918	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.01991a					_VCNotArray:
.01991a	7a		ply				ply
.01991b	fa		plx				plx
.01991c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arrayidx.asm

.01991d					ArrayIndexFollow:
.01991d	5a		phy				phy
.01991e	a0 00		ldy #$00			ldy 	#0 							; make zVarDataPtr point to the array.
.019920	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; e.g. it points to itself.
.019922	48		pha				pha
.019923	c8		iny				iny
.019924	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019926	85 23		sta $23				sta 	zVarDataPtr+1
.019928	68		pla				pla
.019929	85 22		sta $22				sta 	zVarDataPtr
.01992b	b5 81		lda $81,x			lda 	XS_Mantissa+1,x 			; MSB of 16 bit integer and bytes 2&3
.01992d	29 80		and #$80			and 	#$80 						; must be zero.
.01992f	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019931	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019933	d0 59		bne $01998e			bne 	_AIFError
.019935	a0 00		ldy #$00			ldy 	#0 							; calculate size - current - 1
.019937	18		clc				clc
.019938	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.01993a	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.01993c	c8		iny				iny
.01993d	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.01993f	08		php				php 								; clear bit 7 retaining borrow.
.019940	29 7f		and #$7f			and 	#$7F
.019942	28		plp				plp
.019943	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.019945	90 47		bcc $01998e			bcc 	_AIFError 					; eror if size-current < 0
.019947	b5 80		lda $80,x			lda  	XS_Mantissa+0,x 			; copy and double the index
.019949	0a		asl a				asl 	a 							; (e.g. index * 2)
.01994a	85 10		sta $10				sta 	zTemp1
.01994c	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01994e	2a		rol a				rol 	a
.01994f	85 11		sta $11				sta 	zTemp1+1
.019951	a0 01		ldy #$01			ldy 	#1 							; is this a data entry.
.019953	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; if so, then type is unchanged, offset set
.019955	30 1d		bmi $019974			bmi 	_AIFCalculate
.019957	c6 24		dec $24				dec 	zVarType 					; converts from an array to a type.
.019959	a5 24		lda $24				lda 	zVarType 					; check that type
.01995b	c9 b7		cmp #$b7			cmp 	#token_Dollar 				; if string, use x 2
.01995d	f0 15		beq $019974			beq 	_AIFCalculate
.01995f	06 10		asl $10				asl 	zTemp1			 			; double the index
.019961	26 11		rol $11				rol 	zTemp1+1					; (e.g. index * 4)
.019963	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if integer, use x 4
.019965	f0 0d		beq $019974			beq 	_AIFCalculate
.019967	18		clc				clc 								; add the original mantissa in again
.019968	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; which makes it x5, for float.
.01996a	65 10		adc $10				adc 	zTemp1
.01996c	85 10		sta $10				sta 	zTemp1
.01996e	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019970	65 11		adc $11				adc 	zTemp1+1
.019972	85 11		sta $11				sta 	zTemp1+1
.019974					_AIFCalculate:
.019974	18		clc				clc 								; add index x 2,4 or 5 to base
.019975	a5 22		lda $22				lda 	zVarDataPtr
.019977	65 10		adc $10				adc 	zTemp1
.019979	85 22		sta $22				sta 	zVarDataPtr
.01997b	a5 23		lda $23				lda 	zVarDataPtr+1
.01997d	65 11		adc $11				adc 	zTemp1+1
.01997f	85 23		sta $23				sta 	zVarDataPtr+1
.019981	18		clc				clc 								; add 2 more for the length prefix.
.019982	a5 22		lda $22				lda 	zVarDataPtr
.019984	69 02		adc #$02			adc 	#2
.019986	85 22		sta $22				sta 	zVarDataPtr
.019988	90 02		bcc $01998c			bcc 	_AIFNoBump
.01998a	e6 23		inc $23				inc 	zVarDataPtr+1
.01998c					_AIFNoBump:
.01998c	7a		ply				ply
.01998d	60		rts				rts
.01998e					_AIFError:
.01998e	20 57 85	jsr $018557			jsr ERR_Handler
>019991	42 61 64 20 61 72 72 61			.text "Bad array index",0
>019999	79 20 69 6e 64 65 78 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/arraydef.asm

.0199a1					ArrayResetDefault:
.0199a1	a9 0b		lda #$0b			lda 	#11 						; 0..10 one array
.0199a3	8d a9 03	sta $03a9			sta 	ArrayDef+0
.0199a6	a9 00		lda #$00			lda 	#0
.0199a8	8d aa 03	sta $03aa			sta 	ArrayDef+1
.0199ab	a9 ff		lda #$ff			lda 	#$FF
.0199ad	8d ab 03	sta $03ab			sta 	ArrayDef+2 					; $FFFF implies no second element.
.0199b0	8d ac 03	sta $03ac			sta 	ArrayDef+3					; (test bit 7 of 2nd byte)
.0199b3	60		rts				rts
.0199b4					ArrayCreate:
.0199b4	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; put size x 2 in zTemp1
.0199b7	0a		asl a				asl 	a
.0199b8	85 10		sta $10				sta 	zTemp1
.0199ba	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.0199bd	2a		rol a				rol 	a
.0199be	85 11		sta $11				sta 	zTemp1+1
.0199c0	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; if this is the last element it's array of ptrs.
.0199c3	10 22		bpl $0199e7			bpl 	_ACSized 					; if not multiply size x 2 (str) 4 (int) 5 (real)
.0199c5	ad 95 03	lda $0395			lda 	Var_Type 					; check the type
.0199c8	c9 b8		cmp #$b8			cmp 	#token_DollarLParen 		; also if it is an array of strings $(
.0199ca	f0 1b		beq $0199e7			beq 	_ACSized
.0199cc	06 10		asl $10				asl 	zTemp1 						; double again
.0199ce	26 11		rol $11				rol 	zTemp1+1
.0199d0	b0 6f		bcs $019a41			bcs 	ArrayIndexError 			; too large.
.0199d2	c9 bc		cmp #$bc			cmp 	#token_PercentLParen 		; if %( four bytes/entry is enough.
.0199d4	f0 11		beq $0199e7			beq 	_ACSized
.0199d6	18		clc				clc 								; add original value x 5 for reals.
.0199d7	a5 10		lda $10				lda 	zTemp1
.0199d9	7d a9 03	adc $03a9,x			adc 	ArrayDef+0,x
.0199dc	85 10		sta $10				sta 	zTemp1
.0199de	a5 11		lda $11				lda 	zTemp1+1
.0199e0	7d aa 03	adc $03aa,x			adc 	ArrayDef+1,x
.0199e3	85 11		sta $11				sta 	zTemp1+1
.0199e5	b0 5a		bcs $019a41			bcs 	ArrayIndexError
.0199e7					_ACSized:
.0199e7	18		clc				clc
.0199e8	a5 10		lda $10				lda 	zTemp1
.0199ea	69 02		adc #$02			adc 	#2
.0199ec	85 10		sta $10				sta 	zTemp1
.0199ee	90 04		bcc $0199f4			bcc 	_ACNoBump
.0199f0	e6 10		inc $10				inc 	zTemp1
.0199f2	f0 4d		beq $019a41			beq 	ArrayIndexError
.0199f4					_ACNoBump:
.0199f4	18		clc				clc
.0199f5	ad 02 03	lda $0302			lda 	VarMemPtr 					; add this allocated count to VarMemPtr
.0199f8	85 12		sta $12				sta 	zTemp2						; save start in zTemp2/zTemp3
.0199fa	85 14		sta $14				sta 	zTemp3
.0199fc	65 10		adc $10				adc 	zTemp1
.0199fe	8d 02 03	sta $0302			sta 	VarMemPtr
.019a01	ad 03 03	lda $0303			lda 	VarMemPtr+1
.019a04	85 13		sta $13				sta 	zTemp2+1
.019a06	85 15		sta $15				sta 	zTemp3+1
.019a08	65 11		adc $11				adc 	zTemp1+1
.019a0a	8d 03 03	sta $0303			sta 	VarMemPtr+1
.019a0d	85 11		sta $11				sta 	zTemp1+1
.019a0f	b0 30		bcs $019a41			bcs 	ArrayIndexError
.019a11	a0 00		ldy #$00			ldy 	#0							; write $00 out.
.019a13					_ACClear:
.019a13	98		tya				tya
.019a14	91 12		sta ($12),y			sta 	(zTemp2),y
.019a16	e6 12		inc $12				inc 	zTemp2
.019a18	d0 02		bne $019a1c			bne 	_ACCBump
.019a1a	e6 13		inc $13				inc 	zTemp2+1
.019a1c					_ACCBump:
.019a1c	a5 12		lda $12				lda 	zTemp2
.019a1e	cd 02 03	cmp $0302			cmp 	VarMemPtr
.019a21	d0 f0		bne $019a13			bne 	_ACClear
.019a23	a5 13		lda $13				lda 	zTemp2+1
.019a25	cd 03 03	cmp $0303			cmp 	VarMemPtr+1
.019a28	d0 e9		bne $019a13			bne 	_ACClear
.019a2a	a0 00		ldy #$00			ldy 	#0
.019a2c	bd a9 03	lda $03a9,x			lda 	ArrayDef+0,x 				; copy the size into the start
.019a2f	91 14		sta ($14),y			sta 	(zTemp3),y
.019a31	c8		iny				iny
.019a32	bd aa 03	lda $03aa,x			lda 	ArrayDef+1,x
.019a35	91 14		sta ($14),y			sta 	(zTemp3),y
.019a37	bd ac 03	lda $03ac,x			lda 	ArrayDef+3,x 				; have we reached the end
.019a3a	10 18		bpl $019a54			bpl 	ACCFillRecursive
.019a3c	a4 15		ldy $15				ldy 	zTemp3+1 					; return address
.019a3e	a5 14		lda $14				lda 	zTemp3
.019a40	60		rts				rts
.019a41					ArrayIndexError:
.019a41	20 57 85	jsr $018557			jsr ERR_Handler
>019a44	42 61 64 20 61 72 72 61			.text "Bad array index",0
>019a4c	79 20 69 6e 64 65 78 00
.019a54					ACCFillRecursive:
.019a54	a9 ff		lda #$ff			lda 	#$FF 						; we mark the end, this is free space.
.019a56	a0 00		ldy #$00			ldy 	#0 							; this is overwritten by size of next allocated
.019a58	91 12		sta ($12),y			sta 	(zTemp2),y 					; array, but we might change that.
.019a5a	c8		iny				iny
.019a5b	b1 14		lda ($14),y			lda 	(zTemp3),y 					; set bit 15 of the max index indicating
.019a5d	09 80		ora #$80			ora 	#$80 						; an array of pointers
.019a5f	91 14		sta ($14),y			sta 	(zTemp3),y
.019a61	a5 14		lda $14				lda 	zTemp3 						; push the start on the stack
.019a63	48		pha				pha
.019a64	a5 15		lda $15				lda 	zTemp3+1
.019a66	48		pha				pha
.019a67					_ACCFillLoop:
.019a67	18		clc				clc
.019a68	a5 14		lda $14				lda 	zTemp3 						; and work forwards.
.019a6a	69 02		adc #$02			adc 	#2
.019a6c	85 14		sta $14				sta 	zTemp3
.019a6e	90 02		bcc $019a72			bcc 	_ACCSkip2
.019a70	e6 15		inc $15				inc 	zTemp3+1
.019a72					_ACCSkip2:
.019a72	a0 00		ldy #$00			ldy 	#0 							; reached the end ?
.019a74	b1 14		lda ($14),y			lda 	(zTemp3),y					; (looking for FF marker, everything else 00)
.019a76	c8		iny				iny
.019a77	11 14		ora ($14),y			ora 	(zTemp3),y
.019a79	d0 21		bne $019a9c			bne 	_ACCExit
.019a7b	a5 14		lda $14				lda 	zTemp3 						; push zTemp3
.019a7d	48		pha				pha
.019a7e	a5 15		lda $15				lda 	zTemp3+1
.019a80	48		pha				pha
.019a81	e8		inx				inx
.019a82	e8		inx				inx
.019a83	20 b4 99	jsr $0199b4			jsr 	ArrayCreate 				; create array recursively.
.019a86	ca		dex				dex
.019a87	ca		dex				dex
.019a88	85 12		sta $12				sta 	zTemp2 						; save A
.019a8a	68		pla				pla
.019a8b	85 15		sta $15				sta 	zTemp3+1 					; restore zTemp3
.019a8d	68		pla				pla
.019a8e	85 14		sta $14				sta 	zTemp3
.019a90	98		tya				tya 								; write high bye from Y
.019a91	a0 01		ldy #$01			ldy 	#1
.019a93	91 14		sta ($14),y			sta 	(zTemp3),y
.019a95	88		dey				dey 								; write low byte out.
.019a96	a5 12		lda $12				lda 	zTemp2
.019a98	91 14		sta ($14),y			sta 	(zTemp3),y
.019a9a	80 cb		bra $019a67			bra 	_ACCFillLoop 				; and try again.
.019a9c					_ACCExit:
.019a9c	7a		ply				ply 								; restore the original address
.019a9d	68		pla				pla
.019a9e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/varfind.asm

.019a9f					VariableLocate:
.019a9f	da		phx				phx
.019aa0	5a		phy				phy
.019aa1	ad 98 03	lda $0398			lda 	Var_HashAddress 			; hash table pointer in zTemp2
.019aa4	85 12		sta $12				sta 	zTemp2 						; points to first address.
.019aa6	a9 03		lda #$03			lda 	#HashTableBase >> 8
.019aa8	85 13		sta $13				sta 	zTemp2+1
.019aaa	a0 00		ldy #$00	_VLNext:ldy 	#0 							; get next link into AX
.019aac	b1 12		lda ($12),y			lda 	(zTemp2),y
.019aae	aa		tax				tax
.019aaf	c8		iny				iny
.019ab0	b1 12		lda ($12),y			lda 	(zTemp2),y
.019ab2	85 13		sta $13				sta 	zTemp2+1 					; save in zTemp
.019ab4	86 12		stx $12				stx 	zTemp2
.019ab6	05 12		ora $12				ora 	zTemp2 						; got zero
.019ab8	18		clc				clc
.019ab9	f0 25		beq $019ae0			beq 	_VLExit 					; if so, then fail as end of chain.
.019abb	c8		iny				iny 								; point to hash (offset + 2)
.019abc	b1 12		lda ($12),y			lda 	(zTemp2),y
.019abe	cd 96 03	cmp $0396			cmp 	Var_Hash
.019ac1	d0 e7		bne $019aaa			bne 	_VLNext 					; try next if different.
.019ac3					_VLCompare:
.019ac3	c8		iny				iny 								; next character
.019ac4	b1 12		lda ($12),y			lda 	(zTemp2),y 					; compare variable field against buffer.
.019ac6	d9 12 03	cmp $0312,y			cmp 	Var_Buffer-3,y 				; the -3 is because name starts at 3.
.019ac9	d0 df		bne $019aaa			bne 	_VLNext 					; fail if different, try next.
.019acb	0a		asl a				asl 	a 							; until end character (bit 7 set) matched
.019acc	90 f5		bcc $019ac3			bcc 	_VLCompare
.019ace	98		tya				tya
.019acf	38		sec				sec 								; add 1 as Y points to last character
.019ad0	65 12		adc $12				adc 	zTemp2 						; add to the current address
.019ad2	85 22		sta $22				sta 	zVarDataPtr
.019ad4	a5 13		lda $13				lda 	zTemp2+1
.019ad6	69 00		adc #$00			adc 	#0
.019ad8	85 23		sta $23				sta 	zVarDataPtr+1
.019ada	ad 95 03	lda $0395			lda 	Var_Type 					; and set the type.
.019add	85 24		sta $24				sta 	zVarType
.019adf	38		sec				sec 								; return CS
.019ae0	7a		ply		_VLExit:ply
.019ae1	fa		plx				plx
.019ae2	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/variables/vargetset.asm

.019ae3					VariableGet:
.019ae3	5a		phy				phy
.019ae4	a0 00		ldy #$00			ldy 	#0 							; copy first two bytes
.019ae6	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019ae8	95 80		sta $80,x			sta 	XS_Mantissa,x
.019aea	c8		iny				iny
.019aeb	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019aed	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019aef	c8		iny				iny
.019af0	a5 24		lda $24				lda 	zVarType 					; if it is a string, set up for that.
.019af2	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019af4	f0 2c		beq $019b22			beq 	_VGString
.019af6	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; copy the next two bytes.
.019af8	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019afa	c8		iny				iny
.019afb	b1 22		lda ($22),y			lda 	(zVarDataPtr),y
.019afd	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019aff	c8		iny				iny
.019b00	a9 01		lda #$01			lda 	#1 							; set type to 1.
.019b02	95 85		sta $85,x			sta 	XS_Type,x
.019b04	a5 24		lda $24				lda 	zVarType
.019b06	c9 bb		cmp #$bb			cmp 	#token_Percent 				; if it is a %, then exit with default integer.
.019b08	f0 28		beq $019b32			beq 	_VGExit
.019b0a	a9 40		lda #$40			lda 	#$40 						; set type byte to zero
.019b0c	95 85		sta $85,x			sta 	XS_Type,x 					; which is the code for zero/float.
.019b0e	b1 22		lda ($22),y			lda 	(zVarDataPtr),y 			; the last value to copy is the exponent.
.019b10	95 84		sta $84,x			sta 	XS_Exponent,x
.019b12	f0 1e		beq $019b32			beq 	_VGExit 					; if exponent is zero ... it's zero.
.019b14	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; the sign bit is the top mantissa bit.
.019b16	48		pha				pha
.019b17	29 80		and #$80			and 	#$80
.019b19	95 85		sta $85,x			sta 	XS_Type,x 					; this is the type byte.
.019b1b	68		pla				pla
.019b1c	09 80		ora #$80			ora 	#$80 						; set the MSB as you would expect.
.019b1e	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; so it's a normalised float.
.019b20	80 10		bra $019b32			bra 	_VGExit
.019b22					_VGString:
.019b22	a9 02		lda #$02			lda 	#2 							; set type to 2, a string
.019b24	95 85		sta $85,x			sta 	XS_Type,x
.019b26	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; is the value there $0000
.019b28	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019b2a	d0 06		bne $019b32			bne 	_VGExit 					; if not, exit.
.019b2c	85 25		sta $25				sta 	zNullString 				; make zNullString a 00 string.
.019b2e	a9 25		lda #$25			lda 	#zNullString
.019b30	95 80		sta $80,x			sta 	XS_Mantissa,x 				; make it point to it.
.019b32					_VGExit:
.019b32	7a		ply				ply
.019b33	60		rts				rts
.019b34					VariableSet:
.019b34	b5 85		lda $85,x			lda 	XS_Type,x 					; is the result a string
.019b36	29 02		and #$02			and 	#2 							; if so, it has to be
.019b38	d0 4b		bne $019b85			bne 	_VSString
.019b3a	a5 24		lda $24				lda 	zVarType 					; if type is $ there's an error.
.019b3c	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019b3e	f0 42		beq $019b82			beq 	_VSBadType
.019b40	c9 bb		cmp #$bb			cmp 	#token_Percent 				; type convert to float/int
.019b42	f0 05		beq $019b49			beq 	_VSMakeInt
.019b44	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat
.019b47	80 03		bra $019b4c			bra 	_VSCopy
.019b49					_VSMakeInt:
.019b49	20 f6 a0	jsr $01a0f6			jsr 	FPUToInteger
.019b4c					_VSCopy:
.019b4c	5a		phy				phy
.019b4d	a0 00		ldy #$00			ldy 	#0 							; copy mantissa to target.
.019b4f	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019b51	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b53	c8		iny				iny
.019b54	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019b56	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b58	c8		iny				iny
.019b59	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019b5b	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b5d	c8		iny				iny
.019b5e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019b60	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b62	a5 24		lda $24				lda 	zVarType 					; if target is integer, alrady done.
.019b64	c9 bb		cmp #$bb			cmp 	#token_Percent
.019b66	f0 18		beq $019b80			beq 	_VSExit
.019b68	b5 85		lda $85,x			lda 	XS_Type,x 					; get the sign bit into carry flag.
.019b6a	0a		asl a				asl 	a
.019b6b	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; shift the sign into the mantissa high.
.019b6d	08		php				php
.019b6e	0a		asl a				asl 	a
.019b6f	28		plp				plp
.019b70	6a		ror a				ror 	a
.019b71	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b73	c8		iny				iny
.019b74	b5 84		lda $84,x			lda 	XS_Exponent,x 				; copy the exponent in
.019b76	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b78	34 85		bit $85,x			bit 	XS_Type,x 					; if the result is non zero
.019b7a	50 04		bvc $019b80			bvc 	_VSExit
.019b7c	a9 00		lda #$00			lda 	#00 						; zero exponent indicating 0.
.019b7e	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b80					_VSExit:
.019b80	7a		ply				ply
.019b81	60		rts				rts
.019b82					_VSBadType:
.019b82	4c 38 85	jmp $018538			jmp 	TypeError
.019b85					_VSString:
.019b85	a5 24		lda $24				lda 	zVarType 					; type must be $
.019b87	c9 b7		cmp #$b7			cmp 	#token_Dollar
.019b89	d0 f7		bne $019b82			bne 	_VSBadType
.019b8b	da		phx				phx
.019b8c	5a		phy				phy
.019b8d	20 0a 97	jsr $01970a			jsr 	StringConcrete 				; concrete the string in the mantissa -> AX
.019b90	a0 01		ldy #$01			ldy 	#1 							; save high byte
.019b92	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b94	88		dey				dey 								; save low byte
.019b95	8a		txa				txa
.019b96	91 22		sta ($22),y			sta 	(zVarDataPtr),y
.019b98	7a		ply				ply 								; and exit.
.019b99	fa		plx				plx
.019b9a	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/multiply.asm

.019b9b					MulInteger32:
.019b9b	b5 80		lda $80,x			lda 	XS_Mantissa+0,x					; copy +0 to +8
.019b9d	95 8c		sta $8c,x			sta 	XS3_Mantissa,x
.019b9f	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019ba1	95 8d		sta $8d,x			sta 	XS3_Mantissa+1,x
.019ba3	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019ba5	95 8e		sta $8e,x			sta 	XS3_Mantissa+2,x
.019ba7	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019ba9	95 8f		sta $8f,x			sta 	XS3_Mantissa+3,x
.019bab	a9 00		lda #$00			lda 	#0
.019bad	95 80		sta $80,x			sta 	XS_Mantissa+0,x 				; zero +0
.019baf	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019bb1	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019bb3	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019bb5					_BFMMultiply:
.019bb5	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; get LSBit of 8-11
.019bb7	29 01		and #$01			and 	#1
.019bb9	f0 03		beq $019bbe			beq 	_BFMNoAdd
.019bbb	20 72 92	jsr $019272			jsr 	AddInteger32
.019bbe					_BFMNoAdd:
.019bbe	16 86		asl $86,x			asl 	XS2_Mantissa+0,x 				; shift +4 left
.019bc0	36 87		rol $87,x			rol 	XS2_Mantissa+1,x
.019bc2	36 88		rol $88,x			rol 	XS2_Mantissa+2,x
.019bc4	36 89		rol $89,x			rol 	XS2_Mantissa+3,x
.019bc6	56 8f		lsr $8f,x			lsr 	XS3_Mantissa+3,x 				; shift +8 right
.019bc8	76 8e		ror $8e,x			ror 	XS3_Mantissa+2,x
.019bca	76 8d		ror $8d,x			ror 	XS3_Mantissa+1,x
.019bcc	76 8c		ror $8c,x			ror 	XS3_Mantissa,x
.019bce	b5 8c		lda $8c,x			lda 	XS3_Mantissa,x 					; continue if +8 is nonzero
.019bd0	15 8d		ora $8d,x			ora 	XS3_Mantissa+1,x
.019bd2	15 8e		ora $8e,x			ora 	XS3_Mantissa+2,x
.019bd4	15 8f		ora $8f,x			ora 	XS3_Mantissa+3,x
.019bd6	d0 dd		bne $019bb5			bne 	_BFMMultiply
.019bd8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/divide.asm

.019bd9					DivInteger32:
.019bd9	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; check for /0
.019bdb	15 87		ora $87,x			ora 	XS2_Mantissa+1,x
.019bdd	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.019bdf	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.019be1	d0 14		bne $019bf7			bne 	_BFDOkay
.019be3	20 57 85	jsr $018557			jsr ERR_Handler
>019be6	44 69 76 69 73 69 6f 6e			.text "Division by Zero",0
>019bee	20 62 79 20 5a 65 72 6f 00
.019bf7					_BFDOkay:
.019bf7	a9 00		lda #$00			lda 	#0 							; zLTemp1 is 'A' (and holds the remainder)
.019bf9	85 1a		sta $1a				sta 	zLTemp1 					; Q/Dividend/Left in +0
.019bfb	85 1b		sta $1b				sta 	zLTemp1+1 					; M/Divisor/Right in +4
.019bfd	85 1c		sta $1c				sta 	zLTemp1+2
.019bff	85 1d		sta $1d				sta 	zLTemp1+3
.019c01	8d 9e 03	sta $039e			sta 	SignCount 					; Count of signs.
.019c04	20 5b 9c	jsr $019c5b			jsr 	CheckIntegerNegate 			; negate (and bump sign count)
.019c07	da		phx				phx
.019c08	e8		inx				inx
.019c09	e8		inx				inx
.019c0a	e8		inx				inx
.019c0b	e8		inx				inx
.019c0c	e8		inx				inx
.019c0d	e8		inx				inx
.019c0e	20 5b 9c	jsr $019c5b			jsr 	CheckIntegerNegate
.019c11	fa		plx				plx
.019c12	5a		phy				phy 								; Y is the counter
.019c13	a0 20		ldy #$20			ldy 	#32 						; 32 iterations of the loop.
.019c15					_BFDLoop:
.019c15	16 80		asl $80,x			asl 	XS_Mantissa+0,x 			; shift AQ left.
.019c17	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019c19	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019c1b	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019c1d	26 1a		rol $1a				rol 	zLTemp1
.019c1f	26 1b		rol $1b				rol 	zLTemp1+1
.019c21	26 1c		rol $1c				rol 	zLTemp1+2
.019c23	26 1d		rol $1d				rol 	zLTemp1+3
.019c25	38		sec				sec
.019c26	a5 1a		lda $1a				lda 	zLTemp1+0 					; Calculate A-M on stack.
.019c28	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019c2a	48		pha				pha
.019c2b	a5 1b		lda $1b				lda 	zLTemp1+1
.019c2d	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019c2f	48		pha				pha
.019c30	a5 1c		lda $1c				lda 	zLTemp1+2
.019c32	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019c34	48		pha				pha
.019c35	a5 1d		lda $1d				lda 	zLTemp1+3
.019c37	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019c39	90 13		bcc $019c4e			bcc 	_BFDNoAdd
.019c3b	85 1d		sta $1d				sta 	zLTemp1+3 					; update A
.019c3d	68		pla				pla
.019c3e	85 1c		sta $1c				sta 	zLTemp1+2
.019c40	68		pla				pla
.019c41	85 1b		sta $1b				sta 	zLTemp1+1
.019c43	68		pla				pla
.019c44	85 1a		sta $1a				sta 	zLTemp1+0
.019c46	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; set Q bit 1.
.019c48	09 01		ora #$01			ora 	#1
.019c4a	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019c4c	80 03		bra $019c51			bra 	_BFDNext
.019c4e					_BFDNoAdd:
.019c4e	68		pla				pla 								; Throw away the intermediate calculations
.019c4f	68		pla				pla
.019c50	68		pla				pla
.019c51					_BFDNext:
.019c51	88		dey				dey
.019c52	d0 c1		bne $019c15			bne 	_BFDLoop
.019c54	7a		ply				ply 								; restore Y and exit
.019c55	4e 9e 03	lsr $039e			lsr 	SignCount 					; if sign count odd,
.019c58	b0 06		bcs $019c60			bcs		IntegerNegateAlways 			; negate the result
.019c5a	60		rts				rts
.019c5b					CheckIntegerNegate:
.019c5b	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019c5d	30 01		bmi $019c60			bmi 	IntegerNegateAlways
.019c5f	60		rts				rts
.019c60					IntegerNegateAlways:
.019c60	ee 9e 03	inc $039e			inc 	SignCount
.019c63	38		sec				sec
.019c64	a9 00		lda #$00			lda 	#0
.019c66	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.019c68	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019c6a	a9 00		lda #$00			lda 	#0
.019c6c	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.019c6e	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019c70	a9 00		lda #$00			lda 	#0
.019c72	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.019c74	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019c76	a9 00		lda #$00			lda 	#0
.019c78	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.019c7a	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019c7c	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/inttostr.asm

.019c7d					INTToString:
.019c7d	48		pha				pha
.019c7e	5a		phy				phy
.019c7f	b5 83		lda $83,x			lda 		XS_Mantissa+3,x 		; check -ve
.019c81	10 08		bpl $019c8b			bpl 		_ITSNotMinus
.019c83	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.019c85	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.019c88	20 60 9c	jsr $019c60			jsr 		IntegerNegateAlways 	; negate the number.
.019c8b					_ITSNotMinus:
.019c8b	a9 00		lda #$00			lda 		#0
.019c8d	8d 9a 03	sta $039a			sta 		NumSuppress 			; clear the suppression flag.
.019c90	8a		txa				txa 								; use Y for the mantissa index.
.019c91	a8		tay				tay
.019c92	a2 00		ldx #$00			ldx 		#0 						; X is index into dword subtraction table.
.019c94					_ITSNextSubtractor:
.019c94	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.019c96	8d 9b 03	sta $039b			sta 		NumConvCount
.019c99					_ITSSubtract:
.019c99	38		sec				sec
.019c9a	b9 80 00	lda $0080,y			lda 		XS_Mantissa,y 			; subtract number and push on stack
.019c9d	ff fb 9c 01	sbc $019cfb,x			sbc 		_ITSSubtractors+0,x
.019ca1	48		pha				pha
.019ca2	b9 81 00	lda $0081,y			lda 		XS_Mantissa+1,y
.019ca5	ff fc 9c 01	sbc $019cfc,x			sbc 		_ITSSubtractors+1,x
.019ca9	48		pha				pha
.019caa	b9 82 00	lda $0082,y			lda 		XS_Mantissa+2,y
.019cad	ff fd 9c 01	sbc $019cfd,x			sbc 		_ITSSubtractors+2,x
.019cb1	48		pha				pha
.019cb2	b9 83 00	lda $0083,y			lda 		XS_Mantissa+3,y
.019cb5	ff fe 9c 01	sbc $019cfe,x			sbc 		_ITSSubtractors+3,x
.019cb9	90 14		bcc $019ccf			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.019cbb	99 83 00	sta $0083,y			sta 		XS_Mantissa+3,y 		; save subtract off stack
.019cbe	68		pla				pla
.019cbf	99 82 00	sta $0082,y			sta 		XS_Mantissa+2,y
.019cc2	68		pla				pla
.019cc3	99 81 00	sta $0081,y			sta 		XS_Mantissa+1,y
.019cc6	68		pla				pla
.019cc7	99 80 00	sta $0080,y			sta 		XS_Mantissa+0,y
.019cca	ee 9b 03	inc $039b			inc 		NumConvCount 			; bump count.
.019ccd	80 ca		bra $019c99			bra 		_ITSSubtract 			; go round again.
.019ccf					_ITSCantSubtract:
.019ccf	68		pla				pla 								; throw away interim answers
.019cd0	68		pla				pla
.019cd1	68		pla				pla
.019cd2	ad 9b 03	lda $039b			lda 		NumConvCount 			; if not zero then no suppression check
.019cd5	c9 30		cmp #$30			cmp 		#"0"
.019cd7	d0 05		bne $019cde			bne 		_ITSOutputDigit
.019cd9	ad 9a 03	lda $039a			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.019cdc	10 09		bpl $019ce7			bpl	 		_ITSGoNextSubtractor
.019cde					_ITSOutputDigit:
.019cde	ce 9a 03	dec $039a			dec 		NumSuppress 			; suppression check will be non-zero.
.019ce1	ad 9b 03	lda $039b			lda 		NumConvCount 			; count of subtractions
.019ce4	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter 		; output it.
.019ce7					_ITSGoNextSubtractor:
.019ce7	e8		inx				inx 								; next dword
.019ce8	e8		inx				inx
.019ce9	e8		inx				inx
.019cea	e8		inx				inx
.019ceb	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.019ced	d0 a5		bne $019c94			bne 		_ITSNextSubtractor 		; do all the subtractors.
.019cef	98		tya				tya 								; X is back as the mantissa index
.019cf0	aa		tax				tax
.019cf1	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.019cf3	09 30		ora #$30			ora 		#"0"
.019cf5	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.019cf8	7a		ply				ply 								; and exit
.019cf9	68		pla				pla
.019cfa	60		rts				rts
.019cfb					_ITSSubtractors:
>019cfb	00 ca 9a 3b					.dword 		1000000000
>019cff	00 e1 f5 05					.dword 		100000000
>019d03	80 96 98 00					.dword 		10000000
>019d07	40 42 0f 00					.dword 		1000000
>019d0b	a0 86 01 00					.dword 		100000
>019d0f	10 27 00 00					.dword 		10000
>019d13	e8 03 00 00					.dword 		1000
>019d17	64 00 00 00					.dword 		100
>019d1b	0a 00 00 00					.dword 		10
.019d1f					_ITSSubtractorsEnd:
.019d1f					ITSOutputCharacter:
.019d1f	48		pha				pha
.019d20	da		phx				phx
.019d21	ae 14 03	ldx $0314			ldx 	NumBufX 					; save digit
.019d24	9d 15 03	sta $0315,x			sta 	Num_Buffer,x
.019d27	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.019d29	9d 16 03	sta $0316,x			sta 	Num_Buffer+1,x
.019d2c	ee 14 03	inc $0314			inc 	NumBufX						; bump pointer.
.019d2f	fa		plx				plx
.019d30	68		pla				pla
.019d31	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/integer/convert/intfromstr.asm

.019d32					IntFromString:
.019d32	a0 00		ldy #$00			ldy 	#0
.019d34	8c 9c 03	sty $039c			sty 	ExpTemp 					; this is the converted digit count.
.019d37					IntFromStringY:
.019d37	48		pha				pha
.019d38	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.019d3a	95 80		sta $80,x			sta 	XS_Mantissa,x
.019d3c	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019d3e	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019d40	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019d42	a9 01		lda #$01			lda 	#1
.019d44	95 85		sta $85,x			sta 	XS_Type,x
.019d46					_IFSLoop:
.019d46	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; get next
.019d48	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.019d4a	90 4e		bcc $019d9a			bcc 	_IFSExit
.019d4c	c9 3a		cmp #$3a			cmp 	#"9"+1
.019d4e	b0 4a		bcs $019d9a			bcs 	_IFSExit
.019d50	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.019d52	c9 0c		cmp #$0c			cmp 	#12
.019d54	b0 4e		bcs $019da4			bcs 	_IFSOverflow
.019d56	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.019d58	48		pha				pha
.019d59	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019d5b	48		pha				pha
.019d5c	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019d5e	48		pha				pha
.019d5f	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019d61	48		pha				pha
.019d62	20 b9 9d	jsr $019db9			jsr 	IFSX1ShiftLeft 				; double
.019d65	20 b9 9d	jsr $019db9			jsr 	IFSX1ShiftLeft 				; x 4
.019d68	18		clc				clc 								; add saved value x 5
.019d69	68		pla				pla
.019d6a	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019d6c	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019d6e	68		pla				pla
.019d6f	75 81		adc $81,x			adc 	XS_Mantissa+1,x
.019d71	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019d73	68		pla				pla
.019d74	75 82		adc $82,x			adc 	XS_Mantissa+2,x
.019d76	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019d78	68		pla				pla
.019d79	75 83		adc $83,x			adc 	XS_Mantissa+3,x
.019d7b	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019d7d	20 b9 9d	jsr $019db9			jsr 	IFSX1ShiftLeft 				; x 10
.019d80	ee 9c 03	inc $039c			inc 	ExpTemp 					; bump count of digits processed.
.019d83	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; add digit
.019d85	29 0f		and #$0f			and 	#15
.019d87	c8		iny				iny
.019d88	75 80		adc $80,x			adc 	XS_Mantissa+0,x
.019d8a	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019d8c	90 b8		bcc $019d46			bcc 	_IFSLoop
.019d8e	f6 81		inc $81,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.019d90	d0 b4		bne $019d46			bne 	_IFSLoop
.019d92	f6 82		inc $82,x			inc 	XS_Mantissa+2,x
.019d94	d0 b0		bne $019d46			bne 	_IFSLoop
.019d96	f6 83		inc $83,x			inc 	XS_Mantissa+3,x
.019d98	80 ac		bra $019d46			bra 	_IFSLoop
.019d9a					_IFSExit:
.019d9a	98		tya				tya 								; get offset
.019d9b					_IFSOkay:
.019d9b	38		sec				sec
.019d9c	ad 9c 03	lda $039c			lda 	ExpTemp
.019d9f	f0 01		beq $019da2			beq 	_IFSSkipFail
.019da1	18		clc				clc
.019da2					_IFSSkipFail:
.019da2	68		pla				pla 								; and exit.
.019da3	60		rts				rts
.019da4					_IFSOverflow:
.019da4	20 57 85	jsr $018557			jsr 	ERR_Handler
>019da7	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>019daf	20 6f 76 65 72 66 6c 6f 77 00
.019db9					IFSX1ShiftLeft:
.019db9	16 80		asl $80,x			asl 	XS_Mantissa+0,x
.019dbb	36 81		rol $81,x			rol 	XS_Mantissa+1,x
.019dbd	36 82		rol $82,x			rol 	XS_Mantissa+2,x
.019dbf	36 83		rol $83,x			rol 	XS_Mantissa+3,x
.019dc1	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.019dc2					FPSubtract:
.019dc2	48		pha				pha
.019dc3	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.019dc5	49 80		eor #$80			eor 	#$80
.019dc7	95 8b		sta $8b,x			sta 	XS2_Type,x
.019dc9	68		pla				pla 								; --- and fall through ---
.019dca					FPAdd:
.019dca	48		pha				pha
.019dcb	b5 85		lda $85,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.019dcd	d0 05		bne $019dd4			bne 	_FPA_NegativeLHS
.019dcf	20 eb 9d	jsr $019deb			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.019dd2	68		pla				pla
.019dd3	60		rts				rts
.019dd4					_FPA_NegativeLHS:
.019dd4	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.019dd6	49 80		eor #$80			eor 	#$80
.019dd8	95 85		sta $85,x			sta 	XS_Type,x
.019dda	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.019ddc	49 80		eor #$80			eor 	#$80
.019dde	95 8b		sta $8b,x			sta 	XS2_Type,x
.019de0	20 eb 9d	jsr $019deb			jsr 	FPAdd_Worker 				; do the add calculation.
.019de3	b5 85		lda $85,x			lda 	XS_Type,x 					; flip sign of X1 back
.019de5	49 80		eor #$80			eor 	#$80
.019de7	95 85		sta $85,x			sta 	XS_Type,x
.019de9	68		pla				pla
.019dea	60		rts				rts
.019deb					FPAdd_Worker:
.019deb	34 8b		bit $8b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.019ded	70 07		bvs $019df6			bvs 	_FPAWExit 					; no change.
.019def	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.019df1	50 07		bvc $019dfa			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.019df3	20 68 a0	jsr $01a068			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.019df6					_FPAWExit:
.019df6	20 d7 a0	jsr $01a0d7			jsr 	FPUNormalise 				; normalise the result.
.019df9	60		rts				rts
.019dfa					_FPAWMakeSame:
.019dfa	b5 84		lda $84,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.019dfc	38		sec				sec
.019dfd	f5 8a		sbc $8a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.019dff	f0 16		beq $019e17			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.019e01	da		phx				phx 								; save X
.019e02	90 06		bcc $019e0a			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.019e04	e8		inx				inx
.019e05	e8		inx				inx
.019e06	e8		inx				inx
.019e07	e8		inx				inx
.019e08	e8		inx				inx
.019e09	e8		inx				inx
.019e0a					_FPAWShiftA:
.019e0a	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019e0c	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.019e0e	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019e10	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019e12	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019e14	fa		plx				plx 								; restore original X
.019e15	80 e3		bra $019dfa			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.019e17					_FPAW_DoArithmetic:
.019e17	34 8b		bit $8b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.019e19	30 28		bmi $019e43			bmi 	_FPAW_BNegative
.019e1b	18		clc				clc
.019e1c	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019e1e	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019e20	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019e22	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019e24	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019e26	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019e28	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019e2a	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019e2c	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019e2e	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019e30	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019e32	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019e34	90 c0		bcc $019df6			bcc 	_FPAWExit 					; no carry.
.019e36	f6 84		inc $84,x			inc 	XS_Exponent,x 				; so shift exponent up.
.019e38	38		sec				sec
.019e39	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019e3b	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019e3d	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019e3f	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019e41	80 b3		bra $019df6			bra 	_FPAWExit
.019e43					_FPAW_BNegative:
.019e43	38		sec				sec
.019e44	b5 80		lda $80,x			lda 	XS_Mantissa+0,x
.019e46	f5 86		sbc $86,x			sbc 	XS2_Mantissa+0,x
.019e48	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019e4a	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019e4c	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019e4e	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019e50	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019e52	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019e54	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019e56	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019e58	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019e5a	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019e5c	b0 09		bcs $019e67			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.019e5e	20 8e a0	jsr $01a08e			jsr 	FPUNegateInteger			; negate the mantissa
.019e61	b5 85		lda $85,x			lda 	XS_Type,x 					; flip result sign
.019e63	49 80		eor #$80			eor 	#$80
.019e65	95 85		sta $85,x			sta 	XS_Type,x
.019e67					_FPAWGoExit:
.019e67	4c f6 9d	jmp $019df6			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.019e6a					FPD_IsDivZero:
.019e6a	20 57 85	jsr $018557			jsr ERR_Handler
>019e6d	44 69 76 69 73 69 6f 6e			.text "Division by zero",0
>019e75	20 62 79 20 7a 65 72 6f 00
.019e7e					FPDivide:
.019e7e	48		pha				pha
.019e7f	5a		phy				phy
.019e80	34 8b		bit $8b,x			bit 	XS2_Type,x 					; check if division by zero
.019e82	70 e6		bvs $019e6a			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.019e84	34 85		bit $85,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.019e86	f0 03		beq $019e8b			beq 	_FPDCalculateExp
.019e88					_FPD_Exit:
.019e88	7a		ply				ply
.019e89	68		pla				pla
.019e8a	60		rts				rts
.019e8b					_FPDCalculateExp:
.019e8b	b5 8a		lda $8a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.019e8d	49 ff		eor #$ff			eor 	#$FF
.019e8f	1a		inc a				inc 	a
.019e90	95 8a		sta $8a,x			sta 	XS2_Exponent,x
.019e92	20 62 9f	jsr $019f62			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.019e95	18		clc				clc 	 							; add 1 to the resulting exponent
.019e96	69 01		adc #$01			adc 	#1
.019e98	b0 54		bcs $019eee			bcs 	_FPD_Overflow 				; which can overflow.
.019e9a	95 84		sta $84,x			sta 	XS_Exponent,x
.019e9c	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.019e9e	85 1a		sta $1a				sta 	zLTemp1+0
.019ea0	85 1b		sta $1b				sta 	zLTemp1+1
.019ea2	85 1c		sta $1c				sta 	zLTemp1+2
.019ea4	85 1d		sta $1d				sta 	zLTemp1+3
.019ea6	a0 20		ldy #$20			ldy 	#32 						; times round.
.019ea8					_FPD_Loop:
.019ea8	38		sec				sec 								; calculate X1-X2 stacking result because we might
.019ea9	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; not save it.
.019eab	f5 86		sbc $86,x			sbc 	XS2_Mantissa,x
.019ead	48		pha				pha
.019eae	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.019eb0	f5 87		sbc $87,x			sbc 	XS2_Mantissa+1,x
.019eb2	48		pha				pha
.019eb3	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.019eb5	f5 88		sbc $88,x			sbc 	XS2_Mantissa+2,x
.019eb7	48		pha				pha
.019eb8	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.019eba	f5 89		sbc $89,x			sbc 	XS2_Mantissa+3,x
.019ebc	90 13		bcc $019ed1			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.019ebe	95 83		sta $83,x			sta 	XS_Mantissa+3,x 			; save results out to A
.019ec0	68		pla				pla
.019ec1	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019ec3	68		pla				pla
.019ec4	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019ec6	68		pla				pla
.019ec7	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.019ec9	a5 1d		lda $1d				lda 	zLTemp1+3 					; set high bit of result
.019ecb	09 80		ora #$80			ora 	#$80
.019ecd	85 1d		sta $1d				sta 	zLTemp1+3
.019ecf	80 03		bra $019ed4			bra 	_FPD_Rotates
.019ed1					_FPD_NoSubtract:
.019ed1	68		pla				pla 								; throw away unwanted results
.019ed2	68		pla				pla
.019ed3	68		pla				pla
.019ed4					_FPD_Rotates:
.019ed4	56 89		lsr $89,x			lsr 	3+XS2_Mantissa,x
.019ed6	76 88		ror $88,x			ror 	2+XS2_Mantissa,x
.019ed8	76 87		ror $87,x			ror 	1+XS2_Mantissa,x
.019eda	76 86		ror $86,x			ror 	0+XS2_Mantissa,x
.019edc	06 1a		asl $1a				asl 	zLTemp1 					; rotate result round left
.019ede	26 1b		rol $1b				rol 	zLTemp1+1
.019ee0	26 1c		rol $1c				rol 	zLTemp1+2
.019ee2	26 1d		rol $1d				rol 	zLTemp1+3
.019ee4	90 02		bcc $019ee8			bcc 	_FPD_NoCarry
.019ee6	e6 1a		inc $1a				inc 	zLTemp1 					; if rotated out, set LSB.
.019ee8					_FPD_NoCarry:
.019ee8	88		dey				dey 								; do 32 times
.019ee9	d0 bd		bne $019ea8			bne 	_FPD_Loop
.019eeb	4c 46 9f	jmp $019f46			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.019eee					_FPD_Overflow:
.019eee	4c 34 a1	jmp $01a134			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.019ef1					FPMultiply:
.019ef1	48		pha				pha
.019ef2	5a		phy				phy
.019ef3	34 85		bit $85,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.019ef5	70 07		bvs $019efe			bvs 	_FPM_Exit
.019ef7	34 8b		bit $8b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.019ef9	50 06		bvc $019f01			bvc 	_FPM_CalcExponent
.019efb	20 68 a0	jsr $01a068			jsr 	FPUCopyX2ToX1
.019efe					_FPM_Exit:
.019efe	7a		ply				ply
.019eff	68		pla				pla
.019f00	60		rts				rts
.019f01					_FPM_CalcExponent:
.019f01	18		clc				clc
.019f02	20 62 9f	jsr $019f62			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.019f05	95 84		sta $84,x			sta 	XS_Exponent,x 				; save the result.
.019f07	a9 00		lda #$00			lda 	#0
.019f09	85 1a		sta $1a				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.019f0b	85 1b		sta $1b				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.019f0d	85 1c		sta $1c				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.019f0f	85 1d		sta $1d				sta 	zLTemp1+3
.019f11	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.019f13					_FPM_Loop:
.019f13	b5 80		lda $80,x			lda 	XS_Mantissa,x				; check LSB of long product
.019f15	29 01		and #$01			and 	#1
.019f17	18		clc				clc 								; clear carry for the long rotate.
.019f18	f0 19		beq $019f33			beq 	_FPM_NoAddition
.019f1a	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.019f1b	a5 1a		lda $1a				lda 	zLTemp1+0
.019f1d	75 86		adc $86,x			adc 	XS2_Mantissa+0,x
.019f1f	85 1a		sta $1a				sta 	zLTemp1+0
.019f21	a5 1b		lda $1b				lda 	zLTemp1+1
.019f23	75 87		adc $87,x			adc 	XS2_Mantissa+1,x
.019f25	85 1b		sta $1b				sta 	zLTemp1+1
.019f27	a5 1c		lda $1c				lda 	zLTemp1+2
.019f29	75 88		adc $88,x			adc 	XS2_Mantissa+2,x
.019f2b	85 1c		sta $1c				sta 	zLTemp1+2
.019f2d	a5 1d		lda $1d				lda 	zLTemp1+3
.019f2f	75 89		adc $89,x			adc 	XS2_Mantissa+3,x
.019f31	85 1d		sta $1d				sta 	zLTemp1+3
.019f33					_FPM_NoAddition:
.019f33	66 1d		ror $1d				ror 	3+zLTemp1
.019f35	66 1c		ror $1c				ror 	2+zLTemp1
.019f37	66 1b		ror $1b				ror 	1+zLTemp1
.019f39	66 1a		ror $1a				ror 	0+zLTemp1
.019f3b	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.019f3d	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.019f3f	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.019f41	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.019f43	88		dey				dey
.019f44	d0 cd		bne $019f13			bne 	_FPM_Loop 					; do this 32 times.
.019f46					FPM_CopySignNormalize:
.019f46	a5 1a		lda $1a				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.019f48	95 80		sta $80,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.019f4a	a5 1b		lda $1b				lda 	zLTemp1+1
.019f4c	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.019f4e	a5 1c		lda $1c				lda 	zLTemp1+2
.019f50	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.019f52	a5 1d		lda $1d				lda 	zLTemp1+3
.019f54	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.019f56	b5 85		lda $85,x			lda 	XS_Type,x 					; sign is xor of signs
.019f58	55 8b		eor $8b,x			eor 	XS2_Type,x
.019f5a	95 85		sta $85,x			sta 	XS_Type,x
.019f5c	20 d7 a0	jsr $01a0d7			jsr 	FPUNormalise 				; normalise and exit.
.019f5f	7a		ply				ply
.019f60	68		pla				pla
.019f61	60		rts				rts
.019f62					FPCalculateExponent:
.019f62	18		clc				clc
.019f63	b5 84		lda $84,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.019f65	75 8a		adc $8a,x			adc 	XS2_Exponent,x
.019f67	b0 08		bcs $019f71			bcs 	_FPCECarry 					; carry out ?
.019f69	10 03		bpl $019f6e			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.019f6b	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.019f6d	60		rts				rts
.019f6e					_FPCEExpZero:
.019f6e	a9 00		lda #$00			lda 	#0
.019f70	60		rts				rts
.019f71					_FPCECarry:
.019f71	30 03		bmi $019f76			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.019f73	09 80		ora #$80			ora 	#$80 						; put in right range
.019f75	60		rts				rts
.019f76					_FPCEOverflow:
.019f76	4c 34 a1	jmp $01a134			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.019f79					FPFractionalPart:
.019f79	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.019f7b	38		sec				sec 								; this flag tells us to keep the fractional part
.019f7c	30 0d		bmi $019f8b			bmi 	FPGetPart
.019f7e	60		rts				rts
.019f7f					FPIntegerPart:
.019f7f	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.019f81	18		clc				clc 								; this flag says keep the integer part.
.019f82	30 07		bmi $019f8b			bmi 	FPGetPart 					; -ve exponents are 0..127
.019f84	48		pha				pha
.019f85	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.019f87	95 85		sta $85,x			sta 	XS_Type,x
.019f89	68		pla				pla
.019f8a	60		rts				rts
.019f8b					FPGetPart:
.019f8b	48		pha				pha
.019f8c	5a		phy				phy 								; save Y
.019f8d	08		php				php 								; save action
.019f8e	34 85		bit $85,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.019f90	70 59		bvs $019feb			bvs 	_FPGP_Exit 					; then do nothing.
.019f92	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.019f94	85 1a		sta $1a				sta 	zLTemp1+0 					; this mask is applied to chop out the
.019f96	85 1b		sta $1b				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.019f98	85 1c		sta $1c				sta 	zLTemp1+2
.019f9a	85 1d		sta $1d				sta 	zLTemp1+3
.019f9c	b5 84		lda $84,x			lda 	XS_Exponent,x				; the number of shifts.
.019f9e	38		sec				sec
.019f9f	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.019fa1	f0 12		beq $019fb5			beq 	_FPGP_NoShift 				; ... if any
.019fa3	c9 20		cmp #$20			cmp 	#32
.019fa5	90 02		bcc $019fa9			bcc 	_FPGP_NotMax
.019fa7	a9 20		lda #$20			lda 	#32 						; max of 32.
.019fa9					_FPGP_NotMax:
.019fa9	a8		tay				tay 								; Y is the mask shift count.
.019faa					_FPGP_ShiftMask:
.019faa	46 1d		lsr $1d				lsr 	3+zLTemp1
.019fac	66 1c		ror $1c				ror 	2+zLTemp1
.019fae	66 1b		ror $1b				ror 	1+zLTemp1
.019fb0	66 1a		ror $1a				ror 	0+zLTemp1
.019fb2	88		dey				dey
.019fb3	d0 f5		bne $019faa			bne 	_FPGP_ShiftMask
.019fb5					_FPGP_NoShift:
.019fb5	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.019fb7	8e 9c 03	stx $039c			stx 	ExpTemp						; save X
.019fba					_FPGP_MaskLoop:
.019fba	b9 1a 00	lda $001a,y			lda 	zlTemp1,y 					; get mask byte
.019fbd	28		plp				plp 								; if CC we keep the top part, so we
.019fbe	08		php				php		 							; flip the mask.
.019fbf	b0 02		bcs $019fc3			bcs		_FPGP_NoFlip
.019fc1	49 ff		eor #$ff			eor 	#$FF
.019fc3					_FPGP_NoFlip:
.019fc3	35 80		and $80,x			and 	XS_Mantissa,x 				; and into the mantissa.
.019fc5	95 80		sta $80,x			sta 	XS_Mantissa,x
.019fc7	e8		inx				inx
.019fc8	c8		iny				iny
.019fc9	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.019fcb	d0 ed		bne $019fba			bne 	_FPGP_MaskLoop
.019fcd	ae 9c 03	ldx $039c			ldx 	ExpTemp						; restore X
.019fd0	28		plp				plp
.019fd1	08		php				php 								; get action flag on the stack
.019fd2	90 04		bcc $019fd8			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.019fd4	a9 00		lda #$00			lda 	#0
.019fd6	95 85		sta $85,x			sta 	XS_Type,x
.019fd8					_FPGP_NotFractional:
.019fd8	b5 80		lda $80,x			lda 	XS_Mantissa,x 						; check if \1 zero
.019fda	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.019fdc	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.019fde	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.019fe0	f0 05		beq $019fe7			beq 	_FPGP_Zero 					; if zero, return zero
.019fe2	20 d7 a0	jsr $01a0d7			jsr 	FPUNormalise
.019fe5	80 04		bra $019feb			bra 	_FPGP_Exit 					; and exit
.019fe7					_FPGP_Zero:
.019fe7	a9 40		lda #$40			lda 	#$40 						; set zero flag
.019fe9	95 85		sta $85,x			sta 	XS_Type,x
.019feb					_FPGP_Exit:
.019feb	68		pla				pla 								; throw saved action flag.
.019fec	7a		ply				ply
.019fed	68		pla				pla
.019fee	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.019fef					FPCompare:
.019fef	20 30 a0	jsr $01a030			jsr 	FPFastCompare 				; fast compare try first
.019ff2	b0 3b		bcs $01a02f			bcs 	_FPCExit 					; that worked.
.019ff4	b5 84		lda $84,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.019ff6	48		pha				pha
.019ff7	b5 8a		lda $8a,x			lda 	XS2_Exponent,x
.019ff9	48		pha				pha
.019ffa	20 c2 9d	jsr $019dc2			jsr 	FPSubtract 					; calculate X1-X2
.019ffd	34 85		bit $85,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.019fff	70 2a		bvs $01a02b			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.01a001	68		pla				pla
.01a002	8d 9c 03	sta $039c			sta 	ExpTemp						; save first exponent in temporary reg.
.01a005	68		pla				pla
.01a006	38		sec				sec
.01a007	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; calculate AX-BX
.01a00a	70 14		bvs $01a020			bvs 	_FPCNotEqual				; overflow, can't be equal.
.01a00c	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.01a00d	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.01a00f	b0 0f		bcs $01a020			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.01a011	38		sec				sec
.01a012	ad 9c 03	lda $039c			lda 	ExpTemp 					; get one of the exponents back.
.01a015	e9 12		sbc #$12			sbc 	#18 						; allow for 2^18 error, relatively.
.01a017	b0 02		bcs $01a01b			bcs 	_FPCNotRange 				; keep in range.
.01a019	a9 01		lda #$01			lda 	#1
.01a01b					_FPCNotRange:
.01a01b	38		sec				sec
.01a01c	f5 84		sbc $84,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.01a01e	b0 0d		bcs $01a02d			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.01a020					_FPCNotEqual:
.01a020	b5 85		lda $85,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.01a022	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.01a024	f0 02		beq $01a028			beq 	_FPCNE2
.01a026	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.01a028	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.01a029	80 04		bra $01a02f			bra 	_FPCExit
.01a02b					_FPCPullZero:
.01a02b	68		pla				pla 								; throw saved exponents
.01a02c	68		pla				pla
.01a02d					_FPCZero:
.01a02d	a9 00		lda #$00			lda 	#0 							; and return zero
.01a02f					_FPCExit:
.01a02f	60		rts				rts
.01a030					FPFastCompare:
.01a030	34 85		bit $85,x			bit 	XS_Type,x 					; n1 is zero.
.01a032	70 23		bvs $01a057			bvs 	_FPFLeftZero
.01a034	34 8b		bit $8b,x			bit 	XS2_Type,x 					; n2 is zero
.01a036	b5 85		lda $85,x			lda 	XS_Type,x 					; if so, return sign bit of 1 (n-0)
.01a038	70 25		bvs $01a05f			bvs 	_FPFSignBit
.01a03a	55 8b		eor $8b,x			eor 	XS2_Type,x 					; eor 2 type bits. now know both non-zero
.01a03c	0a		asl a				asl 	a 							; put in CS if different.
.01a03d	b5 85		lda $85,x			lda 	XS_Type,x 					; if signs different return sign of first
.01a03f	b0 1e		bcs $01a05f			bcs 	_FPFSignBit
.01a041	38		sec				sec 								; same sign and not-zero. compare exponents
.01a042	b5 84		lda $84,x			lda 	XS_Exponent,x 				; compare exponents. if the same, then fail.
.01a044	f5 8a		sbc $8a,x			sbc 	XS2_Exponent,x 				; e.g. we have to do it via subtraction.
.01a046	f0 09		beq $01a051			beq 	_FPNoFastCompare
.01a048	6a		ror a				ror 	a 							; put carry into bit 7.
.01a049	34 85		bit $85,x			bit 	XS_Type,X 					; if it is +x then flip it.
.01a04b	30 02		bmi $01a04f			bmi		_FPFCNotMinus
.01a04d	49 80		eor #$80			eor 	#$80
.01a04f					_FPFCNotMinus:
.01a04f	80 0e		bra $01a05f			bra		_FPFSignBit
.01a051					_FPNoFastCompare:
.01a051	18		clc				clc
.01a052	60		rts				rts
.01a053					_FPFZero:
.01a053	a9 00		lda #$00			lda 	#0
.01a055					_FPFExitSet:
.01a055	38		sec				sec
.01a056	60		rts				rts
.01a057					_FPFLeftZero:
.01a057	34 8b		bit $8b,x			bit 	XS2_Type,x 					; if right is zero, return zero.
.01a059	70 f8		bvs $01a053			bvs 	_FPFZero
.01a05b	b5 8b		lda $8b,x			lda 	XS2_Type,x 					; flip sign bit
.01a05d	49 80		eor #$80			eor 	#$80						; return that as a sign.
.01a05f					_FPFSignBit:
.01a05f	0a		asl a				asl 	a
.01a060	a9 01		lda #$01			lda 	#1
.01a062	90 f1		bcc $01a055			bcc		_FPFExitSet
.01a064	a9 ff		lda #$ff			lda 	#$FF
.01a066	38		sec				sec
.01a067	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.01a068					FPUCopyX2ToX1:
.01a068	48		pha				pha
.01a069	da		phx				phx
.01a06a	5a		phy				phy
.01a06b	a0 08		ldy #$08			ldy 	#8
.01a06d	b5 86		lda $86,x	_FPUC21:lda 	XS2_Mantissa,x
.01a06f	95 80		sta $80,x			sta 	XS_Mantissa,x
.01a071	e8		inx				inx
.01a072	88		dey				dey
.01a073	10 f8		bpl $01a06d			bpl 	_FPUC21
.01a075	7a		ply				ply
.01a076	fa		plx				plx
.01a077	68		pla				pla
.01a078	60		rts				rts
.01a079					FPUSetInteger:
.01a079	48		pha				pha
.01a07a	95 80		sta $80,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.01a07c	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.01a07e	10 02		bpl $01a082			bpl 	_FPUSIExtend
.01a080	a9 ff		lda #$ff			lda 	#$FF
.01a082					_FPUSIExtend:
.01a082	95 81		sta $81,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.01a084	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a086	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a088	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.01a08a	95 85		sta $85,x			sta 	XS_Type,x
.01a08c	68		pla				pla
.01a08d	60		rts				rts
.01a08e					FPUNegateInteger:
.01a08e	48		pha				pha
.01a08f	38		sec				sec
.01a090	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.01a092	f5 80		sbc $80,x			sbc 	XS_Mantissa+0,x
.01a094	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a096	a9 00		lda #$00			lda 	#0
.01a098	f5 81		sbc $81,x			sbc 	XS_Mantissa+1,x
.01a09a	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a09c	a9 00		lda #$00			lda 	#0
.01a09e	f5 82		sbc $82,x			sbc 	XS_Mantissa+2,x
.01a0a0	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a0a2	a9 00		lda #$00			lda 	#0
.01a0a4	f5 83		sbc $83,x			sbc 	XS_Mantissa+3,x
.01a0a6	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a0a8	68		pla				pla
.01a0a9	60		rts				rts
.01a0aa					FPUToFloat:
.01a0aa	48		pha				pha
.01a0ab	b5 85		lda $85,x			lda 	XS_Type,x					; exit if already float.
.01a0ad	29 0f		and #$0f			and 	#$0F
.01a0af	f0 24		beq $01a0d5			beq 	_FPUFExit
.01a0b1	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.01a0b3	95 85		sta $85,x			sta 	XS_Type,x
.01a0b5	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.01a0b7	95 84		sta $84,x			sta 	XS_Exponent,x 				; x mantissa.
.01a0b9	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.01a0bb	10 07		bpl $01a0c4			bpl		_FPUFPositive
.01a0bd	20 8e a0	jsr $01a08e			jsr 	FPUNegateInteger 			; negate the mantissa
.01a0c0	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.01a0c2	95 85		sta $85,x			sta 	XS_Type,x
.01a0c4					_FPUFPositive:
.01a0c4	b5 80		lda $80,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.01a0c6	15 81		ora $81,x			ora 	XS_Mantissa+1,x
.01a0c8	15 82		ora $82,x			ora 	XS_Mantissa+2,x
.01a0ca	15 83		ora $83,x			ora 	XS_Mantissa+3,x
.01a0cc	d0 04		bne $01a0d2			bne 	_FPUFNonZero
.01a0ce	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.01a0d0	95 85		sta $85,x			sta 	XS_Type,x
.01a0d2					_FPUFNonZero:
.01a0d2	20 d7 a0	jsr $01a0d7			jsr 	FPUNormalise 				; normalise the floating point.
.01a0d5					_FPUFExit:
.01a0d5	68		pla				pla
.01a0d6	60		rts				rts
.01a0d7					FPUNormalise:
.01a0d7	48		pha				pha
.01a0d8	34 85		bit $85,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.01a0da	70 18		bvs $01a0f4			bvs 	_FPUNExit
.01a0dc	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.01a0de	f0 10		beq $01a0f0			beq 	_FPUNSetZero
.01a0e0					_FPUNLoop:
.01a0e0	b5 83		lda $83,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.01a0e2	30 10		bmi $01a0f4			bmi 	_FPUNExit 					; if so, we are normalised.
.01a0e4	16 80		asl $80,x			asl 	0+XS_Mantissa+0,x
.01a0e6	36 81		rol $81,x			rol 	1+XS_Mantissa+0,x
.01a0e8	36 82		rol $82,x			rol 	2+XS_Mantissa+0,x
.01a0ea	36 83		rol $83,x			rol 	3+XS_Mantissa+0,x
.01a0ec	d6 84		dec $84,x			dec 	XS_Exponent,x 				; decrement exponent
.01a0ee	d0 f0		bne $01a0e0			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.01a0f0					_FPUNSetZero:
.01a0f0	a9 40		lda #$40			lda 	#$40
.01a0f2	95 85		sta $85,x			sta 	XS_Type,x 					; the result is now zero.
.01a0f4					_FPUNExit:
.01a0f4	68		pla				pla
.01a0f5	60		rts				rts
.01a0f6					FPUToInteger:
.01a0f6	48		pha				pha
.01a0f7	b5 85		lda $85,x			lda 	XS_Type,x 					; if already integer, exit
.01a0f9	29 01		and #$01			and 	#1
.01a0fb	d0 31		bne $01a12e			bne 	_FPUTOI_Exit
.01a0fd	34 85		bit $85,x			bit 	XS_Type,x					; if zero, return zero.
.01a0ff	70 23		bvs $01a124			bvs 	_FPUTOI_Zero
.01a101	b5 84		lda $84,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.01a103	10 1f		bpl $01a124			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.01a105	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.01a107	b0 2b		bcs $01a134			bcs 	FP_Overflow
.01a109					_FPUToIToInteger:
.01a109	b5 84		lda $84,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.01a10b	c9 a0		cmp #$a0			cmp 	#128+32
.01a10d	f0 0c		beq $01a11b			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.01a10f	f6 84		inc $84,x			inc 	XS_Exponent,X 				; increment Exponent
.01a111	56 83		lsr $83,x			lsr 	3+XS_Mantissa,x
.01a113	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a115	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a117	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a119	80 ee		bra $01a109			bra 	_FPUToIToInteger 			; keep going.
.01a11b					_FPUToICheckSign:
.01a11b	b5 85		lda $85,x			lda 	XS_Type,x 					; check sign
.01a11d	10 0f		bpl $01a12e			bpl 	_FPUToI_Exit 				; exit if unsigned.
.01a11f	20 8e a0	jsr $01a08e			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.01a122	80 0a		bra $01a12e			bra 	_FPUTOI_Exit
.01a124					_FPUTOI_Zero:
.01a124	a9 00		lda #$00			lda 	#0 							; return zero integer.
.01a126	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a128	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a12a	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a12c	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a12e					_FPUToI_Exit:
.01a12e	a9 01		lda #$01			lda 	#1 							; set type to integer
.01a130	95 85		sta $85,x			sta 	XS_Type,x
.01a132	68		pla				pla
.01a133	60		rts				rts
.01a134					FP_Overflow:
.01a134	20 57 85	jsr $018557			jsr ERR_Handler
>01a137	46 6c 6f 61 74 69 6e 67			.text "Floating Point overflow",0
>01a13f	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.01a14f					FPUTimes10:
.01a14f	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.01a151	85 1a		sta $1a				sta 	ZLTemp1+0
.01a153	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a155	85 1b		sta $1b				sta 	ZLTemp1+1
.01a157	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a159	85 1c		sta $1c				sta 	ZLTemp1+2
.01a15b	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a15d	85 1d		sta $1d				sta 	ZLTemp1+3
.01a15f	20 94 a1	jsr $01a194			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.01a162	20 94 a1	jsr $01a194			jsr 	_FPUT_LSR_ZLTemp1
.01a165	18		clc				clc
.01a166	b5 80		lda $80,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.01a168	65 1a		adc $1a				adc 	ZLTemp1+0
.01a16a	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a16c	b5 81		lda $81,x			lda 	XS_Mantissa+1,x
.01a16e	65 1b		adc $1b				adc 	ZLTemp1+1
.01a170	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a172	b5 82		lda $82,x			lda 	XS_Mantissa+2,x
.01a174	65 1c		adc $1c				adc 	ZLTemp1+2
.01a176	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a178	b5 83		lda $83,x			lda 	XS_Mantissa+3,x
.01a17a	65 1d		adc $1d				adc 	ZLTemp1+3
.01a17c	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a17e	90 0a		bcc $01a18a			bcc 	_FPUTimes10
.01a180	76 83		ror $83,x			ror 	3+XS_Mantissa,x
.01a182	76 82		ror $82,x			ror 	2+XS_Mantissa,x
.01a184	76 81		ror $81,x			ror 	1+XS_Mantissa,x
.01a186	76 80		ror $80,x			ror 	0+XS_Mantissa,x
.01a188	f6 84		inc $84,x			inc 	XS_Exponent,x				; fix exponent
.01a18a					_FPUTimes10:
.01a18a	b5 84		lda $84,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.01a18c	18		clc				clc
.01a18d	69 03		adc #$03			adc 	#3
.01a18f	95 84		sta $84,x			sta 	XS_Exponent,x
.01a191	b0 a1		bcs $01a134			bcs 	FP_Overflow 				; error
.01a193	60		rts				rts
.01a194					_FPUT_LSR_ZLTemp1:
.01a194	46 1d		lsr $1d				lsr 	ZLTemp1+3
.01a196	66 1c		ror $1c				ror 	ZLTemp1+2
.01a198	66 1b		ror $1b				ror 	ZLTemp1+1
.01a19a	66 1a		ror $1a				ror 	ZLTemp1+0
.01a19c	60		rts				rts
.01a19d					FPUScale10A:
.01a19d	5a		phy				phy
.01a19e	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.01a1a0	f0 37		beq $01a1d9			beq 	_FPUScaleExit
.01a1a2	da		phx				phx 								; save X
.01a1a3	e8		inx				inx
.01a1a4	e8		inx				inx
.01a1a5	e8		inx				inx
.01a1a6	e8		inx				inx
.01a1a7	e8		inx				inx
.01a1a8	e8		inx				inx
.01a1a9	a8		tay				tay 								; save power scalar in Y.
.01a1aa	a9 00		lda #$00			lda 	#0
.01a1ac	95 80		sta $80,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.01a1ae	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a1b0	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a1b2	95 85		sta $85,x			sta 	XS_Type,x
.01a1b4	a9 80		lda #$80			lda 	#$80
.01a1b6	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a1b8	a9 81		lda #$81			lda 	#$81
.01a1ba	95 84		sta $84,x			sta 	XS_Exponent,x
.01a1bc	5a		phy				phy 								; save 10^n on stack.
.01a1bd	c0 00		cpy #$00			cpy 	#0
.01a1bf	10 05		bpl $01a1c6			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.01a1c1	98		tya				tya
.01a1c2	49 ff		eor #$ff			eor 	#$FF
.01a1c4	1a		inc a				inc 	a
.01a1c5	a8		tay				tay
.01a1c6					_FPUSAbs:
.01a1c6	20 4f a1	jsr $01a14f			jsr 	FPUTimes10
.01a1c9	88		dey				dey
.01a1ca	d0 fa		bne $01a1c6			bne 	_FPUSAbs 					; tos is now 10^|AC|
.01a1cc	68		pla				pla 								; restore count in A
.01a1cd	fa		plx				plx 								; restore X pointing to number to scale.
.01a1ce	0a		asl a				asl 	a
.01a1cf	b0 05		bcs $01a1d6			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.01a1d1	20 f1 9e	jsr $019ef1			jsr 	FPMultiply 					; if clear multiply.
.01a1d4	80 03		bra $01a1d9			bra		_FPUScaleExit
.01a1d6					_FPUSDivide:
.01a1d6	20 7e 9e	jsr $019e7e			jsr 	FPDivide
.01a1d9					_FPUScaleExit:
.01a1d9	7a		ply				ply
.01a1da	60		rts				rts
.01a1db					FPUCopyToNext:
.01a1db	a0 06		ldy #$06			ldy 		#6
.01a1dd	da		phx				phx
.01a1de					_FPUCopy1:
.01a1de	b5 80		lda $80,x			lda 	XS_Mantissa,x
.01a1e0	95 86		sta $86,x			sta 	XS2_Mantissa,x
.01a1e2	e8		inx				inx
.01a1e3	88		dey				dey
.01a1e4	d0 f8		bne $01a1de			bne 	_FPUCopy1
.01a1e6	fa		plx				plx
.01a1e7	60		rts				rts
.01a1e8					FPUCopyFromNext:
.01a1e8	a0 06		ldy #$06			ldy 		#6
.01a1ea	da		phx				phx
.01a1eb					_FPUCopy1:
.01a1eb	b5 86		lda $86,x			lda 	XS2_Mantissa,x
.01a1ed	95 80		sta $80,x			sta 	XS_Mantissa,x
.01a1ef	e8		inx				inx
.01a1f0	88		dey				dey
.01a1f1	d0 f8		bne $01a1eb			bne 	_FPUCopy1
.01a1f3	fa		plx				plx
.01a1f4	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fptostr.asm

.01a1f5					FPToString:
.01a1f5	48		pha				pha
.01a1f6	5a		phy				phy
.01a1f7	34 85		bit $85,x			bit 		XS_Type,x 				; check zero flag
.01a1f9	50 0a		bvc $01a205			bvc 		_FPTSIsFloat 			; if zero,
.01a1fb					_FPTSZero:
.01a1fb	a9 30		lda #$30			lda 		#"0"
.01a1fd	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.01a200					_FPTSExit:
.01a200	7a		ply				ply
.01a201	68		pla				pla
.01a202	60		rts				rts
.01a203	80 fb		bra $01a200			bra 		_FPTSExit
.01a205					_FPTSIsFloat:
.01a205	b5 85		lda $85,x			lda 		XS_Type,x 				; is it signed ?
.01a207	10 09		bpl $01a212			bpl 		_FPTSNotSigned
.01a209	a9 00		lda #$00			lda 		#0 						; clear sign flag
.01a20b	95 85		sta $85,x			sta 		XS_Type,x
.01a20d	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.01a20f	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.01a212					_FPTSNotSigned:
.01a212	b5 84		lda $84,x			lda 		XS_Exponent,x
.01a214	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.01a216	b0 09		bcs $01a221			bcs 		_FPTSExponent
.01a218	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.01a21a	90 05		bcc $01a221			bcc 		_FPTSExponent 			;
.01a21c					_FPTSStandard:
.01a21c	20 60 a2	jsr $01a260			jsr 		FPTOutputBody 			; output the body.
.01a21f	80 df		bra $01a200			bra 		_FPTSExit
.01a221					_FPTSExponent:
.01a221	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.01a223	8d 9d 03	sta $039d			sta 		ExpCount
.01a226					_FPTSExponentLoop:
.01a226	b5 84		lda $84,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.01a228	10 0e		bpl $01a238			bpl 		_FPTSTimes
.01a22a	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.01a22c	90 14		bcc $01a242			bcc 		_FPTSScaledToExp
.01a22e	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.01a230	20 9d a1	jsr $01a19d			jsr 		FPUScale10A
.01a233	ee 9d 03	inc $039d			inc 		ExpCount
.01a236	80 ee		bra $01a226			bra 		_FPTSExponentLoop
.01a238					_FPTSTimes:
.01a238	a9 01		lda #$01			lda 		#1
.01a23a	20 9d a1	jsr $01a19d			jsr 		FPUScale10A
.01a23d	ce 9d 03	dec $039d			dec 		ExpCount
.01a240	80 e4		bra $01a226			bra 		_FPTSExponentLoop
.01a242					_FPTSScaledToExp:
.01a242	20 60 a2	jsr $01a260			jsr 		FPTOutputBody 			; output the body.
.01a245	a9 65		lda #$65			lda 		#"e"					; output E
.01a247	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.01a24a	ad 9d 03	lda $039d			lda 		ExpCount 				; get the exponent
.01a24d	95 80		sta $80,x			sta 		XS_Mantissa,x
.01a24f	29 80		and #$80			and 		#$80 					; sign extend it
.01a251	f0 02		beq $01a255			beq 		_FPTSSExt
.01a253	a9 ff		lda #$ff			lda 		#$FF
.01a255					_FPTSSExt:
.01a255	95 81		sta $81,x			sta 		XS_Mantissa+1,x
.01a257	95 82		sta $82,x			sta 		XS_Mantissa+2,x
.01a259	95 83		sta $83,x			sta 		XS_Mantissa+3,x
.01a25b	20 7d 9c	jsr $019c7d			jsr 		INTToString 			; output the exponent.
.01a25e	80 a0		bra $01a200			bra			_FPTSExit 				; and exit.
.01a260					FPTOutputBody:
.01a260	20 db a1	jsr $01a1db			jsr 		FPUCopyToNext 			; copy to next slot.
.01a263	20 f6 a0	jsr $01a0f6			jsr 		FPUToInteger 			; convert to an integer
.01a266	20 7d 9c	jsr $019c7d			jsr 		INTToString 			; output the main integer part.
.01a269	20 e8 a1	jsr $01a1e8			jsr 		FPUCopyFromNext 		; get the fractional part back.
.01a26c	20 79 9f	jsr $019f79			jsr 		FPFractionalPart 		; get the decimal part.
.01a26f	34 85		bit $85,x			bit 		XS_Type,x 				; any fractional part.
.01a271	70 3c		bvs $01a2af			bvs 		_FPTOExit 				; if not, exit now.
.01a273	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.01a275	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.01a278					_FPOutLoop:
.01a278	34 85		bit $85,x			bit 		XS_Type,x 				; finally reached zero.
.01a27a	70 1d		bvs $01a299			bvs 		_FPStripZeros 			; strip trailing zeros
.01a27c	20 4f a1	jsr $01a14f			jsr 		FPUTimes10 				; multiply by 10
.01a27f	20 db a1	jsr $01a1db			jsr 		FPUCopyToNext			; copy to next slot.
.01a282	20 f6 a0	jsr $01a0f6			jsr 		FPUToInteger 			; convert to integer
.01a285	b5 80		lda $80,x			lda 		XS_Mantissa+0,x 		; print digit.
.01a287	09 30		ora #$30			ora 		#"0"
.01a289	20 1f 9d	jsr $019d1f			jsr 		ITSOutputCharacter
.01a28c	20 e8 a1	jsr $01a1e8			jsr 		FPUCopyFromNext 		; get it back
.01a28f	20 79 9f	jsr $019f79			jsr 		FPFractionalPart 		; get fractional part
.01a292	ad 14 03	lda $0314			lda 		NumBufX 				; done 11 characters yet ?
.01a295	c9 0b		cmp #$0b			cmp 	 	#11
.01a297	90 df		bcc $01a278			bcc 		_FPOutLoop 				; if so, keep going till zero.
.01a299					_FPStripZeros:
.01a299	ac 14 03	ldy $0314			ldy 		NumBufX 				; strip trailing zeros.
.01a29c					_FPStripLoop:
.01a29c	88		dey				dey 								; back one, if at start then no strip
.01a29d	f0 10		beq $01a2af			beq 		_FPToExit
.01a29f	b9 15 03	lda $0315,y			lda 		Num_Buffer,y 			; keep going if "0"
.01a2a2	c9 30		cmp #$30			cmp 		#"0"
.01a2a4	f0 f6		beq $01a29c			beq 		_FPStripLoop
.01a2a6	c8		iny				iny
.01a2a7	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.01a2a9	99 15 03	sta $0315,y			sta 		Num_Buffer,y
.01a2ac	8c 14 03	sty $0314			sty 		NumBufX 				; update position.
.01a2af					_FPTOExit:
.01a2af	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/convert/fpfromstr.asm

.01a2b0					FPFromString:
.01a2b0	48		pha				pha 								; push A
.01a2b1	b1 1e		lda ($1e),y			lda		(zGenPtr),y					; is it followed by a DP ?
.01a2b3	c9 2e		cmp #$2e			cmp 	#"."
.01a2b5	f0 03		beq $01a2ba			beq	 	_FPFIsDecimal
.01a2b7	4c 16 a3	jmp $01a316			jmp 	_FPFNotDecimal
.01a2ba					_FPFIsDecimal:
.01a2ba	c8		iny				iny 								; consume the decimal.
.01a2bb	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat 					; convert the integer to float.
.01a2be	da		phx				phx 								; save X.
.01a2bf	5a		phy				phy 								; save decimal start position
.01a2c0	e8		inx				inx
.01a2c1	e8		inx				inx
.01a2c2	e8		inx				inx
.01a2c3	e8		inx				inx
.01a2c4	e8		inx				inx
.01a2c5	e8		inx				inx
.01a2c6	20 37 9d	jsr $019d37			jsr 	INTFromStringY 				; get the part after the DP.
.01a2c9	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat 					; convert that to a float.
.01a2cc	68		pla				pla 								; calculate - chars consumed.
.01a2cd	8c 9c 03	sty $039c			sty 	ExpTemp
.01a2d0	38		sec				sec
.01a2d1	ed 9c 03	sbc $039c			sbc 	ExpTemp 					; this is the shift amount
.01a2d4	20 9d a1	jsr $01a19d			jsr 	FPUScale10A 				; scale it by 10^AC
.01a2d7	fa		plx				plx 								; restore original X
.01a2d8	20 ca 9d	jsr $019dca			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.01a2db	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; exponent ?
.01a2dd	c9 45		cmp #$45			cmp 	#"E"
.01a2df	f0 04		beq $01a2e5			beq 	_FPFExponent
.01a2e1	c9 65		cmp #$65			cmp 	#"e"
.01a2e3	d0 31		bne $01a316			bne 	_FPFNotDecimal 				; no, then exit normally.
.01a2e5					_FPFExponent:
.01a2e5	c8		iny				iny 								; skip over E symbol.
.01a2e6	b1 1e		lda ($1e),y			lda 	(zGenPtr),y 				; look at next
.01a2e8	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.01a2ea	d0 01		bne $01a2ed			bne 	_FPFGotSign
.01a2ec	c8		iny				iny 								; if it was - skip over it.
.01a2ed					_FPFGotSign:
.01a2ed	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.01a2ee	da		phx				phx
.01a2ef	e8		inx				inx
.01a2f0	e8		inx				inx
.01a2f1	e8		inx				inx
.01a2f2	e8		inx				inx
.01a2f3	e8		inx				inx
.01a2f4	e8		inx				inx
.01a2f5	20 37 9d	jsr $019d37			jsr 	INTFromStringY 				; get the exponent
.01a2f8	fa		plx				plx 								; restore X.
.01a2f9	b5 87		lda $87,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.01a2fb	15 89		ora $89,x			ora 	XS2_Mantissa+3,x
.01a2fd	15 88		ora $88,x			ora 	XS2_Mantissa+2,x
.01a2ff	d0 17		bne $01a318			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.01a301	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.01a303	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.01a305	b0 11		bcs $01a318			bcs 	_FPFXOverflow
.01a307	68		pla				pla 								; get direction
.01a308	d0 07		bne $01a311			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.01a30a	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.01a30c	49 ff		eor #$ff			eor 	#$FF
.01a30e	1a		inc a				inc 	a
.01a30f	95 86		sta $86,x			sta 	XS2_Mantissa+0,x
.01a311					_FPFXScale:
.01a311	b5 86		lda $86,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.01a313	20 9d a1	jsr $01a19d			jsr 	FPUScale10A 				; scale by the exponent.
.01a316					_FPFNotDecimal:
.01a316	68		pla				pla
.01a317	60		rts				rts
.01a318					_FPFXOverflow:
.01a318	20 57 85	jsr $018557			jsr 	ERR_Handler
>01a31b	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>01a323	20 52 61 6e 67 65 00

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/rnd.asm

.01a32a					Unary_Rnd:
.01a32a	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; get value
.01a32d	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; check right bracket.
.01a330	20 44 93	jsr $019344			jsr 	GetSignCurrent 				; get sign -1,0,1.
.01a333	09 00		ora #$00			ora 	#0 							; if -ve set seed.
.01a335	30 10		bmi $01a347			bmi 	_URSetSeed
.01a337	f0 28		beq $01a361			beq 	_URMakeRandom 				; if zero return same number.
.01a339	da		phx				phx
.01a33a	a2 00		ldx #$00			ldx 	#0
.01a33c	20 98 a3	jsr $01a398			jsr 	Random16
.01a33f	a2 02		ldx #$02			ldx 	#2
.01a341	20 98 a3	jsr $01a398			jsr 	Random16
.01a344	fa		plx				plx
.01a345	80 1a		bra $01a361			bra 	_URMakeRandom
.01a347					_URSetSeed:
.01a347	20 aa a0	jsr $01a0aa			jsr 	FPUToFloat 					; make it a float to twiddle it.
.01a34a	b5 80		lda $80,x			lda		XS_Mantissa+0,x 			; copy mantissa to seed.
.01a34c	8d a3 03	sta $03a3			sta 	RandomSeed+0
.01a34f	b5 81		lda $81,x			lda		XS_Mantissa+1,x
.01a351	8d a4 03	sta $03a4			sta 	RandomSeed+1
.01a354	b5 82		lda $82,x			lda		XS_Mantissa+2,x
.01a356	8d a5 03	sta $03a5			sta 	RandomSeed+2
.01a359	b5 83		lda $83,x			lda		XS_Mantissa+3,x
.01a35b	0a		asl a				asl 	a
.01a35c	49 db		eor #$db			eor 	#$DB
.01a35e	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a361					_URMakeRandom:
.01a361	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; check if seed is zero.
.01a364	0d a4 03	ora $03a4			ora 	RandomSeed+1
.01a367	0d a5 03	ora $03a5			ora 	RandomSeed+2
.01a36a	0d a6 03	ora $03a6			ora 	RandomSeed+3
.01a36d	d0 0a		bne $01a379			bne 	_URNotZero
.01a36f	a9 47		lda #$47			lda 	#$47
.01a371	8d a4 03	sta $03a4			sta 	RandomSeed+1				; if it is, make it non zero.
.01a374	a9 3d		lda #$3d			lda 	#$3D
.01a376	8d a6 03	sta $03a6			sta 	RandomSeed+3
.01a379					_URNotZero:
.01a379	ad a3 03	lda $03a3			lda 	RandomSeed+0 				; copy seed into mantissa.
.01a37c	95 80		sta $80,x			sta 	XS_Mantissa+0,x
.01a37e	ad a4 03	lda $03a4			lda 	RandomSeed+1
.01a381	95 81		sta $81,x			sta 	XS_Mantissa+1,x
.01a383	ad a5 03	lda $03a5			lda 	RandomSeed+2
.01a386	95 82		sta $82,x			sta 	XS_Mantissa+2,x
.01a388	ad a6 03	lda $03a6			lda 	RandomSeed+3
.01a38b	95 83		sta $83,x			sta 	XS_Mantissa+3,x
.01a38d	a9 00		lda #$00			lda 	#$00 						; set type to float.
.01a38f	95 85		sta $85,x			sta 	XS_Type,x
.01a391	a9 80		lda #$80			lda 	#$80
.01a393	95 84		sta $84,x			sta	 	XS_Exponent,x				; exponent to 128 (e.g. 0.x 2^0)
.01a395	4c d7 a0	jmp $01a0d7			jmp 	FPUNormalise
.01a398					Random16:
.01a398	5e a4 03	lsr $03a4,x			lsr 	RandomSeed+1,x				; shift seed right
.01a39b	7e a3 03	ror $03a3,x			ror 	RandomSeed,x
.01a39e	90 08		bcc $01a3a8			bcc 	_R16_NoXor
.01a3a0	bd a4 03	lda $03a4,x			lda 	RandomSeed+1,x				; xor MSB with $B4 if bit set.
.01a3a3	49 b4		eor #$b4			eor 	#$B4 						; like the Wikipedia one.
.01a3a5	9d a4 03	sta $03a4,x			sta 	RandomSeed+1,x
.01a3a8					_R16_NoXor:
.01a3a8	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/basic/expressions/floatonly/int.asm

.01a3a9					Unary_Int:
.01a3a9	20 c6 90	jsr $0190c6			jsr 	EvaluateNumberX 			; get value
.01a3ac	20 fa 96	jsr $0196fa			jsr 	CheckNextRParen 			; check right bracket.
.01a3af	4c f6 a0	jmp $01a0f6			jmp 	FPUToInteger				; Convert to integer.

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>01a3b2	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	00 c0						.word 	StartROM
>fffe	19 c0					.word TIM_BreakHandler

;******  End of listing
