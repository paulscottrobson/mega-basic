
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -X -b -q -L rom.lst -o rom.bin basic.asm
; Thu Aug 22 13:22:00 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: _include.asm

="65816"				cpu = "65816"
="em65816"				hardware = "em65816"

;******  Processing file: modules/float/fpmacros.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/common/common.inc


;******  Return to file: _include.asm


;******  Processing file: modules/basic/data/data.asm

.0000	ea		nop				nop 								; just in cases.....
>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zCodePtr:	.dword ? 						; code pointer.
>001a					zLTemp1:	.dword ?						; long word (used in multiply)
>001e					zGenPtr:	.word ? 						; general pointer.
>0020					zTempStr:	.word ?							; temporary string allocator. When high zero, not initialised.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0304					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0305					XS_Type 	.byte ? 						; bit 7 sign (float only)
=6					XS_Size = 6
=774					XS2_Mantissa = XS_Mantissa+XS_Size
=778					XS2_Exponent = XS_Exponent+XS_Size
=779					XS2_Type = XS_Type+XS_Size
=780					XS3_Mantissa = XS_Mantissa+XS_Size*2
=784					XS3_Exponent = XS_Exponent+XS_Size*2
=785					XS3_Type = XS_Type+XS_Size*2
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					ExpTemp:	.byte ?							; Working temp for exponents.
>0424					ExpCount:	.byte ? 						; Count of decimal exponents.
>0425					SignCount:	.byte ?							; Integer Divide Sign Counts.
>0426					StringPtr:	.byte ? 						; Top of free memory (for string allocation)
>0427					TempStringWriteIndex: .byte ? 				; Write offset.
>0428					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>042a					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>042c					Tim_SR:		.byte ? 						; Processor Status
>042d					Tim_A:		.byte ? 						; Processor Registers
>042e					Tim_X:		.byte ?
>042f					Tim_Y:		.byte ?
>0430					Tim_Z:		.byte ?
>0431					Tim_SP:		.byte ?							; Stack Pointer

;******  Return to file: _include.asm


;******  Processing file: modules/hardware/em65816.asm

=$8000					HighMemory = $8000
.1000					BasicProgram:

;******  Processing file: modules/hardware/../basic/testcode/testcode.src

>1000	11 0a 00 d7 fe 02 85 fe			.byte	$11,$0a,$00,$d7,$fe,$02,$85,$fe
>1008	02 bc ff 06 68 69 20 21			.byte	$02,$bc,$ff,$06,$68,$69,$20,$21
>1010	00 00					.byte	$00,$00

;******  Return to file: modules/hardware/em65816.asm


;******  Processing file: modules/hardware/../basic/header/header.src

=$93					firstKeywordMinus = $93
=$8f					firstKeywordPlus = $8f
=$98					firstUnaryFunction = $98
=$b2					lastUnaryFunction = $b2
.c000					VectorTable:
>c000	ae c0					.word NotImplemented       ; $80 and
>c002	ae c0					.word NotImplemented       ; $81 or
>c004	ae c0					.word NotImplemented       ; $82 xor
>c006	ae c0					.word NotImplemented       ; $83 eor
>c008	ae c0					.word NotImplemented       ; $84 =
>c00a	ae c0					.word NotImplemented       ; $85 <>
>c00c	ae c0					.word NotImplemented       ; $86 <
>c00e	ae c0					.word NotImplemented       ; $87 <=
>c010	ae c0					.word NotImplemented       ; $88 >
>c012	ae c0					.word NotImplemented       ; $89 >=
>c014	ae c0					.word NotImplemented       ; $8a +
>c016	ae c0					.word NotImplemented       ; $8b -
>c018	ae c0					.word NotImplemented       ; $8c *
>c01a	ae c0					.word NotImplemented       ; $8d /
>c01c	ae c0					.word NotImplemented       ; $8e ^
>c01e	ae c0					.word NotImplemented       ; $8f if
>c020	ae c0					.word NotImplemented       ; $90 while
>c022	ae c0					.word NotImplemented       ; $91 repeat
>c024	ae c0					.word NotImplemented       ; $92 for
>c026	ae c0					.word NotImplemented       ; $93 then
>c028	ae c0					.word NotImplemented       ; $94 endif
>c02a	ae c0					.word NotImplemented       ; $95 wend
>c02c	ae c0					.word NotImplemented       ; $96 until
>c02e	ae c0					.word NotImplemented       ; $97 next
>c030	ae c0					.word NotImplemented       ; $98 not
>c032	ae c0					.word NotImplemented       ; $99 fn(
>c034	ae c0					.word NotImplemented       ; $9a abs(
>c036	ae c0					.word NotImplemented       ; $9b asc(
>c038	ae c0					.word NotImplemented       ; $9c int(
>c03a	ae c0					.word NotImplemented       ; $9d peek(
>c03c	ae c0					.word NotImplemented       ; $9e rnd(
>c03e	ae c0					.word NotImplemented       ; $9f usr(
>c040	ae c0					.word NotImplemented       ; $a0 left$(
>c042	ae c0					.word NotImplemented       ; $a1 right$(
>c044	ae c0					.word NotImplemented       ; $a2 mid$(
>c046	ae c0					.word NotImplemented       ; $a3 spc(
>c048	ae c0					.word NotImplemented       ; $a4 str$(
>c04a	ae c0					.word NotImplemented       ; $a5 val(
>c04c	ae c0					.word NotImplemented       ; $a6 len(
>c04e	ae c0					.word NotImplemented       ; $a7 hex$(
>c050	ae c0					.word NotImplemented       ; $a8 sin(
>c052	ae c0					.word NotImplemented       ; $a9 cos(
>c054	ae c0					.word NotImplemented       ; $aa tan(
>c056	ae c0					.word NotImplemented       ; $ab atn(
>c058	ae c0					.word NotImplemented       ; $ac exp(
>c05a	ae c0					.word NotImplemented       ; $ad log(
>c05c	ae c0					.word NotImplemented       ; $ae sqr(
>c05e	ae c0					.word NotImplemented       ; $af dec(
>c060	ae c0					.word NotImplemented       ; $b0 deek(
>c062	ae c0					.word NotImplemented       ; $b1 leek(
>c064	ae c0					.word NotImplemented       ; $b2 mod(
>c066	ae c0					.word NotImplemented       ; $b3 $(
>c068	ae c0					.word NotImplemented       ; $b4 $
>c06a	ae c0					.word NotImplemented       ; $b5 #(
>c06c	ae c0					.word NotImplemented       ; $b6 #
>c06e	ae c0					.word NotImplemented       ; $b7 %(
>c070	ae c0					.word NotImplemented       ; $b8 %
>c072	ae c0					.word NotImplemented       ; $b9 (
>c074	ae c0					.word NotImplemented       ; $ba )
>c076	ae c0					.word NotImplemented       ; $bb ,
>c078	ae c0					.word NotImplemented       ; $bc :
>c07a	ae c0					.word NotImplemented       ; $bd ;
>c07c	ae c0					.word NotImplemented       ; $be def
>c07e	ae c0					.word NotImplemented       ; $bf clr
>c080	ae c0					.word NotImplemented       ; $c1 data
>c082	ae c0					.word NotImplemented       ; $c2 read
>c084	ae c0					.word NotImplemented       ; $c3 dim
>c086	ae c0					.word NotImplemented       ; $c4 to
>c088	ae c0					.word NotImplemented       ; $c5 step
>c08a	ae c0					.word NotImplemented       ; $c6 gosub
>c08c	ae c0					.word NotImplemented       ; $c7 return
>c08e	ae c0					.word NotImplemented       ; $c8 goto
>c090	ae c0					.word NotImplemented       ; $c9 input
>c092	ae c0					.word NotImplemented       ; $ca let
>c094	ae c0					.word NotImplemented       ; $cb list
>c096	ae c0					.word NotImplemented       ; $cc new
>c098	ae c0					.word NotImplemented       ; $cd old
>c09a	ae c0					.word NotImplemented       ; $ce on
>c09c	ae c0					.word NotImplemented       ; $cf restore
>c09e	ae c0					.word NotImplemented       ; $d0 poke
>c0a0	ae c0					.word NotImplemented       ; $d1 print
>c0a2	ae c0					.word NotImplemented       ; $d2 run
>c0a4	ae c0					.word NotImplemented       ; $d3 stop
>c0a6	ae c0					.word NotImplemented       ; $d4 wait
>c0a8	ae c0					.word NotImplemented       ; $d5 doke
>c0aa	ae c0					.word NotImplemented       ; $d6 loke
>c0ac	ae c0					.word NotImplemented       ; $d7 assert
.c0ae					NotImplemented:
.c0ae	80 fe		bra $c0ae		_error: bra _error
.c0b0					BinaryPrecedence:
>c0b0	01					.byte 1    ; $80 and
>c0b1	01					.byte 1    ; $81 or
>c0b2	01					.byte 1    ; $82 xor
>c0b3	01					.byte 1    ; $83 eor
>c0b4	02					.byte 2    ; $84 =
>c0b5	02					.byte 2    ; $85 <>
>c0b6	02					.byte 2    ; $86 <
>c0b7	02					.byte 2    ; $87 <=
>c0b8	02					.byte 2    ; $88 >
>c0b9	02					.byte 2    ; $89 >=
>c0ba	03					.byte 3    ; $8a +
>c0bb	03					.byte 3    ; $8b -
>c0bc	04					.byte 4    ; $8c *
>c0bd	04					.byte 4    ; $8d /
>c0be	05					.byte 5    ; $8e ^
.c0bf					KeywordText:
>c0bf	41 4e c4				.byte $41,$4e,$c4                      ; $80 and
>c0c2	4f d2					.byte $4f,$d2                          ; $81 or
>c0c4	58 4f d2				.byte $58,$4f,$d2                      ; $82 xor
>c0c7	45 4f d2				.byte $45,$4f,$d2                      ; $83 eor
>c0ca	bd					.byte $bd                              ; $84 =
>c0cb	3c be					.byte $3c,$be                          ; $85 <>
>c0cd	bc					.byte $bc                              ; $86 <
>c0ce	3c bd					.byte $3c,$bd                          ; $87 <=
>c0d0	be					.byte $be                              ; $88 >
>c0d1	3e bd					.byte $3e,$bd                          ; $89 >=
>c0d3	ab					.byte $ab                              ; $8a +
>c0d4	ad					.byte $ad                              ; $8b -
>c0d5	aa					.byte $aa                              ; $8c *
>c0d6	af					.byte $af                              ; $8d /
>c0d7	de					.byte $de                              ; $8e ^
>c0d8	49 c6					.byte $49,$c6                          ; $8f if
>c0da	57 48 49 4c c5				.byte $57,$48,$49,$4c,$c5              ; $90 while
>c0df	52 45 50 45 41 d4			.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
>c0e5	46 4f d2				.byte $46,$4f,$d2                      ; $92 for
>c0e8	54 48 45 ce				.byte $54,$48,$45,$ce                  ; $93 then
>c0ec	45 4e 44 49 c6				.byte $45,$4e,$44,$49,$c6              ; $94 endif
>c0f1	57 45 4e c4				.byte $57,$45,$4e,$c4                  ; $95 wend
>c0f5	55 4e 54 49 cc				.byte $55,$4e,$54,$49,$cc              ; $96 until
>c0fa	4e 45 58 d4				.byte $4e,$45,$58,$d4                  ; $97 next
>c0fe	4e 4f d4				.byte $4e,$4f,$d4                      ; $98 not
>c101	46 4e a8				.byte $46,$4e,$a8                      ; $99 fn(
>c104	41 42 53 a8				.byte $41,$42,$53,$a8                  ; $9a abs(
>c108	41 53 43 a8				.byte $41,$53,$43,$a8                  ; $9b asc(
>c10c	49 4e 54 a8				.byte $49,$4e,$54,$a8                  ; $9c int(
>c110	50 45 45 4b a8				.byte $50,$45,$45,$4b,$a8              ; $9d peek(
>c115	52 4e 44 a8				.byte $52,$4e,$44,$a8                  ; $9e rnd(
>c119	55 53 52 a8				.byte $55,$53,$52,$a8                  ; $9f usr(
>c11d	4c 45 46 54 24 a8			.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
>c123	52 49 47 48 54 24 a8			.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
>c12a	4d 49 44 24 a8				.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
>c12f	53 50 43 a8				.byte $53,$50,$43,$a8                  ; $a3 spc(
>c133	53 54 52 24 a8				.byte $53,$54,$52,$24,$a8              ; $a4 str$(
>c138	56 41 4c a8				.byte $56,$41,$4c,$a8                  ; $a5 val(
>c13c	4c 45 4e a8				.byte $4c,$45,$4e,$a8                  ; $a6 len(
>c140	48 45 58 24 a8				.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
>c145	53 49 4e a8				.byte $53,$49,$4e,$a8                  ; $a8 sin(
>c149	43 4f 53 a8				.byte $43,$4f,$53,$a8                  ; $a9 cos(
>c14d	54 41 4e a8				.byte $54,$41,$4e,$a8                  ; $aa tan(
>c151	41 54 4e a8				.byte $41,$54,$4e,$a8                  ; $ab atn(
>c155	45 58 50 a8				.byte $45,$58,$50,$a8                  ; $ac exp(
>c159	4c 4f 47 a8				.byte $4c,$4f,$47,$a8                  ; $ad log(
>c15d	53 51 52 a8				.byte $53,$51,$52,$a8                  ; $ae sqr(
>c161	44 45 43 a8				.byte $44,$45,$43,$a8                  ; $af dec(
>c165	44 45 45 4b a8				.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
>c16a	4c 45 45 4b a8				.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
>c16f	4d 4f 44 a8				.byte $4d,$4f,$44,$a8                  ; $b2 mod(
>c173	24 a8					.byte $24,$a8                          ; $b3 $(
>c175	a4					.byte $a4                              ; $b4 $
>c176	23 a8					.byte $23,$a8                          ; $b5 #(
>c178	a3					.byte $a3                              ; $b6 #
>c179	25 a8					.byte $25,$a8                          ; $b7 %(
>c17b	a5					.byte $a5                              ; $b8 %
>c17c	a8					.byte $a8                              ; $b9 (
>c17d	a9					.byte $a9                              ; $ba )
>c17e	ac					.byte $ac                              ; $bb ,
>c17f	ba					.byte $ba                              ; $bc :
>c180	bb					.byte $bb                              ; $bd ;
>c181	44 45 c6				.byte $44,$45,$c6                      ; $be def
>c184	43 4c d2				.byte $43,$4c,$d2                      ; $bf clr
>c187	44 41 54 c1				.byte $44,$41,$54,$c1                  ; $c1 data
>c18b	52 45 41 c4				.byte $52,$45,$41,$c4                  ; $c2 read
>c18f	44 49 cd				.byte $44,$49,$cd                      ; $c3 dim
>c192	54 cf					.byte $54,$cf                          ; $c4 to
>c194	53 54 45 d0				.byte $53,$54,$45,$d0                  ; $c5 step
>c198	47 4f 53 55 c2				.byte $47,$4f,$53,$55,$c2              ; $c6 gosub
>c19d	52 45 54 55 52 ce			.byte $52,$45,$54,$55,$52,$ce          ; $c7 return
>c1a3	47 4f 54 cf				.byte $47,$4f,$54,$cf                  ; $c8 goto
>c1a7	49 4e 50 55 d4				.byte $49,$4e,$50,$55,$d4              ; $c9 input
>c1ac	4c 45 d4				.byte $4c,$45,$d4                      ; $ca let
>c1af	4c 49 53 d4				.byte $4c,$49,$53,$d4                  ; $cb list
>c1b3	4e 45 d7				.byte $4e,$45,$d7                      ; $cc new
>c1b6	4f 4c c4				.byte $4f,$4c,$c4                      ; $cd old
>c1b9	4f ce					.byte $4f,$ce                          ; $ce on
>c1bb	52 45 53 54 4f 52 c5			.byte $52,$45,$53,$54,$4f,$52,$c5      ; $cf restore
>c1c2	50 4f 4b c5				.byte $50,$4f,$4b,$c5                  ; $d0 poke
>c1c6	50 52 49 4e d4				.byte $50,$52,$49,$4e,$d4              ; $d1 print
>c1cb	52 55 ce				.byte $52,$55,$ce                      ; $d2 run
>c1ce	53 54 4f d0				.byte $53,$54,$4f,$d0                  ; $d3 stop
>c1d2	57 41 49 d4				.byte $57,$41,$49,$d4                  ; $d4 wait
>c1d6	44 4f 4b c5				.byte $44,$4f,$4b,$c5                  ; $d5 doke
>c1da	4c 4f 4b c5				.byte $4c,$4f,$4b,$c5                  ; $d6 loke
>c1de	41 53 53 45 52 d4			.byte $41,$53,$53,$45,$52,$d4          ; $d7 assert
>c1e4	00					.byte $00
=$80					token_and = $80
=$81					token_or = $81
=$82					token_xor = $82
=$83					token_eor = $83
=$84					token_equal = $84
=$85					token_lessgreater = $85
=$86					token_less = $86
=$87					token_lessequal = $87
=$88					token_greater = $88
=$89					token_greaterequal = $89
=$8a					token_plus = $8a
=$8b					token_minus = $8b
=$8c					token_star = $8c
=$8d					token_slash = $8d
=$8e					token_hat = $8e
=$8f					token_if = $8f
=$90					token_while = $90
=$91					token_repeat = $91
=$92					token_for = $92
=$93					token_then = $93
=$94					token_endif = $94
=$95					token_wend = $95
=$96					token_until = $96
=$97					token_next = $97
=$98					token_not = $98
=$99					token_fn = $99
=$9a					token_abs = $9a
=$9b					token_asc = $9b
=$9c					token_int = $9c
=$9d					token_peek = $9d
=$9e					token_rnd = $9e
=$9f					token_usr = $9f
=$a0					token_leftdollarlparen = $a0
=$a1					token_rightdollarlparen = $a1
=$a2					token_middollarlparen = $a2
=$a3					token_spc = $a3
=$a4					token_strdollarlparen = $a4
=$a5					token_val = $a5
=$a6					token_len = $a6
=$a7					token_hexdollarlparen = $a7
=$a8					token_sin = $a8
=$a9					token_cos = $a9
=$aa					token_tan = $aa
=$ab					token_atn = $ab
=$ac					token_exp = $ac
=$ad					token_log = $ad
=$ae					token_sqr = $ae
=$af					token_dec = $af
=$b0					token_deek = $b0
=$b1					token_leek = $b1
=$b2					token_mod = $b2
=$b3					token_dollarlparen = $b3
=$b4					token_dollar = $b4
=$b5					token_hashlparen = $b5
=$b6					token_hash = $b6
=$b7					token_percentlparen = $b7
=$b8					token_percent = $b8
=$b9					token_lparen = $b9
=$ba					token_rparen = $ba
=$bb					token_comma = $bb
=$bc					token_colon = $bc
=$bd					token_semicolon = $bd
=$be					token_def = $be
=$bf					token_clr = $bf
=$c1					token_data = $c1
=$c2					token_read = $c2
=$c3					token_dim = $c3
=$c4					token_to = $c4
=$c5					token_step = $c5
=$c6					token_gosub = $c6
=$c7					token_return = $c7
=$c8					token_goto = $c8
=$c9					token_input = $c9
=$ca					token_let = $ca
=$cb					token_list = $cb
=$cc					token_new = $cc
=$cd					token_old = $cd
=$ce					token_on = $ce
=$cf					token_restore = $cf
=$d0					token_poke = $d0
=$d1					token_print = $d1
=$d2					token_run = $d2
=$d3					token_stop = $d3
=$d4					token_wait = $d4
=$d5					token_doke = $d5
=$d6					token_loke = $d6
=$d7					token_assert = $d7

;******  Return to file: modules/hardware/em65816.asm

.c1e5					StartROM:
.c1e5	18		clc				clc
.c1e6	fb		xce				xce
.c1e7	c2 30		rep #$30			rep 	#$30
.c1e9	a9 ff 01	lda #$01ff			lda 	#$01FF 						; empty stack
.c1ec	1b		tcs				tcs
.c1ed	e2 30		sep #$30			sep 	#$30 						; clear AXY in 16 bit.
.c1ef	c2 30		rep #$30			rep 	#$30
.c1f1	a9 00 00	lda #$0000			lda 	#$0000
.c1f4	aa		tax				tax
.c1f5	a8		tay				tay
.c1f6	e2 30		sep #$30			sep 	#$30
.c1f8	20 9c c3	jsr $c39c			jsr 	IF_Reset 					; reset external interface
.c1fb	20 01 c2	jsr $c201			jsr 	IFT_ClearScreen
.c1fe	4c 76 ca	jmp $ca76		jmp FPTTest

;******  Return to file: _include.asm


;******  Processing file: modules/interface/common/interface_tools.asm

.c201					IFT_ClearScreen:
.c201	48		pha				pha
.c202	da		phx				phx
.c203	5a		phy				phy
.c204	20 9d c3	jsr $c39d			jsr 	IF_Home 					; home cursor
.c207	a2 20		ldx #$20			ldx 	#IF_Height 					; this many lines.
.c209					_IFT_CS0:
.c209	a0 40		ldy #$40			ldy 	#IF_Width 					; this many chars/line
.c20b					_IFT_CS1:
.c20b	a9 20		lda #$20			lda 	#' '						; clear line.
.c20d	20 c9 c3	jsr $c3c9			jsr 	IF_Write
.c210	88		dey				dey
.c211	d0 f8		bne $c20b			bne 	_IFT_CS1
.c213	20 b0 c3	jsr $c3b0			jsr 	IF_NewLine 					; next line down
.c216	ca		dex				dex
.c217	d0 f0		bne $c209			bne 	_IFT_CS0
.c219	7a		ply				ply
.c21a	fa		plx				plx
.c21b	68		pla				pla
.c21c					IFT_HomeCursor:
.c21c	48		pha				pha
.c21d	20 9d c3	jsr $c39d			jsr 	IF_Home
.c220	a9 00		lda #$00			lda 	#0
.c222	8d 00 02	sta $0200			sta 	IFT_XCursor
.c225	8d 01 02	sta $0201			sta 	IFT_YCursor
.c228	68		pla				pla
.c229	60		rts				rts
.c22a					IFT_UpLine:
.c22a	48		pha				pha
.c22b	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.c22e	3a		dec a				dec 	a 							; line above
.c22f	30 03		bmi $c234			bmi 	_IFTULExit 					; too far, abort
.c231	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos					; set to that line.
.c234					_IFTULExit:
.c234	68		pla				pla
.c235	60		rts				rts
.c236					IFT_PrintCharacter:
.c236	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.c238	f0 16		beq $c250			beq 	IFT_NewLine
.c23a	48		pha				pha
.c23b	20 68 c2	jsr $c268			jsr 	IFT_UpperCase 				; make upper case
.c23e	20 c9 c3	jsr $c3c9			jsr 	IF_Write 					; write out.
.c241	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.c244	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.c247	c9 40		cmp #$40			cmp 	#IF_Width
.c249	d0 03		bne $c24e			bne 	_IFT_PCNotEOL
.c24b	20 50 c2	jsr $c250			jsr 	IFT_NewLine 				; if so do new line.
.c24e					_IFT_PCNotEOL:
.c24e	68		pla				pla
.c24f	60		rts				rts
.c250					IFT_NewLine:
.c250	48		pha				pha
.c251	20 b0 c3	jsr $c3b0			jsr 	IF_NewLine 					; new line on actual screen.
.c254	a9 00		lda #$00			lda 	#0 							; reset x position
.c256	8d 00 02	sta $0200			sta 	IFT_XCursor
.c259	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.c25c	ad 01 02	lda $0201			lda 	IFT_YCursor
.c25f	c9 20		cmp #$20			cmp 	#IF_Height 					; reached bottom.
.c261	d0 03		bne $c266			bne 	_IFT_NL_NotEOS
.c263	20 73 c2	jsr $c273			jsr 	IFT_Scroll 					; scroll screen up.
.c266					_IFT_NL_NotEOS:
.c266	68		pla				pla
.c267	60		rts				rts
.c268					IFT_UpperCase:
.c268	c9 61		cmp #$61			cmp 	#"a"
.c26a	90 06		bcc $c272			bcc 	_IFT_UCExit
.c26c	c9 7b		cmp #$7b			cmp 	#"z"+1
.c26e	b0 02		bcs $c272			bcs 	_IFT_UCExit
.c270	49 20		eor #$20			eor 	#$20
.c272					_IFT_UCExit:
.c272	60		rts				rts
.c273					IFT_Scroll:
.c273	48		pha				pha 								; save AXY
.c274	da		phx				phx
.c275	5a		phy				phy
.c276	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.c278					_IFT_SLoop:
.c278	20 98 c2	jsr $c298			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.c27b	e8		inx				inx
.c27c	e0 1f		cpx #$1f			cpx 	#IF_Height-1				; do whole screen
.c27e	d0 f8		bne $c278			bne 	_IFT_SLoop
.c280	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.c282	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c285	a2 40		ldx #$40			ldx 	#IF_Width 					; blank line
.c287					_IFT_SBlank:
.c287	a9 20		lda #$20			lda 	#32
.c289	20 c9 c3	jsr $c3c9			jsr 	IF_Write
.c28c	ca		dex				dex
.c28d	d0 f8		bne $c287			bne 	_IFT_SBlank
.c28f	a9 1f		lda #$1f			lda 	#IF_Height-1 				; move to X = 0,Y = A
.c291	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c294	7a		ply				ply
.c295	fa		plx				plx
.c296	68		pla				pla
.c297	60		rts				rts
.c298					_IFT_ScrollLine:
.c298	da		phx				phx
.c299	da		phx				phx
.c29a	8a		txa				txa 								; copy line into buffer.
.c29b	1a		inc a				inc 	a 							; next line down.
.c29c	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c29f	a2 00		ldx #$00			ldx 	#0
.c2a1					_IFTScrollCopy1:
.c2a1	20 c0 c3	jsr $c3c0			jsr 	IF_Read
.c2a4	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.c2a7	e8		inx				inx
.c2a8	e0 40		cpx #$40			cpx 	#IF_Width
.c2aa	d0 f5		bne $c2a1			bne 	_IFTScrollCopy1
.c2ac	68		pla				pla
.c2ad	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c2b0	a2 00		ldx #$00			ldx 	#0
.c2b2					_IFTScrollCopy2:
.c2b2	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.c2b5	20 c9 c3	jsr $c3c9			jsr 	IF_Write
.c2b8	e8		inx				inx
.c2b9	e0 40		cpx #$40			cpx 	#IF_Width
.c2bb	d0 f5		bne $c2b2			bne 	_IFTScrollCopy2
.c2bd	fa		plx				plx
.c2be	60		rts				rts
.c2bf					IFT_SetYPos:
.c2bf	48		pha				pha
.c2c0	da		phx				phx
.c2c1	aa		tax				tax
.c2c2	20 1c c2	jsr $c21c			jsr 	IFT_HomeCursor
.c2c5	e0 00		cpx #$00			cpx 	#0
.c2c7	f0 09		beq $c2d2			beq 	_IFT_MOAExit
.c2c9					_IFT_MOALoop:
.c2c9	20 b0 c3	jsr $c3b0			jsr 	IF_NewLine
.c2cc	ee 01 02	inc $0201			inc 	IFT_YCursor
.c2cf	ca		dex				dex
.c2d0	d0 f7		bne $c2c9			bne		_IFT_MOALoop
.c2d2					_IFT_MOAExit:
.c2d2	fa		plx				plx
.c2d3	68		pla				pla
.c2d4	60		rts				rts
.c2d5					IFT_GetKeyCursor:
.c2d5	20 dd c2	jsr $c2dd			jsr 	_IFT_FlipCursor 			; reverse current
.c2d8					_IFT_GKCWait:
.c2d8	20 da c3	jsr $c3da			jsr 	IF_GetKey 					; get key
.c2db	f0 fb		beq $c2d8			beq 	_IFT_GKCWait
.c2dd					_IFT_FlipCursor:
.c2dd	48		pha				pha 								; save
.c2de	20 c0 c3	jsr $c3c0			jsr 	IF_Read 					; read
.c2e1	20 d2 c3	jsr $c3d2			jsr 	IF_LeftOne
.c2e4	49 80		eor #$80			eor 	#$80 						; reverse
.c2e6	20 c9 c3	jsr $c3c9			jsr 	IF_Write 					; write
.c2e9	20 d2 c3	jsr $c3d2			jsr 	IF_LeftOne
.c2ec	68		pla				pla
.c2ed	60		rts				rts
.c2ee					IFT_ReadLine:
.c2ee	48		pha				pha
.c2ef					_IFT_RLLoop:
.c2ef	20 d5 c2	jsr $c2d5			jsr 	IFT_GetKeyCursor 			; get keystroke
.c2f2	c9 0d		cmp #$0d			cmp 	#13							; return
.c2f4	f0 7d		beq $c373			beq 	_IFT_RLExit
.c2f6	c9 20		cmp #$20			cmp 	#32 						; control character
.c2f8	90 05		bcc $c2ff			bcc 	_IFT_Control
.c2fa	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c2fd	80 f0		bra $c2ef			bra 	_IFT_RLLoop
.c2ff					_IFT_Control:
.c2ff	c9 01		cmp #$01			cmp 	#"A"-64
.c301	f0 26		beq $c329			beq 	_IFT_Left
.c303	c9 04		cmp #$04			cmp 	#"D"-64
.c305	f0 2e		beq $c335			beq 	_IFT_Right
.c307	c9 17		cmp #$17			cmp 	#"W"-64
.c309	f0 36		beq $c341			beq 	_IFT_Up
.c30b	c9 13		cmp #$13			cmp 	#"S"-64
.c30d	f0 3e		beq $c34d			beq 	_IFT_Down
.c30f	c9 08		cmp #$08			cmp 	#"H"-64
.c311	f0 09		beq $c31c			beq 	_IFT_Backspace
.c313	c9 1a		cmp #$1a			cmp 	#"Z"-64
.c315	d0 d8		bne $c2ef			bne 	_IFT_RLLoop
.c317	20 01 c2	jsr $c201			jsr 	IFT_ClearScreen				; clear CTL-Z
.c31a	80 d3		bra $c2ef			bra 	_IFT_RLLoop
.c31c					_IFT_Backspace:
.c31c	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.c31f	f0 ce		beq $c2ef			beq 	_IFT_RLLoop
.c321	20 d2 c3	jsr $c3d2			jsr 	IF_LeftOne
.c324	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.c326	20 c9 c3	jsr $c3c9			jsr 	IF_Write
.c329					_IFT_Left:
.c329	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.c32c	10 29		bpl $c357			bpl 	_IFT_Reposition
.c32e	a9 3f		lda #$3f			lda 	#IF_Width-1
.c330					_IFT_SetX:
.c330	8d 00 02	sta $0200			sta 	IFT_XCursor
.c333	80 22		bra $c357			bra 	_IFT_Reposition
.c335					_IFT_Right:
.c335	ee 00 02	inc $0200			inc 	IFT_XCursor
.c338	ad 00 02	lda $0200			lda 	IFT_XCursor
.c33b	49 40		eor #$40			eor 	#IF_Width
.c33d	f0 f1		beq $c330			beq 	_IFT_SetX
.c33f	80 16		bra $c357			bra 	_IFT_Reposition
.c341					_IFT_Up:
.c341	ce 01 02	dec $0201			dec 	IFT_YCursor
.c344	10 11		bpl $c357			bpl 	_IFT_Reposition
.c346	a9 1f		lda #$1f			lda 	#IF_Height-1
.c348					_IFT_SetY:
.c348	8d 01 02	sta $0201			sta 	IFT_YCursor
.c34b	80 0a		bra $c357			bra 	_IFT_Reposition
.c34d					_IFT_Down:
.c34d	ee 01 02	inc $0201			inc 	IFT_YCursor
.c350	ad 01 02	lda $0201			lda 	IFT_YCursor
.c353	49 20		eor #$20			eor 	#IF_Height
.c355	f0 f1		beq $c348			beq 	_IFT_SetY
.c357					_IFT_Reposition:
.c357	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.c35a	48		pha				pha
.c35b	ad 01 02	lda $0201			lda 	IFT_YCursor
.c35e	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c361	68		pla				pla
.c362	aa		tax				tax
.c363	e0 00		cpx #$00			cpx 	#0
.c365	f0 88		beq $c2ef			beq 	_IFT_RLLoop
.c367					_IFT_MoveRight:
.c367	20 c0 c3	jsr $c3c0			jsr 	IF_Read
.c36a	ee 00 02	inc $0200			inc 	IFT_XCursor
.c36d	ca		dex				dex
.c36e	d0 f7		bne $c367			bne 	_IFT_MoveRight
.c370	4c ef c2	jmp $c2ef			jmp 	_IFT_RLLoop
.c373					_IFT_RLExit:
.c373	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.c376	20 bf c2	jsr $c2bf			jsr 	IFT_SetYPos
.c379	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.c37b					_IFT_RLRead:
.c37b	20 c0 c3	jsr $c3c0			jsr 	IF_Read
.c37e	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.c381	e8		inx				inx
.c382	e0 40		cpx #$40			cpx 	#IF_Width
.c384	d0 f5		bne $c37b			bne 	_IFT_RLRead
.c386					_IFT_RL_Trim:
.c386	ca		dex				dex 	 							; previous char
.c387	30 07		bmi $c390			bmi 	_IFT_Found 					; gone too far
.c389	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.c38c	c9 20		cmp #$20			cmp 	#" "
.c38e	f0 f6		beq $c386			beq 	_IFT_RL_Trim
.c390					_IFT_Found:
.c390	e8		inx				inx 								; forward to non-space
.c391	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.c393	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.c396	68		pla				pla
.c397	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.c399	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.c39b	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/interface/drivers/interface_em65816.asm

=64					IF_Width 	= 64 							; characters across
=32					IF_Height 	= 32 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=8					IF_XPos 	= 8 							; current position, horizontal.
=$f0000					IF_Screen = $F0000							; 2k screen RAM here
=$f8010					IF_PKeyboard = $F8010						; Keyboard port.
=$f8000					IF_PBreak = $F8000 							; Break key.
.c39c					IF_Reset:
.c39c	60		rts				rts
.c39d					IF_Home:
.c39d	48		pha				pha
.c39e	64 08		stz $08				stz 	IF_XPos 					; zero X position
.c3a0	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.c3a2	85 04		sta $04				sta 	IF_Pos
.c3a4	a9 00		lda #$00			lda 	#(IF_Screen >> 8) & $FF
.c3a6	85 05		sta $05				sta 	IF_Pos+1
.c3a8	a9 0f		lda #$0f			lda 	#IF_Screen >> 16
.c3aa	85 06		sta $06				sta 	IF_Pos+2
.c3ac	64 07		stz $07				stz 	IF_Pos+3
.c3ae	68		pla				pla
.c3af	60		rts				rts
.c3b0					IF_NewLine:
.c3b0	48		pha				pha
.c3b1	64 08		stz $08				stz 	IF_XPos						; back to start of line
.c3b3	18		clc				clc 								; down one line
.c3b4	a5 04		lda $04				lda 	IF_Pos
.c3b6	69 40		adc #$40			adc 	#64
.c3b8	85 04		sta $04				sta 	IF_Pos
.c3ba	90 02		bcc $c3be			bcc 	_IF_NoCarry 				; carry through.
.c3bc	e6 05		inc $05				inc 	IF_Pos+1
.c3be					_IF_NoCarry:
.c3be	68		pla				pla
.c3bf	60		rts				rts
.c3c0					IF_Read:
.c3c0	5a		phy				phy 								; save current Y
.c3c1	a4 08		ldy $08				ldy 	IF_XPos 					; read character at current position
.c3c3	b7 04		lda [$04],y			lda 	[IF_Pos],y
.c3c5	e6 08		inc $08				inc 	IF_XPos 					; step right.
.c3c7	7a		ply				ply									; restore Y
.c3c8	60		rts				rts
.c3c9					IF_Write:
.c3c9	5a		phy				phy 								; save current Y
.c3ca	a4 08		ldy $08				ldy 	IF_XPos 					; write character at current position
.c3cc	97 04		sta [$04],y			sta 	[IF_Pos],y
.c3ce	e6 08		inc $08				inc 	IF_XPos 					; step right.
.c3d0	7a		ply				ply									; restore Y
.c3d1	60		rts				rts
.c3d2					IF_LeftOne:
.c3d2	c6 08		dec $08				dec 	IF_XPos
.c3d4	60		rts				rts
.c3d5					IF_CheckBreak:
.c3d5	af 00 80 0f	lda $0f8000			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.c3d9	60		rts				rts
.c3da					IF_GetKey:
.c3da	af 10 80 0f	lda $0f8010			lda 	IF_PKeyboard				; read keyboard
.c3de	f0 08		beq $c3e8			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.c3e0	48		pha				pha 								; key pressed, clear queue.
.c3e1	a9 00		lda #$00			lda 	#0
.c3e3	8f 10 80 0f	sta $0f8010			sta 	IF_PKeyboard
.c3e7	68		pla				pla
.c3e8					_IFGK_NoKey:
.c3e8	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.c3ea	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpadd.asm

.c3eb					FPSubtract:
.c3eb	48		pha				pha
.c3ec	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.c3ef	49 80		eor #$80			eor 	#$80
.c3f1	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c3f4	68		pla				pla 								; --- and fall through ---
.c3f5					FPAdd:
.c3f5	48		pha				pha
.c3f6	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.c3f9	d0 05		bne $c400			bne 	_FPA_NegativeLHS
.c3fb	20 1d c4	jsr $c41d			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.c3fe	68		pla				pla
.c3ff	60		rts				rts
.c400					_FPA_NegativeLHS:
.c400	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.c403	49 80		eor #$80			eor 	#$80
.c405	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c408	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.c40b	49 80		eor #$80			eor 	#$80
.c40d	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c410	20 1d c4	jsr $c41d			jsr 	FPAdd_Worker 				; do the add calculation.
.c413	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 back
.c416	49 80		eor #$80			eor 	#$80
.c418	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c41b	68		pla				pla
.c41c	60		rts				rts
.c41d					FPAdd_Worker:
.c41d	3c 0b 03	bit $030b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.c420	70 08		bvs $c42a			bvs 	_FPAWExit 					; no change.
.c422	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.c425	50 07		bvc $c42e			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.c427	20 b0 c6	jsr $c6b0			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.c42a					_FPAWExit:
.c42a	20 38 c7	jsr $c738			jsr 	FPUNormalise 				; normalise the result.
.c42d	60		rts				rts
.c42e					_FPAWMakeSame:
.c42e	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.c431	38		sec				sec
.c432	fd 0a 03	sbc $030a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.c435	f0 1b		beq $c452			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.c437	da		phx				phx 								; save X
.c438	90 06		bcc $c440			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.c43a	e8		inx				inx
.c43b	e8		inx				inx
.c43c	e8		inx				inx
.c43d	e8		inx				inx
.c43e	e8		inx				inx
.c43f	e8		inx				inx
.c440					_FPAWShiftA:
.c440	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c443	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c446	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c449	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c44c	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c44f	fa		plx				plx 								; restore original X
.c450	80 dc		bra $c42e			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.c452					_FPAW_DoArithmetic:
.c452	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.c455	30 39		bmi $c490			bmi 	_FPAW_BNegative
.c457	18		clc				clc
.c458	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c45b	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c45e	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c461	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c464	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c467	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c46a	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c46d	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c470	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c473	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c476	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c479	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c47c	90 ac		bcc $c42a			bcc 	_FPAWExit 					; no carry.
.c47e	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c481	38		sec				sec
.c482	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c485	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c488	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c48b	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c48e	80 9a		bra $c42a			bra 	_FPAWExit
.c490					_FPAW_BNegative:
.c490	38		sec				sec
.c491	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c494	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa+0,x
.c497	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c49a	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c49d	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c4a0	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c4a3	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c4a6	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c4a9	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c4ac	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c4af	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c4b2	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c4b5	b0 0b		bcs $c4c2			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.c4b7	20 dd c6	jsr $c6dd			jsr 	FPUNegateInteger			; negate the mantissa
.c4ba	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip result sign
.c4bd	49 80		eor #$80			eor 	#$80
.c4bf	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c4c2					_FPAWGoExit:
.c4c2	4c 2a c4	jmp $c42a			jmp 	_FPAWExit

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpdivide.asm

.c4c5					FPD_IsDivZero:
.c4c5	80 fe		bra $c4c5		_error: bra _error
.c4c7					FPDivide:
.c4c7	48		pha				pha
.c4c8	5a		phy				phy
.c4c9	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; check if division by zero
.c4cc	70 f7		bvs $c4c5			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.c4ce	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.c4d1	f0 03		beq $c4d6			beq 	_FPDCalculateExp
.c4d3					_FPD_Exit:
.c4d3	7a		ply				ply
.c4d4	68		pla				pla
.c4d5	60		rts				rts
.c4d6					_FPDCalculateExp:
.c4d6	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.c4d9	49 ff		eor #$ff			eor 	#$FF
.c4db	1a		inc a				inc 	a
.c4dc	9d 0a 03	sta $030a,x			sta 	XS2_Exponent,x
.c4df	20 d3 c5	jsr $c5d3			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.c4e2	18		clc				clc 	 							; add 1 to the resulting exponent
.c4e3	69 01		adc #$01			adc 	#1
.c4e5	b0 65		bcs $c54c			bcs 	_FPD_Overflow 				; which can overflow.
.c4e7	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c4ea	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.c4ec	85 1a		sta $1a				sta 	zLTemp1+0
.c4ee	85 1b		sta $1b				sta 	zLTemp1+1
.c4f0	85 1c		sta $1c				sta 	zLTemp1+2
.c4f2	85 1d		sta $1d				sta 	zLTemp1+3
.c4f4	a0 20		ldy #$20			ldy 	#32 						; times round.
.c4f6					_FPD_Loop:
.c4f6	38		sec				sec 								; calculate X1-X2 stacking result because we might
.c4f7	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; not save it.
.c4fa	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa,x
.c4fd	48		pha				pha
.c4fe	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c501	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c504	48		pha				pha
.c505	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c508	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c50b	48		pha				pha
.c50c	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c50f	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c512	90 17		bcc $c52b			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.c514	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x 			; save results out to A
.c517	68		pla				pla
.c518	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c51b	68		pla				pla
.c51c	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c51f	68		pla				pla
.c520	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c523	a5 1d		lda $1d				lda 	zLTemp1+3 					; set high bit of result
.c525	09 80		ora #$80			ora 	#$80
.c527	85 1d		sta $1d				sta 	zLTemp1+3
.c529	80 03		bra $c52e			bra 	_FPD_Rotates
.c52b					_FPD_NoSubtract:
.c52b	68		pla				pla 								; throw away unwanted results
.c52c	68		pla				pla
.c52d	68		pla				pla
.c52e					_FPD_Rotates:
.c52e	5e 09 03	lsr $0309,x			lsr 	3+XS2_Mantissa,x
.c531	7e 08 03	ror $0308,x			ror 	2+XS2_Mantissa,x
.c534	7e 07 03	ror $0307,x			ror 	1+XS2_Mantissa,x
.c537	7e 06 03	ror $0306,x			ror 	0+XS2_Mantissa,x
.c53a	06 1a		asl $1a				asl 	zLTemp1 					; rotate result round left
.c53c	26 1b		rol $1b				rol 	zLTemp1+1
.c53e	26 1c		rol $1c				rol 	zLTemp1+2
.c540	26 1d		rol $1d				rol 	zLTemp1+3
.c542	90 02		bcc $c546			bcc 	_FPD_NoCarry
.c544	e6 1a		inc $1a				inc 	zLTemp1 					; if rotated out, set LSB.
.c546					_FPD_NoCarry:
.c546	88		dey				dey 								; do 32 times
.c547	d0 ad		bne $c4f6			bne 	_FPD_Loop
.c549	4c b0 c5	jmp $c5b0			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.c54c					_FPD_Overflow:
.c54c	4c ad c7	jmp $c7ad			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpmultiply.asm

.c54f					FPMultiply:
.c54f	48		pha				pha
.c550	5a		phy				phy
.c551	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.c554	70 08		bvs $c55e			bvs 	_FPM_Exit
.c556	3c 0b 03	bit $030b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.c559	50 06		bvc $c561			bvc 	_FPM_CalcExponent
.c55b	20 b0 c6	jsr $c6b0			jsr 	FPUCopyX2ToX1
.c55e					_FPM_Exit:
.c55e	7a		ply				ply
.c55f	68		pla				pla
.c560	60		rts				rts
.c561					_FPM_CalcExponent:
.c561	18		clc				clc
.c562	20 d3 c5	jsr $c5d3			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.c565	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; save the result.
.c568	a9 00		lda #$00			lda 	#0
.c56a	85 1a		sta $1a				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.c56c	85 1b		sta $1b				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.c56e	85 1c		sta $1c				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.c570	85 1d		sta $1d				sta 	zLTemp1+3
.c572	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.c574					_FPM_Loop:
.c574	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x				; check LSB of long product
.c577	29 01		and #$01			and 	#1
.c579	18		clc				clc 								; clear carry for the long rotate.
.c57a	f0 1d		beq $c599			beq 	_FPM_NoAddition
.c57c	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.c57d	a5 1a		lda $1a				lda 	zLTemp1+0
.c57f	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c582	85 1a		sta $1a				sta 	zLTemp1+0
.c584	a5 1b		lda $1b				lda 	zLTemp1+1
.c586	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c589	85 1b		sta $1b				sta 	zLTemp1+1
.c58b	a5 1c		lda $1c				lda 	zLTemp1+2
.c58d	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c590	85 1c		sta $1c				sta 	zLTemp1+2
.c592	a5 1d		lda $1d				lda 	zLTemp1+3
.c594	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c597	85 1d		sta $1d				sta 	zLTemp1+3
.c599					_FPM_NoAddition:
.c599	66 1d		ror $1d				ror 	3+zLTemp1
.c59b	66 1c		ror $1c				ror 	2+zLTemp1
.c59d	66 1b		ror $1b				ror 	1+zLTemp1
.c59f	66 1a		ror $1a				ror 	0+zLTemp1
.c5a1	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c5a4	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c5a7	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c5aa	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c5ad	88		dey				dey
.c5ae	d0 c4		bne $c574			bne 	_FPM_Loop 					; do this 32 times.
.c5b0					FPM_CopySignNormalize:
.c5b0	a5 1a		lda $1a				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.c5b2	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.c5b5	a5 1b		lda $1b				lda 	zLTemp1+1
.c5b7	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c5ba	a5 1c		lda $1c				lda 	zLTemp1+2
.c5bc	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c5bf	a5 1d		lda $1d				lda 	zLTemp1+3
.c5c1	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c5c4	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; sign is xor of signs
.c5c7	5d 0b 03	eor $030b,x			eor 	XS2_Type,x
.c5ca	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c5cd	20 38 c7	jsr $c738			jsr 	FPUNormalise 				; normalise and exit.
.c5d0	7a		ply				ply
.c5d1	68		pla				pla
.c5d2	60		rts				rts
.c5d3					FPCalculateExponent:
.c5d3	18		clc				clc
.c5d4	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.c5d7	7d 0a 03	adc $030a,x			adc 	XS2_Exponent,x
.c5da	b0 08		bcs $c5e4			bcs 	_FPCECarry 					; carry out ?
.c5dc	10 03		bpl $c5e1			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.c5de	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.c5e0	60		rts				rts
.c5e1					_FPCEExpZero:
.c5e1	a9 00		lda #$00			lda 	#0
.c5e3	60		rts				rts
.c5e4					_FPCECarry:
.c5e4	30 03		bmi $c5e9			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.c5e6	09 80		ora #$80			ora 	#$80 						; put in right range
.c5e8	60		rts				rts
.c5e9					_FPCEOverflow:
.c5e9	4c ad c7	jmp $c7ad			jmp 	FP_Overflow

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpparts.asm

.c5ec					FPFractionalPart:
.c5ec	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.c5ef	38		sec				sec 								; this flag tells us to keep the fractional part
.c5f0	30 0f		bmi $c601			bmi 	FPGetPart
.c5f2	60		rts				rts
.c5f3					FPIntegerPart:
.c5f3	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.c5f6	18		clc				clc 								; this flag says keep the integer part.
.c5f7	30 08		bmi $c601			bmi 	FPGetPart 					; -ve exponents are 0..127
.c5f9	48		pha				pha
.c5fa	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.c5fc	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c5ff	68		pla				pla
.c600	60		rts				rts
.c601					FPGetPart:
.c601	48		pha				pha
.c602	5a		phy				phy 								; save Y
.c603	08		php				php 								; save action
.c604	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.c607	70 62		bvs $c66b			bvs 	_FPGP_Exit 					; then do nothing.
.c609	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.c60b	85 1a		sta $1a				sta 	zLTemp1+0 					; this mask is applied to chop out the
.c60d	85 1b		sta $1b				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.c60f	85 1c		sta $1c				sta 	zLTemp1+2
.c611	85 1d		sta $1d				sta 	zLTemp1+3
.c613	bd 04 03	lda $0304,x			lda 	XS_Exponent,x				; the number of shifts.
.c616	38		sec				sec
.c617	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.c619	f0 12		beq $c62d			beq 	_FPGP_NoShift 				; ... if any
.c61b	c9 20		cmp #$20			cmp 	#32
.c61d	90 02		bcc $c621			bcc 	_FPGP_NotMax
.c61f	a9 20		lda #$20			lda 	#32 						; max of 32.
.c621					_FPGP_NotMax:
.c621	a8		tay				tay 								; Y is the mask shift count.
.c622					_FPGP_ShiftMask:
.c622	46 1d		lsr $1d				lsr 	3+zLTemp1
.c624	66 1c		ror $1c				ror 	2+zLTemp1
.c626	66 1b		ror $1b				ror 	1+zLTemp1
.c628	66 1a		ror $1a				ror 	0+zLTemp1
.c62a	88		dey				dey
.c62b	d0 f5		bne $c622			bne 	_FPGP_ShiftMask
.c62d					_FPGP_NoShift:
.c62d	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.c62f	8e 23 04	stx $0423			stx 	ExpTemp						; save X
.c632					_FPGP_MaskLoop:
.c632	b9 1a 00	lda $001a,y			lda 	zlTemp1,y 					; get mask byte
.c635	28		plp				plp 								; if CC we keep the top part, so we
.c636	08		php				php		 							; flip the mask.
.c637	b0 02		bcs $c63b			bcs		_FPGP_NoFlip
.c639	49 ff		eor #$ff			eor 	#$FF
.c63b					_FPGP_NoFlip:
.c63b	3d 00 03	and $0300,x			and 	XS_Mantissa,x 				; and into the mantissa.
.c63e	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c641	e8		inx				inx
.c642	c8		iny				iny
.c643	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.c645	d0 eb		bne $c632			bne 	_FPGP_MaskLoop
.c647	ae 23 04	ldx $0423			ldx 	ExpTemp						; restore X
.c64a	28		plp				plp
.c64b	08		php				php 								; get action flag on the stack
.c64c	90 05		bcc $c653			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.c64e	a9 00		lda #$00			lda 	#0
.c650	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c653					_FPGP_NotFractional:
.c653	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 						; check if \1 zero
.c656	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c659	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c65c	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c65f	f0 05		beq $c666			beq 	_FPGP_Zero 					; if zero, return zero
.c661	20 38 c7	jsr $c738			jsr 	FPUNormalise
.c664	80 05		bra $c66b			bra 	_FPGP_Exit 					; and exit
.c666					_FPGP_Zero:
.c666	a9 40		lda #$40			lda 	#$40 						; set zero flag
.c668	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c66b					_FPGP_Exit:
.c66b	68		pla				pla 								; throw saved action flag.
.c66c	7a		ply				ply
.c66d	68		pla				pla
.c66e	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fpcompare.asm

.c66f					FPCompare:
.c66f	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.c672	48		pha				pha
.c673	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x
.c676	48		pha				pha
.c677	20 eb c3	jsr $c3eb			jsr 	FPSubtract 					; calculate X1-X2
.c67a	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.c67d	70 2c		bvs $c6ab			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.c67f	68		pla				pla
.c680	8d 23 04	sta $0423			sta 	ExpTemp						; save first exponent in temporary reg.
.c683	68		pla				pla
.c684	38		sec				sec
.c685	ed 23 04	sbc $0423			sbc 	ExpTemp 					; calculate AX-BX
.c688	70 15		bvs $c69f			bvs 	_FPCNotEqual				; overflow, can't be equal.
.c68a	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.c68b	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.c68d	b0 10		bcs $c69f			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.c68f	38		sec				sec
.c690	ad 23 04	lda $0423			lda 	ExpTemp 					; get one of the exponents back.
.c693	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.c695	b0 02		bcs $c699			bcs 	_FPCNotRange 				; keep in range.
.c697	a9 01		lda #$01			lda 	#1
.c699					_FPCNotRange:
.c699	38		sec				sec
.c69a	fd 04 03	sbc $0304,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.c69d	b0 0e		bcs $c6ad			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.c69f					_FPCNotEqual:
.c69f	bd 05 03	lda $0305,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.c6a2	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.c6a4	f0 02		beq $c6a8			beq 	_FPCNE2
.c6a6	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.c6a8	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.c6a9	80 04		bra $c6af			bra 	_FPCExit
.c6ab					_FPCPullZero:
.c6ab	68		pla				pla 								; throw saved exponents
.c6ac	68		pla				pla
.c6ad					_FPCZero:
.c6ad	a9 00		lda #$00			lda 	#0 							; and return zero
.c6af					_FPCExit:
.c6af	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/float/fputils.asm

.c6b0					FPUCopyX2ToX1:
.c6b0	48		pha				pha
.c6b1	da		phx				phx
.c6b2	5a		phy				phy
.c6b3	a0 08		ldy #$08			ldy 	#8
.c6b5	bd 06 03	lda $0306,x	_FPUC21:lda 	XS2_Mantissa,x
.c6b8	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c6bb	e8		inx				inx
.c6bc	88		dey				dey
.c6bd	10 f6		bpl $c6b5			bpl 	_FPUC21
.c6bf	7a		ply				ply
.c6c0	fa		plx				plx
.c6c1	68		pla				pla
.c6c2	60		rts				rts
.c6c3					FPUSetInteger:
.c6c3	48		pha				pha
.c6c4	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.c6c7	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.c6c9	10 02		bpl $c6cd			bpl 	_FPUSIExtend
.c6cb	a9 ff		lda #$ff			lda 	#$FF
.c6cd					_FPUSIExtend:
.c6cd	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.c6d0	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c6d3	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c6d6	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.c6d8	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c6db	68		pla				pla
.c6dc	60		rts				rts
.c6dd					FPUNegateInteger:
.c6dd	48		pha				pha
.c6de	38		sec				sec
.c6df	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.c6e1	fd 00 03	sbc $0300,x			sbc 	XS_Mantissa+0,x
.c6e4	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c6e7	a9 00		lda #$00			lda 	#0
.c6e9	fd 01 03	sbc $0301,x			sbc 	XS_Mantissa+1,x
.c6ec	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c6ef	a9 00		lda #$00			lda 	#0
.c6f1	fd 02 03	sbc $0302,x			sbc 	XS_Mantissa+2,x
.c6f4	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c6f7	a9 00		lda #$00			lda 	#0
.c6f9	fd 03 03	sbc $0303,x			sbc 	XS_Mantissa+3,x
.c6fc	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c6ff	68		pla				pla
.c700	60		rts				rts
.c701					FPUToFloat:
.c701	48		pha				pha
.c702	bd 05 03	lda $0305,x			lda 	XS_Type,x					; exit if already float.
.c705	29 0f		and #$0f			and 	#$0F
.c707	f0 2d		beq $c736			beq 	_FPUFExit
.c709	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.c70b	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c70e	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.c710	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; x mantissa.
.c713	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.c716	10 08		bpl $c720			bpl		_FPUFPositive
.c718	20 dd c6	jsr $c6dd			jsr 	FPUNegateInteger 			; negate the mantissa
.c71b	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.c71d	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c720					_FPUFPositive:
.c720	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.c723	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c726	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c729	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c72c	d0 05		bne $c733			bne 	_FPUFNonZero
.c72e	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.c730	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c733					_FPUFNonZero:
.c733	20 38 c7	jsr $c738			jsr 	FPUNormalise 				; normalise the floating point.
.c736					_FPUFExit:
.c736	68		pla				pla
.c737	60		rts				rts
.c738					FPUNormalise:
.c738	48		pha				pha
.c739	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.c73c	70 20		bvs $c75e			bvs 	_FPUNExit
.c73e	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.c741	f0 16		beq $c759			beq 	_FPUNSetZero
.c743					_FPUNLoop:
.c743	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.c746	30 16		bmi $c75e			bmi 	_FPUNExit 					; if so, we are normalised.
.c748	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa+0,x
.c74b	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa+0,x
.c74e	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa+0,x
.c751	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa+0,x
.c754	de 04 03	dec $0304,x			dec 	XS_Exponent,x 				; decrement exponent
.c757	d0 ea		bne $c743			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.c759					_FPUNSetZero:
.c759	a9 40		lda #$40			lda 	#$40
.c75b	9d 05 03	sta $0305,x			sta 	XS_Type,x 					; the result is now zero.
.c75e					_FPUNExit:
.c75e	68		pla				pla
.c75f	60		rts				rts
.c760					FPUToInteger:
.c760	48		pha				pha
.c761	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if already integer, exit
.c764	29 01		and #$01			and 	#1
.c766	d0 3e		bne $c7a6			bne 	_FPUTOI_Exit
.c768	3c 05 03	bit $0305,x			bit 	XS_Type,x					; if zero, return zero.
.c76b	70 2b		bvs $c798			bvs 	_FPUTOI_Zero
.c76d	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.c770	10 26		bpl $c798			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.c772	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.c774	b0 37		bcs $c7ad			bcs 	FP_Overflow
.c776					_FPUToIToInteger:
.c776	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.c779	c9 a0		cmp #$a0			cmp 	#128+32
.c77b	f0 11		beq $c78e			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.c77d	fe 04 03	inc $0304,x			inc 	XS_Exponent,X 				; increment Exponent
.c780	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c783	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c786	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c789	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c78c	80 e8		bra $c776			bra 	_FPUToIToInteger 			; keep going.
.c78e					_FPUToICheckSign:
.c78e	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; check sign
.c791	10 13		bpl $c7a6			bpl 	_FPUToI_Exit 				; exit if unsigned.
.c793	20 dd c6	jsr $c6dd			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.c796	80 0e		bra $c7a6			bra 	_FPUTOI_Exit
.c798					_FPUTOI_Zero:
.c798	a9 00		lda #$00			lda 	#0 							; return zero integer.
.c79a	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c79d	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c7a0	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c7a3	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c7a6					_FPUToI_Exit:
.c7a6	a9 01		lda #$01			lda 	#1 							; set type to integer
.c7a8	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c7ab	68		pla				pla
.c7ac	60		rts				rts
.c7ad					FP_Overflow:
.c7ad	80 fe		bra $c7ad		_error: bra _error
.c7af					FPUTimes10:
.c7af	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.c7b2	85 1a		sta $1a				sta 	ZLTemp1+0
.c7b4	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c7b7	85 1b		sta $1b				sta 	ZLTemp1+1
.c7b9	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c7bc	85 1c		sta $1c				sta 	ZLTemp1+2
.c7be	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c7c1	85 1d		sta $1d				sta 	ZLTemp1+3
.c7c3	20 07 c8	jsr $c807			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.c7c6	20 07 c8	jsr $c807			jsr 	_FPUT_LSR_ZLTemp1
.c7c9	18		clc				clc
.c7ca	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.c7cd	65 1a		adc $1a				adc 	ZLTemp1+0
.c7cf	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c7d2	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c7d5	65 1b		adc $1b				adc 	ZLTemp1+1
.c7d7	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c7da	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c7dd	65 1c		adc $1c				adc 	ZLTemp1+2
.c7df	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c7e2	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c7e5	65 1d		adc $1d				adc 	ZLTemp1+3
.c7e7	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c7ea	90 0f		bcc $c7fb			bcc 	_FPUTimes10
.c7ec	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c7ef	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c7f2	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c7f5	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c7f8	fe 04 03	inc $0304,x			inc 	XS_Exponent,x				; fix exponent
.c7fb					_FPUTimes10:
.c7fb	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.c7fe	18		clc				clc
.c7ff	69 03		adc #$03			adc 	#3
.c801	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c804	b0 a7		bcs $c7ad			bcs 	FP_Overflow 				; error
.c806	60		rts				rts
.c807					_FPUT_LSR_ZLTemp1:
.c807	46 1d		lsr $1d				lsr 	ZLTemp1+3
.c809	66 1c		ror $1c				ror 	ZLTemp1+2
.c80b	66 1b		ror $1b				ror 	ZLTemp1+1
.c80d	66 1a		ror $1a				ror 	ZLTemp1+0
.c80f	60		rts				rts
.c810					FPUScale10A:
.c810	5a		phy				phy
.c811	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.c813	f0 3d		beq $c852			beq 	_FPUScaleExit
.c815	da		phx				phx 								; save X
.c816	e8		inx				inx
.c817	e8		inx				inx
.c818	e8		inx				inx
.c819	e8		inx				inx
.c81a	e8		inx				inx
.c81b	e8		inx				inx
.c81c	a8		tay				tay 								; save power scalar in Y.
.c81d	a9 00		lda #$00			lda 	#0
.c81f	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.c822	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c825	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c828	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c82b	a9 80		lda #$80			lda 	#$80
.c82d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c830	a9 81		lda #$81			lda 	#$81
.c832	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c835	5a		phy				phy 								; save 10^n on stack.
.c836	c0 00		cpy #$00			cpy 	#0
.c838	10 05		bpl $c83f			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.c83a	98		tya				tya
.c83b	49 ff		eor #$ff			eor 	#$FF
.c83d	1a		inc a				inc 	a
.c83e	a8		tay				tay
.c83f					_FPUSAbs:
.c83f	20 af c7	jsr $c7af			jsr 	FPUTimes10
.c842	88		dey				dey
.c843	d0 fa		bne $c83f			bne 	_FPUSAbs 					; tos is now 10^|AC|
.c845	68		pla				pla 								; restore count in A
.c846	fa		plx				plx 								; restore X pointing to number to scale.
.c847	0a		asl a				asl 	a
.c848	b0 05		bcs $c84f			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.c84a	20 4f c5	jsr $c54f			jsr 	FPMultiply 					; if clear multiply.
.c84d	80 03		bra $c852			bra		_FPUScaleExit
.c84f					_FPUSDivide:
.c84f	20 c7 c4	jsr $c4c7			jsr 	FPDivide
.c852					_FPUScaleExit:
.c852	7a		ply				ply
.c853	60		rts				rts
.c854					FPUCopyToNext:
.c854	a0 06		ldy #$06			ldy 		#6
.c856	da		phx				phx
.c857					_FPUCopy1:
.c857	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x
.c85a	9d 06 03	sta $0306,x			sta 	XS2_Mantissa,x
.c85d	e8		inx				inx
.c85e	88		dey				dey
.c85f	d0 f6		bne $c857			bne 	_FPUCopy1
.c861	fa		plx				plx
.c862	60		rts				rts
.c863					FPUCopyFromNext:
.c863	a0 06		ldy #$06			ldy 		#6
.c865	da		phx				phx
.c866					_FPUCopy1:
.c866	bd 06 03	lda $0306,x			lda 	XS2_Mantissa,x
.c869	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c86c	e8		inx				inx
.c86d	88		dey				dey
.c86e	d0 f6		bne $c866			bne 	_FPUCopy1
.c870	fa		plx				plx
.c871	60		rts				rts

;******  Return to file: _include.asm


;******  Processing file: modules/utility/tim.asm

.c872					TIM_Error:
.c872	20 2a c2	jsr $c22a			jsr 	IFT_UpLine 					; go up one line.
.c875	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.c877	80 02		bra $c87b			bra 	TIM_ShowPrompt
.c879					TIM_NewCommand:
.c879	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.c87b					TIM_ShowPrompt:
.c87b	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.c87e	20 ee c2	jsr $c2ee			jsr 	IFT_ReadLine	 			; get character, go to next line
.c881	20 50 c2	jsr $c250			jsr 	IFT_NewLine					; go to next line.
.c884	86 10		stx $10				stx 	zTemp1 						; save line read address
.c886	84 11		sty $11				sty 	zTemp1+1
.c888	a0 00		ldy #$00			ldy 	#0 							; get first character after the prompt.
.c88a	b1 10		lda ($10),y			lda 	(zTemp1),y
.c88c	c9 2e		cmp #$2e			cmp 	#"."						; if . skip it
.c88e	d0 01		bne $c891			bne 	TIM_NotDot
.c890	c8		iny				iny
.c891					TIM_NotDot:
.c891	b1 10		lda ($10),y			lda 	(zTemp1),y 					; get character
.c893	c9 52		cmp #$52			cmp 	#"R"						; show registers
.c895	f0 6b		beq $c902			beq 	TIM_ShowRegisters
.c897	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.c899	f0 12		beq $c8ad			beq 	TIM_ShowMemory
.c89b	c9 47		cmp #$47			cmp 	#"G"						; execute
.c89d	f0 49		beq $c8e8			beq 	TIM_Execute
.c89f	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.c8a1	f0 07		beq $c8aa			beq 	TIM_GoLoadMemory
.c8a3	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.c8a5	d0 cb		bne $c872			bne 	TIM_Error
.c8a7	4c 25 ca	jmp $ca25			jmp 	TIM_UpdateRegisters
.c8aa					TIM_GoLoadMemory:
.c8aa	4c 55 ca	jmp $ca55			jmp 	TIM_LoadMemory
.c8ad					TIM_ShowMemory:
.c8ad	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.c8b0	b0 c0		bcs $c872			bcs 	TIM_Error
.c8b2	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.c8b4	85 12		sta $12				sta 	zTemp2
.c8b6	a5 15		lda $15				lda 	zTemp3+1
.c8b8	85 13		sta $13				sta 	zTemp2+1
.c8ba	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.c8bd	90 08		bcc $c8c7			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.c8bf	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.c8c1	85 14		sta $14				sta 	zTemp3
.c8c3	a5 13		lda $13				lda 	zTemp2+1
.c8c5	85 15		sta $15				sta 	zTemp3+1
.c8c7					_TIMSM_Start:
.c8c7	20 79 c9	jsr $c979			jsr 	TIM_WriteLine 				; write one line of hex out
.c8ca	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.c8cc	18		clc				clc
.c8cd	69 10		adc #$10			adc 	#16
.c8cf	85 12		sta $12				sta 	zTemp2
.c8d1	90 02		bcc $c8d5			bcc 	_TIMSM_NoCarry
.c8d3	e6 13		inc $13				inc 	zTemp2+1
.c8d5					_TIMSM_NoCarry:
.c8d5	20 d5 c3	jsr $c3d5			jsr 	IF_CheckBreak 				; check CTL+C
.c8d8	d0 0b		bne $c8e5			bne 	_TIMSM_Ends 				; if pressed break out.
.c8da	38		sec				sec 								; check past the end address in zTemp3
.c8db	a5 14		lda $14				lda 	zTemp3
.c8dd	e5 12		sbc $12				sbc 	zTemp2
.c8df	a5 15		lda $15				lda 	zTemp3+1
.c8e1	e5 13		sbc $13				sbc 	zTemp2+1
.c8e3	10 e2		bpl $c8c7			bpl 	_TIMSM_Start
.c8e5					_TIMSM_Ends:
.c8e5	4c 79 c8	jmp $c879			jmp 	TIM_NewCommand
.c8e8					TIM_Execute:
.c8e8	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; get the execute address
.c8eb	b0 85		bcs $c872			bcs 	TIM_Error 					; not legitimate
.c8ed	ae 31 04	ldx $0431			ldx 	TIM_SP 						; set up SP
.c8f0	9a		txs				txs
.c8f1	ad 2c 04	lda $042c			lda 	TIM_SR 						; Status for PLP
.c8f4	48		pha				pha
.c8f5	ad 2d 04	lda $042d			lda 	TIM_A 						; restore AXYZ
.c8f8	ae 2e 04	ldx $042e			ldx 	TIM_X
.c8fb	ac 2f 04	ldy $042f			ldy 	TIM_Y
.c8fe	28		plp				plp 								; and PS Byte.
.c8ff	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.c902					TIM_Start:
.c902					TIM_ShowRegisters:
.c902	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.c905	8d 2b 04	sta $042b			sta 	TIM_IRQ+1
.c908	ad ff ff	lda $ffff			lda 	$FFFF
.c90b	8d 2a 04	sta $042a			sta 	TIM_IRQ
.c90e	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.c910					_TIMSR_Text:
.c910	bd 40 c9	lda $c940,x			lda 	_TIMSR_Label,x
.c913	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c916	e8		inx				inx
.c917	e0 20		cpx #$20			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.c919	d0 f5		bne $c910			bne 	_TIMSR_Text
.c91b	a2 ff		ldx #$ff			ldx 	#-1							; output Register Line.
.c91d					_TIMSR_Skip:
.c91d	e8		inx				inx
.c91e					_TIMSR_LoopSpace:
.c91e	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.c920	b0 04		bcs $c926			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.c922	8a		txa				txa
.c923	4a		lsr a				lsr 	a
.c924	b0 05		bcs $c92b			bcs 	_TIMSR_NoSpace
.c926					_TIMSR_Space:
.c926	a9 20		lda #$20			lda 	#" "
.c928	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c92b					_TIMSR_NoSpace:
.c92b	bd 28 04	lda $0428,x			lda 	TIM_PC,x 					; output hex value.
.c92e	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.c931	e8		inx				inx
.c932	e0 08		cpx #$08			cpx 	#TIM_Z-TIM_PC
.c934	f0 e7		beq $c91d			beq 	_TIMSR_Skip
.c936	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.c938	d0 e4		bne $c91e			bne 	_TimSR_LoopSpace
.c93a	20 50 c2	jsr $c250			jsr 	IFT_NewLine 				; new line
.c93d	4c 79 c8	jmp $c879			jmp	 	TIM_NewCommand 				; new command.
.c940					_TIMSR_Label:
>c940	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR"
>c948	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>c958	52
>c959	20 53 50 0d 2e 3b 20				.text 	" SP",13,".; "
.c960					_TIMSR_LabelEnd:
.c960					TIM_WriteHex:
.c960	48		pha				pha 								; save A
.c961	4a		lsr a				lsr 	a 							; shift MSB->LSB
.c962	4a		lsr a				lsr 	a
.c963	4a		lsr a				lsr 	a
.c964	4a		lsr a				lsr 	a
.c965	20 69 c9	jsr $c969			jsr 	_TIMWH_Nibble 				; print MSB
.c968	68		pla				pla 								; restore and print LSB
.c969					_TIMWH_Nibble:
.c969	48		pha				pha
.c96a	29 0f		and #$0f			and 	#15 						; mask out
.c96c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.c96e	90 02		bcc $c972			bcc 	_TIMWHNoLetter
.c970	69 06		adc #$06			adc 	#6
.c972					_TIMWHNoLetter:
.c972	69 30		adc #$30			adc 	#48
.c974	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter 			; print it out.
.c977	68		pla				pla
.c978	60		rts				rts
.c979					TIM_WriteLine:
.c979	a9 2e		lda #$2e			lda 	#"." 						; prompt
.c97b	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c97e	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.c980	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c983	a5 13		lda $13				lda 	zTemp2+1 					; write address
.c985	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.c988	a5 12		lda $12				lda 	zTemp2
.c98a	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.c98d	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.c98f					_TIMWL_Loop:
.c98f	a9 20		lda #$20			lda 	#" "
.c991	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
.c994	b1 12		lda ($12),y			lda 	(zTemp2),y
.c996	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.c999	c8		iny				iny
.c99a	c0 10		cpy #$10			cpy 	#16
.c99c	d0 f1		bne $c98f			bne 	_TIMWL_Loop
.c99e	4c 50 c2	jmp $c250			jmp 	IFT_NewLine 				; new line and exit
.c9a1					TIM_GetHex:
.c9a1	c8		iny				iny
.c9a2	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.c9a4	c9 20		cmp #$20			cmp 	#32
.c9a6	f0 f9		beq $c9a1			beq 	TIM_GetHex
.c9a8	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.c9aa	f0 f5		beq $c9a1			beq 	TIM_GetHex
.c9ac	20 d5 c9	jsr $c9d5			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.c9af	b0 23		bcs $c9d4			bcs 	_TIMGH_Exit					; if first bad then exit now.
.c9b1	a9 00		lda #$00			lda 	#0 							; zero result
.c9b3	85 14		sta $14				sta 	zTemp3
.c9b5	85 15		sta $15				sta 	zTemp3+1
.c9b7					_TIM_GHLoop:
.c9b7	20 d5 c9	jsr $c9d5			jsr 	TIM_GetHexCharacter 		; get next character
.c9ba	b0 17		bcs $c9d3			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.c9bc	c8		iny				iny 								; skip over it.
.c9bd	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.c9bf	26 15		rol $15				rol 	zTemp3+1
.c9c1	06 14		asl $14				asl 	zTemp3 						; now x 2
.c9c3	26 15		rol $15				rol 	zTemp3+1
.c9c5	06 14		asl $14				asl 	zTemp3						; now x 4
.c9c7	26 15		rol $15				rol 	zTemp3+1
.c9c9	06 14		asl $14				asl 	zTemp3 						; now x 8
.c9cb	26 15		rol $15				rol 	zTemp3+1
.c9cd	05 14		ora $14				ora 	zTemp3 						; OR result in
.c9cf	85 14		sta $14				sta 	zTemp3
.c9d1	80 e4		bra $c9b7			bra 	_TIM_GHLoop 				; loop round again.
.c9d3					_TIMGH_Okay:
.c9d3	18		clc				clc
.c9d4					_TIMGH_Exit:
.c9d4	60		rts				rts
.c9d5					TIM_GetHexCharacter:
.c9d5	b1 10		lda ($10),y			lda 	(zTemp1),y
.c9d7	38		sec				sec
.c9d8	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.c9da	90 0e		bcc $c9ea			bcc 	_TIM_GHCFail
.c9dc	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.c9de	90 0b		bcc $c9eb			bcc 	_TIM_GHCExit
.c9e0	c9 11		cmp #$11			cmp 	#65-48						; < A
.c9e2	90 06		bcc $c9ea			bcc		_TIM_GHCFail
.c9e4	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.c9e6	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.c9e8	90 01		bcc $c9eb			bcc		_TIM_GHCExit
.c9ea					_TIM_GHCFail:
.c9ea	38		sec				sec
.c9eb					_TIM_GHCExit:
.c9eb	60		rts				rts
.c9ec					TIM_BreakVector:
.c9ec	da		phx				phx									; save X/A on stack
.c9ed	48		pha				pha
.c9ee	ba		tsx				tsx 								; X points to S
.c9ef	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.c9f2	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.c9f4	d0 03		bne $c9f9			bne 	_TIMBreak					; if set, it's BRK
.c9f6	68		pla				pla 								; abandon routine.
.c9f7	fa		plx				plx
.c9f8	40		rti				rti
.c9f9					_TIMBreak:
.c9f9	68		pla				pla 								; save A X Y and maybe Z
.c9fa	8d 2d 04	sta $042d			sta 	TIM_A
.c9fd	fa		plx				plx
.c9fe	8e 2e 04	stx $042e			stx 	TIM_X
.ca01	8c 2f 04	sty $042f			sty 	TIM_Y
.ca04	68		pla				pla 								; get Status Register
.ca05	8d 2c 04	sta $042c			sta 	TIM_SR
.ca08	68		pla				pla
.ca09	8d 29 04	sta $0429			sta 	TIM_PC+1 					; save calling address
.ca0c	68		pla				pla
.ca0d	8d 28 04	sta $0428			sta 	TIM_PC 						; high byte
.ca10	ad 29 04	lda $0429			lda 	TIM_PC+1 					; dec PC to point right.
.ca13	d0 03		bne $ca18			bne 	_TIMDecrement 				; brk bumps it.
.ca15	ce 28 04	dec $0428			dec 	TIM_PC
.ca18					_TIMDecrement:
.ca18	ce 29 04	dec $0429			dec 	TIM_PC+1
.ca1b	ba		tsx				tsx 								; and copy SP
.ca1c	8e 31 04	stx $0431			stx 	TIM_SP
.ca1f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.ca21	9a		txs				txs
.ca22	4c 02 c9	jmp $c902			jmp 	TIM_Start 					; and start up TIM monitor.
.ca25					TIM_UpdateRegisters:
.ca25	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; PC
.ca28	b0 28		bcs $ca52			bcs 	_TIMURFail
.ca2a	a5 14		lda $14				lda 	zTemp3
.ca2c	8d 29 04	sta $0429			sta 	Tim_PC+1
.ca2f	a5 15		lda $15				lda 	zTemp3+1
.ca31	8d 28 04	sta $0428			sta 	Tim_PC
.ca34	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; ignore IRQ
.ca37	b0 19		bcs $ca52			bcs 	_TIMURFail
.ca39	a2 00		ldx #$00			ldx 	#0
.ca3b					_TIM_URLoop:
.ca3b	e0 04		cpx #$04			cpx 	#Tim_Z-Tim_SR
.ca3d	d0 01		bne $ca40			bne 	_TIM_1
.ca3f	e8		inx				inx
.ca40					_TIM_1:
.ca40	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; registers
.ca43	b0 0d		bcs $ca52			bcs 	_TIMURFail
.ca45	a5 14		lda $14				lda 	zTemp3
.ca47	9d 2c 04	sta $042c,x			sta 	Tim_SR,x
.ca4a	e8		inx				inx
.ca4b	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.ca4d	d0 ec		bne $ca3b			bne 	_TIM_URLoop
.ca4f	4c 79 c8	jmp $c879			jmp 	TIM_NewCommand
.ca52					_TIMURFail:
.ca52	4c 72 c8	jmp $c872			jmp 	TIM_Error
.ca55					TIM_LoadMemory:
.ca55	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; target address => zTemp2
.ca58	a5 14		lda $14				lda 	zTemp3
.ca5a	85 12		sta $12				sta 	zTemp2
.ca5c	a5 15		lda $15				lda 	zTemp3+1
.ca5e	85 13		sta $13				sta 	zTemp2+1
.ca60					_TIM_LMLoop:
.ca60	20 a1 c9	jsr $c9a1			jsr 	TIM_GetHex 					; next byte ?
.ca63	b0 0e		bcs $ca73			bcs 	_TIMLMDone 					; no more
.ca65	a2 00		ldx #$00			ldx 	#0							; write out.
.ca67	a5 14		lda $14				lda 	zTemp3
.ca69	81 12		sta ($12,x)			sta 	(zTemp2,x)
.ca6b	e6 12		inc $12				inc 	zTemp2 						; bump address
.ca6d	d0 f1		bne $ca60			bne 	_TIM_LMLoop
.ca6f	e6 13		inc $13				inc 	zTemp2+1
.ca71	80 ed		bra $ca60			bra 	_TIM_LMLoop
.ca73					_TIMLMDone:
.ca73	4c 79 c8	jmp $c879			jmp 	TIM_NewCommand

;******  Return to file: _include.asm


;******  Processing file: modules/testing/fptest.asm

.ca76					FPTTest:
.ca76	a9 2e		lda #$2e			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.ca78	85 1e		sta $1e				sta 	zGenPtr
.ca7a	a9 cb		lda #$cb			lda 	#FPTTestData >> 8
.ca7c	85 1f		sta $1f				sta 	zGenPtr+1
.ca7e	a2 00		ldx #$00			ldx 	#0 							; start at stack bottom.
.ca80	a5 1f		lda $1f		FPTLoop:lda 	zGenPtr+1
.ca82	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.ca85	a5 1e		lda $1e				lda 	zGenPtr
.ca87	20 60 c9	jsr $c960			jsr 	TIM_WriteHex
.ca8a	a9 2e		lda #$2e			lda 	#"."
.ca8c	20 36 c2	jsr $c236			jsr		IFT_PrintCharacter
.ca8f	20 1f cb	jsr $cb1f			jsr 	FPTGet 						; get next command
.ca92	c9 00		cmp #$00			cmp 	#0 							; zero, exit
.ca94	f0 58		beq $caee			beq 	FPTExit
.ca96	c9 01		cmp #$01			cmp 	#1 							; 1,load
.ca98	f0 46		beq $cae0			beq 	FPTLoad
.ca9a	c9 2b		cmp #$2b			cmp 	#"+" 						; the -1/0/1 value in AC.
.ca9c	d0 0b		bne $caa9			bne 	_skip1
.ca9e	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.caa1	20 f5 c3	jsr $c3f5			jsr 	FPAdd
.caa4	20 19 cb	jsr $cb19			jsr 	FPT_Postamble
.caa7	80 d7		bra $ca80			bra 	FPTLoop
.caa9					_skip1:
.caa9	c9 2d		cmp #$2d			cmp 	#"-" 						; the -1/0/1 value in AC.
.caab	d0 0b		bne $cab8			bne 	_skip1
.caad	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.cab0	20 eb c3	jsr $c3eb			jsr 	FPSubtract
.cab3	20 19 cb	jsr $cb19			jsr 	FPT_Postamble
.cab6	80 c8		bra $ca80			bra 	FPTLoop
.cab8					_skip1:
.cab8	c9 2a		cmp #$2a			cmp 	#"*" 						; the -1/0/1 value in AC.
.caba	d0 0b		bne $cac7			bne 	_skip1
.cabc	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.cabf	20 4f c5	jsr $c54f			jsr 	FPMultiply
.cac2	20 19 cb	jsr $cb19			jsr 	FPT_Postamble
.cac5	80 b9		bra $ca80			bra 	FPTLoop
.cac7					_skip1:
.cac7	c9 2f		cmp #$2f			cmp 	#"/" 						; the -1/0/1 value in AC.
.cac9	d0 0b		bne $cad6			bne 	_skip1
.cacb	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.cace	20 c7 c4	jsr $c4c7			jsr 	FPDivide
.cad1	20 19 cb	jsr $cb19			jsr 	FPT_Postamble
.cad4	80 aa		bra $ca80			bra 	FPTLoop
.cad6					_skip1:
.cad6	c9 7e		cmp #$7e			cmp 	#"~" 						; ~, compare
.cad8	f0 1a		beq $caf4			beq 	FPTCompare
.cada	c9 3d		cmp #$3d			cmp 	#"="						; = check equal
.cadc	f0 28		beq $cb06			beq 	FPTCheck
.cade					FPTError:
.cade	80 fe		bra $cade			bra 	FPTError
.cae0					FPTLoad:
.cae0	a0 06		ldy #$06			ldy 	#6 							; data to copy
.cae2					_FPTLoadLoop:
.cae2	20 1f cb	jsr $cb1f			jsr 	FPTGet
.cae5	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.cae8	e8		inx				inx
.cae9	88		dey				dey
.caea	d0 f6		bne $cae2			bne 	_FPTLoadLoop
.caec	80 92		bra $ca80			bra 	FPTLoop
.caee					FPTExit:
.caee	a9 2a		lda #$2a			lda 	#42
.caf0	20 36 c2	jsr $c236			jsr 	IFT_PrintCharacter
>caf3	02						.byte 	2
.caf4					FPTCompare:
.caf4	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.caf7	20 6f c6	jsr $c66f			jsr 	FPCompare
.cafa	20 c3 c6	jsr $c6c3			jsr 	FPUSetInteger
.cafd	20 01 c7	jsr $c701			jsr 	FPUToFloat
.cb00	20 19 cb	jsr $cb19			jsr 	FPT_Postamble
.cb03	4c 80 ca	jmp $ca80			jmp 	FPTLoop
.cb06					FPTCheck:
.cb06	20 13 cb	jsr $cb13			jsr 	FPT_Preamble
.cb09	20 6f c6	jsr $c66f			jsr 	FPCompare
.cb0c	09 00		ora #$00			ora 	#0
.cb0e					_FPTCFail:
.cb0e	d0 fe		bne $cb0e			bne 	_FPTCFail
.cb10	4c 80 ca	jmp $ca80			jmp 	FPTLoop
.cb13					FPT_Preamble:
.cb13	8a		txa				txa
.cb14	38		sec				sec
.cb15	e9 0c		sbc #$0c			sbc 	#12
.cb17	aa		tax				tax
.cb18	60		rts				rts
.cb19					FPT_Postamble:
.cb19	8a		txa				txa
.cb1a	18		clc				clc
.cb1b	69 06		adc #$06			adc 	#6
.cb1d	aa		tax				tax
.cb1e	60		rts				rts
.cb1f	5a		phy		FPTGet:	phy
.cb20	a0 00		ldy #$00			ldy 	#0
.cb22	b1 1e		lda ($1e),y			lda 	(zGenPtr),y
.cb24	48		pha				pha
.cb25	e6 1e		inc $1e				inc 	zGenPtr
.cb27	d0 02		bne $cb2b			bne 	_FPTGet1
.cb29	e6 1f		inc $1f				inc 	zGenPtr+1
.cb2b					_FPTGet1:
.cb2b	68		pla				pla
.cb2c	7a		ply				ply
.cb2d	60		rts				rts
.cb2e					FPTTestData:

;******  Processing file: modules/testing/script.inc

>cb2e	01					.byte 	1	; *** Load Integer 99999 ***
>cb2f	9f 86 01 00				.dword 	$1869f
>cb33	00 01					.byte 	0,$01
>cb35	01					.byte 	1     ; *** Load Float -140.15 ***
>cb36	66 66 26 8c				.dword 	$8c266666
>cb3a	88 80					.byte 	$88,$80
>cb3c	01					.byte 	1     ; *** Load Float -31845940.985856 ***
>cb3d	7e 1a f7 f2				.dword 	$f2f71a7e
>cb41	99 80					.byte 	$99,$80
>cb43	2a					.byte 	$2a   ; *** Command * ***
>cb44	01					.byte 	1     ; *** Load Float 4463208629.167719 ***
>cb45	5a 94 03 85				.dword 	$8503945a
>cb49	a1 00					.byte 	$a1,$0
>cb4b	3d					.byte 	$3d   ; *** Command = ***
>cb4c	01					.byte 	1     ; *** Load Float 0.0 ***
>cb4d	00 00 00 00				.dword 	$0
>cb51	80 40					.byte 	$80,$40
>cb53	01					.byte 	1     ; *** Load Float 41085.82912 ***
>cb54	41 d4 7d a0				.dword 	$a07dd441
>cb58	90 00					.byte 	$90,$0
>cb5a	2a					.byte 	$2a   ; *** Command * ***
>cb5b	01					.byte 	1     ; *** Load Float 0.0 ***
>cb5c	00 00 00 00				.dword 	$0
>cb60	80 40					.byte 	$80,$40
>cb62	3d					.byte 	$3d   ; *** Command = ***
>cb63	01					.byte 	1     ; *** Load Float -13.0 ***
>cb64	00 00 00 d0				.dword 	$d0000000
>cb68	84 80					.byte 	$84,$80
>cb6a	01					.byte 	1     ; *** Load Float -6.013957317918539e-12 ***
>cb6b	70 e9 98 d3				.dword 	$d398e970
>cb6f	5b 80					.byte 	$5b,$80
>cb71	2b					.byte 	$2b   ; *** Command + ***
>cb72	01					.byte 	1     ; *** Load Float -13.000000000006015 ***
>cb73	00 00 00 d0				.dword 	$d0000000
>cb77	84 80					.byte 	$84,$80
>cb79	3d					.byte 	$3d   ; *** Command = ***
>cb7a	01					.byte 	1     ; *** Load Float 782.22 ***
>cb7b	7a 14 8e c3				.dword 	$c38e147a
>cb7f	8a 00					.byte 	$8a,$0
>cb81	01					.byte 	1     ; *** Load Float -12.0 ***
>cb82	00 00 00 c0				.dword 	$c0000000
>cb86	84 80					.byte 	$84,$80
>cb88	2a					.byte 	$2a   ; *** Command * ***
>cb89	01					.byte 	1     ; *** Load Float -9386.64 ***
>cb8a	5c 8f aa 92				.dword 	$92aa8f5c
>cb8e	8e 80					.byte 	$8e,$80
>cb90	3d					.byte 	$3d   ; *** Command = ***
>cb91	01					.byte 	1     ; *** Load Float 12.0 ***
>cb92	00 00 00 c0				.dword 	$c0000000
>cb96	84 00					.byte 	$84,$0
>cb98	01					.byte 	1     ; *** Load Float 1.7822571862780022e-14 ***
>cb99	80 0d 88 a0				.dword 	$a0880d80
>cb9d	53 00					.byte 	$53,$0
>cb9f	7e					.byte 	$7e   ; *** Command ~ ***
>cba0	01					.byte 	1     ; *** Load Float 1 ***
>cba1	00 00 00 80				.dword 	$80000000
>cba5	81 00					.byte 	$81,$0
>cba7	3d					.byte 	$3d   ; *** Command = ***
>cba8	01					.byte 	1     ; *** Load Float -886.55 ***
>cba9	33 33 a3 dd				.dword 	$dda33333
>cbad	8a 80					.byte 	$8a,$80
>cbaf	01					.byte 	1     ; *** Load Float 14.0 ***
>cbb0	00 00 00 e0				.dword 	$e0000000
>cbb4	84 00					.byte 	$84,$0
>cbb6	2b					.byte 	$2b   ; *** Command + ***
>cbb7	01					.byte 	1     ; *** Load Float -872.55 ***
>cbb8	33 33 23 da				.dword 	$da233333
>cbbc	8a 80					.byte 	$8a,$80
>cbbe	3d					.byte 	$3d   ; *** Command = ***
>cbbf	01					.byte 	1     ; *** Load Float 8.82273 ***
>cbc0	ee e6 29 8d				.dword 	$8d29e6ee
>cbc4	84 00					.byte 	$84,$0
>cbc6	01					.byte 	1     ; *** Load Float 584.26 ***
>cbc7	d7 a3 10 92				.dword 	$9210a3d7
>cbcb	8a 00					.byte 	$8a,$0
>cbcd	7e					.byte 	$7e   ; *** Command ~ ***
>cbce	01					.byte 	1     ; *** Load Float -1 ***
>cbcf	00 00 00 80				.dword 	$80000000
>cbd3	81 80					.byte 	$81,$80
>cbd5	3d					.byte 	$3d   ; *** Command = ***
>cbd6	01					.byte 	1     ; *** Load Float 0.203747 ***
>cbd7	b6 0d a3 d0				.dword 	$d0a30db6
>cbdb	7e 00					.byte 	$7e,$0
>cbdd	01					.byte 	1     ; *** Load Float -11.0 ***
>cbde	00 00 00 b0				.dword 	$b0000000
>cbe2	84 80					.byte 	$84,$80
>cbe4	2f					.byte 	$2f   ; *** Command / ***
>cbe5	01					.byte 	1     ; *** Load Float -0.018522454545454547 ***
>cbe6	10 67 bc 97				.dword 	$97bc6710
>cbea	7b 80					.byte 	$7b,$80
>cbec	3d					.byte 	$3d   ; *** Command = ***
>cbed	01					.byte 	1     ; *** Load Float 3.086834 ***
>cbee	31 b0 8e c5				.dword 	$c58eb031
>cbf2	82 00					.byte 	$82,$0
>cbf4	01					.byte 	1     ; *** Load Float 6.04628 ***
>cbf5	31 20 7b c1				.dword 	$c17b2031
>cbf9	83 00					.byte 	$83,$0
>cbfb	2f					.byte 	$2f   ; *** Command / ***
>cbfc	01					.byte 	1     ; *** Load Float 0.5105344112412922 ***
>cbfd	17 62 b2 82				.dword 	$82b26217
>cc01	80 00					.byte 	$80,$0
>cc03	3d					.byte 	$3d   ; *** Command = ***
>cc04	01					.byte 	1     ; *** Load Float 955179.33568 ***
>cc05	5e b5 32 e9				.dword 	$e932b55e
>cc09	94 00					.byte 	$94,$0
>cc0b	01					.byte 	1     ; *** Load Float -131656824131665.53 ***
>cc0c	78 7c 7b ef				.dword 	$ef7b7c78
>cc10	af 80					.byte 	$af,$80
>cc12	2f					.byte 	$2f   ; *** Command / ***
>cc13	01					.byte 	1     ; *** Load Float -7.2550689413923394e-09 ***
>cc14	e3 42 48 f9				.dword 	$f94842e3
>cc18	65 80					.byte 	$65,$80
>cc1a	3d					.byte 	$3d   ; *** Command = ***
>cc1b	01					.byte 	1     ; *** Load Float 10.0 ***
>cc1c	00 00 00 a0				.dword 	$a0000000
>cc20	84 00					.byte 	$84,$0
>cc22	01					.byte 	1     ; *** Load Float -755.21 ***
>cc23	a3 70 cd bc				.dword 	$bccd70a3
>cc27	8a 80					.byte 	$8a,$80
>cc29	7e					.byte 	$7e   ; *** Command ~ ***
>cc2a	01					.byte 	1     ; *** Load Float 1 ***
>cc2b	00 00 00 80				.dword 	$80000000
>cc2f	81 00					.byte 	$81,$0
>cc31	3d					.byte 	$3d   ; *** Command = ***
>cc32	01					.byte 	1     ; *** Load Float -2.0 ***
>cc33	00 00 00 80				.dword 	$80000000
>cc37	82 80					.byte 	$82,$80
>cc39	01					.byte 	1     ; *** Load Float -577.89 ***
>cc3a	c2 f5 78 90				.dword 	$9078f5c2
>cc3e	8a 80					.byte 	$8a,$80
>cc40	2a					.byte 	$2a   ; *** Command * ***
>cc41	01					.byte 	1     ; *** Load Float 1155.78 ***
>cc42	c2 f5 78 90				.dword 	$9078f5c2
>cc46	8b 00					.byte 	$8b,$0
>cc48	3d					.byte 	$3d   ; *** Command = ***
>cc49	01					.byte 	1     ; *** Load Float -132.36 ***
>cc4a	f5 28 5c 84				.dword 	$845c28f5
>cc4e	88 80					.byte 	$88,$80
>cc50	01					.byte 	1     ; *** Load Float 0.0 ***
>cc51	00 00 00 00				.dword 	$0
>cc55	80 40					.byte 	$80,$40
>cc57	2a					.byte 	$2a   ; *** Command * ***
>cc58	01					.byte 	1     ; *** Load Float -0.0 ***
>cc59	00 00 00 00				.dword 	$0
>cc5d	80 40					.byte 	$80,$40
>cc5f	3d					.byte 	$3d   ; *** Command = ***
>cc60	01					.byte 	1     ; *** Load Float 3.951113 ***
>cc61	0f 09 df fc				.dword 	$fcdf090f
>cc65	82 00					.byte 	$82,$0
>cc67	01					.byte 	1     ; *** Load Float 243.45 ***
>cc68	33 33 73 f3				.dword 	$f3733333
>cc6c	88 00					.byte 	$88,$0
>cc6e	2f					.byte 	$2f   ; *** Command / ***
>cc6f	01					.byte 	1     ; *** Load Float 0.01622966933661943 ***
>cc70	60 15 f4 84				.dword 	$84f41560
>cc74	7b 00					.byte 	$7b,$0
>cc76	3d					.byte 	$3d   ; *** Command = ***
>cc77	01					.byte 	1     ; *** Load Float -17.0 ***
>cc78	00 00 00 88				.dword 	$88000000
>cc7c	85 80					.byte 	$85,$80
>cc7e	01					.byte 	1     ; *** Load Float -17.0 ***
>cc7f	00 00 00 88				.dword 	$88000000
>cc83	85 80					.byte 	$85,$80
>cc85	2f					.byte 	$2f   ; *** Command / ***
>cc86	01					.byte 	1     ; *** Load Float 1.0 ***
>cc87	00 00 00 80				.dword 	$80000000
>cc8b	81 00					.byte 	$81,$0
>cc8d	3d					.byte 	$3d   ; *** Command = ***
>cc8e	01					.byte 	1     ; *** Load Float 6.73472 ***
>cc8f	84 d3 82 d7				.dword 	$d782d384
>cc93	83 00					.byte 	$83,$0
>cc95	01					.byte 	1     ; *** Load Float 59.54 ***
>cc96	c2 f5 28 ee				.dword 	$ee28f5c2
>cc9a	86 00					.byte 	$86,$0
>cc9c	2a					.byte 	$2a   ; *** Command * ***
>cc9d	01					.byte 	1     ; *** Load Float 400.9852288 ***
>cc9e	fa 1b 7e c8				.dword 	$c87e1bfa
>cca2	89 00					.byte 	$89,$0
>cca4	3d					.byte 	$3d   ; *** Command = ***
>cca5	01					.byte 	1     ; *** Load Float 562.6 ***
>cca6	66 66 a6 8c				.dword 	$8ca66666
>ccaa	8a 00					.byte 	$8a,$0
>ccac	01					.byte 	1     ; *** Load Float 2.769134938716888e-09 ***
>ccad	14 23 4b be				.dword 	$be4b2314
>ccb1	64 00					.byte 	$64,$0
>ccb3	2d					.byte 	$2d   ; *** Command - ***
>ccb4	01					.byte 	1     ; *** Load Float 562.5999999972308 ***
>ccb5	66 66 a6 8c				.dword 	$8ca66666
>ccb9	8a 00					.byte 	$8a,$0
>ccbb	3d					.byte 	$3d   ; *** Command = ***
>ccbc	01					.byte 	1     ; *** Load Float -114565813079.37589 ***
>ccbd	9a 3c 65 d5				.dword 	$d5653c9a
>ccc1	a5 80					.byte 	$a5,$80
>ccc3	01					.byte 	1     ; *** Load Float 7.05963 ***
>ccc4	2c 7d e8 e1				.dword 	$e1e87d2c
>ccc8	83 00					.byte 	$83,$0
>ccca	7e					.byte 	$7e   ; *** Command ~ ***
>cccb	01					.byte 	1     ; *** Load Float -1 ***
>cccc	00 00 00 80				.dword 	$80000000
>ccd0	81 80					.byte 	$81,$80
>ccd2	3d					.byte 	$3d   ; *** Command = ***
>ccd3	01					.byte 	1     ; *** Load Float 729213.3048319999 ***
>ccd4	e0 d4 07 b2				.dword 	$b207d4e0
>ccd8	94 00					.byte 	$94,$0
>ccda	01					.byte 	1     ; *** Load Float -6.263494491577148e-09 ***
>ccdb	ba 47 36 d7				.dword 	$d73647ba
>ccdf	65 80					.byte 	$65,$80
>cce1	2a					.byte 	$2a   ; *** Command * ***
>cce2	01					.byte 	1     ; *** Load Float -0.004567423518 ***
>cce3	51 53 aa 95				.dword 	$95aa5351
>cce7	79 80					.byte 	$79,$80
>cce9	3d					.byte 	$3d   ; *** Command = ***
>ccea	01					.byte 	1     ; *** Load Float 16.0 ***
>cceb	00 00 00 80				.dword 	$80000000
>ccef	85 00					.byte 	$85,$0
>ccf1	01					.byte 	1     ; *** Load Float 151.28 ***
>ccf2	14 ae 47 97				.dword 	$9747ae14
>ccf6	88 00					.byte 	$88,$0
>ccf8	2f					.byte 	$2f   ; *** Command / ***
>ccf9	01					.byte 	1     ; *** Load Float 0.10576414595452141 ***
>ccfa	5f df 9a d8				.dword 	$d89adf5f
>ccfe	7d 00					.byte 	$7d,$0
>cd00	3d					.byte 	$3d   ; *** Command = ***
>cd01	01					.byte 	1     ; *** Load Float 6.0 ***
>cd02	00 00 00 c0				.dword 	$c0000000
>cd06	83 00					.byte 	$83,$0
>cd08	01					.byte 	1     ; *** Load Float 10100251251.703808 ***
>cd09	9c 66 81 96				.dword 	$9681669c
>cd0d	a2 00					.byte 	$a2,$0
>cd0f	2a					.byte 	$2a   ; *** Command * ***
>cd10	01					.byte 	1     ; *** Load Float 60601507510.22285 ***
>cd11	eb 19 c2 e1				.dword 	$e1c219eb
>cd15	a4 00					.byte 	$a4,$0
>cd17	3d					.byte 	$3d   ; *** Command = ***
>cd18	01					.byte 	1     ; *** Load Float 8.064078 ***
>cd19	a7 76 06 81				.dword 	$810676a7
>cd1d	84 00					.byte 	$84,$0
>cd1f	01					.byte 	1     ; *** Load Float 1.868873 ***
>cd20	ff 3a 37 ef				.dword 	$ef373aff
>cd24	81 00					.byte 	$81,$0
>cd26	7e					.byte 	$7e   ; *** Command ~ ***
>cd27	01					.byte 	1     ; *** Load Float 1 ***
>cd28	00 00 00 80				.dword 	$80000000
>cd2c	81 00					.byte 	$81,$0
>cd2e	3d					.byte 	$3d   ; *** Command = ***
>cd2f	01					.byte 	1     ; *** Load Float -3.0724937096238135e-10 ***
>cd30	38 81 e9 a8				.dword 	$a8e98138
>cd34	61 80					.byte 	$61,$80
>cd36	01					.byte 	1     ; *** Load Float -2.037882040895056e-14 ***
>cd37	4e 5c 8e b7				.dword 	$b78e5c4e
>cd3b	53 80					.byte 	$53,$80
>cd3d	2a					.byte 	$2a   ; *** Command * ***
>cd3e	01					.byte 	1     ; *** Load Float 6.2613797516053985e-24 ***
>cd3f	99 b3 39 f2				.dword 	$f239b399
>cd43	33 00					.byte 	$33,$0
>cd45	3d					.byte 	$3d   ; *** Command = ***
>cd46	01					.byte 	1     ; *** Load Float 1.218077 ***
>cd47	77 f2 e9 9b				.dword 	$9be9f277
>cd4b	81 00					.byte 	$81,$0
>cd4d	01					.byte 	1     ; *** Load Float 14.0 ***
>cd4e	00 00 00 e0				.dword 	$e0000000
>cd52	84 00					.byte 	$84,$0
>cd54	2d					.byte 	$2d   ; *** Command - ***
>cd55	01					.byte 	1     ; *** Load Float -12.781922999999999 ***
>cd56	b1 c1 82 cc				.dword 	$cc82c1b1
>cd5a	84 80					.byte 	$84,$80
>cd5c	3d					.byte 	$3d   ; *** Command = ***
>cd5d	01					.byte 	1     ; *** Load Float -1.9757415771484374e-05 ***
>cd5e	30 ba bc a5				.dword 	$a5bcba30
>cd62	71 80					.byte 	$71,$80
>cd64	01					.byte 	1     ; *** Load Float -210056198928.46594 ***
>cd65	ec 4c a1 c3				.dword 	$c3a14cec
>cd69	a6 80					.byte 	$a6,$80
>cd6b	2f					.byte 	$2f   ; *** Command / ***
>cd6c	01					.byte 	1     ; *** Load Float 9.405776107665695e-17 ***
>cd6d	fc e6 e1 d8				.dword 	$d8e1e6fc
>cd71	4b 00					.byte 	$4b,$0
>cd73	3d					.byte 	$3d   ; *** Command = ***
>cd74	01					.byte 	1     ; *** Load Float 5.651263 ***
>cd75	80 25 d7 b4				.dword 	$b4d72580
>cd79	83 00					.byte 	$83,$0
>cd7b	01					.byte 	1     ; *** Load Float 768.67 ***
>cd7c	47 e1 2a c0				.dword 	$c02ae147
>cd80	8a 00					.byte 	$8a,$0
>cd82	7e					.byte 	$7e   ; *** Command ~ ***
>cd83	01					.byte 	1     ; *** Load Float -1 ***
>cd84	00 00 00 80				.dword 	$80000000
>cd88	81 80					.byte 	$81,$80
>cd8a	3d					.byte 	$3d   ; *** Command = ***
>cd8b	01					.byte 	1     ; *** Load Float 460817417828.82715 ***
>cd8c	8c b7 95 d6				.dword 	$d695b78c
>cd90	a7 00					.byte 	$a7,$0
>cd92	01					.byte 	1     ; *** Load Float -3.0 ***
>cd93	00 00 00 c0				.dword 	$c0000000
>cd97	82 80					.byte 	$82,$80
>cd99	2f					.byte 	$2f   ; *** Command / ***
>cd9a	01					.byte 	1     ; *** Load Float -153605805942.94238 ***
>cd9b	5d 7a 0e 8f				.dword 	$8f0e7a5d
>cd9f	a6 80					.byte 	$a6,$80
>cda1	3d					.byte 	$3d   ; *** Command = ***
>cda2	01					.byte 	1     ; *** Load Float 9.59021 ***
>cda3	0a 80 71 99				.dword 	$9971800a
>cda7	84 00					.byte 	$84,$0
>cda9	01					.byte 	1     ; *** Load Float -578.88 ***
>cdaa	eb 51 b8 90				.dword 	$90b851eb
>cdae	8a 80					.byte 	$8a,$80
>cdb0	2d					.byte 	$2d   ; *** Command - ***
>cdb1	01					.byte 	1     ; *** Load Float 588.47021 ***
>cdb2	eb 17 1e 93				.dword 	$931e17eb
>cdb6	8a 00					.byte 	$8a,$0
>cdb8	3d					.byte 	$3d   ; *** Command = ***
>cdb9	01					.byte 	1     ; *** Load Float 1.561701 ***
>cdba	80 d1 e5 c7				.dword 	$c7e5d180
>cdbe	81 00					.byte 	$81,$0
>cdc0	01					.byte 	1     ; *** Load Float 9.570382 ***
>cdc1	e0 48 20 99				.dword 	$992048e0
>cdc5	84 00					.byte 	$84,$0
>cdc7	2f					.byte 	$2f   ; *** Command / ***
>cdc8	01					.byte 	1     ; *** Load Float 0.16318063375108746 ***
>cdc9	f5 d2 18 a7				.dword 	$a718d2f5
>cdcd	7e 00					.byte 	$7e,$0
>cdcf	3d					.byte 	$3d   ; *** Command = ***
>cdd0	01					.byte 	1     ; *** Load Float 0.0 ***
>cdd1	00 00 00 00				.dword 	$0
>cdd5	80 40					.byte 	$80,$40
>cdd7	01					.byte 	1     ; *** Load Float 3.085709 ***
>cdd8	99 41 7c c5				.dword 	$c57c4199
>cddc	82 00					.byte 	$82,$0
>cdde	2d					.byte 	$2d   ; *** Command - ***
>cddf	01					.byte 	1     ; *** Load Float -3.085709 ***
>cde0	99 41 7c c5				.dword 	$c57c4199
>cde4	82 80					.byte 	$82,$80
>cde6	3d					.byte 	$3d   ; *** Command = ***
>cde7	01					.byte 	1     ; *** Load Float 162.95 ***
>cde8	33 33 f3 a2				.dword 	$a2f33333
>cdec	88 00					.byte 	$88,$0
>cdee	01					.byte 	1     ; *** Load Float -7.628000275872182e-14 ***
>cdef	82 6d c4 ab				.dword 	$abc46d82
>cdf3	55 80					.byte 	$55,$80
>cdf5	2d					.byte 	$2d   ; *** Command - ***
>cdf6	01					.byte 	1     ; *** Load Float 162.95000000000007 ***
>cdf7	33 33 f3 a2				.dword 	$a2f33333
>cdfb	88 00					.byte 	$88,$0
>cdfd	3d					.byte 	$3d   ; *** Command = ***
>cdfe	01					.byte 	1     ; *** Load Float 4287563184698.556 ***
>cdff	8e ab 91 f9				.dword 	$f991ab8e
>ce03	aa 00					.byte 	$aa,$0
>ce05	01					.byte 	1     ; *** Load Float 6.0 ***
>ce06	00 00 00 c0				.dword 	$c0000000
>ce0a	83 00					.byte 	$83,$0
>ce0c	2d					.byte 	$2d   ; *** Command - ***
>ce0d	01					.byte 	1     ; *** Load Float 4287563184692.556 ***
>ce0e	8e ab 91 f9				.dword 	$f991ab8e
>ce12	aa 00					.byte 	$aa,$0
>ce14	3d					.byte 	$3d   ; *** Command = ***
>ce15	01					.byte 	1     ; *** Load Float -851.58 ***
>ce16	b8 1e e5 d4				.dword 	$d4e51eb8
>ce1a	8a 80					.byte 	$8a,$80
>ce1c	01					.byte 	1     ; *** Load Float 9.856115 ***
>ce1d	a4 a5 b2 9d				.dword 	$9db2a5a4
>ce21	84 00					.byte 	$84,$0
>ce23	7e					.byte 	$7e   ; *** Command ~ ***
>ce24	01					.byte 	1     ; *** Load Float -1 ***
>ce25	00 00 00 80				.dword 	$80000000
>ce29	81 80					.byte 	$81,$80
>ce2b	3d					.byte 	$3d   ; *** Command = ***
>ce2c	01					.byte 	1     ; *** Load Float 7.192594 ***
>ce2d	e4 ba 29 e6				.dword 	$e629bae4
>ce31	83 00					.byte 	$83,$0
>ce33	01					.byte 	1     ; *** Load Float -344.39 ***
>ce34	85 eb 31 ac				.dword 	$ac31eb85
>ce38	89 80					.byte 	$89,$80
>ce3a	7e					.byte 	$7e   ; *** Command ~ ***
>ce3b	01					.byte 	1     ; *** Load Float 1 ***
>ce3c	00 00 00 80				.dword 	$80000000
>ce40	81 00					.byte 	$81,$0
>ce42	3d					.byte 	$3d   ; *** Command = ***
>ce43	01					.byte 	1     ; *** Load Float 6.82366943359375e-06 ***
>ce44	c5 df f6 e4				.dword 	$e4f6dfc5
>ce48	6f 00					.byte 	$6f,$0
>ce4a	01					.byte 	1     ; *** Load Float -723.06 ***
>ce4b	0a d7 c3 b4				.dword 	$b4c3d70a
>ce4f	8a 80					.byte 	$8a,$80
>ce51	2d					.byte 	$2d   ; *** Command - ***
>ce52	01					.byte 	1     ; *** Load Float 723.0600068236694 ***
>ce53	26 d7 c3 b4				.dword 	$b4c3d726
>ce57	8a 00					.byte 	$8a,$0
>ce59	3d					.byte 	$3d   ; *** Command = ***
>ce5a	01					.byte 	1     ; *** Load Float 7.946966 ***
>ce5b	a4 8b 4d fe				.dword 	$fe4d8ba4
>ce5f	83 00					.byte 	$83,$0
>ce61	01					.byte 	1     ; *** Load Float 1.281187 ***
>ce62	84 ef fd a3				.dword 	$a3fdef84
>ce66	81 00					.byte 	$81,$0
>ce68	2d					.byte 	$2d   ; *** Command - ***
>ce69	01					.byte 	1     ; *** Load Float 6.665779 ***
>ce6a	c2 0f 4e d5				.dword 	$d54e0fc2
>ce6e	83 00					.byte 	$83,$0
>ce70	3d					.byte 	$3d   ; *** Command = ***
>ce71	01					.byte 	1     ; *** Load Float 199777.583104 ***
>ce72	51 65 18 c3				.dword 	$c3186551
>ce76	92 00					.byte 	$92,$0
>ce78	01					.byte 	1     ; *** Load Float -9.4802734375e-05 ***
>ce79	99 d4 d0 c6				.dword 	$c6d0d499
>ce7d	73 80					.byte 	$73,$80
>ce7f	2a					.byte 	$2a   ; *** Command * ***
>ce80	01					.byte 	1     ; *** Load Float -18.939461145088 ***
>ce81	34 04 84 97				.dword 	$97840434
>ce85	85 80					.byte 	$85,$80
>ce87	3d					.byte 	$3d   ; *** Command = ***
>ce88	01					.byte 	1     ; *** Load Float 486.79 ***
>ce89	b8 1e 65 f3				.dword 	$f3651eb8
>ce8d	89 00					.byte 	$89,$0
>ce8f	01					.byte 	1     ; *** Load Float -1540055013.261312 ***
>ce90	ca bf 96 b7				.dword 	$b796bfca
>ce94	9f 80					.byte 	$9f,$80
>ce96	2f					.byte 	$2f   ; *** Command / ***
>ce97	01					.byte 	1     ; *** Load Float -3.160861110858271e-07 ***
>ce98	58 8b b2 a9				.dword 	$a9b28b58
>ce9c	6b 80					.byte 	$6b,$80
>ce9e	3d					.byte 	$3d   ; *** Command = ***
>ce9f	01					.byte 	1     ; *** Load Float 811.61 ***
>cea0	3d 0a e7 ca				.dword 	$cae70a3d
>cea4	8a 00					.byte 	$8a,$0
>cea6	01					.byte 	1     ; *** Load Float 8.472233 ***
>cea7	30 44 8e 87				.dword 	$878e4430
>ceab	84 00					.byte 	$84,$0
>cead	2d					.byte 	$2d   ; *** Command - ***
>ceae	01					.byte 	1     ; *** Load Float 803.137767 ***
>ceaf	2c d1 c8 c8				.dword 	$c8c8d12c
>ceb3	8a 00					.byte 	$8a,$0
>ceb5	3d					.byte 	$3d   ; *** Command = ***
>ceb6	01					.byte 	1     ; *** Load Float -31028.67456 ***
>ceb7	5f 59 69 f2				.dword 	$f269595f
>cebb	8f 80					.byte 	$8f,$80
>cebd	01					.byte 	1     ; *** Load Float 5.670101 ***
>cebe	a7 77 71 b5				.dword 	$b57177a7
>cec2	83 00					.byte 	$83,$0
>cec4	2b					.byte 	$2b   ; *** Command + ***
>cec5	01					.byte 	1     ; *** Load Float -31023.004459 ***
>cec6	48 02 5e f2				.dword 	$f25e0248
>ceca	8f 80					.byte 	$8f,$80
>cecc	3d					.byte 	$3d   ; *** Command = ***
>cecd	01					.byte 	1     ; *** Load Float -2.9173736572265625e-06 ***
>cece	08 19 c8 c3				.dword 	$c3c81908
>ced2	6e 80					.byte 	$6e,$80
>ced4	01					.byte 	1     ; *** Load Float 9662418.1248 ***
>ced5	1f d2 6f 93				.dword 	$936fd21f
>ced9	98 00					.byte 	$98,$0
>cedb	2f					.byte 	$2f   ; *** Command / ***
>cedc	01					.byte 	1     ; *** Load Float -3.019299744169318e-13 ***
>cedd	ee b1 f8 a9				.dword 	$a9f8b1ee
>cee1	57 80					.byte 	$57,$80
>cee3	3d					.byte 	$3d   ; *** Command = ***
>cee4	01					.byte 	1     ; *** Load Float 4.472103 ***
>cee5	c0 77 1b 8f				.dword 	$8f1b77c0
>cee9	83 00					.byte 	$83,$0
>ceeb	01					.byte 	1     ; *** Load Float 17.0 ***
>ceec	00 00 00 88				.dword 	$88000000
>cef0	85 00					.byte 	$85,$0
>cef2	7e					.byte 	$7e   ; *** Command ~ ***
>cef3	01					.byte 	1     ; *** Load Float -1 ***
>cef4	00 00 00 80				.dword 	$80000000
>cef8	81 80					.byte 	$81,$80
>cefa	3d					.byte 	$3d   ; *** Command = ***
>cefb	01					.byte 	1     ; *** Load Float 689.43 ***
>cefc	1e 85 5b ac				.dword 	$ac5b851e
>cf00	8a 00					.byte 	$8a,$0
>cf02	01					.byte 	1     ; *** Load Float -11.0 ***
>cf03	00 00 00 b0				.dword 	$b0000000
>cf07	84 80					.byte 	$84,$80
>cf09	2d					.byte 	$2d   ; *** Command - ***
>cf0a	01					.byte 	1     ; *** Load Float 700.43 ***
>cf0b	1e 85 1b af				.dword 	$af1b851e
>cf0f	8a 00					.byte 	$8a,$0
>cf11	3d					.byte 	$3d   ; *** Command = ***
>cf12	01					.byte 	1     ; *** Load Float 5.0 ***
>cf13	00 00 00 a0				.dword 	$a0000000
>cf17	83 00					.byte 	$83,$0
>cf19	01					.byte 	1     ; *** Load Float 5.0 ***
>cf1a	00 00 00 a0				.dword 	$a0000000
>cf1e	83 00					.byte 	$83,$0
>cf20	2d					.byte 	$2d   ; *** Command - ***
>cf21	01					.byte 	1     ; *** Load Float 0.0 ***
>cf22	00 00 00 00				.dword 	$0
>cf26	80 40					.byte 	$80,$40
>cf28	3d					.byte 	$3d   ; *** Command = ***
>cf29	01					.byte 	1     ; *** Load Float 2.4579662749601995e-14 ***
>cf2a	f0 d7 64 dd				.dword 	$dd64d7f0
>cf2e	53 00					.byte 	$53,$0
>cf30	01					.byte 	1     ; *** Load Float 20.0 ***
>cf31	00 00 00 a0				.dword 	$a0000000
>cf35	85 00					.byte 	$85,$0
>cf37	7e					.byte 	$7e   ; *** Command ~ ***
>cf38	01					.byte 	1     ; *** Load Float -1 ***
>cf39	00 00 00 80				.dword 	$80000000
>cf3d	81 80					.byte 	$81,$80
>cf3f	3d					.byte 	$3d   ; *** Command = ***
>cf40	01					.byte 	1     ; *** Load Float 0.21583 ***
>cf41	1d 8a 02 dd				.dword 	$dd028a1d
>cf45	7e 00					.byte 	$7e,$0
>cf47	01					.byte 	1     ; *** Load Float -144962662.43276802 ***
>cf48	66 46 3f 8a				.dword 	$8a3f4666
>cf4c	9c 80					.byte 	$9c,$80
>cf4e	2f					.byte 	$2f   ; *** Command / ***
>cf4f	01					.byte 	1     ; *** Load Float -1.4888661423426837e-09 ***
>cf50	01 d2 a0 cc				.dword 	$cca0d201
>cf54	63 80					.byte 	$63,$80
>cf56	3d					.byte 	$3d   ; *** Command = ***
>cf57	01					.byte 	1     ; *** Load Float 5.378334 ***
>cf58	e7 4f 1b ac				.dword 	$ac1b4fe7
>cf5c	83 00					.byte 	$83,$0
>cf5e	01					.byte 	1     ; *** Load Float 0.0 ***
>cf5f	00 00 00 00				.dword 	$0
>cf63	80 40					.byte 	$80,$40
>cf65	2d					.byte 	$2d   ; *** Command - ***
>cf66	01					.byte 	1     ; *** Load Float 5.378334 ***
>cf67	e7 4f 1b ac				.dword 	$ac1b4fe7
>cf6b	83 00					.byte 	$83,$0
>cf6d	3d					.byte 	$3d   ; *** Command = ***
>cf6e	01					.byte 	1     ; *** Load Float -941.46 ***
>cf6f	a3 70 5d eb				.dword 	$eb5d70a3
>cf73	8a 80					.byte 	$8a,$80
>cf75	01					.byte 	1     ; *** Load Float 7.043296 ***
>cf76	4b ae 62 e1				.dword 	$e162ae4b
>cf7a	83 00					.byte 	$83,$0
>cf7c	2f					.byte 	$2f   ; *** Command / ***
>cf7d	01					.byte 	1     ; *** Load Float -133.66753292776565 ***
>cf7e	70 e3 aa 85				.dword 	$85aae370
>cf82	88 80					.byte 	$88,$80
>cf84	3d					.byte 	$3d   ; *** Command = ***
>cf85	01					.byte 	1     ; *** Load Float 0.775952 ***
>cf86	4f ca a4 c6				.dword 	$c6a4ca4f
>cf8a	80 00					.byte 	$80,$0
>cf8c	01					.byte 	1     ; *** Load Float 698.47 ***
>cf8d	7a 14 9e ae				.dword 	$ae9e147a
>cf91	8a 00					.byte 	$8a,$0
>cf93	7e					.byte 	$7e   ; *** Command ~ ***
>cf94	01					.byte 	1     ; *** Load Float -1 ***
>cf95	00 00 00 80				.dword 	$80000000
>cf99	81 80					.byte 	$81,$80
>cf9b	3d					.byte 	$3d   ; *** Command = ***
>cf9c	01					.byte 	1     ; *** Load Float 2.0 ***
>cf9d	00 00 00 80				.dword 	$80000000
>cfa1	82 00					.byte 	$82,$0
>cfa3	01					.byte 	1     ; *** Load Float 5.236583 ***
>cfa4	82 16 92 a7				.dword 	$a7921682
>cfa8	83 00					.byte 	$83,$0
>cfaa	7e					.byte 	$7e   ; *** Command ~ ***
>cfab	01					.byte 	1     ; *** Load Float -1 ***
>cfac	00 00 00 80				.dword 	$80000000
>cfb0	81 80					.byte 	$81,$80
>cfb2	3d					.byte 	$3d   ; *** Command = ***
>cfb3	01					.byte 	1     ; *** Load Float 3.736818 ***
>cfb4	af 06 28 ef				.dword 	$ef2806af
>cfb8	82 00					.byte 	$82,$0
>cfba	01					.byte 	1     ; *** Load Float 0.0 ***
>cfbb	00 00 00 00				.dword 	$0
>cfbf	80 40					.byte 	$80,$40
>cfc1	7e					.byte 	$7e   ; *** Command ~ ***
>cfc2	01					.byte 	1     ; *** Load Float 1 ***
>cfc3	00 00 00 80				.dword 	$80000000
>cfc7	81 00					.byte 	$81,$0
>cfc9	3d					.byte 	$3d   ; *** Command = ***
>cfca	01					.byte 	1     ; *** Load Float 8.43554 ***
>cfcb	ca f8 f7 86				.dword 	$86f7f8ca
>cfcf	84 00					.byte 	$84,$0
>cfd1	01					.byte 	1     ; *** Load Float 553.3 ***
>cfd2	33 33 53 8a				.dword 	$8a533333
>cfd6	8a 00					.byte 	$8a,$0
>cfd8	7e					.byte 	$7e   ; *** Command ~ ***
>cfd9	01					.byte 	1     ; *** Load Float -1 ***
>cfda	00 00 00 80				.dword 	$80000000
>cfde	81 80					.byte 	$81,$80
>cfe0	3d					.byte 	$3d   ; *** Command = ***
>cfe1	01					.byte 	1     ; *** Load Float 6.289341 ***
>cfe2	0e 48 42 c9				.dword 	$c942480e
>cfe6	83 00					.byte 	$83,$0
>cfe8	01					.byte 	1     ; *** Load Float -6.0 ***
>cfe9	00 00 00 c0				.dword 	$c0000000
>cfed	83 80					.byte 	$83,$80
>cfef	2f					.byte 	$2f   ; *** Command / ***
>cff0	01					.byte 	1     ; *** Load Float -1.0482235 ***
>cff1	09 30 2c 86				.dword 	$862c3009
>cff5	81 80					.byte 	$81,$80
>cff7	3d					.byte 	$3d   ; *** Command = ***
>cff8	01					.byte 	1     ; *** Load Float 5.453465 ***
>cff9	08 c9 82 ae				.dword 	$ae82c908
>cffd	83 00					.byte 	$83,$0
>cfff	01					.byte 	1     ; *** Load Float 91780.808704 ***
>d000	83 67 42 b3				.dword 	$b3426783
>d004	91 00					.byte 	$91,$0
>d006	7e					.byte 	$7e   ; *** Command ~ ***
>d007	01					.byte 	1     ; *** Load Float -1 ***
>d008	00 00 00 80				.dword 	$80000000
>d00c	81 80					.byte 	$81,$80
>d00e	3d					.byte 	$3d   ; *** Command = ***
>d00f	01					.byte 	1     ; *** Load Float 3.365288 ***
>d010	eb e0 60 d7				.dword 	$d760e0eb
>d014	82 00					.byte 	$82,$0
>d016	01					.byte 	1     ; *** Load Float 568.74 ***
>d017	28 5c 2f 8e				.dword 	$8e2f5c28
>d01b	8a 00					.byte 	$8a,$0
>d01d	2a					.byte 	$2a   ; *** Command * ***
>d01e	01					.byte 	1     ; *** Load Float 1913.9738971200002 ***
>d01f	2a 2a 3f ef				.dword 	$ef3f2a2a
>d023	8b 00					.byte 	$8b,$0
>d025	3d					.byte 	$3d   ; *** Command = ***
>d026	01					.byte 	1     ; *** Load Float 6.799443 ***
>d027	7c 09 95 d9				.dword 	$d995097c
>d02b	83 00					.byte 	$83,$0
>d02d	01					.byte 	1     ; *** Load Float -104252.309504 ***
>d02e	9d 27 9e cb				.dword 	$cb9e279d
>d032	91 80					.byte 	$91,$80
>d034	2d					.byte 	$2d   ; *** Command - ***
>d035	01					.byte 	1     ; *** Load Float 104259.108947 ***
>d036	f1 8d a1 cb				.dword 	$cba18df1
>d03a	91 00					.byte 	$91,$0
>d03c	3d					.byte 	$3d   ; *** Command = ***
>d03d	01					.byte 	1     ; *** Load Float 9.067547 ***
>d03e	29 ac 14 91				.dword 	$9114ac29
>d042	84 00					.byte 	$84,$0
>d044	01					.byte 	1     ; *** Load Float 3.226348 ***
>d045	52 7c 7c ce				.dword 	$ce7c7c52
>d049	82 00					.byte 	$82,$0
>d04b	7e					.byte 	$7e   ; *** Command ~ ***
>d04c	01					.byte 	1     ; *** Load Float 1 ***
>d04d	00 00 00 80				.dword 	$80000000
>d051	81 00					.byte 	$81,$0
>d053	3d					.byte 	$3d   ; *** Command = ***
>d054	01					.byte 	1     ; *** Load Float 4.217152 ***
>d055	c0 e8 f2 86				.dword 	$86f2e8c0
>d059	83 00					.byte 	$83,$0
>d05b	01					.byte 	1     ; *** Load Float 19.0 ***
>d05c	00 00 00 98				.dword 	$98000000
>d060	85 00					.byte 	$85,$0
>d062	2b					.byte 	$2b   ; *** Command + ***
>d063	01					.byte 	1     ; *** Load Float 23.217152 ***
>d064	30 ba bc b9				.dword 	$b9bcba30
>d068	85 00					.byte 	$85,$0
>d06a	3d					.byte 	$3d   ; *** Command = ***
>d06b	01					.byte 	1     ; *** Load Float 116.89 ***
>d06c	14 ae c7 e9				.dword 	$e9c7ae14
>d070	87 00					.byte 	$87,$0
>d072	01					.byte 	1     ; *** Load Float -556036.784128 ***
>d073	8b 4c c0 87				.dword 	$87c04c8b
>d077	94 80					.byte 	$94,$80
>d079	2a					.byte 	$2a   ; *** Command * ***
>d07a	01					.byte 	1     ; *** Load Float -64995139.69672193 ***
>d07b	ec d0 ef f7				.dword 	$f7efd0ec
>d07f	9a 80					.byte 	$9a,$80
>d081	3d					.byte 	$3d   ; *** Command = ***
>d082	01					.byte 	1     ; *** Load Float -913.26 ***
>d083	d7 a3 50 e4				.dword 	$e450a3d7
>d087	8a 80					.byte 	$8a,$80
>d089	01					.byte 	1     ; *** Load Float 371.45 ***
>d08a	99 99 b9 b9				.dword 	$b9b99999
>d08e	89 00					.byte 	$89,$0
>d090	2a					.byte 	$2a   ; *** Command * ***
>d091	01					.byte 	1     ; *** Load Float -339230.42699999997 ***
>d092	a9 cd a3 a5				.dword 	$a5a3cda9
>d096	93 80					.byte 	$93,$80
>d098	3d					.byte 	$3d   ; *** Command = ***
>d099	01					.byte 	1     ; *** Load Float -26672159225.020416 ***
>d09a	3f 1b b9 c6				.dword 	$c6b91b3f
>d09e	a3 80					.byte 	$a3,$80
>d0a0	01					.byte 	1     ; *** Load Float 8.0 ***
>d0a1	00 00 00 80				.dword 	$80000000
>d0a5	84 00					.byte 	$84,$0
>d0a7	2f					.byte 	$2f   ; *** Command / ***
>d0a8	01					.byte 	1     ; *** Load Float -3334019903.127552 ***
>d0a9	3f 1b b9 c6				.dword 	$c6b91b3f
>d0ad	a0 80					.byte 	$a0,$80
>d0af	3d					.byte 	$3d   ; *** Command = ***
>d0b0	01					.byte 	1     ; *** Load Float 882.51 ***
>d0b1	d7 a3 a0 dc				.dword 	$dca0a3d7
>d0b5	8a 00					.byte 	$8a,$0
>d0b7	01					.byte 	1     ; *** Load Float 2056990834.556928 ***
>d0b8	e5 60 36 f5				.dword 	$f53660e5
>d0bc	9f 00					.byte 	$9f,$0
>d0be	2a					.byte 	$2a   ; *** Command * ***
>d0bf	01					.byte 	1     ; *** Load Float 1815314981404.8345 ***
>d0c0	31 9a 54 d3				.dword 	$d3549a31
>d0c4	a9 00					.byte 	$a9,$0
>d0c6	3d					.byte 	$3d   ; *** Command = ***
>d0c7	01					.byte 	1     ; *** Load Float -49.63 ***
>d0c8	b8 1e 85 c6				.dword 	$c6851eb8
>d0cc	86 80					.byte 	$86,$80
>d0ce	01					.byte 	1     ; *** Load Float -465.8 ***
>d0cf	66 66 e6 e8				.dword 	$e8e66666
>d0d3	89 80					.byte 	$89,$80
>d0d5	2a					.byte 	$2a   ; *** Command * ***
>d0d6	01					.byte 	1     ; *** Load Float 23117.654000000002 ***
>d0d7	d9 4e 9b b4				.dword 	$b49b4ed9
>d0db	8f 00					.byte 	$8f,$0
>d0dd	3d					.byte 	$3d   ; *** Command = ***
>d0de	01					.byte 	1     ; *** Load Float -15682265627.492352 ***
>d0df	86 18 af e9				.dword 	$e9af1886
>d0e3	a2 80					.byte 	$a2,$80
>d0e5	01					.byte 	1     ; *** Load Float 854.84 ***
>d0e6	8f c2 b5 d5				.dword 	$d5b5c28f
>d0ea	8a 00					.byte 	$8a,$0
>d0ec	2f					.byte 	$2f   ; *** Command / ***
>d0ed	01					.byte 	1     ; *** Load Float -18345264.175158333 ***
>d0ee	16 98 f6 8b				.dword 	$8bf69816
>d0f2	99 80					.byte 	$99,$80
>d0f4	3d					.byte 	$3d   ; *** Command = ***
>d0f5	01					.byte 	1     ; *** Load Float 784.14 ***
>d0f6	c2 f5 08 c4				.dword 	$c408f5c2
>d0fa	8a 00					.byte 	$8a,$0
>d0fc	01					.byte 	1     ; *** Load Float 129.61 ***
>d0fd	f5 28 9c 81				.dword 	$819c28f5
>d101	88 00					.byte 	$88,$0
>d103	7e					.byte 	$7e   ; *** Command ~ ***
>d104	01					.byte 	1     ; *** Load Float 1 ***
>d105	00 00 00 80				.dword 	$80000000
>d109	81 00					.byte 	$81,$0
>d10b	3d					.byte 	$3d   ; *** Command = ***
>d10c	01					.byte 	1     ; *** Load Float -474.65 ***
>d10d	33 33 53 ed				.dword 	$ed533333
>d111	89 80					.byte 	$89,$80
>d113	01					.byte 	1     ; *** Load Float 659.93 ***
>d114	1e 85 fb a4				.dword 	$a4fb851e
>d118	8a 00					.byte 	$8a,$0
>d11a	2a					.byte 	$2a   ; *** Command * ***
>d11b	01					.byte 	1     ; *** Load Float -313235.77449999994 ***
>d11c	c8 78 f2 98				.dword 	$98f278c8
>d120	93 80					.byte 	$93,$80
>d122	3d					.byte 	$3d   ; *** Command = ***
>d123	01					.byte 	1     ; *** Load Float 918.98 ***
>d124	51 b8 be e5				.dword 	$e5beb851
>d128	8a 00					.byte 	$8a,$0
>d12a	01					.byte 	1     ; *** Load Float -1.383606344461441e-09 ***
>d12b	08 52 29 be				.dword 	$be295208
>d12f	63 80					.byte 	$63,$80
>d131	7e					.byte 	$7e   ; *** Command ~ ***
>d132	01					.byte 	1     ; *** Load Float 1 ***
>d133	00 00 00 80				.dword 	$80000000
>d137	81 00					.byte 	$81,$0
>d139	3d					.byte 	$3d   ; *** Command = ***
>d13a	01					.byte 	1     ; *** Load Float 8.051139 ***
>d13b	20 77 d1 80				.dword 	$80d17720
>d13f	84 00					.byte 	$84,$0
>d141	01					.byte 	1     ; *** Load Float 433.6 ***
>d142	cc cc cc d8				.dword 	$d8cccccc
>d146	89 00					.byte 	$89,$0
>d148	7e					.byte 	$7e   ; *** Command ~ ***
>d149	01					.byte 	1     ; *** Load Float -1 ***
>d14a	00 00 00 80				.dword 	$80000000
>d14e	81 80					.byte 	$81,$80
>d150	3d					.byte 	$3d   ; *** Command = ***
>d151	01					.byte 	1     ; *** Load Float 10.0 ***
>d152	00 00 00 a0				.dword 	$a0000000
>d156	84 00					.byte 	$84,$0
>d158	01					.byte 	1     ; *** Load Float 18.0 ***
>d159	00 00 00 90				.dword 	$90000000
>d15d	85 00					.byte 	$85,$0
>d15f	2f					.byte 	$2f   ; *** Command / ***
>d160	01					.byte 	1     ; *** Load Float 0.5555555555555556 ***
>d161	8e e3 38 8e				.dword 	$8e38e38e
>d165	80 00					.byte 	$80,$0
>d167	3d					.byte 	$3d   ; *** Command = ***
>d168	01					.byte 	1     ; *** Load Float -89.0 ***
>d169	00 00 00 b2				.dword 	$b2000000
>d16d	87 80					.byte 	$87,$80
>d16f	01					.byte 	1     ; *** Load Float 444237332237.77893 ***
>d170	7e 37 dd ce				.dword 	$cedd377e
>d174	a7 00					.byte 	$a7,$0
>d176	2f					.byte 	$2f   ; *** Command / ***
>d177	01					.byte 	1     ; *** Load Float -2.0034336049983878e-10 ***
>d178	8a a4 47 dc				.dword 	$dc47a48a
>d17c	60 80					.byte 	$60,$80
>d17e	3d					.byte 	$3d   ; *** Command = ***
>d17f	01					.byte 	1     ; *** Load Float -18.04 ***
>d180	85 eb 51 90				.dword 	$9051eb85
>d184	85 80					.byte 	$85,$80
>d186	01					.byte 	1     ; *** Load Float 239554.002944 ***
>d187	30 80 f0 e9				.dword 	$e9f08030
>d18b	92 00					.byte 	$92,$0
>d18d	2f					.byte 	$2f   ; *** Command / ***
>d18e	01					.byte 	1     ; *** Load Float -7.530661052746912e-05 ***
>d18f	bd ed ed 9d				.dword 	$9dededbd
>d193	73 80					.byte 	$73,$80
>d195	3d					.byte 	$3d   ; *** Command = ***
>d196	01					.byte 	1     ; *** Load Float -5.271549224853515e-07 ***
>d197	78 cf 81 8d				.dword 	$8d81cf78
>d19b	6c 80					.byte 	$6c,$80
>d19d	01					.byte 	1     ; *** Load Float 9.0 ***
>d19e	00 00 00 90				.dword 	$90000000
>d1a2	84 00					.byte 	$84,$0
>d1a4	7e					.byte 	$7e   ; *** Command ~ ***
>d1a5	01					.byte 	1     ; *** Load Float -1 ***
>d1a6	00 00 00 80				.dword 	$80000000
>d1aa	81 80					.byte 	$81,$80
>d1ac	3d					.byte 	$3d   ; *** Command = ***
>d1ad	01					.byte 	1     ; *** Load Float 6.170696 ***
>d1ae	75 57 76 c5				.dword 	$c5765775
>d1b2	83 00					.byte 	$83,$0
>d1b4	01					.byte 	1     ; *** Load Float -880.11 ***
>d1b5	3d 0a 07 dc				.dword 	$dc070a3d
>d1b9	8a 80					.byte 	$8a,$80
>d1bb	2b					.byte 	$2b   ; *** Command + ***
>d1bc	01					.byte 	1     ; *** Load Float -873.939304 ***
>d1bd	8e 1d 7c da				.dword 	$da7c1d8e
>d1c1	8a 80					.byte 	$8a,$80
>d1c3	3d					.byte 	$3d   ; *** Command = ***
>d1c4	01					.byte 	1     ; *** Load Float 1.117164 ***
>d1c5	de 3a ff 8e				.dword 	$8eff3ade
>d1c9	81 00					.byte 	$81,$0
>d1cb	01					.byte 	1     ; *** Load Float -814.56 ***
>d1cc	0a d7 a3 cb				.dword 	$cba3d70a
>d1d0	8a 80					.byte 	$8a,$80
>d1d2	2a					.byte 	$2a   ; *** Command * ***
>d1d3	01					.byte 	1     ; *** Load Float -909.99710784 ***
>d1d4	9d d0 7f e3				.dword 	$e37fd09d
>d1d8	8a 80					.byte 	$8a,$80
>d1da	3d					.byte 	$3d   ; *** Command = ***
>d1db	01					.byte 	1     ; *** Load Float 331.15 ***
>d1dc	33 33 93 a5				.dword 	$a5933333
>d1e0	89 00					.byte 	$89,$0
>d1e2	01					.byte 	1     ; *** Load Float 1663.213568 ***
>d1e3	8c d5 e6 cf				.dword 	$cfe6d58c
>d1e7	8b 00					.byte 	$8b,$0
>d1e9	2a					.byte 	$2a   ; *** Command * ***
>d1ea	01					.byte 	1     ; *** Load Float 550773.1730431999 ***
>d1eb	c4 52 77 86				.dword 	$867752c4
>d1ef	94 00					.byte 	$94,$0
>d1f1	3d					.byte 	$3d   ; *** Command = ***
>d1f2	01					.byte 	1     ; *** Load Float 7.718705 ***
>d1f3	a0 a1 ff f6				.dword 	$f6ffa1a0
>d1f7	83 00					.byte 	$83,$0
>d1f9	01					.byte 	1     ; *** Load Float 4.061181 ***
>d1fa	db 31 f5 81				.dword 	$81f531db
>d1fe	83 00					.byte 	$83,$0
>d200	2a					.byte 	$2a   ; *** Command * ***
>d201	01					.byte 	1     ; *** Load Float 31.347058090605003 ***
>d202	64 c6 c6 fa				.dword 	$fac6c664
>d206	85 00					.byte 	$85,$0
>d208	3d					.byte 	$3d   ; *** Command = ***
>d209	01					.byte 	1     ; *** Load Float 3.648734 ***
>d20a	9c db 84 e9				.dword 	$e984db9c
>d20e	82 00					.byte 	$82,$0
>d210	01					.byte 	1     ; *** Load Float 8.389044 ***
>d211	33 86 39 86				.dword 	$86398633
>d215	84 00					.byte 	$84,$0
>d217	2f					.byte 	$2f   ; *** Command / ***
>d218	01					.byte 	1     ; *** Load Float 0.43494038176459676 ***
>d219	76 81 b0 de				.dword 	$deb08176
>d21d	7f 00					.byte 	$7f,$0
>d21f	3d					.byte 	$3d   ; *** Command = ***
>d220	01					.byte 	1     ; *** Load Float -596.71 ***
>d221	a3 70 2d 95				.dword 	$952d70a3
>d225	8a 80					.byte 	$8a,$80
>d227	01					.byte 	1     ; *** Load Float 1.3209455573814923e-13 ***
>d228	da a9 b9 94				.dword 	$94b9a9da
>d22c	56 00					.byte 	$56,$0
>d22e	2f					.byte 	$2f   ; *** Command / ***
>d22f	01					.byte 	1     ; *** Load Float -4517294423419365.0 ***
>d230	8b a4 63 80				.dword 	$8063a48b
>d234	b5 80					.byte 	$b5,$80
>d236	3d					.byte 	$3d   ; *** Command = ***
>d237	01					.byte 	1     ; *** Load Float -5.4829521104693414e-11 ***
>d238	7e 8d 24 f1				.dword 	$f1248d7e
>d23c	5e 80					.byte 	$5e,$80
>d23e	01					.byte 	1     ; *** Load Float -11.0 ***
>d23f	00 00 00 b0				.dword 	$b0000000
>d243	84 80					.byte 	$84,$80
>d245	2f					.byte 	$2f   ; *** Command / ***
>d246	01					.byte 	1     ; *** Load Float 4.984501918608492e-12 ***
>d247	e7 66 60 af				.dword 	$af6066e7
>d24b	5b 00					.byte 	$5b,$0
>d24d	3d					.byte 	$3d   ; *** Command = ***
>d24e	01					.byte 	1     ; *** Load Float 3.887748 ***
>d24f	fc dc d0 f8				.dword 	$f8d0dcfc
>d253	82 00					.byte 	$82,$0
>d255	01					.byte 	1     ; *** Load Float 4189926552152.0474 ***
>d256	5c c5 e2 f3				.dword 	$f3e2c55c
>d25a	aa 00					.byte 	$aa,$0
>d25c	2a					.byte 	$2a   ; *** Command * ***
>d25d	01					.byte 	1     ; *** Load Float 16289378573276.02 ***
>d25e	f9 a9 0a ed				.dword 	$ed0aa9f9
>d262	ac 00					.byte 	$ac,$0
>d264	3d					.byte 	$3d   ; *** Command = ***
>d265	01					.byte 	1     ; *** Load Float -1992675709344.0225 ***
>d266	28 5d fa e7				.dword 	$e7fa5d28
>d26a	a9 80					.byte 	$a9,$80
>d26c	01					.byte 	1     ; *** Load Float 311972130730.27893 ***
>d26d	df f9 45 91				.dword 	$9145f9df
>d271	a7 00					.byte 	$a7,$0
>d273	2b					.byte 	$2b   ; *** Command + ***
>d274	01					.byte 	1     ; *** Load Float -1680703578613.7437 ***
>d275	b0 de a8 c3				.dword 	$c3a8deb0
>d279	a9 80					.byte 	$a9,$80
>d27b	3d					.byte 	$3d   ; *** Command = ***
>d27c	01					.byte 	1     ; *** Load Float -578.06 ***
>d27d	0a d7 83 90				.dword 	$9083d70a
>d281	8a 80					.byte 	$8a,$80
>d283	01					.byte 	1     ; *** Load Float -3.292370820418e-13 ***
>d284	62 10 58 b9				.dword 	$b9581062
>d288	57 80					.byte 	$57,$80
>d28a	2b					.byte 	$2b   ; *** Command + ***
>d28b	01					.byte 	1     ; *** Load Float -578.0600000000003 ***
>d28c	0a d7 83 90				.dword 	$9083d70a
>d290	8a 80					.byte 	$8a,$80
>d292	3d					.byte 	$3d   ; *** Command = ***
>d293	01					.byte 	1     ; *** Load Float -5011445150.384128 ***
>d294	cf 4a 5a 95				.dword 	$955a4acf
>d298	a1 80					.byte 	$a1,$80
>d29a	01					.byte 	1     ; *** Load Float 8.02434515208006e-11 ***
>d29b	1b 0c 75 b0				.dword 	$b0750c1b
>d29f	5f 00					.byte 	$5f,$0
>d2a1	2f					.byte 	$2f   ; *** Command / ***
>d2a2	01					.byte 	1     ; *** Load Float -6.2453010873853895e+19 ***
>d2a3	9f 6a ad d8				.dword 	$d8ad6a9f
>d2a7	c2 80					.byte 	$c2,$80
>d2a9	3d					.byte 	$3d   ; *** Command = ***
>d2aa	01					.byte 	1     ; *** Load Float 2.039421 ***
>d2ab	a8 df 85 82				.dword 	$8285dfa8
>d2af	82 00					.byte 	$82,$0
>d2b1	01					.byte 	1     ; *** Load Float 7.215172 ***
>d2b2	63 b0 e2 e6				.dword 	$e6e2b063
>d2b6	83 00					.byte 	$83,$0
>d2b8	2f					.byte 	$2f   ; *** Command / ***
>d2b9	01					.byte 	1     ; *** Load Float 0.28265729493350955 ***
>d2ba	fb 74 b8 90				.dword 	$90b874fb
>d2be	7f 00					.byte 	$7f,$0
>d2c0	3d					.byte 	$3d   ; *** Command = ***
>d2c1	01					.byte 	1     ; *** Load Float 2.3107190827431622e-14 ***
>d2c2	ef 8d 21 d0				.dword 	$d0218def
>d2c6	53 00					.byte 	$53,$0
>d2c8	01					.byte 	1     ; *** Load Float -9.0 ***
>d2c9	00 00 00 90				.dword 	$90000000
>d2cd	84 80					.byte 	$84,$80
>d2cf	2f					.byte 	$2f   ; *** Command / ***
>d2d0	01					.byte 	1     ; *** Load Float -2.5674656474924024e-15 ***
>d2d1	b8 61 01 b9				.dword 	$b90161b8
>d2d5	50 80					.byte 	$50,$80
>d2d7	3d					.byte 	$3d   ; *** Command = ***
>d2d8	01					.byte 	1     ; *** Load Float 18.0 ***
>d2d9	00 00 00 90				.dword 	$90000000
>d2dd	85 00					.byte 	$85,$0
>d2df	01					.byte 	1     ; *** Load Float -310.38 ***
>d2e0	d7 a3 30 9b				.dword 	$9b30a3d7
>d2e4	89 80					.byte 	$89,$80
>d2e6	2d					.byte 	$2d   ; *** Command - ***
>d2e7	01					.byte 	1     ; *** Load Float 328.38 ***
>d2e8	d7 a3 30 a4				.dword 	$a430a3d7
>d2ec	89 00					.byte 	$89,$0
>d2ee	3d					.byte 	$3d   ; *** Command = ***
>d2ef	01					.byte 	1     ; *** Load Float 7.778993 ***
>d2f0	ba 82 ed f8				.dword 	$f8ed82ba
>d2f4	83 00					.byte 	$83,$0
>d2f6	01					.byte 	1     ; *** Load Float 1.8978624893861706e-14 ***
>d2f7	c2 ba f1 aa				.dword 	$aaf1bac2
>d2fb	53 00					.byte 	$53,$0
>d2fd	7e					.byte 	$7e   ; *** Command ~ ***
>d2fe	01					.byte 	1     ; *** Load Float 1 ***
>d2ff	00 00 00 80				.dword 	$80000000
>d303	81 00					.byte 	$81,$0
>d305	3d					.byte 	$3d   ; *** Command = ***
>d306	01					.byte 	1     ; *** Load Float -6.0 ***
>d307	00 00 00 c0				.dword 	$c0000000
>d30b	83 80					.byte 	$83,$80
>d30d	01					.byte 	1     ; *** Load Float 9.0 ***
>d30e	00 00 00 90				.dword 	$90000000
>d312	84 00					.byte 	$84,$0
>d314	7e					.byte 	$7e   ; *** Command ~ ***
>d315	01					.byte 	1     ; *** Load Float -1 ***
>d316	00 00 00 80				.dword 	$80000000
>d31a	81 80					.byte 	$81,$80
>d31c	3d					.byte 	$3d   ; *** Command = ***
>d31d	01					.byte 	1     ; *** Load Float -577329.168384 ***
>d31e	b1 12 f3 8c				.dword 	$8cf312b1
>d322	94 80					.byte 	$94,$80
>d324	01					.byte 	1     ; *** Load Float 350.48 ***
>d325	a3 70 3d af				.dword 	$af3d70a3
>d329	89 00					.byte 	$89,$0
>d32b	2f					.byte 	$2f   ; *** Command / ***
>d32c	01					.byte 	1     ; *** Load Float -1647.252820086738 ***
>d32d	1a 17 e8 cd				.dword 	$cde8171a
>d331	8b 80					.byte 	$8b,$80
>d333	3d					.byte 	$3d   ; *** Command = ***
>d334	01					.byte 	1     ; *** Load Float 362.09 ***
>d335	1e 85 0b b5				.dword 	$b50b851e
>d339	89 00					.byte 	$89,$0
>d33b	01					.byte 	1     ; *** Load Float -63168365.723648 ***
>d33c	6e db f7 f0				.dword 	$f0f7db6e
>d340	9a 80					.byte 	$9a,$80
>d342	2a					.byte 	$2a   ; *** Command * ***
>d343	01					.byte 	1     ; *** Load Float -22872633544.8757 ***
>d344	19 16 6a aa				.dword 	$aa6a1619
>d348	a3 80					.byte 	$a3,$80
>d34a	3d					.byte 	$3d   ; *** Command = ***
>d34b	01					.byte 	1     ; *** Load Float -842.21 ***
>d34c	a3 70 8d d2				.dword 	$d28d70a3
>d350	8a 80					.byte 	$8a,$80
>d352	01					.byte 	1     ; *** Load Float 79291941.388288 ***
>d353	ac c4 3c 97				.dword 	$973cc4ac
>d357	9b 00					.byte 	$9b,$0
>d359	7e					.byte 	$7e   ; *** Command ~ ***
>d35a	01					.byte 	1     ; *** Load Float -1 ***
>d35b	00 00 00 80				.dword 	$80000000
>d35f	81 80					.byte 	$81,$80
>d361	3d					.byte 	$3d   ; *** Command = ***
>d362	01					.byte 	1     ; *** Load Float -1.5239138156175614e-09 ***
>d363	62 f3 71 d1				.dword 	$d171f362
>d367	63 80					.byte 	$63,$80
>d369	01					.byte 	1     ; *** Load Float -696.69 ***
>d36a	f5 28 2c ae				.dword 	$ae2c28f5
>d36e	8a 80					.byte 	$8a,$80
>d370	2d					.byte 	$2d   ; *** Command - ***
>d371	01					.byte 	1     ; *** Load Float 696.6899999984762 ***
>d372	f5 28 2c ae				.dword 	$ae2c28f5
>d376	8a 00					.byte 	$8a,$0
>d378	3d					.byte 	$3d   ; *** Command = ***
>d379	01					.byte 	1     ; *** Load Float 6.23679 ***
>d37a	9f c8 93 c7				.dword 	$c793c89f
>d37e	83 00					.byte 	$83,$0
>d380	01					.byte 	1     ; *** Load Float -24370617.516032 ***
>d381	c2 dc ee b9				.dword 	$b9eedcc2
>d385	99 80					.byte 	$99,$80
>d387	7e					.byte 	$7e   ; *** Command ~ ***
>d388	01					.byte 	1     ; *** Load Float 1 ***
>d389	00 00 00 80				.dword 	$80000000
>d38d	81 00					.byte 	$81,$0
>d38f	3d					.byte 	$3d   ; *** Command = ***
>d390	01					.byte 	1     ; *** Load Float -4.0 ***
>d391	00 00 00 80				.dword 	$80000000
>d395	83 80					.byte 	$83,$80
>d397	01					.byte 	1     ; *** Load Float -4.0 ***
>d398	00 00 00 80				.dword 	$80000000
>d39c	83 80					.byte 	$83,$80
>d39e	2d					.byte 	$2d   ; *** Command - ***
>d39f	01					.byte 	1     ; *** Load Float 0.0 ***
>d3a0	00 00 00 00				.dword 	$0
>d3a4	80 40					.byte 	$80,$40
>d3a6	3d					.byte 	$3d   ; *** Command = ***
>d3a7	01					.byte 	1     ; *** Load Float 7.578355 ***
>d3a8	58 e2 81 f2				.dword 	$f281e258
>d3ac	83 00					.byte 	$83,$0
>d3ae	01					.byte 	1     ; *** Load Float -11.0 ***
>d3af	00 00 00 b0				.dword 	$b0000000
>d3b3	84 80					.byte 	$84,$80
>d3b5	2f					.byte 	$2f   ; *** Command / ***
>d3b6	01					.byte 	1     ; *** Load Float -0.6889413636363636 ***
>d3b7	11 76 5e b0				.dword 	$b05e7611
>d3bb	80 80					.byte 	$80,$80
>d3bd	3d					.byte 	$3d   ; *** Command = ***
>d3be	01					.byte 	1     ; *** Load Float 0.0 ***
>d3bf	00 00 00 00				.dword 	$0
>d3c3	80 40					.byte 	$80,$40
>d3c5	01					.byte 	1     ; *** Load Float -0.319005 ***
>d3c6	94 9f 54 a3				.dword 	$a3549f94
>d3ca	7f 80					.byte 	$7f,$80
>d3cc	2f					.byte 	$2f   ; *** Command / ***
>d3cd	01					.byte 	1     ; *** Load Float -0.0 ***
>d3ce	00 00 00 00				.dword 	$0
>d3d2	80 40					.byte 	$80,$40
>d3d4	3d					.byte 	$3d   ; *** Command = ***
>d3d5	01					.byte 	1     ; *** Load Float 3.358564376831055e-07 ***
>d3d6	df c1 4f b4				.dword 	$b44fc1df
>d3da	6b 00					.byte 	$6b,$0
>d3dc	01					.byte 	1     ; *** Load Float 1.315127 ***
>d3dd	df 14 56 a8				.dword 	$a85614df
>d3e1	81 00					.byte 	$81,$0
>d3e3	2b					.byte 	$2b   ; *** Command + ***
>d3e4	01					.byte 	1     ; *** Load Float 1.3151273358564377 ***
>d3e5	b0 17 56 a8				.dword 	$a85617b0
>d3e9	81 00					.byte 	$81,$0
>d3eb	3d					.byte 	$3d   ; *** Command = ***
>d3ec	01					.byte 	1     ; *** Load Float -594.84 ***
>d3ed	8f c2 b5 94				.dword 	$94b5c28f
>d3f1	8a 80					.byte 	$8a,$80
>d3f3	01					.byte 	1     ; *** Load Float 7.557029 ***
>d3f4	7b 2e d3 f1				.dword 	$f1d32e7b
>d3f8	83 00					.byte 	$83,$0
>d3fa	2b					.byte 	$2b   ; *** Command + ***
>d3fb	01					.byte 	1     ; *** Load Float -587.2829710000001 ***
>d3fc	32 1c d2 92				.dword 	$92d21c32
>d400	8a 80					.byte 	$8a,$80
>d402	3d					.byte 	$3d   ; *** Command = ***
>d403	01					.byte 	1     ; *** Load Float -1018.626048 ***
>d404	2b 11 a8 fe				.dword 	$fea8112b
>d408	8a 80					.byte 	$8a,$80
>d40a	01					.byte 	1     ; *** Load Float 3.445944 ***
>d40b	b3 58 8a dc				.dword 	$dc8a58b3
>d40f	82 00					.byte 	$82,$0
>d411	7e					.byte 	$7e   ; *** Command ~ ***
>d412	01					.byte 	1     ; *** Load Float -1 ***
>d413	00 00 00 80				.dword 	$80000000
>d417	81 80					.byte 	$81,$80
>d419	3d					.byte 	$3d   ; *** Command = ***
>d41a	01					.byte 	1     ; *** Load Float -2540047782023.0044 ***
>d41b	54 a9 d9 93				.dword 	$93d9a954
>d41f	aa 80					.byte 	$aa,$80
>d421	01					.byte 	1     ; *** Load Float -5.4399795532226564e-06 ***
>d422	8c 11 89 b6				.dword 	$b689118c
>d426	6f 80					.byte 	$6f,$80
>d428	7e					.byte 	$7e   ; *** Command ~ ***
>d429	01					.byte 	1     ; *** Load Float -1 ***
>d42a	00 00 00 80				.dword 	$80000000
>d42e	81 80					.byte 	$81,$80
>d430	3d					.byte 	$3d   ; *** Command = ***
>d431	01					.byte 	1     ; *** Load Float -11.0 ***
>d432	00 00 00 b0				.dword 	$b0000000
>d436	84 80					.byte 	$84,$80
>d438	01					.byte 	1     ; *** Load Float 2.0 ***
>d439	00 00 00 80				.dword 	$80000000
>d43d	82 00					.byte 	$82,$0
>d43f	2a					.byte 	$2a   ; *** Command * ***
>d440	01					.byte 	1     ; *** Load Float -22.0 ***
>d441	00 00 00 b0				.dword 	$b0000000
>d445	85 80					.byte 	$85,$80
>d447	3d					.byte 	$3d   ; *** Command = ***
>d448	01					.byte 	1     ; *** Load Float 5.396897 ***
>d449	56 61 b3 ac				.dword 	$acb36156
>d44d	83 00					.byte 	$83,$0
>d44f	01					.byte 	1     ; *** Load Float 5.396897 ***
>d450	56 61 b3 ac				.dword 	$acb36156
>d454	83 00					.byte 	$83,$0
>d456	7e					.byte 	$7e   ; *** Command ~ ***
>d457	01					.byte 	1     ; *** Load Float 0 ***
>d458	00 00 00 00				.dword 	$0
>d45c	80 40					.byte 	$80,$40
>d45e	3d					.byte 	$3d   ; *** Command = ***
>d45f	01					.byte 	1     ; *** Load Float 8.468355 ***
>d460	cf 61 7e 87				.dword 	$877e61cf
>d464	84 00					.byte 	$84,$0
>d466	01					.byte 	1     ; *** Load Float 749.32 ***
>d467	e1 7a 54 bb				.dword 	$bb547ae1
>d46b	8a 00					.byte 	$8a,$0
>d46d	2d					.byte 	$2d   ; *** Command - ***
>d46e	01					.byte 	1     ; *** Load Float -740.8516450000001 ***
>d46f	5a 81 36 b9				.dword 	$b936815a
>d473	8a 80					.byte 	$8a,$80
>d475	3d					.byte 	$3d   ; *** Command = ***
>d476	01					.byte 	1     ; *** Load Float -388.9 ***
>d477	33 33 73 c2				.dword 	$c2733333
>d47b	89 80					.byte 	$89,$80
>d47d	01					.byte 	1     ; *** Load Float 502.39 ***
>d47e	85 eb 31 fb				.dword 	$fb31eb85
>d482	89 00					.byte 	$89,$0
>d484	7e					.byte 	$7e   ; *** Command ~ ***
>d485	01					.byte 	1     ; *** Load Float -1 ***
>d486	00 00 00 80				.dword 	$80000000
>d48a	81 80					.byte 	$81,$80
>d48c	3d					.byte 	$3d   ; *** Command = ***
>d48d	01					.byte 	1     ; *** Load Float 7.0 ***
>d48e	00 00 00 e0				.dword 	$e0000000
>d492	83 00					.byte 	$83,$0
>d494	01					.byte 	1     ; *** Load Float 849.52 ***
>d495	ae 47 61 d4				.dword 	$d46147ae
>d499	8a 00					.byte 	$8a,$0
>d49b	7e					.byte 	$7e   ; *** Command ~ ***
>d49c	01					.byte 	1     ; *** Load Float -1 ***
>d49d	00 00 00 80				.dword 	$80000000
>d4a1	81 80					.byte 	$81,$80
>d4a3	3d					.byte 	$3d   ; *** Command = ***
>d4a4	01					.byte 	1     ; *** Load Float 7.58671760559082e-09 ***
>d4a5	a5 bc 56 82				.dword 	$8256bca5
>d4a9	66 00					.byte 	$66,$0
>d4ab	01					.byte 	1     ; *** Load Float -730.52 ***
>d4ac	ae 47 a1 b6				.dword 	$b6a147ae
>d4b0	8a 80					.byte 	$8a,$80
>d4b2	2b					.byte 	$2b   ; *** Command + ***
>d4b3	01					.byte 	1     ; *** Load Float -730.5199999924133 ***
>d4b4	ae 47 a1 b6				.dword 	$b6a147ae
>d4b8	8a 80					.byte 	$8a,$80
>d4ba	3d					.byte 	$3d   ; *** Command = ***
>d4bb	01					.byte 	1     ; *** Load Float 4.388236 ***
>d4bc	e7 6d 6c 8c				.dword 	$8c6c6de7
>d4c0	83 00					.byte 	$83,$0
>d4c2	01					.byte 	1     ; *** Load Float 572.41 ***
>d4c3	70 3d 1a 8f				.dword 	$8f1a3d70
>d4c7	8a 00					.byte 	$8a,$0
>d4c9	2a					.byte 	$2a   ; *** Command * ***
>d4ca	01					.byte 	1     ; *** Load Float 2511.87016876 ***
>d4cb	36 ec fd 9c				.dword 	$9cfdec36
>d4cf	8c 00					.byte 	$8c,$0
>d4d1	3d					.byte 	$3d   ; *** Command = ***
>d4d2	01					.byte 	1     ; *** Load Float -3.108581836386293e-15 ***
>d4d3	ac 36 ff df				.dword 	$dfff36ac
>d4d7	50 80					.byte 	$50,$80
>d4d9	01					.byte 	1     ; *** Load Float -12.0 ***
>d4da	00 00 00 c0				.dword 	$c0000000
>d4de	84 80					.byte 	$84,$80
>d4e0	2b					.byte 	$2b   ; *** Command + ***
>d4e1	01					.byte 	1     ; *** Load Float -12.000000000000004 ***
>d4e2	00 00 00 c0				.dword 	$c0000000
>d4e6	84 80					.byte 	$84,$80
>d4e8	3d					.byte 	$3d   ; *** Command = ***
>d4e9	01					.byte 	1     ; *** Load Float 8.937047 ***
>d4ea	fe 24 fe 8e				.dword 	$8efe24fe
>d4ee	84 00					.byte 	$84,$0
>d4f0	01					.byte 	1     ; *** Load Float 5.437893 ***
>d4f1	2e 38 03 ae				.dword 	$ae03382e
>d4f5	83 00					.byte 	$83,$0
>d4f7	2f					.byte 	$2f   ; *** Command / ***
>d4f8	01					.byte 	1     ; *** Load Float 1.643476066925186 ***
>d4f9	7b 6c 5d d2				.dword 	$d25d6c7b
>d4fd	81 00					.byte 	$81,$0
>d4ff	3d					.byte 	$3d   ; *** Command = ***
>d500	01					.byte 	1     ; *** Load Float 100251253605174.1 ***
>d501	b8 20 5b b6				.dword 	$b65b20b8
>d505	af 00					.byte 	$af,$0
>d507	01					.byte 	1     ; *** Load Float -814.91 ***
>d508	70 3d ba cb				.dword 	$cbba3d70
>d50c	8a 80					.byte 	$8a,$80
>d50e	2d					.byte 	$2d   ; *** Command - ***
>d50f	01					.byte 	1     ; *** Load Float 100251253605989.0 ***
>d510	b8 20 5b b6				.dword 	$b65b20b8
>d514	af 00					.byte 	$af,$0
>d516	3d					.byte 	$3d   ; *** Command = ***
>d517	01					.byte 	1     ; *** Load Float 9.934698 ***
>d518	e3 85 f4 9e				.dword 	$9ef485e3
>d51c	84 00					.byte 	$84,$0
>d51e	01					.byte 	1     ; *** Load Float -670.482432 ***
>d51f	2a e0 9e a7				.dword 	$a79ee02a
>d523	8a 80					.byte 	$8a,$80
>d525	2d					.byte 	$2d   ; *** Command - ***
>d526	01					.byte 	1     ; *** Load Float 680.41713 ***
>d527	42 b2 1a aa				.dword 	$aa1ab242
>d52b	8a 00					.byte 	$8a,$0
>d52d	3d					.byte 	$3d   ; *** Command = ***
>d52e	01					.byte 	1     ; *** Load Float 8.473257651075982e-16 ***
>d52f	2c 9b 39 f4				.dword 	$f4399b2c
>d533	4e 00					.byte 	$4e,$0
>d535	01					.byte 	1     ; *** Load Float 9.622217 ***
>d536	d0 99 f4 99				.dword 	$99f499d0
>d53a	84 00					.byte 	$84,$0
>d53c	7e					.byte 	$7e   ; *** Command ~ ***
>d53d	01					.byte 	1     ; *** Load Float -1 ***
>d53e	00 00 00 80				.dword 	$80000000
>d542	81 80					.byte 	$81,$80
>d544	3d					.byte 	$3d   ; *** Command = ***
>d545	01					.byte 	1     ; *** Load Float 3608275.8451199997 ***
>d546	61 4f 3b dc				.dword 	$dc3b4f61
>d54a	96 00					.byte 	$96,$0
>d54c	01					.byte 	1     ; *** Load Float 866.49 ***
>d54d	28 5c 9f d8				.dword 	$d89f5c28
>d551	8a 00					.byte 	$8a,$0
>d553	2b					.byte 	$2b   ; *** Command + ***
>d554	01					.byte 	1     ; *** Load Float 3609142.33512 ***
>d555	57 d9 48 dc				.dword 	$dc48d957
>d559	96 00					.byte 	$96,$0
>d55b	3d					.byte 	$3d   ; *** Command = ***
>d55c	01					.byte 	1     ; *** Load Float -0.310914 ***
>d55d	ab 1e 30 9f				.dword 	$9f301eab
>d561	7f 80					.byte 	$7f,$80
>d563	01					.byte 	1     ; *** Load Float 6.075496 ***
>d564	96 76 6a c2				.dword 	$c26a7696
>d568	83 00					.byte 	$83,$0
>d56a	7e					.byte 	$7e   ; *** Command ~ ***
>d56b	01					.byte 	1     ; *** Load Float -1 ***
>d56c	00 00 00 80				.dword 	$80000000
>d570	81 80					.byte 	$81,$80
>d572	3d					.byte 	$3d   ; *** Command = ***
>d573	01					.byte 	1     ; *** Load Float -7.992042583282456e-15 ***
>d574	81 ca f8 8f				.dword 	$8ff8ca81
>d578	52 80					.byte 	$52,$80
>d57a	01					.byte 	1     ; *** Load Float 3.265779469074914e-14 ***
>d57b	b0 df 13 93				.dword 	$9313dfb0
>d57f	54 00					.byte 	$54,$0
>d581	2a					.byte 	$2a   ; *** Command * ***
>d582	01					.byte 	1     ; *** Load Float -2.610024858445628e-28 ***
>d583	19 13 6e a5				.dword 	$a56e1319
>d587	25 80					.byte 	$25,$80
>d589	3d					.byte 	$3d   ; *** Command = ***
>d58a	01					.byte 	1     ; *** Load Float 871.61 ***
>d58b	3d 0a e7 d9				.dword 	$d9e70a3d
>d58f	8a 00					.byte 	$8a,$0
>d591	01					.byte 	1     ; *** Load Float 933.43 ***
>d592	1e 85 5b e9				.dword 	$e95b851e
>d596	8a 00					.byte 	$8a,$0
>d598	2d					.byte 	$2d   ; *** Command - ***
>d599	01					.byte 	1     ; *** Load Float -61.819999999999936 ***
>d59a	14 ae 47 f7				.dword 	$f747ae14
>d59e	86 80					.byte 	$86,$80
>d5a0	3d					.byte 	$3d   ; *** Command = ***
>d5a1	01					.byte 	1     ; *** Load Float 2.459027 ***
>d5a2	c8 b2 60 9d				.dword 	$9d60b2c8
>d5a6	82 00					.byte 	$82,$0
>d5a8	01					.byte 	1     ; *** Load Float 12.0 ***
>d5a9	00 00 00 c0				.dword 	$c0000000
>d5ad	84 00					.byte 	$84,$0
>d5af	2a					.byte 	$2a   ; *** Command * ***
>d5b0	01					.byte 	1     ; *** Load Float 29.508323999999998 ***
>d5b1	2c 0c 11 ec				.dword 	$ec110c2c
>d5b5	85 00					.byte 	$85,$0
>d5b7	3d					.byte 	$3d   ; *** Command = ***
>d5b8	01					.byte 	1     ; *** Load Float 1.2384742498397828e-08 ***
>d5b9	6c ac c4 d4				.dword 	$d4c4ac6c
>d5bd	66 00					.byte 	$66,$0
>d5bf	01					.byte 	1     ; *** Load Float 15.0 ***
>d5c0	00 00 00 f0				.dword 	$f0000000
>d5c4	84 00					.byte 	$84,$0
>d5c6	2d					.byte 	$2d   ; *** Command - ***
>d5c7	01					.byte 	1     ; *** Load Float -14.999999987615258 ***
>d5c8	fc ff ff ef				.dword 	$effffffc
>d5cc	84 80					.byte 	$84,$80
>d5ce	3d					.byte 	$3d   ; *** Command = ***
>d5cf	01					.byte 	1     ; *** Load Float -445.74 ***
>d5d0	51 b8 de de				.dword 	$dedeb851
>d5d4	89 80					.byte 	$89,$80
>d5d6	01					.byte 	1     ; *** Load Float 1.75206650965265e-13 ***
>d5d7	00 e1 43 c5				.dword 	$c543e100
>d5db	56 00					.byte 	$56,$0
>d5dd	2a					.byte 	$2a   ; *** Command * ***
>d5de	01					.byte 	1     ; *** Load Float -7.809661260125722e-11 ***
>d5df	03 7c bc ab				.dword 	$abbc7c03
>d5e3	5f 80					.byte 	$5f,$80
>d5e5	3d					.byte 	$3d   ; *** Command = ***
>d5e6	01					.byte 	1     ; *** Load Float -1.7631828086450697e-12 ***
>d5e7	03 5b 25 f8				.dword 	$f8255b03
>d5eb	59 80					.byte 	$59,$80
>d5ed	01					.byte 	1     ; *** Load Float -0.652479 ***
>d5ee	1e dd 08 a7				.dword 	$a708dd1e
>d5f2	80 80					.byte 	$80,$80
>d5f4	2d					.byte 	$2d   ; *** Command - ***
>d5f5	01					.byte 	1     ; *** Load Float 0.6524789999982369 ***
>d5f6	1e dd 08 a7				.dword 	$a708dd1e
>d5fa	80 00					.byte 	$80,$0
>d5fc	3d					.byte 	$3d   ; *** Command = ***
>d5fd	01					.byte 	1     ; *** Load Float -20.0 ***
>d5fe	00 00 00 a0				.dword 	$a0000000
>d602	85 80					.byte 	$85,$80
>d604	01					.byte 	1     ; *** Load Float 179961.331712 ***
>d605	3a 55 be af				.dword 	$afbe553a
>d609	92 00					.byte 	$92,$0
>d60b	2f					.byte 	$2f   ; *** Command / ***
>d60c	01					.byte 	1     ; *** Load Float -0.00011113498555349031 ***
>d60d	1b 24 11 e9				.dword 	$e911241b
>d611	73 80					.byte 	$73,$80
>d613	3d					.byte 	$3d   ; *** Command = ***
>d614	01					.byte 	1     ; *** Load Float -9.0 ***
>d615	00 00 00 90				.dword 	$90000000
>d619	84 80					.byte 	$84,$80
>d61b	01					.byte 	1     ; *** Load Float -315.19 ***
>d61c	eb 51 98 9d				.dword 	$9d9851eb
>d620	89 80					.byte 	$89,$80
>d622	2f					.byte 	$2f   ; *** Command / ***
>d623	01					.byte 	1     ; *** Load Float 0.02855420539991751 ***
>d624	4b 82 ea e9				.dword 	$e9ea824b
>d628	7b 00					.byte 	$7b,$0
>d62a	3d					.byte 	$3d   ; *** Command = ***
>d62b	01					.byte 	1     ; *** Load Float 6.876585 ***
>d62c	fc fb 0c dc				.dword 	$dc0cfbfc
>d630	83 00					.byte 	$83,$0
>d632	01					.byte 	1     ; *** Load Float -8.572521619498731e-11 ***
>d633	a7 01 83 bc				.dword 	$bc8301a7
>d637	5f 80					.byte 	$5f,$80
>d639	2f					.byte 	$2f   ; *** Command / ***
>d63a	01					.byte 	1     ; *** Load Float -80216595597.24857 ***
>d63b	e4 40 6a 95				.dword 	$956a40e4
>d63f	a5 80					.byte 	$a5,$80
>d641	3d					.byte 	$3d   ; *** Command = ***
>d642	01					.byte 	1     ; *** Load Float 0.0 ***
>d643	00 00 00 00				.dword 	$0
>d647	80 40					.byte 	$80,$40
>d649	01					.byte 	1     ; *** Load Float -1.589632034301758e-08 ***
>d64a	cb 60 8c 88				.dword 	$888c60cb
>d64e	67 80					.byte 	$67,$80
>d650	2d					.byte 	$2d   ; *** Command - ***
>d651	01					.byte 	1     ; *** Load Float 1.589632034301758e-08 ***
>d652	cb 60 8c 88				.dword 	$888c60cb
>d656	67 00					.byte 	$67,$0
>d658	3d					.byte 	$3d   ; *** Command = ***
>d659	01					.byte 	1     ; *** Load Float -3.0 ***
>d65a	00 00 00 c0				.dword 	$c0000000
>d65e	82 80					.byte 	$82,$80
>d660	01					.byte 	1     ; *** Load Float 13.0 ***
>d661	00 00 00 d0				.dword 	$d0000000
>d665	84 00					.byte 	$84,$0
>d667	7e					.byte 	$7e   ; *** Command ~ ***
>d668	01					.byte 	1     ; *** Load Float -1 ***
>d669	00 00 00 80				.dword 	$80000000
>d66d	81 80					.byte 	$81,$80
>d66f	3d					.byte 	$3d   ; *** Command = ***
>d670	01					.byte 	1     ; *** Load Float -163.72 ***
>d671	eb 51 b8 a3				.dword 	$a3b851eb
>d675	88 80					.byte 	$88,$80
>d677	01					.byte 	1     ; *** Load Float 0.645728 ***
>d678	22 6e 4e a5				.dword 	$a54e6e22
>d67c	80 00					.byte 	$80,$0
>d67e	7e					.byte 	$7e   ; *** Command ~ ***
>d67f	01					.byte 	1     ; *** Load Float -1 ***
>d680	00 00 00 80				.dword 	$80000000
>d684	81 80					.byte 	$81,$80
>d686	3d					.byte 	$3d   ; *** Command = ***
>d687	01					.byte 	1     ; *** Load Float 30699050.500096 ***
>d688	40 15 37 ea				.dword 	$ea371540
>d68c	99 00					.byte 	$99,$0
>d68e	01					.byte 	1     ; *** Load Float -4371675411.90656 ***
>d68f	89 3c 49 82				.dword 	$82493c89
>d693	a1 80					.byte 	$a1,$80
>d695	7e					.byte 	$7e   ; *** Command ~ ***
>d696	01					.byte 	1     ; *** Load Float 1 ***
>d697	00 00 00 80				.dword 	$80000000
>d69b	81 00					.byte 	$81,$0
>d69d	3d					.byte 	$3d   ; *** Command = ***
>d69e	01					.byte 	1     ; *** Load Float -4.155794158577919e-12 ***
>d69f	e8 10 38 92				.dword 	$923810e8
>d6a3	5b 80					.byte 	$5b,$80
>d6a5	01					.byte 	1     ; *** Load Float 59.18 ***
>d6a6	eb 51 b8 ec				.dword 	$ecb851eb
>d6aa	86 00					.byte 	$86,$0
>d6ac	2d					.byte 	$2d   ; *** Command - ***
>d6ad	01					.byte 	1     ; *** Load Float -59.180000000004156 ***
>d6ae	eb 51 b8 ec				.dword 	$ecb851eb
>d6b2	86 80					.byte 	$86,$80
>d6b4	3d					.byte 	$3d   ; *** Command = ***
>d6b5	01					.byte 	1     ; *** Load Float -9069991676.608513 ***
>d6b6	bf 45 27 87				.dword 	$872745bf
>d6ba	a2 80					.byte 	$a2,$80
>d6bc	01					.byte 	1     ; *** Load Float 2.028369903564453e-07 ***
>d6bd	48 68 cb d9				.dword 	$d9cb6848
>d6c1	6a 00					.byte 	$6a,$0
>d6c3	2f					.byte 	$2f   ; *** Command / ***
>d6c4	01					.byte 	1     ; *** Load Float -4.4715668777523384e+16 ***
>d6c5	f1 a9 dc 9e				.dword 	$9edca9f1
>d6c9	b8 80					.byte 	$b8,$80
>d6cb	3d					.byte 	$3d   ; *** Command = ***
>d6cc	01					.byte 	1     ; *** Load Float 1.855831 ***
>d6cd	c5 de 8b ed				.dword 	$ed8bdec5
>d6d1	81 00					.byte 	$81,$0
>d6d3	01					.byte 	1     ; *** Load Float -9.0 ***
>d6d4	00 00 00 90				.dword 	$90000000
>d6d8	84 80					.byte 	$84,$80
>d6da	2f					.byte 	$2f   ; *** Command / ***
>d6db	01					.byte 	1     ; *** Load Float -0.20620344444444444 ***
>d6dc	e8 fe 26 d3				.dword 	$d326fee8
>d6e0	7e 80					.byte 	$7e,$80
>d6e2	3d					.byte 	$3d   ; *** Command = ***
>d6e3	01					.byte 	1     ; *** Load Float -576.86 ***
>d6e4	3d 0a 37 90				.dword 	$90370a3d
>d6e8	8a 80					.byte 	$8a,$80
>d6ea	01					.byte 	1     ; *** Load Float -936.06 ***
>d6eb	0a d7 03 ea				.dword 	$ea03d70a
>d6ef	8a 80					.byte 	$8a,$80
>d6f1	7e					.byte 	$7e   ; *** Command ~ ***
>d6f2	01					.byte 	1     ; *** Load Float 1 ***
>d6f3	00 00 00 80				.dword 	$80000000
>d6f7	81 00					.byte 	$81,$0
>d6f9	3d					.byte 	$3d   ; *** Command = ***
>d6fa	01					.byte 	1     ; *** Load Float -7.0 ***
>d6fb	00 00 00 e0				.dword 	$e0000000
>d6ff	83 80					.byte 	$83,$80
>d701	01					.byte 	1     ; *** Load Float -2.10252685546875e-05 ***
>d702	a0 6b 5f b0				.dword 	$b05f6ba0
>d706	71 80					.byte 	$71,$80
>d708	2d					.byte 	$2d   ; *** Command - ***
>d709	01					.byte 	1     ; *** Load Float -6.999978974731445 ***
>d70a	e8 d3 ff df				.dword 	$dfffd3e8
>d70e	83 80					.byte 	$83,$80
>d710	3d					.byte 	$3d   ; *** Command = ***
>d711	01					.byte 	1     ; *** Load Float 6.499952576177748e-15 ***
>d712	17 7b 2f ea				.dword 	$ea2f7b17
>d716	51 00					.byte 	$51,$0
>d718	01					.byte 	1     ; *** Load Float 397.82 ***
>d719	c2 f5 e8 c6				.dword 	$c6e8f5c2
>d71d	89 00					.byte 	$89,$0
>d71f	2f					.byte 	$2f   ; *** Command / ***
>d720	01					.byte 	1     ; *** Load Float 1.6338928601321573e-17 ***
>d721	53 34 b3 96				.dword 	$96b33453
>d725	49 00					.byte 	$49,$0
>d727	3d					.byte 	$3d   ; *** Command = ***
>d728	01					.byte 	1     ; *** Load Float -1569.685504 ***
>d729	a6 ef 35 c4				.dword 	$c435efa6
>d72d	8b 80					.byte 	$8b,$80
>d72f	01					.byte 	1     ; *** Load Float 0.0 ***
>d730	00 00 00 00				.dword 	$0
>d734	80 40					.byte 	$80,$40
>d736	2a					.byte 	$2a   ; *** Command * ***
>d737	01					.byte 	1     ; *** Load Float -0.0 ***
>d738	00 00 00 00				.dword 	$0
>d73c	80 40					.byte 	$80,$40
>d73e	3d					.byte 	$3d   ; *** Command = ***
>d73f	01					.byte 	1     ; *** Load Float 4.841531 ***
>d740	6b d2 ed 9a				.dword 	$9aedd26b
>d744	83 00					.byte 	$83,$0
>d746	01					.byte 	1     ; *** Load Float -359.76 ***
>d747	ae 47 e1 b3				.dword 	$b3e147ae
>d74b	89 80					.byte 	$89,$80
>d74d	2a					.byte 	$2a   ; *** Command * ***
>d74e	01					.byte 	1     ; *** Load Float -1741.78919256 ***
>d74f	10 41 b9 d9				.dword 	$d9b94110
>d753	8b 80					.byte 	$8b,$80
>d755	3d					.byte 	$3d   ; *** Command = ***
>d756	01					.byte 	1     ; *** Load Float 452.2 ***
>d757	99 99 19 e2				.dword 	$e2199999
>d75b	89 00					.byte 	$89,$0
>d75d	01					.byte 	1     ; *** Load Float 4463037956.227072 ***
>d75e	02 47 02 85				.dword 	$85024702
>d762	a1 00					.byte 	$a1,$0
>d764	2b					.byte 	$2b   ; *** Command + ***
>d765	01					.byte 	1     ; *** Load Float 4463038408.427072 ***
>d766	e4 47 02 85				.dword 	$850247e4
>d76a	a1 00					.byte 	$a1,$0
>d76c	3d					.byte 	$3d   ; *** Command = ***
>d76d	01					.byte 	1     ; *** Load Float 5.0 ***
>d76e	00 00 00 a0				.dword 	$a0000000
>d772	83 00					.byte 	$83,$0
>d774	01					.byte 	1     ; *** Load Float 7.00754299032269e-14 ***
>d775	2b bc cb 9d				.dword 	$9dcbbc2b
>d779	55 00					.byte 	$55,$0
>d77b	2f					.byte 	$2f   ; *** Command / ***
>d77c	01					.byte 	1     ; *** Load Float 71351684990087.45 ***
>d77d	ad b7 c9 81				.dword 	$81c9b7ad
>d781	af 00					.byte 	$af,$0
>d783	3d					.byte 	$3d   ; *** Command = ***
>d784	01					.byte 	1     ; *** Load Float -25200418.619392 ***
>d785	4f 91 43 c0				.dword 	$c043914f
>d789	99 80					.byte 	$99,$80
>d78b	01					.byte 	1     ; *** Load Float 5.0 ***
>d78c	00 00 00 a0				.dword 	$a0000000
>d790	83 00					.byte 	$83,$0
>d792	2b					.byte 	$2b   ; *** Command + ***
>d793	01					.byte 	1     ; *** Load Float -25200413.619392 ***
>d794	cf 8e 43 c0				.dword 	$c0438ecf
>d798	99 80					.byte 	$99,$80
>d79a	3d					.byte 	$3d   ; *** Command = ***
>d79b	01					.byte 	1     ; *** Load Float 2.813488 ***
>d79c	f8 2f 10 b4				.dword 	$b4102ff8
>d7a0	82 00					.byte 	$82,$0
>d7a2	01					.byte 	1     ; *** Load Float -12.0 ***
>d7a3	00 00 00 c0				.dword 	$c0000000
>d7a7	84 80					.byte 	$84,$80
>d7a9	2f					.byte 	$2f   ; *** Command / ***
>d7aa	01					.byte 	1     ; *** Load Float -0.23445733333333332 ***
>d7ab	4b 95 15 f0				.dword 	$f015954b
>d7af	7e 80					.byte 	$7e,$80
>d7b1	3d					.byte 	$3d   ; *** Command = ***
>d7b2	01					.byte 	1     ; *** Load Float 487787.06944 ***
>d7b3	38 62 2d ee				.dword 	$ee2d6238
>d7b7	93 00					.byte 	$93,$0
>d7b9	01					.byte 	1     ; *** Load Float 196.96 ***
>d7ba	8f c2 f5 c4				.dword 	$c4f5c28f
>d7be	88 00					.byte 	$88,$0
>d7c0	2a					.byte 	$2a   ; *** Command * ***
>d7c1	01					.byte 	1     ; *** Load Float 96074541.19690241 ***
>d7c2	a6 65 3f b7				.dword 	$b73f65a6
>d7c6	9b 00					.byte 	$9b,$0
>d7c8	3d					.byte 	$3d   ; *** Command = ***
>d7c9	01					.byte 	1     ; *** Load Float 15517.417472000001 ***
>d7ca	7d ab 75 f2				.dword 	$f275ab7d
>d7ce	8e 00					.byte 	$8e,$0
>d7d0	01					.byte 	1     ; *** Load Float -0.18704 ***
>d7d1	ec 69 87 bf				.dword 	$bf8769ec
>d7d5	7e 80					.byte 	$7e,$80
>d7d7	2f					.byte 	$2f   ; *** Command / ***
>d7d8	01					.byte 	1     ; *** Load Float -82963.09597946964 ***
>d7d9	49 8c 09 a2				.dword 	$a2098c49
>d7dd	91 80					.byte 	$91,$80
>d7df	3d					.byte 	$3d   ; *** Command = ***
>d7e0	01					.byte 	1     ; *** Load Float -426.96704 ***
>d7e1	f7 c7 7b d5				.dword 	$d57bc7f7
>d7e5	89 80					.byte 	$89,$80
>d7e7	01					.byte 	1     ; *** Load Float 1.347039 ***
>d7e8	21 c6 6b ac				.dword 	$ac6bc621
>d7ec	81 00					.byte 	$81,$0
>d7ee	7e					.byte 	$7e   ; *** Command ~ ***
>d7ef	01					.byte 	1     ; *** Load Float -1 ***
>d7f0	00 00 00 80				.dword 	$80000000
>d7f4	81 80					.byte 	$81,$80
>d7f6	3d					.byte 	$3d   ; *** Command = ***
>d7f7	01					.byte 	1     ; *** Load Float 1.805465 ***
>d7f8	24 7a 19 e7				.dword 	$e7197a24
>d7fc	81 00					.byte 	$81,$0
>d7fe	01					.byte 	1     ; *** Load Float 7.0 ***
>d7ff	00 00 00 e0				.dword 	$e0000000
>d803	83 00					.byte 	$83,$0
>d805	2a					.byte 	$2a   ; *** Command * ***
>d806	01					.byte 	1     ; *** Load Float 12.638255000000001 ***
>d807	df 4a 36 ca				.dword 	$ca364adf
>d80b	84 00					.byte 	$84,$0
>d80d	3d					.byte 	$3d   ; *** Command = ***
>d80e	01					.byte 	1     ; *** Load Float 0.131168 ***
>d80f	79 e7 50 86				.dword 	$8650e779
>d813	7e 00					.byte 	$7e,$0
>d815	01					.byte 	1     ; *** Load Float -64.17 ***
>d816	3d 0a 57 80				.dword 	$80570a3d
>d81a	87 80					.byte 	$87,$80
>d81c	2d					.byte 	$2d   ; *** Command - ***
>d81d	01					.byte 	1     ; *** Load Float 64.301168 ***
>d81e	b1 32 9a 80				.dword 	$809a32b1
>d822	87 00					.byte 	$87,$0
>d824	3d					.byte 	$3d   ; *** Command = ***
>d825	01					.byte 	1     ; *** Load Float 128390385092.26393 ***
>d826	6e 4e 25 ef				.dword 	$ef254e6e
>d82a	a5 00					.byte 	$a5,$0
>d82c	01					.byte 	1     ; *** Load Float -14.0 ***
>d82d	00 00 00 e0				.dword 	$e0000000
>d831	84 80					.byte 	$84,$80
>d833	2b					.byte 	$2b   ; *** Command + ***
>d834	01					.byte 	1     ; *** Load Float 128390385078.26393 ***
>d835	6d 4e 25 ef				.dword 	$ef254e6d
>d839	a5 00					.byte 	$a5,$0
>d83b	3d					.byte 	$3d   ; *** Command = ***
>d83c	01					.byte 	1     ; *** Load Float 0.08256 ***
>d83d	9f 37 15 a9				.dword 	$a915379f
>d841	7d 00					.byte 	$7d,$0
>d843	01					.byte 	1     ; *** Load Float 7.0 ***
>d844	00 00 00 e0				.dword 	$e0000000
>d848	83 00					.byte 	$83,$0
>d84a	2a					.byte 	$2a   ; *** Command * ***
>d84b	01					.byte 	1     ; *** Load Float 0.57792 ***
>d84c	ab 90 f2 93				.dword 	$93f290ab
>d850	80 00					.byte 	$80,$0
>d852	3d					.byte 	$3d   ; *** Command = ***
>d853	01					.byte 	1     ; *** Load Float -1.2063101166859269e-11 ***
>d854	bf 60 37 d4				.dword 	$d43760bf
>d858	5c 80					.byte 	$5c,$80
>d85a	01					.byte 	1     ; *** Load Float 919.42 ***
>d85b	47 e1 da e5				.dword 	$e5dae147
>d85f	8a 00					.byte 	$8a,$0
>d861	2f					.byte 	$2f   ; *** Command / ***
>d862	01					.byte 	1     ; *** Load Float -1.3120338003153368e-14 ***
>d863	1b e1 5a ec				.dword 	$ec5ae11b
>d867	52 80					.byte 	$52,$80
>d869	3d					.byte 	$3d   ; *** Command = ***
>d86a	01					.byte 	1     ; *** Load Float -7.0 ***
>d86b	00 00 00 e0				.dword 	$e0000000
>d86f	83 80					.byte 	$83,$80
>d871	01					.byte 	1     ; *** Load Float 314.87 ***
>d872	28 5c 6f 9d				.dword 	$9d6f5c28
>d876	89 00					.byte 	$89,$0
>d878	2d					.byte 	$2d   ; *** Command - ***
>d879	01					.byte 	1     ; *** Load Float -321.87 ***
>d87a	28 5c ef a0				.dword 	$a0ef5c28
>d87e	89 80					.byte 	$89,$80
>d880	3d					.byte 	$3d   ; *** Command = ***
>d881	01					.byte 	1     ; *** Load Float 4.424736 ***
>d882	f3 6f 97 8d				.dword 	$8d976ff3
>d886	83 00					.byte 	$83,$0
>d888	01					.byte 	1     ; *** Load Float -522.38 ***
>d889	eb 51 98 82				.dword 	$829851eb
>d88d	8a 80					.byte 	$8a,$80
>d88f	2a					.byte 	$2a   ; *** Command * ***
>d890	01					.byte 	1     ; *** Load Float -2311.39359168 ***
>d891	26 4c 76 90				.dword 	$90764c26
>d895	8c 80					.byte 	$8c,$80
>d897	3d					.byte 	$3d   ; *** Command = ***
>d898	01					.byte 	1     ; *** Load Float -1.6786623746156691e-10 ***
>d899	31 25 92 b8				.dword 	$b8922531
>d89d	60 80					.byte 	$60,$80
>d89f	01					.byte 	1     ; *** Load Float -15.0 ***
>d8a0	00 00 00 f0				.dword 	$f0000000
>d8a4	84 80					.byte 	$84,$80
>d8a6	2d					.byte 	$2d   ; *** Command - ***
>d8a7	01					.byte 	1     ; *** Load Float 14.999999999832134 ***
>d8a8	ff ff ff ef				.dword 	$efffffff
>d8ac	84 00					.byte 	$84,$0
>d8ae	3d					.byte 	$3d   ; *** Command = ***
>d8af	01					.byte 	1     ; *** Load Float 7.271196 ***
>d8b0	3b a3 ad e8				.dword 	$e8ada33b
>d8b4	83 00					.byte 	$83,$0
>d8b6	01					.byte 	1     ; *** Load Float -2.0 ***
>d8b7	00 00 00 80				.dword 	$80000000
>d8bb	82 80					.byte 	$82,$80
>d8bd	2b					.byte 	$2b   ; *** Command + ***
>d8be	01					.byte 	1     ; *** Load Float 5.271196 ***
>d8bf	3b a3 ad a8				.dword 	$a8ada33b
>d8c3	83 00					.byte 	$83,$0
>d8c5	3d					.byte 	$3d   ; *** Command = ***
>d8c6	01					.byte 	1     ; *** Load Float 6.323945 ***
>d8c7	e7 c1 5d ca				.dword 	$ca5dc1e7
>d8cb	83 00					.byte 	$83,$0
>d8cd	01					.byte 	1     ; *** Load Float -2.1672435104846957e-10 ***
>d8ce	4e 7b 4a ee				.dword 	$ee4a7b4e
>d8d2	60 80					.byte 	$60,$80
>d8d4	2f					.byte 	$2f   ; *** Command / ***
>d8d5	01					.byte 	1     ; *** Load Float -29179669794.400143 ***
>d8d6	a4 cd 67 d9				.dword 	$d967cda4
>d8da	a3 80					.byte 	$a3,$80
>d8dc	3d					.byte 	$3d   ; *** Command = ***
>d8dd	01					.byte 	1     ; *** Load Float 5.0 ***
>d8de	00 00 00 a0				.dword 	$a0000000
>d8e2	83 00					.byte 	$83,$0
>d8e4	01					.byte 	1     ; *** Load Float 3.0 ***
>d8e5	00 00 00 c0				.dword 	$c0000000
>d8e9	82 00					.byte 	$82,$0
>d8eb	7e					.byte 	$7e   ; *** Command ~ ***
>d8ec	01					.byte 	1     ; *** Load Float 1 ***
>d8ed	00 00 00 80				.dword 	$80000000
>d8f1	81 00					.byte 	$81,$0
>d8f3	3d					.byte 	$3d   ; *** Command = ***
>d8f4	01					.byte 	1     ; *** Load Float 2.931124 ***
>d8f5	1e 89 97 bb				.dword 	$bb97891e
>d8f9	82 00					.byte 	$82,$0
>d8fb	01					.byte 	1     ; *** Load Float 9.693102 ***
>d8fc	1f f2 16 9b				.dword 	$9b16f21f
>d900	84 00					.byte 	$84,$0
>d902	2b					.byte 	$2b   ; *** Command + ***
>d903	01					.byte 	1     ; *** Load Float 12.624226 ***
>d904	66 d4 fc c9				.dword 	$c9fcd466
>d908	84 00					.byte 	$84,$0
>d90a	3d					.byte 	$3d   ; *** Command = ***
>d90b	01					.byte 	1     ; *** Load Float 4.944625 ***
>d90c	35 5e 3a 9e				.dword 	$9e3a5e35
>d910	83 00					.byte 	$83,$0
>d912	01					.byte 	1     ; *** Load Float 2.203689575195313e-06 ***
>d913	3f 19 e3 93				.dword 	$93e3193f
>d917	6e 00					.byte 	$6e,$0
>d919	2b					.byte 	$2b   ; *** Command + ***
>d91a	01					.byte 	1     ; *** Load Float 4.944627203689575 ***
>d91b	d4 62 3a 9e				.dword 	$9e3a62d4
>d91f	83 00					.byte 	$83,$0
>d921	3d					.byte 	$3d   ; *** Command = ***
>d922	01					.byte 	1     ; *** Load Float 47426907.930624 ***
>d923	fb 56 eb b4				.dword 	$b4eb56fb
>d927	9a 00					.byte 	$9a,$0
>d929	01					.byte 	1     ; *** Load Float 8.680552 ***
>d92a	7e 8a e3 8a				.dword 	$8ae38a7e
>d92e	84 00					.byte 	$84,$0
>d930	2d					.byte 	$2d   ; *** Command - ***
>d931	01					.byte 	1     ; *** Load Float 47426899.250072 ***
>d932	d0 54 eb b4				.dword 	$b4eb54d0
>d936	9a 00					.byte 	$9a,$0
>d938	3d					.byte 	$3d   ; *** Command = ***
>d939	01					.byte 	1     ; *** Load Float 9.689509868621825e-09 ***
>d93a	42 ea 76 a6				.dword 	$a676ea42
>d93e	66 00					.byte 	$66,$0
>d940	01					.byte 	1     ; *** Load Float 9.689509868621825e-09 ***
>d941	42 ea 76 a6				.dword 	$a676ea42
>d945	66 00					.byte 	$66,$0
>d947	2d					.byte 	$2d   ; *** Command - ***
>d948	01					.byte 	1     ; *** Load Float 0.0 ***
>d949	00 00 00 00				.dword 	$0
>d94d	80 40					.byte 	$80,$40
>d94f	3d					.byte 	$3d   ; *** Command = ***
>d950	01					.byte 	1     ; *** Load Float 3.799675 ***
>d951	0d e0 2d f3				.dword 	$f32de00d
>d955	82 00					.byte 	$82,$0
>d957	01					.byte 	1     ; *** Load Float 1.0 ***
>d958	00 00 00 80				.dword 	$80000000
>d95c	81 00					.byte 	$81,$0
>d95e	7e					.byte 	$7e   ; *** Command ~ ***
>d95f	01					.byte 	1     ; *** Load Float 1 ***
>d960	00 00 00 80				.dword 	$80000000
>d964	81 00					.byte 	$81,$0
>d966	3d					.byte 	$3d   ; *** Command = ***
>d967	01					.byte 	1     ; *** Load Float 19.0 ***
>d968	00 00 00 98				.dword 	$98000000
>d96c	85 00					.byte 	$85,$0
>d96e	01					.byte 	1     ; *** Load Float 17.0 ***
>d96f	00 00 00 88				.dword 	$88000000
>d973	85 00					.byte 	$85,$0
>d975	7e					.byte 	$7e   ; *** Command ~ ***
>d976	01					.byte 	1     ; *** Load Float 1 ***
>d977	00 00 00 80				.dword 	$80000000
>d97b	81 00					.byte 	$81,$0
>d97d	3d					.byte 	$3d   ; *** Command = ***
>d97e	01					.byte 	1     ; *** Load Float 0.0 ***
>d97f	00 00 00 00				.dword 	$0
>d983	80 40					.byte 	$80,$40
>d985	01					.byte 	1     ; *** Load Float -27365332586.856445 ***
>d986	cd 3a e3 cb				.dword 	$cbe33acd
>d98a	a3 80					.byte 	$a3,$80
>d98c	2f					.byte 	$2f   ; *** Command / ***
>d98d	01					.byte 	1     ; *** Load Float -0.0 ***
>d98e	00 00 00 00				.dword 	$0
>d992	80 40					.byte 	$80,$40
>d994	3d					.byte 	$3d   ; *** Command = ***
>d995	01					.byte 	1     ; *** Load Float 5.334425 ***
>d996	0e 9c b3 aa				.dword 	$aab39c0e
>d99a	83 00					.byte 	$83,$0
>d99c	01					.byte 	1     ; *** Load Float 497.35 ***
>d99d	cc cc ac f8				.dword 	$f8accccc
>d9a1	89 00					.byte 	$89,$0
>d9a3	7e					.byte 	$7e   ; *** Command ~ ***
>d9a4	01					.byte 	1     ; *** Load Float -1 ***
>d9a5	00 00 00 80				.dword 	$80000000
>d9a9	81 80					.byte 	$81,$80
>d9ab	3d					.byte 	$3d   ; *** Command = ***
>d9ac	01					.byte 	1     ; *** Load Float 1.831494140625e-05 ***
>d9ad	84 09 a3 99				.dword 	$99a30984
>d9b1	71 00					.byte 	$71,$0
>d9b3	01					.byte 	1     ; *** Load Float 1.831494140625e-05 ***
>d9b4	84 09 a3 99				.dword 	$99a30984
>d9b8	71 00					.byte 	$71,$0
>d9ba	2f					.byte 	$2f   ; *** Command / ***
>d9bb	01					.byte 	1     ; *** Load Float 1.0 ***
>d9bc	00 00 00 80				.dword 	$80000000
>d9c0	81 00					.byte 	$81,$0
>d9c2	3d					.byte 	$3d   ; *** Command = ***
>d9c3	01					.byte 	1     ; *** Load Float 1.348882 ***
>d9c4	56 2a a8 ac				.dword 	$aca82a56
>d9c8	81 00					.byte 	$81,$0
>d9ca	01					.byte 	1     ; *** Load Float -643.07 ***
>d9cb	e1 7a c4 a0				.dword 	$a0c47ae1
>d9cf	8a 80					.byte 	$8a,$80
>d9d1	2a					.byte 	$2a   ; *** Command * ***
>d9d2	01					.byte 	1     ; *** Load Float -867.42554774 ***
>d9d3	2c 3c db d8				.dword 	$d8db3c2c
>d9d7	8a 80					.byte 	$8a,$80
>d9d9	3d					.byte 	$3d   ; *** Command = ***
>d9da	01					.byte 	1     ; *** Load Float 2584903.417856 ***
>d9db	ab 1d c5 9d				.dword 	$9dc51dab
>d9df	96 00					.byte 	$96,$0
>d9e1	01					.byte 	1     ; *** Load Float 59.08 ***
>d9e2	85 eb 51 ec				.dword 	$ec51eb85
>d9e6	86 00					.byte 	$86,$0
>d9e8	2b					.byte 	$2b   ; *** Command + ***
>d9e9	01					.byte 	1     ; *** Load Float 2584962.497856 ***
>d9ea	fd 09 c6 9d				.dword 	$9dc609fd
>d9ee	96 00					.byte 	$96,$0
>d9f0	3d					.byte 	$3d   ; *** Command = ***
>d9f1	01					.byte 	1     ; *** Load Float 531.11 ***
>d9f2	3d 0a c7 84				.dword 	$84c70a3d
>d9f6	8a 00					.byte 	$8a,$0
>d9f8	01					.byte 	1     ; *** Load Float 297.23 ***
>d9f9	a3 70 9d 94				.dword 	$949d70a3
>d9fd	89 00					.byte 	$89,$0
>d9ff	2b					.byte 	$2b   ; *** Command + ***
>da00	01					.byte 	1     ; *** Load Float 828.34 ***
>da01	8f c2 15 cf				.dword 	$cf15c28f
>da05	8a 00					.byte 	$8a,$0
>da07	3d					.byte 	$3d   ; *** Command = ***
>da08	01					.byte 	1     ; *** Load Float 7.919992 ***
>da09	10 93 70 fd				.dword 	$fd709310
>da0d	83 00					.byte 	$83,$0
>da0f	01					.byte 	1     ; *** Load Float 5.076916 ***
>da10	8b 18 76 a2				.dword 	$a276188b
>da14	83 00					.byte 	$83,$0
>da16	7e					.byte 	$7e   ; *** Command ~ ***
>da17	01					.byte 	1     ; *** Load Float 1 ***
>da18	00 00 00 80				.dword 	$80000000
>da1c	81 00					.byte 	$81,$0
>da1e	3d					.byte 	$3d   ; *** Command = ***
>da1f	01					.byte 	1     ; *** Load Float -5.979925394058228e-09 ***
>da20	e3 fa 77 cd				.dword 	$cd77fae3
>da24	65 80					.byte 	$65,$80
>da26	01					.byte 	1     ; *** Load Float 9.231224 ***
>da27	ef 17 b3 93				.dword 	$93b317ef
>da2b	84 00					.byte 	$84,$0
>da2d	2f					.byte 	$2f   ; *** Command / ***
>da2e	01					.byte 	1     ; *** Load Float -6.477933364046012e-10 ***
>da2f	50 67 10 b2				.dword 	$b2106750
>da33	62 80					.byte 	$62,$80
>da35	3d					.byte 	$3d   ; *** Command = ***
>da36	01					.byte 	1     ; *** Load Float 9.537793 ***
>da37	d5 cc 9a 98				.dword 	$989accd5
>da3b	84 00					.byte 	$84,$0
>da3d	01					.byte 	1     ; *** Load Float 7.839151 ***
>da3e	32 53 da fa				.dword 	$fada5332
>da42	83 00					.byte 	$83,$0
>da44	2a					.byte 	$2a   ; *** Command * ***
>da45	01					.byte 	1     ; *** Load Float 74.768199533743 ***
>da46	73 51 89 95				.dword 	$95895173
>da4a	87 00					.byte 	$87,$0
>da4c	3d					.byte 	$3d   ; *** Command = ***
>da4d	01					.byte 	1     ; *** Load Float -323.74 ***
>da4e	51 b8 de a1				.dword 	$a1deb851
>da52	89 80					.byte 	$89,$80
>da54	01					.byte 	1     ; *** Load Float 3.879097 ***
>da55	10 20 43 f8				.dword 	$f8432010
>da59	82 00					.byte 	$82,$0
>da5b	2d					.byte 	$2d   ; *** Command - ***
>da5c	01					.byte 	1     ; *** Load Float -327.619097 ***
>da5d	92 3e cf a3				.dword 	$a3cf3e92
>da61	89 80					.byte 	$89,$80
>da63	3d					.byte 	$3d   ; *** Command = ***
>da64	01					.byte 	1     ; *** Load Float 0.189248 ***
>da65	4b 3a ca c1				.dword 	$c1ca3a4b
>da69	7e 00					.byte 	$7e,$0
>da6b	01					.byte 	1     ; *** Load Float 3.326239013671875e-05 ***
>da6c	2e 38 83 8b				.dword 	$8b83382e
>da70	72 00					.byte 	$72,$0
>da72	7e					.byte 	$7e   ; *** Command ~ ***
>da73	01					.byte 	1     ; *** Load Float 1 ***
>da74	00 00 00 80				.dword 	$80000000
>da78	81 00					.byte 	$81,$0
>da7a	3d					.byte 	$3d   ; *** Command = ***
>da7b	01					.byte 	1     ; *** Load Float 13.0 ***
>da7c	00 00 00 d0				.dword 	$d0000000
>da80	84 00					.byte 	$84,$0
>da82	01					.byte 	1     ; *** Load Float -4.2332410812377934e-08 ***
>da83	58 fa d0 b5				.dword 	$b5d0fa58
>da87	68 80					.byte 	$68,$80
>da89	2a					.byte 	$2a   ; *** Command * ***
>da8a	01					.byte 	1     ; *** Load Float -5.503213405609131e-07 ***
>da8b	68 cb b9 93				.dword 	$93b9cb68
>da8f	6c 80					.byte 	$6c,$80
>da91	3d					.byte 	$3d   ; *** Command = ***
>da92	01					.byte 	1     ; *** Load Float -18.0 ***
>da93	00 00 00 90				.dword 	$90000000
>da97	85 80					.byte 	$85,$80
>da99	01					.byte 	1     ; *** Load Float 8.442153930664063e-07 ***
>da9a	41 0a 9e e2				.dword 	$e29e0a41
>da9e	6c 00					.byte 	$6c,$0
>daa0	2f					.byte 	$2f   ; *** Command / ***
>daa1	01					.byte 	1     ; *** Load Float -21321572.84483927 ***
>daa2	6c b2 ab a2				.dword 	$a2abb26c
>daa6	99 80					.byte 	$99,$80
>daa8	3d					.byte 	$3d   ; *** Command = ***
>daa9	01					.byte 	1     ; *** Load Float -69.53 ***
>daaa	28 5c 0f 8b				.dword 	$8b0f5c28
>daae	87 80					.byte 	$87,$80
>dab0	01					.byte 	1     ; *** Load Float 696.71 ***
>dab1	a3 70 2d ae				.dword 	$ae2d70a3
>dab5	8a 00					.byte 	$8a,$0
>dab7	2f					.byte 	$2f   ; *** Command / ***
>dab8	01					.byte 	1     ; *** Load Float -0.0997976202437169 ***
>dab9	d9 b1 62 cc				.dword 	$cc62b1d9
>dabd	7d 80					.byte 	$7d,$80
>dabf	3d					.byte 	$3d   ; *** Command = ***
>dac0	01					.byte 	1     ; *** Load Float 20.0 ***
>dac1	00 00 00 a0				.dword 	$a0000000
>dac5	85 00					.byte 	$85,$0
>dac7	01					.byte 	1     ; *** Load Float 3.1077957153320313e-06 ***
>dac8	1a 86 8f d0				.dword 	$d08f861a
>dacc	6e 00					.byte 	$6e,$0
>dace	2f					.byte 	$2f   ; *** Command / ***
>dacf	01					.byte 	1     ; *** Load Float 6435429.427144066 ***
>dad0	da ca 64 c4				.dword 	$c464cada
>dad4	97 00					.byte 	$97,$0
>dad6	3d					.byte 	$3d   ; *** Command = ***
>dad7	01					.byte 	1     ; *** Load Float -11.0 ***
>dad8	00 00 00 b0				.dword 	$b0000000
>dadc	84 80					.byte 	$84,$80
>dade	01					.byte 	1     ; *** Load Float -41.26 ***
>dadf	70 3d 0a a5				.dword 	$a50a3d70
>dae3	86 80					.byte 	$86,$80
>dae5	2a					.byte 	$2a   ; *** Command * ***
>dae6	01					.byte 	1     ; *** Load Float 453.85999999999996 ***
>dae7	7a 14 ee e2				.dword 	$e2ee147a
>daeb	89 00					.byte 	$89,$0
>daed	3d					.byte 	$3d   ; *** Command = ***
>daee	01					.byte 	1     ; *** Load Float 1.0988128451572265e-13 ***
>daef	78 3f 6e f7				.dword 	$f76e3f78
>daf3	55 00					.byte 	$55,$0
>daf5	01					.byte 	1     ; *** Load Float -264814261.69856 ***
>daf6	5b eb 8b fc				.dword 	$fc8beb5b
>dafa	9c 80					.byte 	$9c,$80
>dafc	2a					.byte 	$2a   ; *** Command * ***
>dafd	01					.byte 	1     ; *** Load Float -2.909813123352051e-05 ***
>dafe	d1 c2 17 f4				.dword 	$f417c2d1
>db02	71 80					.byte 	$71,$80
>db04	3d					.byte 	$3d   ; *** Command = ***
>db05	01					.byte 	1     ; *** Load Float -380385846476733.94 ***
>db06	a0 bd fa ac				.dword 	$acfabda0
>db0a	b1 80					.byte 	$b1,$80
>db0c	01					.byte 	1     ; *** Load Float -380385846476733.94 ***
>db0d	a0 bd fa ac				.dword 	$acfabda0
>db11	b1 80					.byte 	$b1,$80
>db13	7e					.byte 	$7e   ; *** Command ~ ***
>db14	01					.byte 	1     ; *** Load Float 0 ***
>db15	00 00 00 00				.dword 	$0
>db19	80 40					.byte 	$80,$40
>db1b	3d					.byte 	$3d   ; *** Command = ***
>db1c	01					.byte 	1     ; *** Load Float 2.635015 ***
>db1d	f4 15 a4 a8				.dword 	$a8a415f4
>db21	82 00					.byte 	$82,$0
>db23	01					.byte 	1     ; *** Load Float -3.436137922108174e-11 ***
>db24	42 79 1f 97				.dword 	$971f7942
>db28	5e 80					.byte 	$5e,$80
>db2a	2b					.byte 	$2b   ; *** Command + ***
>db2b	01					.byte 	1     ; *** Load Float 2.6350149999656387 ***
>db2c	f4 15 a4 a8				.dword 	$a8a415f4
>db30	82 00					.byte 	$82,$0
>db32	3d					.byte 	$3d   ; *** Command = ***
>db33	01					.byte 	1     ; *** Load Float 7.234542846679688e-06 ***
>db34	f6 3f c0 f2				.dword 	$f2c03ff6
>db38	6f 00					.byte 	$6f,$0
>db3a	01					.byte 	1     ; *** Load Float 683.0 ***
>db3b	00 00 c0 aa				.dword 	$aac00000
>db3f	8a 00					.byte 	$8a,$0
>db41	2f					.byte 	$2f   ; *** Command / ***
>db42	01					.byte 	1     ; *** Load Float 1.0592302850189879e-08 ***
>db43	ca 70 f9 b5				.dword 	$b5f970ca
>db47	66 00					.byte 	$66,$0
>db49	3d					.byte 	$3d   ; *** Command = ***
>db4a	01					.byte 	1     ; *** Load Float -646.58 ***
>db4b	b8 1e a5 a1				.dword 	$a1a51eb8
>db4f	8a 80					.byte 	$8a,$80
>db51	01					.byte 	1     ; *** Load Float 11.0 ***
>db52	00 00 00 b0				.dword 	$b0000000
>db56	84 00					.byte 	$84,$0
>db58	2d					.byte 	$2d   ; *** Command - ***
>db59	01					.byte 	1     ; *** Load Float -657.58 ***
>db5a	b8 1e 65 a4				.dword 	$a4651eb8
>db5e	8a 80					.byte 	$8a,$80
>db60	3d					.byte 	$3d   ; *** Command = ***
>db61	01					.byte 	1     ; *** Load Float 3.805871 ***
>db62	f5 63 93 f3				.dword 	$f39363f5
>db66	82 00					.byte 	$82,$0
>db68	01					.byte 	1     ; *** Load Float -988.02 ***
>db69	ae 47 01 f7				.dword 	$f70147ae
>db6d	8a 80					.byte 	$8a,$80
>db6f	7e					.byte 	$7e   ; *** Command ~ ***
>db70	01					.byte 	1     ; *** Load Float 1 ***
>db71	00 00 00 80				.dword 	$80000000
>db75	81 00					.byte 	$81,$0
>db77	3d					.byte 	$3d   ; *** Command = ***
>db78	01					.byte 	1     ; *** Load Float -6.60265504848212e-12 ***
>db79	fc 6d 4f e8				.dword 	$e84f6dfc
>db7d	5b 80					.byte 	$5b,$80
>db7f	01					.byte 	1     ; *** Load Float 6.984903 ***
>db80	4b 53 84 df				.dword 	$df84534b
>db84	83 00					.byte 	$83,$0
>db86	7e					.byte 	$7e   ; *** Command ~ ***
>db87	01					.byte 	1     ; *** Load Float -1 ***
>db88	00 00 00 80				.dword 	$80000000
>db8c	81 80					.byte 	$81,$80
>db8e	3d					.byte 	$3d   ; *** Command = ***
>db8f	01					.byte 	1     ; *** Load Float -65.5 ***
>db90	00 00 00 83				.dword 	$83000000
>db94	87 80					.byte 	$87,$80
>db96	01					.byte 	1     ; *** Load Float 1565916.135424 ***
>db97	15 e1 26 bf				.dword 	$bf26e115
>db9b	95 00					.byte 	$95,$0
>db9d	2a					.byte 	$2a   ; *** Command * ***
>db9e	01					.byte 	1     ; *** Load Float -102567506.870272 ***
>db9f	5b ca a1 c3				.dword 	$c3a1ca5b
>dba3	9b 80					.byte 	$9b,$80
>dba5	3d					.byte 	$3d   ; *** Command = ***
>dba6	01					.byte 	1     ; *** Load Float 5.875705 ***
>dba7	7d c6 05 bc				.dword 	$bc05c67d
>dbab	83 00					.byte 	$83,$0
>dbad	01					.byte 	1     ; *** Load Float 2.679386 ***
>dbae	6a 0f 7b ab				.dword 	$ab7b0f6a
>dbb2	82 00					.byte 	$82,$0
>dbb4	2d					.byte 	$2d   ; *** Command - ***
>dbb5	01					.byte 	1     ; *** Load Float 3.196319 ***
>dbb6	91 7d 90 cc				.dword 	$cc907d91
>dbba	82 00					.byte 	$82,$0
>dbbc	3d					.byte 	$3d   ; *** Command = ***
>dbbd	01					.byte 	1     ; *** Load Float 4.481417 ***
>dbbe	9f c4 67 8f				.dword 	$8f67c49f
>dbc2	83 00					.byte 	$83,$0
>dbc4	01					.byte 	1     ; *** Load Float -9.0 ***
>dbc5	00 00 00 90				.dword 	$90000000
>dbc9	84 80					.byte 	$84,$80
>dbcb	2a					.byte 	$2a   ; *** Command * ***
>dbcc	01					.byte 	1     ; *** Load Float -40.332753000000004 ***
>dbcd	33 bd 54 a1				.dword 	$a154bd33
>dbd1	86 80					.byte 	$86,$80
>dbd3	3d					.byte 	$3d   ; *** Command = ***
>dbd4	01					.byte 	1     ; *** Load Float 0.0 ***
>dbd5	00 00 00 00				.dword 	$0
>dbd9	80 40					.byte 	$80,$40
>dbdb	01					.byte 	1     ; *** Load Float 15.0 ***
>dbdc	00 00 00 f0				.dword 	$f0000000
>dbe0	84 00					.byte 	$84,$0
>dbe2	2d					.byte 	$2d   ; *** Command - ***
>dbe3	01					.byte 	1     ; *** Load Float -15.0 ***
>dbe4	00 00 00 f0				.dword 	$f0000000
>dbe8	84 80					.byte 	$84,$80
>dbea	3d					.byte 	$3d   ; *** Command = ***
>dbeb	01					.byte 	1     ; *** Load Float 212.64 ***
>dbec	0a d7 a3 d4				.dword 	$d4a3d70a
>dbf0	88 00					.byte 	$88,$0
>dbf2	01					.byte 	1     ; *** Load Float -0.1037 ***
>dbf3	64 aa 60 d4				.dword 	$d460aa64
>dbf7	7d 80					.byte 	$7d,$80
>dbf9	2a					.byte 	$2a   ; *** Command * ***
>dbfa	01					.byte 	1     ; *** Load Float -22.050767999999998 ***
>dbfb	0d f9 67 b0				.dword 	$b067f90d
>dbff	85 80					.byte 	$85,$80
>dc01	3d					.byte 	$3d   ; *** Command = ***
>dc02	01					.byte 	1     ; *** Load Float -6.0 ***
>dc03	00 00 00 c0				.dword 	$c0000000
>dc07	83 80					.byte 	$83,$80
>dc09	01					.byte 	1     ; *** Load Float 934.58 ***
>dc0a	b8 1e a5 e9				.dword 	$e9a51eb8
>dc0e	8a 00					.byte 	$8a,$0
>dc10	2b					.byte 	$2b   ; *** Command + ***
>dc11	01					.byte 	1     ; *** Load Float 928.58 ***
>dc12	b8 1e 25 e8				.dword 	$e8251eb8
>dc16	8a 00					.byte 	$8a,$0
>dc18	3d					.byte 	$3d   ; *** Command = ***
>dc19	01					.byte 	1     ; *** Load Float -5.865049362182617e-07 ***
>dc1a	f4 4f 70 9d				.dword 	$9d704ff4
>dc1e	6c 80					.byte 	$6c,$80
>dc20	01					.byte 	1     ; *** Load Float -389.19 ***
>dc21	eb 51 98 c2				.dword 	$c29851eb
>dc25	89 80					.byte 	$89,$80
>dc27	2d					.byte 	$2d   ; *** Command - ***
>dc28	01					.byte 	1     ; *** Load Float 389.18999941349506 ***
>dc29	e6 51 98 c2				.dword 	$c29851e6
>dc2d	89 00					.byte 	$89,$0
>dc2f	3d					.byte 	$3d   ; *** Command = ***
>dc30	01					.byte 	1     ; *** Load Float 18.0 ***
>dc31	00 00 00 90				.dword 	$90000000
>dc35	85 00					.byte 	$85,$0
>dc37	01					.byte 	1     ; *** Load Float 3.64865 ***
>dc38	4a 7b 83 e9				.dword 	$e9837b4a
>dc3c	82 00					.byte 	$82,$0
>dc3e	7e					.byte 	$7e   ; *** Command ~ ***
>dc3f	01					.byte 	1     ; *** Load Float 1 ***
>dc40	00 00 00 80				.dword 	$80000000
>dc44	81 00					.byte 	$81,$0
>dc46	3d					.byte 	$3d   ; *** Command = ***
>dc47	01					.byte 	1     ; *** Load Float -0.149404 ***
>dc48	b7 5c fd 98				.dword 	$98fd5cb7
>dc4c	7e 80					.byte 	$7e,$80
>dc4e	01					.byte 	1     ; *** Load Float 268.55 ***
>dc4f	66 66 46 86				.dword 	$86466666
>dc53	89 00					.byte 	$89,$0
>dc55	2a					.byte 	$2a   ; *** Command * ***
>dc56	01					.byte 	1     ; *** Load Float -40.122444200000004 ***
>dc57	03 62 7d a0				.dword 	$a07d6203
>dc5b	86 80					.byte 	$86,$80
>dc5d	3d					.byte 	$3d   ; *** Command = ***
>dc5e	01					.byte 	1     ; *** Load Float 264.01 ***
>dc5f	ae 47 01 84				.dword 	$840147ae
>dc63	89 00					.byte 	$89,$0
>dc65	01					.byte 	1     ; *** Load Float 6.0 ***
>dc66	00 00 00 c0				.dword 	$c0000000
>dc6a	83 00					.byte 	$83,$0
>dc6c	2d					.byte 	$2d   ; *** Command - ***
>dc6d	01					.byte 	1     ; *** Load Float 258.01 ***
>dc6e	ae 47 01 81				.dword 	$810147ae
>dc72	89 00					.byte 	$89,$0
>dc74	3d					.byte 	$3d   ; *** Command = ***
>dc75	01					.byte 	1     ; *** Load Float -0.560151 ***
>dc76	51 0e 66 8f				.dword 	$8f660e51
>dc7a	80 80					.byte 	$80,$80
>dc7c	01					.byte 	1     ; *** Load Float -681.98 ***
>dc7d	51 b8 7e aa				.dword 	$aa7eb851
>dc81	8a 80					.byte 	$8a,$80
>dc83	2f					.byte 	$2f   ; *** Command / ***
>dc84	01					.byte 	1     ; *** Load Float 0.0008213598639256282 ***
>dc85	03 87 50 d7				.dword 	$d7508703
>dc89	76 00					.byte 	$76,$0
>dc8b	3d					.byte 	$3d   ; *** Command = ***
>dc8c	01					.byte 	1     ; *** Load Float -11.0 ***
>dc8d	00 00 00 b0				.dword 	$b0000000
>dc91	84 80					.byte 	$84,$80
>dc93	01					.byte 	1     ; *** Load Float -19.8 ***
>dc94	66 66 66 9e				.dword 	$9e666666
>dc98	85 80					.byte 	$85,$80
>dc9a	2a					.byte 	$2a   ; *** Command * ***
>dc9b	01					.byte 	1     ; *** Load Float 217.8 ***
>dc9c	cc cc cc d9				.dword 	$d9cccccc
>dca0	88 00					.byte 	$88,$0
>dca2	3d					.byte 	$3d   ; *** Command = ***
>dca3	01					.byte 	1     ; *** Load Float 0.0 ***
>dca4	00 00 00 00				.dword 	$0
>dca8	80 40					.byte 	$80,$40
>dcaa	01					.byte 	1     ; *** Load Float -787.26 ***
>dcab	d7 a3 d0 c4				.dword 	$c4d0a3d7
>dcaf	8a 80					.byte 	$8a,$80
>dcb1	2d					.byte 	$2d   ; *** Command - ***
>dcb2	01					.byte 	1     ; *** Load Float 787.26 ***
>dcb3	d7 a3 d0 c4				.dword 	$c4d0a3d7
>dcb7	8a 00					.byte 	$8a,$0
>dcb9	3d					.byte 	$3d   ; *** Command = ***
>dcba	01					.byte 	1     ; *** Load Float -808.32 ***
>dcbb	e1 7a 14 ca				.dword 	$ca147ae1
>dcbf	8a 80					.byte 	$8a,$80
>dcc1	01					.byte 	1     ; *** Load Float 4.81889 ***
>dcc2	cd 58 34 9a				.dword 	$9a3458cd
>dcc6	83 00					.byte 	$83,$0
>dcc8	2f					.byte 	$2f   ; *** Command / ***
>dcc9	01					.byte 	1     ; *** Load Float -167.7398737053554 ***
>dcca	5c 68 bd a7				.dword 	$a7bd685c
>dcce	88 80					.byte 	$88,$80
>dcd0	3d					.byte 	$3d   ; *** Command = ***
>dcd1	01					.byte 	1     ; *** Load Float -836.59 ***
>dcd2	8f c2 25 d1				.dword 	$d125c28f
>dcd6	8a 80					.byte 	$8a,$80
>dcd8	01					.byte 	1     ; *** Load Float 193070591.115264 ***
>dcd9	f1 5f 20 b8				.dword 	$b8205ff1
>dcdd	9c 00					.byte 	$9c,$0
>dcdf	7e					.byte 	$7e   ; *** Command ~ ***
>dce0	01					.byte 	1     ; *** Load Float -1 ***
>dce1	00 00 00 80				.dword 	$80000000
>dce5	81 80					.byte 	$81,$80
>dce7	3d					.byte 	$3d   ; *** Command = ***
>dce8	01					.byte 	1     ; *** Load Float 5.665447 ***
>dce9	81 57 4b b5				.dword 	$b54b5781
>dced	83 00					.byte 	$83,$0
>dcef	01					.byte 	1     ; *** Load Float 421847.36767999997 ***
>dcf0	c4 eb fa cd				.dword 	$cdfaebc4
>dcf4	93 00					.byte 	$93,$0
>dcf6	2f					.byte 	$2f   ; *** Command / ***
>dcf7	01					.byte 	1     ; *** Load Float 1.343008735874732e-05 ***
>dcf8	36 c9 51 e1				.dword 	$e151c936
>dcfc	70 00					.byte 	$70,$0
>dcfe	3d					.byte 	$3d   ; *** Command = ***
>dcff	01					.byte 	1     ; *** Load Float -536.56 ***
>dd00	0a d7 23 86				.dword 	$8623d70a
>dd04	8a 80					.byte 	$8a,$80
>dd06	01					.byte 	1     ; *** Load Float -0.275535 ***
>dd07	6b ec 12 8d				.dword 	$8d12ec6b
>dd0b	7f 80					.byte 	$7f,$80
>dd0d	7e					.byte 	$7e   ; *** Command ~ ***
>dd0e	01					.byte 	1     ; *** Load Float -1 ***
>dd0f	00 00 00 80				.dword 	$80000000
>dd13	81 80					.byte 	$81,$80
>dd15	3d					.byte 	$3d   ; *** Command = ***
>dd16	01					.byte 	1     ; *** Load Float 8.744483 ***
>dd17	01 67 e9 8b				.dword 	$8be96701
>dd1b	84 00					.byte 	$84,$0
>dd1d	01					.byte 	1     ; *** Load Float -430.96 ***
>dd1e	47 e1 7a d7				.dword 	$d77ae147
>dd22	89 80					.byte 	$89,$80
>dd24	2a					.byte 	$2a   ; *** Command * ***
>dd25	01					.byte 	1     ; *** Load Float -3768.5223936800003 ***
>dd26	b9 5b 88 eb				.dword 	$eb885bb9
>dd2a	8c 80					.byte 	$8c,$80
>dd2c	3d					.byte 	$3d   ; *** Command = ***
>dd2d	01					.byte 	1	; *** Load Integer 99999 ***
>dd2e	9f 86 01 00				.dword 	$1869f
>dd32	00 01					.byte 	0,$01

;******  Return to file: modules/testing/fptest.asm

>dd34	00						.byte 	0

;******  Return to file: _include.asm


;******  Return to file: basic.asm

>dd35	02						.byte 	2
.fff8					DefaultInterrupt:
.fff8	40		rti				rti
>fffa	f8 ff						.word DefaultInterrupt
>fffc	e5 c1						.word 	StartROM
>fffe	f8 ff						.word DefaultInterrupt

;******  End of listing
