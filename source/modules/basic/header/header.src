firstKeywordMinus = $93
firstKeywordPlus = $8f
firstUnaryFunction = $98
lastUnaryFunction = $b4
;
;	Jump Vector Table
;
VectorTable:
	.word BinaryOp_And         & $FFFF ; $80 and
	.word BinaryOp_Or          & $FFFF ; $81 or
	.word BinaryOp_Xor         & $FFFF ; $82 xor
	.word BinaryOp_Eor         & $FFFF ; $83 eor
	.word Binary_Equal         & $FFFF ; $84 =
	.word Binary_NotEqual      & $FFFF ; $85 <>
	.word Binary_Less          & $FFFF ; $86 <
	.word Binary_LessEqual     & $FFFF ; $87 <=
	.word Binary_Greater       & $FFFF ; $88 >
	.word Binary_GreaterEqual  & $FFFF ; $89 >=
	.word BinaryOp_Add         & $FFFF ; $8a +
	.word BinaryOp_Subtract    & $FFFF ; $8b -
	.word BinaryOp_Multiply    & $FFFF ; $8c *
	.word BinaryOp_Divide      & $FFFF ; $8d /
	.word NotImplemented       & $FFFF ; $8e ^
	.word NotImplemented       & $FFFF ; $8f if
	.word NotImplemented       & $FFFF ; $90 while
	.word NotImplemented       & $FFFF ; $91 repeat
	.word NotImplemented       & $FFFF ; $92 for
	.word NotImplemented       & $FFFF ; $93 then
	.word NotImplemented       & $FFFF ; $94 endif
	.word NotImplemented       & $FFFF ; $95 wend
	.word NotImplemented       & $FFFF ; $96 until
	.word NotImplemented       & $FFFF ; $97 next
	.word NotImplemented       & $FFFF ; $98 not
	.word NotImplemented       & $FFFF ; $99 fn(
	.word Unary_Abs            & $FFFF ; $9a abs(
	.word Unary_Asc            & $FFFF ; $9b asc(
	.word Unary_Int            & $FFFF ; $9c int(
	.word Unary_Peek           & $FFFF ; $9d peek(
	.word Unary_Rnd            & $FFFF ; $9e rnd(
	.word Unary_Usr            & $FFFF ; $9f usr(
	.word Unary_Left           & $FFFF ; $a0 left$(
	.word Unary_Right          & $FFFF ; $a1 right$(
	.word Unary_Mid            & $FFFF ; $a2 mid$(
	.word Unary_Spc            & $FFFF ; $a3 spc(
	.word Unary_Str            & $FFFF ; $a4 str$(
	.word Unary_Val            & $FFFF ; $a5 val(
	.word Unary_Len            & $FFFF ; $a6 len(
	.word Unary_Hex            & $FFFF ; $a7 hex$(
	.word NotImplemented       & $FFFF ; $a8 sin(
	.word NotImplemented       & $FFFF ; $a9 cos(
	.word NotImplemented       & $FFFF ; $aa tan(
	.word NotImplemented       & $FFFF ; $ab atn(
	.word NotImplemented       & $FFFF ; $ac exp(
	.word NotImplemented       & $FFFF ; $ad log(
	.word NotImplemented       & $FFFF ; $ae sqr(
	.word Unary_Dec            & $FFFF ; $af dec(
	.word Unary_Deek           & $FFFF ; $b0 deek(
	.word Unary_Leek           & $FFFF ; $b1 leek(
	.word Unary_Mod            & $FFFF ; $b2 mod(
	.word Unary_Sgn            & $FFFF ; $b3 sgn(
	.word Unary_Chr            & $FFFF ; $b4 chr$(
	.word NotImplemented       & $FFFF ; $b5 $
	.word NotImplemented       & $FFFF ; $b6 $(
	.word NotImplemented       & $FFFF ; $b7 #
	.word NotImplemented       & $FFFF ; $b8 #(
	.word NotImplemented       & $FFFF ; $b9 %
	.word NotImplemented       & $FFFF ; $ba %(
	.word NotImplemented       & $FFFF ; $bb (
	.word NotImplemented       & $FFFF ; $bc )
	.word NotImplemented       & $FFFF ; $bd ,
	.word Command_COLON        & $FFFF ; $be :
	.word NotImplemented       & $FFFF ; $bf ;
	.word NotImplemented       & $FFFF ; $c0 def
	.word Command_CLR          & $FFFF ; $c1 clr
	.word Command_STOP         & $FFFF ; $c2 stop
	.word NotImplemented       & $FFFF ; $c3 data
	.word NotImplemented       & $FFFF ; $c4 read
	.word NotImplemented       & $FFFF ; $c5 dim
	.word NotImplemented       & $FFFF ; $c6 to
	.word NotImplemented       & $FFFF ; $c7 step
	.word NotImplemented       & $FFFF ; $c8 gosub
	.word NotImplemented       & $FFFF ; $c9 return
	.word NotImplemented       & $FFFF ; $ca goto
	.word Command_END          & $FFFF ; $cb end
	.word NotImplemented       & $FFFF ; $cc input
	.word Command_LET          & $FFFF ; $cd let
	.word NotImplemented       & $FFFF ; $ce list
	.word NotImplemented       & $FFFF ; $cf new
	.word NotImplemented       & $FFFF ; $d0 old
	.word NotImplemented       & $FFFF ; $d1 on
	.word NotImplemented       & $FFFF ; $d2 restore
	.word NotImplemented       & $FFFF ; $d3 poke
	.word Command_PRINT        & $FFFF ; $d4 print
	.word Command_RUN          & $FFFF ; $d5 run
	.word NotImplemented       & $FFFF ; $d6 wait
	.word NotImplemented       & $FFFF ; $d7 doke
	.word NotImplemented       & $FFFF ; $d8 loke
	.word Command_ASSERT       & $FFFF ; $d9 assert
NotImplemented:

	#fatal "Not implemented"

;
;	Binary Precedence Level Table
;
BinaryPrecedence:
	.byte 1    ; $80 and
	.byte 1    ; $81 or
	.byte 1    ; $82 xor
	.byte 1    ; $83 eor
	.byte 2    ; $84 =
	.byte 2    ; $85 <>
	.byte 2    ; $86 <
	.byte 2    ; $87 <=
	.byte 2    ; $88 >
	.byte 2    ; $89 >=
	.byte 3    ; $8a +
	.byte 3    ; $8b -
	.byte 4    ; $8c *
	.byte 4    ; $8d /
	.byte 5    ; $8e ^
;
;	Keyword Text
;
KeywordText:
	.byte $41,$4e,$c4                      ; $80 and
	.byte $4f,$d2                          ; $81 or
	.byte $58,$4f,$d2                      ; $82 xor
	.byte $45,$4f,$d2                      ; $83 eor
	.byte $bd                              ; $84 =
	.byte $3c,$be                          ; $85 <>
	.byte $bc                              ; $86 <
	.byte $3c,$bd                          ; $87 <=
	.byte $be                              ; $88 >
	.byte $3e,$bd                          ; $89 >=
	.byte $ab                              ; $8a +
	.byte $ad                              ; $8b -
	.byte $aa                              ; $8c *
	.byte $af                              ; $8d /
	.byte $de                              ; $8e ^
	.byte $49,$c6                          ; $8f if
	.byte $57,$48,$49,$4c,$c5              ; $90 while
	.byte $52,$45,$50,$45,$41,$d4          ; $91 repeat
	.byte $46,$4f,$d2                      ; $92 for
	.byte $54,$48,$45,$ce                  ; $93 then
	.byte $45,$4e,$44,$49,$c6              ; $94 endif
	.byte $57,$45,$4e,$c4                  ; $95 wend
	.byte $55,$4e,$54,$49,$cc              ; $96 until
	.byte $4e,$45,$58,$d4                  ; $97 next
	.byte $4e,$4f,$d4                      ; $98 not
	.byte $46,$4e,$a8                      ; $99 fn(
	.byte $41,$42,$53,$a8                  ; $9a abs(
	.byte $41,$53,$43,$a8                  ; $9b asc(
	.byte $49,$4e,$54,$a8                  ; $9c int(
	.byte $50,$45,$45,$4b,$a8              ; $9d peek(
	.byte $52,$4e,$44,$a8                  ; $9e rnd(
	.byte $55,$53,$52,$a8                  ; $9f usr(
	.byte $4c,$45,$46,$54,$24,$a8          ; $a0 left$(
	.byte $52,$49,$47,$48,$54,$24,$a8      ; $a1 right$(
	.byte $4d,$49,$44,$24,$a8              ; $a2 mid$(
	.byte $53,$50,$43,$a8                  ; $a3 spc(
	.byte $53,$54,$52,$24,$a8              ; $a4 str$(
	.byte $56,$41,$4c,$a8                  ; $a5 val(
	.byte $4c,$45,$4e,$a8                  ; $a6 len(
	.byte $48,$45,$58,$24,$a8              ; $a7 hex$(
	.byte $53,$49,$4e,$a8                  ; $a8 sin(
	.byte $43,$4f,$53,$a8                  ; $a9 cos(
	.byte $54,$41,$4e,$a8                  ; $aa tan(
	.byte $41,$54,$4e,$a8                  ; $ab atn(
	.byte $45,$58,$50,$a8                  ; $ac exp(
	.byte $4c,$4f,$47,$a8                  ; $ad log(
	.byte $53,$51,$52,$a8                  ; $ae sqr(
	.byte $44,$45,$43,$a8                  ; $af dec(
	.byte $44,$45,$45,$4b,$a8              ; $b0 deek(
	.byte $4c,$45,$45,$4b,$a8              ; $b1 leek(
	.byte $4d,$4f,$44,$a8                  ; $b2 mod(
	.byte $53,$47,$4e,$a8                  ; $b3 sgn(
	.byte $43,$48,$52,$24,$a8              ; $b4 chr$(
	.byte $a4                              ; $b5 $
	.byte $24,$a8                          ; $b6 $(
	.byte $a3                              ; $b7 #
	.byte $23,$a8                          ; $b8 #(
	.byte $a5                              ; $b9 %
	.byte $25,$a8                          ; $ba %(
	.byte $a8                              ; $bb (
	.byte $a9                              ; $bc )
	.byte $ac                              ; $bd ,
	.byte $ba                              ; $be :
	.byte $bb                              ; $bf ;
	.byte $44,$45,$c6                      ; $c0 def
	.byte $43,$4c,$d2                      ; $c1 clr
	.byte $53,$54,$4f,$d0                  ; $c2 stop
	.byte $44,$41,$54,$c1                  ; $c3 data
	.byte $52,$45,$41,$c4                  ; $c4 read
	.byte $44,$49,$cd                      ; $c5 dim
	.byte $54,$cf                          ; $c6 to
	.byte $53,$54,$45,$d0                  ; $c7 step
	.byte $47,$4f,$53,$55,$c2              ; $c8 gosub
	.byte $52,$45,$54,$55,$52,$ce          ; $c9 return
	.byte $47,$4f,$54,$cf                  ; $ca goto
	.byte $45,$4e,$c4                      ; $cb end
	.byte $49,$4e,$50,$55,$d4              ; $cc input
	.byte $4c,$45,$d4                      ; $cd let
	.byte $4c,$49,$53,$d4                  ; $ce list
	.byte $4e,$45,$d7                      ; $cf new
	.byte $4f,$4c,$c4                      ; $d0 old
	.byte $4f,$ce                          ; $d1 on
	.byte $52,$45,$53,$54,$4f,$52,$c5      ; $d2 restore
	.byte $50,$4f,$4b,$c5                  ; $d3 poke
	.byte $50,$52,$49,$4e,$d4              ; $d4 print
	.byte $52,$55,$ce                      ; $d5 run
	.byte $57,$41,$49,$d4                  ; $d6 wait
	.byte $44,$4f,$4b,$c5                  ; $d7 doke
	.byte $4c,$4f,$4b,$c5                  ; $d8 loke
	.byte $41,$53,$53,$45,$52,$d4          ; $d9 assert
	.byte $00
token_and = $80
token_or = $81
token_xor = $82
token_eor = $83
token_equal = $84
token_lessgreater = $85
token_less = $86
token_lessequal = $87
token_greater = $88
token_greaterequal = $89
token_plus = $8a
token_minus = $8b
token_star = $8c
token_slash = $8d
token_hat = $8e
token_if = $8f
token_while = $90
token_repeat = $91
token_for = $92
token_then = $93
token_endif = $94
token_wend = $95
token_until = $96
token_next = $97
token_not = $98
token_fn = $99
token_abs = $9a
token_asc = $9b
token_int = $9c
token_peek = $9d
token_rnd = $9e
token_usr = $9f
token_leftdollarlparen = $a0
token_rightdollarlparen = $a1
token_middollarlparen = $a2
token_spc = $a3
token_strdollarlparen = $a4
token_val = $a5
token_len = $a6
token_hexdollarlparen = $a7
token_sin = $a8
token_cos = $a9
token_tan = $aa
token_atn = $ab
token_exp = $ac
token_log = $ad
token_sqr = $ae
token_dec = $af
token_deek = $b0
token_leek = $b1
token_mod = $b2
token_sgn = $b3
token_chrdollarlparen = $b4
token_dollar = $b5
token_dollarlparen = $b6
token_hash = $b7
token_hashlparen = $b8
token_percent = $b9
token_percentlparen = $ba
token_lparen = $bb
token_rparen = $bc
token_comma = $bd
token_colon = $be
token_semicolon = $bf
token_def = $c0
token_clr = $c1
token_stop = $c2
token_data = $c3
token_read = $c4
token_dim = $c5
token_to = $c6
token_step = $c7
token_gosub = $c8
token_return = $c9
token_goto = $ca
token_end = $cb
token_input = $cc
token_let = $cd
token_list = $ce
token_new = $cf
token_old = $d0
token_on = $d1
token_restore = $d2
token_poke = $d3
token_print = $d4
token_run = $d5
token_wait = $d6
token_doke = $d7
token_loke = $d8
token_assert = $d9
